
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae38  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b044  0800b044  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b044  0800b044  0001b044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b04c  0800b04c  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800b054  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200002f0  0800b340  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  0800b340  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017801  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca5  00000000  00000000  00037b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a37  00000000  00000000  0003cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188a6  00000000  00000000  0005566f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094faf  00000000  00000000  0006df15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  00102f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f0 	.word	0x200002f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800afb8 	.word	0x0800afb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002f4 	.word	0x200002f4
 80001d4:	0800afb8 	.word	0x0800afb8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <read_pos>:
	SENSOR_CHECK,
} State;

extern int homing;

void read_pos() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <read_pos+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <read_pos+0x40>)
 8000ea2:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <read_pos+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fae7 	bl	800047c <__aeabi_i2d>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <read_pos+0x44>)
 8000eb4:	f7ff fb4c 	bl	8000550 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fe16 	bl	8000af0 <__aeabi_d2f>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <read_pos+0x48>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200004f8 	.word	0x200004f8
 8000ed4:	20000fd4 	.word	0x20000fd4
 8000ed8:	3f8e0000 	.word	0x3f8e0000
 8000edc:	20000fd8 	.word	0x20000fd8

08000ee0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d10a      	bne.n	8000f08 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <motor+0x4c>)
 8000efa:	f004 fed5 	bl	8005ca8 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <motor+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	}
}
 8000f06:	e00c      	b.n	8000f22 <motor+0x42>
	} else if (DIR == 1) {
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d109      	bne.n	8000f22 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <motor+0x4c>)
 8000f16:	f004 fec7 	bl	8005ca8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <motor+0x50>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	20000444 	.word	0x20000444

08000f34 <Init_Homing>:

void Init_Homing() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	483f      	ldr	r0, [pc, #252]	; (800103c <Init_Homing+0x108>)
 8000f3e:	f004 feb3 	bl	8005ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	483d      	ldr	r0, [pc, #244]	; (800103c <Init_Homing+0x108>)
 8000f48:	f004 feae 	bl	8005ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2120      	movs	r1, #32
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <Init_Homing+0x108>)
 8000f52:	f004 fea9 	bl	8005ca8 <HAL_GPIO_WritePin>
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <Init_Homing+0x10c>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <Init_Homing+0x30>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d01b      	beq.n	8000f9a <Init_Homing+0x66>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f62:	e068      	b.n	8001036 <Init_Homing+0x102>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	4836      	ldr	r0, [pc, #216]	; (8001044 <Init_Homing+0x110>)
 8000f6a:	f004 fe85 	bl	8005c78 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <Init_Homing+0x58>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <Init_Homing+0x114>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ffae 	bl	8000ee0 <motor>
			state_homing = 1;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <Init_Homing+0x10c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	801a      	strh	r2, [r3, #0]
		break;
 8000f8a:	e054      	b.n	8001036 <Init_Homing+0x102>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f94:	f7ff ffa4 	bl	8000ee0 <motor>
		break;
 8000f98:	e04d      	b.n	8001036 <Init_Homing+0x102>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <Init_Homing+0x118>)
 8000f9e:	f004 fe6b 	bl	8005c78 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d140      	bne.n	800102a <Init_Homing+0xf6>
			motor(0, 1);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff98 	bl	8000ee0 <motor>
			HAL_Delay(400);
 8000fb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fb4:	f003 ff98 	bl	8004ee8 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <Init_Homing+0x114>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <Init_Homing+0x114>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <Init_Homing+0x11c>)
 8000fca:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <Init_Homing+0x11c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa53 	bl	800047c <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <Init_Homing+0x120>)
 8000fdc:	f7ff fab8 	bl	8000550 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd82 	bl	8000af0 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <Init_Homing+0x124>)
 8000ff0:	6013      	str	r3, [r2, #0]
			y_axis_Moving_Status= 0;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <Init_Homing+0x128>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	841a      	strh	r2, [r3, #32]
			state_homing = 0;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <Init_Homing+0x10c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000ffe:	2006      	movs	r0, #6
 8001000:	f000 fbf8 	bl	80017f4 <EndEffector_Event>
			HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <Init_Homing+0x108>)
 800100a:	f004 fe4d 	bl	8005ca8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <Init_Homing+0x108>)
 8001014:	f004 fe48 	bl	8005ca8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001018:	2200      	movs	r2, #0
 800101a:	2120      	movs	r1, #32
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <Init_Homing+0x108>)
 800101e:	f004 fe43 	bl	8005ca8 <HAL_GPIO_WritePin>
			State = IDLE;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <Init_Homing+0x12c>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
		break;
 8001028:	e004      	b.n	8001034 <Init_Homing+0x100>
			motor(Max_Counter_PWM * 0.18, 1);
 800102a:	2101      	movs	r1, #1
 800102c:	f642 6014 	movw	r0, #11796	; 0x2e14
 8001030:	f7ff ff56 	bl	8000ee0 <motor>
		break;
 8001034:	bf00      	nop
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020000 	.word	0x40020000
 8001040:	2000030c 	.word	0x2000030c
 8001044:	40020400 	.word	0x40020400
 8001048:	200004f8 	.word	0x200004f8
 800104c:	40020800 	.word	0x40020800
 8001050:	20000fd4 	.word	0x20000fd4
 8001054:	3f8e0000 	.word	0x3f8e0000
 8001058:	20000fd8 	.word	0x20000fd8
 800105c:	20000e30 	.word	0x20000e30
 8001060:	20000268 	.word	0x20000268

08001064 <Joy_Homing>:

void Joy_Homing() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <Joy_Homing+0xb8>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <Joy_Homing+0x12>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d017      	beq.n	80010a4 <Joy_Homing+0x40>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8001074:	e04f      	b.n	8001116 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	4829      	ldr	r0, [pc, #164]	; (8001120 <Joy_Homing+0xbc>)
 800107c:	f004 fdfc 	bl	8005c78 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <Joy_Homing+0x32>
			motor(0, 1);
 8001086:	2101      	movs	r1, #1
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff29 	bl	8000ee0 <motor>
			state_homing = 1;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <Joy_Homing+0xb8>)
 8001090:	2201      	movs	r2, #1
 8001092:	801a      	strh	r2, [r3, #0]
		break;
 8001094:	e03f      	b.n	8001116 <Joy_Homing+0xb2>
			motor(Max_Counter_PWM * 0.25, -1);
 8001096:	f04f 31ff 	mov.w	r1, #4294967295
 800109a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800109e:	f7ff ff1f 	bl	8000ee0 <motor>
		break;
 80010a2:	e038      	b.n	8001116 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	481f      	ldr	r0, [pc, #124]	; (8001124 <Joy_Homing+0xc0>)
 80010a8:	f004 fde6 	bl	8005c78 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d12b      	bne.n	800110a <Joy_Homing+0xa6>
			motor(0, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff13 	bl	8000ee0 <motor>
			HAL_Delay(400);
 80010ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010be:	f003 ff13 	bl	8004ee8 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <Joy_Homing+0xc4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <Joy_Homing+0xc4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <Joy_Homing+0xc8>)
 80010d4:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <Joy_Homing+0xc8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9ce 	bl	800047c <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <Joy_Homing+0xcc>)
 80010e6:	f7ff fa33 	bl	8000550 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fcfd 	bl	8000af0 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <Joy_Homing+0xd0>)
 80010fa:	6013      	str	r3, [r2, #0]
			homing = 0;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <Joy_Homing+0xd4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			state_homing = 0;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <Joy_Homing+0xb8>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
		break;
 8001108:	e004      	b.n	8001114 <Joy_Homing+0xb0>
			motor(Max_Counter_PWM * 0.18, 1);
 800110a:	2101      	movs	r1, #1
 800110c:	f642 6014 	movw	r0, #11796	; 0x2e14
 8001110:	f7ff fee6 	bl	8000ee0 <motor>
		break;
 8001114:	bf00      	nop
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000030e 	.word	0x2000030e
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	200004f8 	.word	0x200004f8
 800112c:	20000fd4 	.word	0x20000fd4
 8001130:	3f8e0000 	.word	0x3f8e0000
 8001134:	20000fd8 	.word	0x20000fd8
 8001138:	20000390 	.word	0x20000390

0800113c <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <modbus_1t5_Timeout+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	751a      	strb	r2, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000310 	.word	0x20000310

0800115c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <modbus_3t5_Timeout+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	755a      	strb	r2, [r3, #21]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000310 	.word	0x20000310

0800117c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <modbus_UART_Recived+0x60>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <modbus_UART_Recived+0x60>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	b289      	uxth	r1, r1
 800119a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800119e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011a2:	d210      	bcs.n	80011c6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <modbus_UART_Recived+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68d8      	ldr	r0, [r3, #12]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <modbus_UART_Recived+0x60>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <modbus_UART_Recived+0x60>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011b6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80011ba:	4413      	add	r3, r2
 80011bc:	3302      	adds	r3, #2
 80011be:	2201      	movs	r2, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	f008 fb21 	bl	8009808 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <modbus_UART_Recived+0x60>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000310 	.word	0x20000310

080011e0 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <Modbus_init+0x9c>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <Modbus_init+0x9c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <Modbus_init+0x9c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <Modbus_init+0xa0>)
 8001200:	2114      	movs	r1, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f007 fcb2 	bl	8008b6c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <Modbus_init+0x9c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <Modbus_init+0xa4>)
 8001210:	210e      	movs	r1, #14
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fcaa 	bl	8008b6c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <Modbus_init+0x9c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <Modbus_init+0xa8>)
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fa48 	bl	80096b8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <Modbus_init+0x9c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68d8      	ldr	r0, [r3, #12]
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <Modbus_init+0x9c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <Modbus_init+0x9c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800123e:	4413      	add	r3, r2
 8001240:	3302      	adds	r3, #2
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	f008 fadf 	bl	8009808 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <Modbus_init+0x9c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10c      	bne.n	8001274 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <Modbus_init+0x9c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fd2d 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <Modbus_init+0x9c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f006 ff6c 	bl	800814c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000310 	.word	0x20000310
 8001280:	0800113d 	.word	0x0800113d
 8001284:	0800115d 	.word	0x0800115d
 8001288:	0800117d 	.word	0x0800117d

0800128c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001298:	23ff      	movs	r3, #255	; 0xff
 800129a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800129c:	23ff      	movs	r3, #255	; 0xff
 800129e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80012a0:	e013      	b.n	80012ca <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	4053      	eors	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <CRC16+0x64>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4053      	eors	r3, r2
 80012be:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <CRC16+0x68>)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80012ca:	883b      	ldrh	r3, [r7, #0]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	803a      	strh	r2, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e6      	bne.n	80012a2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	b29b      	uxth	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000100 	.word	0x20000100
 80012f4:	20000000 	.word	0x20000000

080012f8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	switch(hModbus->Mstatus)
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7e1b      	ldrb	r3, [r3, #24]
 8001304:	3b01      	subs	r3, #1
 8001306:	2b03      	cmp	r3, #3
 8001308:	d80a      	bhi.n	8001320 <Modbus_Protocal_Worker+0x28>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <Modbus_Protocal_Worker+0x18>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800132b 	.word	0x0800132b
 8001314:	080014cb 	.word	0x080014cb
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013dd 	.word	0x080013dd
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001320:	4b78      	ldr	r3, [pc, #480]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	761a      	strb	r2, [r3, #24]
		break;
 8001328:	e0e8      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001336:	f000 f9dd 	bl	80016f4 <Modbus_Emission>
 800133a:	e01c      	b.n	8001376 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800133c:	4b71      	ldr	r3, [pc, #452]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	7d9b      	ldrb	r3, [r3, #22]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d017      	beq.n	8001376 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2203      	movs	r2, #3
 8001374:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	f040 80b3 	bne.w	80014ee <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001388:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68d8      	ldr	r0, [r3, #12]
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013a4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80013a8:	4413      	add	r3, r2
 80013aa:	3302      	adds	r3, #2
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f008 fa2a 	bl	8009808 <HAL_UART_Receive_IT>

		}
		break;
 80013b4:	e09b      	b.n	80014ee <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8098 	beq.w	80014f2 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80013c2:	4b50      	ldr	r3, [pc, #320]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80013ca:	4b4e      	ldr	r3, [pc, #312]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	22fe      	movs	r2, #254	; 0xfe
 80013d0:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2204      	movs	r2, #4
 80013d8:	761a      	strb	r2, [r3, #24]
		}
		break;
 80013da:	e08a      	b.n	80014f2 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80013dc:	4b49      	ldr	r3, [pc, #292]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7d9b      	ldrb	r3, [r3, #22]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013fa:	4b42      	ldr	r3, [pc, #264]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001402:	f113 0f02 	cmn.w	r3, #2
 8001406:	d150      	bne.n	80014aa <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001420:	3b02      	subs	r3, #2
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff ff31 	bl	800128c <CRC16>
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800142e:	793a      	ldrb	r2, [r7, #4]
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800143c:	3b02      	subs	r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001444:	429a      	cmp	r2, r3
 8001446:	d10c      	bne.n	8001462 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001448:	797a      	ldrb	r2, [r7, #5]
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001456:	3b01      	subs	r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800145e:	429a      	cmp	r2, r3
 8001460:	d004      	beq.n	800146c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	75da      	strb	r2, [r3, #23]
				break;
 800146a:	e047      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d113      	bne.n	80014a6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800148e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001498:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800149a:	461a      	mov	r2, r3
 800149c:	f009 fb76 	bl	800ab8c <memcpy>

			//execute command
			Modbus_frame_response();
 80014a0:	f000 f910 	bl	80016c4 <Modbus_frame_response>
 80014a4:	e001      	b.n	80014aa <Modbus_Protocal_Worker+0x1b2>
				break;
 80014a6:	bf00      	nop
					}
		break;


	}
}
 80014a8:	e028      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	7d5b      	ldrb	r3, [r3, #21]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fa4e 	bl	8009964 <HAL_UART_AbortReceive>
		break;
 80014c8:	e015      	b.n	80014f6 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d10f      	bne.n	80014fa <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	761a      	strb	r2, [r3, #24]
		break;
 80014ec:	e005      	b.n	80014fa <Modbus_Protocal_Worker+0x202>
		break;
 80014ee:	bf00      	nop
 80014f0:	e004      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014f2:	bf00      	nop
 80014f4:	e002      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014fa:	bf00      	nop
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000310 	.word	0x20000310

08001508 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <modbusWrite1Register+0x80>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	7e9b      	ldrb	r3, [r3, #26]
 8001514:	b29b      	uxth	r3, r3
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <modbusWrite1Register+0x80>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	7edb      	ldrb	r3, [r3, #27]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <modbusWrite1Register+0x80>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	d903      	bls.n	800153a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001532:	2002      	movs	r0, #2
 8001534:	f000 f8a4 	bl	8001680 <ModbusErrorReply>
			 return;
 8001538:	e023      	b.n	8001582 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <modbusWrite1Register+0x80>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <modbusWrite1Register+0x80>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	440b      	add	r3, r1
 800154a:	7f12      	ldrb	r2, [r2, #28]
 800154c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <modbusWrite1Register+0x80>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <modbusWrite1Register+0x80>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	7f52      	ldrb	r2, [r2, #29]
 8001560:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <modbusWrite1Register+0x80>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <modbusWrite1Register+0x80>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001570:	2208      	movs	r2, #8
 8001572:	4619      	mov	r1, r3
 8001574:	f009 fb0a 	bl	800ab8c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <modbusWrite1Register+0x80>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000310 	.word	0x20000310

0800158c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <modbusRead1Register+0xf0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	7f1b      	ldrb	r3, [r3, #28]
 8001598:	b29b      	uxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <modbusRead1Register+0xf0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	7f5b      	ldrb	r3, [r3, #29]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <modbusRead1Register+0xf0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	7e9b      	ldrb	r3, [r3, #26]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <modbusRead1Register+0xf0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	7edb      	ldrb	r3, [r3, #27]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <modbusRead1Register+0x42>
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2b7d      	cmp	r3, #125	; 0x7d
 80015cc:	d903      	bls.n	80015d6 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f856 	bl	8001680 <ModbusErrorReply>
		 return;
 80015d4:	e04e      	b.n	8001674 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <modbusRead1Register+0xf0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d808      	bhi.n	80015f4 <modbusRead1Register+0x68>
 80015e2:	88ba      	ldrh	r2, [r7, #4]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4413      	add	r3, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <modbusRead1Register+0xf0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d903      	bls.n	80015fc <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f000 f843 	bl	8001680 <ModbusErrorReply>
		 return;
 80015fa:	e03b      	b.n	8001674 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <modbusRead1Register+0xf0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2203      	movs	r2, #3
 8001602:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <modbusRead1Register+0xf0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001616:	2400      	movs	r4, #0
 8001618:	e020      	b.n	800165c <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <modbusRead1Register+0xf0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	4423      	add	r3, r4
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	18d1      	adds	r1, r2, r3
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <modbusRead1Register+0xf0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	1c63      	adds	r3, r4, #1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	7849      	ldrb	r1, [r1, #1]
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <modbusRead1Register+0xf0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	88bb      	ldrh	r3, [r7, #4]
 8001642:	4423      	add	r3, r4
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	18d1      	adds	r1, r2, r3
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <modbusRead1Register+0xf0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	0063      	lsls	r3, r4, #1
 800164e:	3303      	adds	r3, #3
 8001650:	7809      	ldrb	r1, [r1, #0]
 8001652:	4413      	add	r3, r2
 8001654:	460a      	mov	r2, r1
 8001656:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800165a:	3401      	adds	r4, #1
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	429c      	cmp	r4, r3
 8001660:	dbdb      	blt.n	800161a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <modbusRead1Register+0xf0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0052      	lsls	r2, r2, #1
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	bf00      	nop
 800167c:	20000310 	.word	0x20000310

08001680 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <ModbusErrorReply+0x40>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	7e5a      	ldrb	r2, [r3, #25]
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <ModbusErrorReply+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <ModbusErrorReply+0x40>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	79fa      	ldrb	r2, [r7, #7]
 80016a4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <ModbusErrorReply+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000310 	.word	0x20000310

080016c4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <Modbus_frame_response+0x2c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	7e5b      	ldrb	r3, [r3, #25]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d004      	beq.n	80016dc <Modbus_frame_response+0x18>
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d105      	bne.n	80016e2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80016d6:	f7ff ff17 	bl	8001508 <modbusWrite1Register>
		break;
 80016da:	e006      	b.n	80016ea <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80016dc:	f7ff ff56 	bl	800158c <modbusRead1Register>
		break;
 80016e0:	e003      	b.n	80016ea <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff ffcc 	bl	8001680 <ModbusErrorReply>
		break;
 80016e8:	bf00      	nop

	}
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000310 	.word	0x20000310

080016f4 <Modbus_Emission>:

void Modbus_Emission()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <Modbus_Emission+0xfc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	d15e      	bne.n	80017c8 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <Modbus_Emission+0xfc>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <Modbus_Emission+0xfc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <Modbus_Emission+0xfc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001720:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <Modbus_Emission+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <Modbus_Emission+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001732:	461a      	mov	r2, r3
 8001734:	f009 fa2a 	bl	800ab8c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <Modbus_Emission+0xfc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <Modbus_Emission+0xfc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3203      	adds	r2, #3
 8001748:	b292      	uxth	r2, r2
 800174a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <Modbus_Emission+0xfc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <Modbus_Emission+0xfc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800175e:	3b02      	subs	r3, #2
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff fd92 	bl	800128c <CRC16>
 8001768:	4603      	mov	r3, r0
 800176a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <Modbus_Emission+0xfc>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <Modbus_Emission+0xfc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001778:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800177a:	7939      	ldrb	r1, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <Modbus_Emission+0xfc>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <Modbus_Emission+0xfc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001790:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001792:	7979      	ldrb	r1, [r7, #5]
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <Modbus_Emission+0xfc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d10d      	bne.n	80017c8 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <Modbus_Emission+0xfc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <Modbus_Emission+0xfc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <Modbus_Emission+0xfc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80017be:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80017c2:	461a      	mov	r2, r3
 80017c4:	f008 f850 	bl	8009868 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <Modbus_Emission+0xfc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <Modbus_Emission+0xfc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <Modbus_Emission+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <Modbus_Emission+0xfc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2202      	movs	r2, #2
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000310 	.word	0x20000310

080017f4 <EndEffector_Event>:
	TRAJECTGEN, TRAJECTEVA_PID, TRAJECTGENNEXT
} State_Control;

int Count_Time = 0;

void EndEffector_Event(char EndEffector_State) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 80017fe:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <EndEffector_Event+0x204>)
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	f040 80ea 	bne.w	80019e0 <EndEffector_Event+0x1ec>
		switch (EndEffector_State) {
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	f200 80ed 	bhi.w	80019ee <EndEffector_Event+0x1fa>
 8001814:	a201      	add	r2, pc, #4	; (adr r2, 800181c <EndEffector_Event+0x28>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	080019e5 	.word	0x080019e5
 8001820:	08001851 	.word	0x08001851
 8001824:	08001867 	.word	0x08001867
 8001828:	0800187d 	.word	0x0800187d
 800182c:	08001893 	.word	0x08001893
 8001830:	080018a9 	.word	0x080018a9
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018eb 	.word	0x080018eb
 8001840:	08001901 	.word	0x08001901
 8001844:	0800195d 	.word	0x0800195d
 8001848:	08001973 	.word	0x08001973
 800184c:	080019cf 	.word	0x080019cf
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8001850:	2364      	movs	r3, #100	; 0x64
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2302      	movs	r3, #2
 8001856:	4a69      	ldr	r2, [pc, #420]	; (80019fc <EndEffector_Event+0x208>)
 8001858:	212a      	movs	r1, #42	; 0x2a
 800185a:	4867      	ldr	r0, [pc, #412]	; (80019f8 <EndEffector_Event+0x204>)
 800185c:	f004 fb9a 	bl	8005f94 <HAL_I2C_Master_Transmit>
					2, 100);
			EndEffector_State = Init;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
			break;
 8001864:	e0c3      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	4a64      	ldr	r2, [pc, #400]	; (8001a00 <EndEffector_Event+0x20c>)
 800186e:	212a      	movs	r1, #42	; 0x2a
 8001870:	4861      	ldr	r0, [pc, #388]	; (80019f8 <EndEffector_Event+0x204>)
 8001872:	f004 fb8f 	bl	8005f94 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
			break;
 800187a:	e0b8      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2304      	movs	r3, #4
 8001882:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <EndEffector_Event+0x210>)
 8001884:	212a      	movs	r1, #42	; 0x2a
 8001886:	485c      	ldr	r0, [pc, #368]	; (80019f8 <EndEffector_Event+0x204>)
 8001888:	f004 fb84 	bl	8005f94 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 800188c:	2300      	movs	r3, #0
 800188e:	71fb      	strb	r3, [r7, #7]
			break;
 8001890:	e0ad      	b.n	80019ee <EndEffector_Event+0x1fa>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	4a5b      	ldr	r2, [pc, #364]	; (8001a08 <EndEffector_Event+0x214>)
 800189a:	212a      	movs	r1, #42	; 0x2a
 800189c:	4856      	ldr	r0, [pc, #344]	; (80019f8 <EndEffector_Event+0x204>)
 800189e:	f004 fb79 	bl	8005f94 <HAL_I2C_Master_Transmit>
					1, 100);
			EndEffector_State = Init;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
			break;
 80018a6:	e0a2      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2304      	movs	r3, #4
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <EndEffector_Event+0x218>)
 80018b0:	212a      	movs	r1, #42	; 0x2a
 80018b2:	4851      	ldr	r0, [pc, #324]	; (80019f8 <EndEffector_Event+0x204>)
 80018b4:	f004 fb6e 	bl	8005f94 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 100);
			EndEffector_State = Init;
 80018b8:	2300      	movs	r3, #0
 80018ba:	71fb      	strb	r3, [r7, #7]
			break;
 80018bc:	e097      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2302      	movs	r3, #2
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <EndEffector_Event+0x21c>)
 80018c6:	212a      	movs	r1, #42	; 0x2a
 80018c8:	484b      	ldr	r0, [pc, #300]	; (80019f8 <EndEffector_Event+0x204>)
 80018ca:	f004 fb63 	bl	8005f94 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
			break;
 80018d2:	e08c      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80018d4:	2364      	movs	r3, #100	; 0x64
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2302      	movs	r3, #2
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <EndEffector_Event+0x220>)
 80018dc:	212a      	movs	r1, #42	; 0x2a
 80018de:	4846      	ldr	r0, [pc, #280]	; (80019f8 <EndEffector_Event+0x204>)
 80018e0:	f004 fb58 	bl	8005f94 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 100);
			EndEffector_State = Init;
 80018e4:	2300      	movs	r3, #0
 80018e6:	71fb      	strb	r3, [r7, #7]
			break;
 80018e8:	e081      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	4a49      	ldr	r2, [pc, #292]	; (8001a18 <EndEffector_Event+0x224>)
 80018f2:	212a      	movs	r1, #42	; 0x2a
 80018f4:	4840      	ldr	r0, [pc, #256]	; (80019f8 <EndEffector_Event+0x204>)
 80018f6:	f004 fb4d 	bl	8005f94 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Pick_Check;
 80018fa:	2309      	movs	r3, #9
 80018fc:	71fb      	strb	r3, [r7, #7]
			break;
 80018fe:	e076      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Pick_Check:
			if (Count_Time == 0) {
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <EndEffector_Event+0x228>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <EndEffector_Event+0x128>
				timestamp_End = HAL_GetTick() + 550;
 8001908:	f003 fae2 	bl	8004ed0 <HAL_GetTick>
 800190c:	4603      	mov	r3, r0
 800190e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001912:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <EndEffector_Event+0x22c>)
 8001914:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <EndEffector_Event+0x228>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <EndEffector_Event+0x228>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d161      	bne.n	80019e8 <EndEffector_Event+0x1f4>
				if (Read_data[0] == 0b0111) {
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <EndEffector_Event+0x230>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d104      	bne.n	8001936 <EndEffector_Event+0x142>
//					Read_data[0] = 0;

					Count_Time = 0;
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <EndEffector_Event+0x228>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
					EndEffector_State = Init;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
//					State_Control = TRAJECTGENNEXT;

				}
				if (HAL_GetTick() >= timestamp_End) {
 8001936:	f003 facb 	bl	8004ed0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <EndEffector_Event+0x22c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d351      	bcc.n	80019e8 <EndEffector_Event+0x1f4>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <EndEffector_Event+0x230>)
 800194c:	212a      	movs	r1, #42	; 0x2a
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <EndEffector_Event+0x204>)
 8001950:	f004 fc1e 	bl	8006190 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <EndEffector_Event+0x228>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800195a:	e045      	b.n	80019e8 <EndEffector_Event+0x1f4>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2302      	movs	r3, #2
 8001962:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <EndEffector_Event+0x234>)
 8001964:	212a      	movs	r1, #42	; 0x2a
 8001966:	4824      	ldr	r0, [pc, #144]	; (80019f8 <EndEffector_Event+0x204>)
 8001968:	f004 fb14 	bl	8005f94 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Place_Check;
 800196c:	230b      	movs	r3, #11
 800196e:	71fb      	strb	r3, [r7, #7]
			break;
 8001970:	e03d      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Place_Check:
			if (Count_Time == 0) {
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <EndEffector_Event+0x228>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <EndEffector_Event+0x19a>
				timestamp_End = HAL_GetTick() + 550;
 800197a:	f003 faa9 	bl	8004ed0 <HAL_GetTick>
 800197e:	4603      	mov	r3, r0
 8001980:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <EndEffector_Event+0x22c>)
 8001986:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <EndEffector_Event+0x228>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <EndEffector_Event+0x228>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d12a      	bne.n	80019ec <EndEffector_Event+0x1f8>
				if (Read_data[0] == 0b0100) {
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <EndEffector_Event+0x230>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d104      	bne.n	80019a8 <EndEffector_Event+0x1b4>
//					Read_data[0] = 0;
//					State_Control = TRAJECTGENNEXT;
					EndEffector_State = Init;
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]
					Count_Time = 0;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <EndEffector_Event+0x228>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

				}
				if (HAL_GetTick() >= timestamp_End) {
 80019a8:	f003 fa92 	bl	8004ed0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <EndEffector_Event+0x22c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d31a      	bcc.n	80019ec <EndEffector_Event+0x1f8>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <EndEffector_Event+0x230>)
 80019be:	212a      	movs	r1, #42	; 0x2a
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <EndEffector_Event+0x204>)
 80019c2:	f004 fbe5 	bl	8006190 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <EndEffector_Event+0x228>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80019cc:	e00e      	b.n	80019ec <EndEffector_Event+0x1f8>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1, 100);
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <EndEffector_Event+0x230>)
 80019d6:	212a      	movs	r1, #42	; 0x2a
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <EndEffector_Event+0x204>)
 80019da:	f004 fbd9 	bl	8006190 <HAL_I2C_Master_Receive>
			break;
 80019de:	e006      	b.n	80019ee <EndEffector_Event+0x1fa>
		}

	}
 80019e0:	bf00      	nop
 80019e2:	e004      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019e4:	bf00      	nop
 80019e6:	e002      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019ec:	bf00      	nop
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000398 	.word	0x20000398
 80019fc:	20000200 	.word	0x20000200
 8001a00:	20000204 	.word	0x20000204
 8001a04:	20000208 	.word	0x20000208
 8001a08:	2000020c 	.word	0x2000020c
 8001a0c:	20000210 	.word	0x20000210
 8001a10:	20000214 	.word	0x20000214
 8001a14:	20000218 	.word	0x20000218
 8001a18:	2000021c 	.word	0x2000021c
 8001a1c:	2000031c 	.word	0x2000031c
 8001a20:	20000318 	.word	0x20000318
 8001a24:	20000314 	.word	0x20000314
 8001a28:	20000220 	.word	0x20000220

08001a2c <JoyStickControl>:

int homing = 0;

uint32_t time_joy_offset = 0;

void JoyStickControl() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af02      	add	r7, sp, #8

	read_pos();
 8001a32:	f7ff fa2f 	bl	8000e94 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2104      	movs	r1, #4
 8001a3a:	488e      	ldr	r0, [pc, #568]	; (8001c74 <JoyStickControl+0x248>)
 8001a3c:	f004 f934 	bl	8005ca8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8001a40:	231e      	movs	r3, #30
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	230a      	movs	r3, #10
 8001a46:	4a8c      	ldr	r2, [pc, #560]	; (8001c78 <JoyStickControl+0x24c>)
 8001a48:	498c      	ldr	r1, [pc, #560]	; (8001c7c <JoyStickControl+0x250>)
 8001a4a:	488d      	ldr	r0, [pc, #564]	; (8001c80 <JoyStickControl+0x254>)
 8001a4c:	f005 fe15 	bl	800767a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2104      	movs	r1, #4
 8001a54:	4887      	ldr	r0, [pc, #540]	; (8001c74 <JoyStickControl+0x248>)
 8001a56:	f004 f927 	bl	8005ca8 <HAL_GPIO_WritePin>
	// O 0xdf   0x7f

//	static uint32_t timestamp_joy = 0;

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 8001a5a:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <JoyStickControl+0x24c>)
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a60:	d114      	bne.n	8001a8c <JoyStickControl+0x60>
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <JoyStickControl+0x258>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d110      	bne.n	8001a8c <JoyStickControl+0x60>
		if (state_motor == 1) {
 8001a6a:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <JoyStickControl+0x25c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d103      	bne.n	8001a7a <JoyStickControl+0x4e>
			state_motor = 0;
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <JoyStickControl+0x25c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001a78:	e191      	b.n	8001d9e <JoyStickControl+0x372>
		} else if (state_motor == 0) {
 8001a7a:	4b83      	ldr	r3, [pc, #524]	; (8001c88 <JoyStickControl+0x25c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 818d 	bne.w	8001d9e <JoyStickControl+0x372>
			state_motor = 1;
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <JoyStickControl+0x25c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001a8a:	e188      	b.n	8001d9e <JoyStickControl+0x372>
		}
	} else if (RX[4] == 0xbf && button_last == 0xFF
 8001a8c:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <JoyStickControl+0x24c>)
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	2bbf      	cmp	r3, #191	; 0xbf
 8001a92:	d16d      	bne.n	8001b70 <JoyStickControl+0x144>
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <JoyStickControl+0x260>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d169      	bne.n	8001b70 <JoyStickControl+0x144>
			&& HAL_GetTick() - time_joy_offset >= 1000) { //X Button
 8001a9c:	f003 fa18 	bl	8004ed0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <JoyStickControl+0x264>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aac:	d360      	bcc.n	8001b70 <JoyStickControl+0x144>
		time_joy_offset = HAL_GetTick();
 8001aae:	f003 fa0f 	bl	8004ed0 <HAL_GetTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a76      	ldr	r2, [pc, #472]	; (8001c90 <JoyStickControl+0x264>)
 8001ab6:	6013      	str	r3, [r2, #0]
		y_c[count] = PosY;
 8001ab8:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <JoyStickControl+0x268>)
 8001aba:	f993 3000 	ldrsb.w	r3, [r3]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <JoyStickControl+0x26c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4975      	ldr	r1, [pc, #468]	; (8001c9c <JoyStickControl+0x270>)
 8001ac6:	0083      	lsls	r3, r0, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	601a      	str	r2, [r3, #0]

		if (x_axis_Actual_Position>= 0 && x_axis_Actual_Position <= 3500) {
 8001acc:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <JoyStickControl+0x274>)
 8001ace:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001ad2:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d813      	bhi.n	8001b02 <JoyStickControl+0xd6>
			x_c[count] = (float)x_axis_Actual_Position/10.0;
 8001ada:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <JoyStickControl+0x274>)
 8001adc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <JoyStickControl+0x268>)
 8001aea:	f993 3000 	ldrsb.w	r3, [r3]
 8001aee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	4a6b      	ldr	r2, [pc, #428]	; (8001ca4 <JoyStickControl+0x278>)
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	edc3 7a00 	vstr	s15, [r3]
 8001b00:	e023      	b.n	8001b4a <JoyStickControl+0x11e>
		} else if(x_axis_Actual_Position >= 65535-3500 && x_axis_Actual_Position <= 65535) {
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <JoyStickControl+0x274>)
 8001b04:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001b08:	f24f 2252 	movw	r2, #62034	; 0xf252
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d91c      	bls.n	8001b4a <JoyStickControl+0x11e>
			x_c[count] = -((float)(65536%x_axis_Actual_Position))/10.0;
 8001b10:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <JoyStickControl+0x274>)
 8001b12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001b16:	461a      	mov	r2, r3
 8001b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	eeb1 7a67 	vneg.f32	s14, s15
 8001b32:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <JoyStickControl+0x268>)
 8001b34:	f993 3000 	ldrsb.w	r3, [r3]
 8001b38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <JoyStickControl+0x278>)
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	edc3 7a00 	vstr	s15, [r3]
		}

		count += 1;
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <JoyStickControl+0x268>)
 8001b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	b25a      	sxtb	r2, r3
 8001b58:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <JoyStickControl+0x268>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <JoyStickControl+0x268>)
 8001b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f340 811c 	ble.w	8001da0 <JoyStickControl+0x374>
			count = 2;
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <JoyStickControl+0x268>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001b6e:	e117      	b.n	8001da0 <JoyStickControl+0x374>
//		count -= 1;
//		if (count <= 0) {
//			count = 0;
//		}
//	}
	else if (RX[4] == 0xdf && button_last == 0xFF
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <JoyStickControl+0x24c>)
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	2bdf      	cmp	r3, #223	; 0xdf
 8001b76:	f040 8113 	bne.w	8001da0 <JoyStickControl+0x374>
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <JoyStickControl+0x260>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	f040 810e 	bne.w	8001da0 <JoyStickControl+0x374>
			&& HAL_GetTick() - time_joy_offset >= 1000 && count >= 2) { // Delete Button
 8001b84:	f003 f9a4 	bl	8004ed0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <JoyStickControl+0x264>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b94:	f0c0 8104 	bcc.w	8001da0 <JoyStickControl+0x374>
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <JoyStickControl+0x268>)
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	f340 80fe 	ble.w	8001da0 <JoyStickControl+0x374>
		Calculate_Position(x_c[0], x_c[1], x_c[2], y_c[0], y_c[1], y_c[2]);
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <JoyStickControl+0x278>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <JoyStickControl+0x278>)
 8001bac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <JoyStickControl+0x278>)
 8001bb2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <JoyStickControl+0x270>)
 8001bb8:	ed93 6a00 	vldr	s12, [r3]
 8001bbc:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <JoyStickControl+0x270>)
 8001bbe:	edd3 5a01 	vldr	s11, [r3, #4]
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <JoyStickControl+0x270>)
 8001bc4:	ed93 5a02 	vldr	s10, [r3, #8]
 8001bc8:	eef0 2a45 	vmov.f32	s5, s10
 8001bcc:	eeb0 2a65 	vmov.f32	s4, s11
 8001bd0:	eef0 1a46 	vmov.f32	s3, s12
 8001bd4:	eeb0 1a66 	vmov.f32	s2, s13
 8001bd8:	eef0 0a47 	vmov.f32	s1, s14
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f000 f9b0 	bl	8001f44 <Calculate_Position>

		if (TRAY_STATUS == PICK) {
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <JoyStickControl+0x27c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d16b      	bne.n	8001cc4 <JoyStickControl+0x298>
//			Calculate_Position(104, 114.5, 63.7, 221.5, 281.9, 281.7);
			Pick_Tray_Origin_x= (int16_t)(x_c[0] * 10);
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <JoyStickControl+0x278>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <JoyStickControl+0x274>)
 8001c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Pick_Tray_Origin_y = (int16_t)(y_c[0] * 10);
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <JoyStickControl+0x270>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <JoyStickControl+0x274>)
 8001c28:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Pick_Tray_Origin_Orientation = asinf(sin_zeta) * 100;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <JoyStickControl+0x280>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	f008 ffeb 	bl	800ac10 <asinf>
 8001c3a:	eef0 7a40 	vmov.f32	s15, s0
 8001c3e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001cb0 <JoyStickControl+0x284>
 8001c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4a:	ee17 3a90 	vmov	r3, s15
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <JoyStickControl+0x274>)
 8001c52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			memcpy(Pick_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001c56:	2225      	movs	r2, #37	; 0x25
 8001c58:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <JoyStickControl+0x288>)
 8001c5a:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <JoyStickControl+0x28c>)
 8001c5c:	f008 ff96 	bl	800ab8c <memcpy>
			memcpy(Pick_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001c60:	2225      	movs	r2, #37	; 0x25
 8001c62:	4916      	ldr	r1, [pc, #88]	; (8001cbc <JoyStickControl+0x290>)
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <JoyStickControl+0x294>)
 8001c66:	f008 ff91 	bl	800ab8c <memcpy>

			count = 0;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <JoyStickControl+0x268>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	e06e      	b.n	8001d50 <JoyStickControl+0x324>
 8001c72:	bf00      	nop
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	20000320 	.word	0x20000320
 8001c7c:	20000224 	.word	0x20000224
 8001c80:	200003ec 	.word	0x200003ec
 8001c84:	2000032b 	.word	0x2000032b
 8001c88:	2000032a 	.word	0x2000032a
 8001c8c:	2000032c 	.word	0x2000032c
 8001c90:	20000394 	.word	0x20000394
 8001c94:	2000032d 	.word	0x2000032d
 8001c98:	20000fd8 	.word	0x20000fd8
 8001c9c:	20000330 	.word	0x20000330
 8001ca0:	20000e30 	.word	0x20000e30
 8001ca4:	2000033c 	.word	0x2000033c
 8001ca8:	20001076 	.word	0x20001076
 8001cac:	20001088 	.word	0x20001088
 8001cb0:	42c80000 	.word	0x42c80000
 8001cb4:	20000348 	.word	0x20000348
 8001cb8:	20001000 	.word	0x20001000
 8001cbc:	2000036c 	.word	0x2000036c
 8001cc0:	20000fdc 	.word	0x20000fdc
		} else if (TRAY_STATUS == PLACE) {
 8001cc4:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <JoyStickControl+0x4c8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d141      	bne.n	8001d50 <JoyStickControl+0x324>
//			Calculate_Position(70.4, 128.2, 130.3, -267.1, -269.1, -218.4);
			Place_Tray_Origin_x = (int16_t)(x_c[0] * 10);
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <JoyStickControl+0x4cc>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cde:	ee17 3a90 	vmov	r3, s15
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b85      	ldr	r3, [pc, #532]	; (8001efc <JoyStickControl+0x4d0>)
 8001ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Place_Tray_Origin_y = (int16_t)(y_c[0] * 10);
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <JoyStickControl+0x4d4>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	ee17 3a90 	vmov	r3, s15
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <JoyStickControl+0x4d0>)
 8001d08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Place_Tray_Origin_Orientation = asinf(sin_zeta) * 100;
 8001d0c:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <JoyStickControl+0x4d8>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	f008 ff7b 	bl	800ac10 <asinf>
 8001d1a:	eef0 7a40 	vmov.f32	s15, s0
 8001d1e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001f08 <JoyStickControl+0x4dc>
 8001d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2a:	ee17 3a90 	vmov	r3, s15
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <JoyStickControl+0x4d0>)
 8001d32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			memcpy(Place_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001d36:	2225      	movs	r2, #37	; 0x25
 8001d38:	4974      	ldr	r1, [pc, #464]	; (8001f0c <JoyStickControl+0x4e0>)
 8001d3a:	4875      	ldr	r0, [pc, #468]	; (8001f10 <JoyStickControl+0x4e4>)
 8001d3c:	f008 ff26 	bl	800ab8c <memcpy>
			memcpy(Place_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001d40:	2225      	movs	r2, #37	; 0x25
 8001d42:	4974      	ldr	r1, [pc, #464]	; (8001f14 <JoyStickControl+0x4e8>)
 8001d44:	4874      	ldr	r0, [pc, #464]	; (8001f18 <JoyStickControl+0x4ec>)
 8001d46:	f008 ff21 	bl	800ab8c <memcpy>
			count = 0;
 8001d4a:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <JoyStickControl+0x4f0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
//
//			Place_Tray_Origin_x= -500;
//			Place_Tray_Origin_y= -2000;
//			Place_Tray_Origin_Orientation= 9000;;

		HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4872      	ldr	r0, [pc, #456]	; (8001f20 <JoyStickControl+0x4f4>)
 8001d56:	f003 ffa7 	bl	8005ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	4870      	ldr	r0, [pc, #448]	; (8001f20 <JoyStickControl+0x4f4>)
 8001d60:	f003 ffa2 	bl	8005ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2120      	movs	r1, #32
 8001d68:	486d      	ldr	r0, [pc, #436]	; (8001f20 <JoyStickControl+0x4f4>)
 8001d6a:	f003 ff9d 	bl	8005ca8 <HAL_GPIO_WritePin>
		memset(x_c, 0, sizeof(x_c));
 8001d6e:	220c      	movs	r2, #12
 8001d70:	2100      	movs	r1, #0
 8001d72:	4861      	ldr	r0, [pc, #388]	; (8001ef8 <JoyStickControl+0x4cc>)
 8001d74:	f008 ff18 	bl	800aba8 <memset>
		memset(y_c, 0, sizeof(y_c));
 8001d78:	220c      	movs	r2, #12
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4860      	ldr	r0, [pc, #384]	; (8001f00 <JoyStickControl+0x4d4>)
 8001d7e:	f008 ff13 	bl	800aba8 <memset>

		y_axis_Moving_Status= 0;
 8001d82:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <JoyStickControl+0x4d0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	841a      	strh	r2, [r3, #32]
//		End_Effector_Status = 0;

		count = 0;
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <JoyStickControl+0x4f0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

		motor(0, 0);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff f8a5 	bl	8000ee0 <motor>
		State = IDLE;
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <JoyStickControl+0x4f8>)
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e000      	b.n	8001da0 <JoyStickControl+0x374>
		if (state_motor == 1) {
 8001d9e:	bf00      	nop
//	else if (RX[4] == 0xEF && button_last == 0xFF) {
//		homing = 1;
//	}

//motor speed Select
	switch (state_motor) {
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <JoyStickControl+0x4fc>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <JoyStickControl+0x382>
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d046      	beq.n	8001e3a <JoyStickControl+0x40e>
 8001dac:	e08c      	b.n	8001ec8 <JoyStickControl+0x49c>
	case 0:
		if (RX[3] == 0xfe) { //Not be push
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <JoyStickControl+0x500>)
 8001db0:	78db      	ldrb	r3, [r3, #3]
 8001db2:	2bfe      	cmp	r3, #254	; 0xfe
 8001db4:	d108      	bne.n	8001dc8 <JoyStickControl+0x39c>
			motor(0, 1);
 8001db6:	2101      	movs	r1, #1
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff f891 	bl	8000ee0 <motor>
			x_axis_Moving_Status= 0;
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <JoyStickControl+0x4d0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		else if (RX[3] == 0xde) { //right
			x_axis_Moving_Status = 4;
			motor(0, 1);
		}

		break;
 8001dc6:	e07e      	b.n	8001ec6 <JoyStickControl+0x49a>
		else if (RX[3] == 0xee) { //UP
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <JoyStickControl+0x500>)
 8001dca:	78db      	ldrb	r3, [r3, #3]
 8001dcc:	2bee      	cmp	r3, #238	; 0xee
 8001dce:	d10a      	bne.n	8001de6 <JoyStickControl+0x3ba>
			x_axis_Moving_Status= 0;
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <JoyStickControl+0x4d0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, 1);
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <JoyStickControl+0x504>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f87e 	bl	8000ee0 <motor>
		break;
 8001de4:	e06f      	b.n	8001ec6 <JoyStickControl+0x49a>
		else if (RX[3] == 0xbe) { //Down
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <JoyStickControl+0x500>)
 8001de8:	78db      	ldrb	r3, [r3, #3]
 8001dea:	2bbe      	cmp	r3, #190	; 0xbe
 8001dec:	d10b      	bne.n	8001e06 <JoyStickControl+0x3da>
			x_axis_Moving_Status= 0;
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <JoyStickControl+0x4d0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, -1);
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <JoyStickControl+0x504>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f86e 	bl	8000ee0 <motor>
		break;
 8001e04:	e05f      	b.n	8001ec6 <JoyStickControl+0x49a>
		else if (RX[3] == 0x7e) { //left
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <JoyStickControl+0x500>)
 8001e08:	78db      	ldrb	r3, [r3, #3]
 8001e0a:	2b7e      	cmp	r3, #126	; 0x7e
 8001e0c:	d108      	bne.n	8001e20 <JoyStickControl+0x3f4>
			x_axis_Moving_Status = 8;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <JoyStickControl+0x4d0>)
 8001e10:	2208      	movs	r2, #8
 8001e12:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001e16:	2101      	movs	r1, #1
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff f861 	bl	8000ee0 <motor>
		break;
 8001e1e:	e052      	b.n	8001ec6 <JoyStickControl+0x49a>
		else if (RX[3] == 0xde) { //right
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <JoyStickControl+0x500>)
 8001e22:	78db      	ldrb	r3, [r3, #3]
 8001e24:	2bde      	cmp	r3, #222	; 0xde
 8001e26:	d14e      	bne.n	8001ec6 <JoyStickControl+0x49a>
			x_axis_Moving_Status = 4;
 8001e28:	4b34      	ldr	r3, [pc, #208]	; (8001efc <JoyStickControl+0x4d0>)
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001e30:	2101      	movs	r1, #1
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff f854 	bl	8000ee0 <motor>
		break;
 8001e38:	e045      	b.n	8001ec6 <JoyStickControl+0x49a>

		case 1:
		if (RX[3] == 0xfe) { //Not be push
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <JoyStickControl+0x500>)
 8001e3c:	78db      	ldrb	r3, [r3, #3]
 8001e3e:	2bfe      	cmp	r3, #254	; 0xfe
 8001e40:	d108      	bne.n	8001e54 <JoyStickControl+0x428>
			motor(0, 1);
 8001e42:	2101      	movs	r1, #1
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff f84b 	bl	8000ee0 <motor>
			x_axis_Moving_Status= 0;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <JoyStickControl+0x4d0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001e52:	e039      	b.n	8001ec8 <JoyStickControl+0x49c>
		}
		else if (RX[3] == 0xee) { //UP
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <JoyStickControl+0x500>)
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	2bee      	cmp	r3, #238	; 0xee
 8001e5a:	d10a      	bne.n	8001e72 <JoyStickControl+0x446>
			x_axis_Moving_Status= 0;
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <JoyStickControl+0x4d0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, 1);
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <JoyStickControl+0x508>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f838 	bl	8000ee0 <motor>
 8001e70:	e02a      	b.n	8001ec8 <JoyStickControl+0x49c>
		}
		else if (RX[3] == 0xbe) { //Down
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <JoyStickControl+0x500>)
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2bbe      	cmp	r3, #190	; 0xbe
 8001e78:	d10b      	bne.n	8001e92 <JoyStickControl+0x466>
			x_axis_Moving_Status= 0;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <JoyStickControl+0x4d0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, -1);
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <JoyStickControl+0x508>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f828 	bl	8000ee0 <motor>
 8001e90:	e01a      	b.n	8001ec8 <JoyStickControl+0x49c>
		}
		else if (RX[3] == 0x7e) { //left
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <JoyStickControl+0x500>)
 8001e94:	78db      	ldrb	r3, [r3, #3]
 8001e96:	2b7e      	cmp	r3, #126	; 0x7e
 8001e98:	d108      	bne.n	8001eac <JoyStickControl+0x480>
			x_axis_Moving_Status = 8;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <JoyStickControl+0x4d0>)
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff f81b 	bl	8000ee0 <motor>
 8001eaa:	e00d      	b.n	8001ec8 <JoyStickControl+0x49c>
		}
		else if (RX[3] == 0xde) { //right
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <JoyStickControl+0x500>)
 8001eae:	78db      	ldrb	r3, [r3, #3]
 8001eb0:	2bde      	cmp	r3, #222	; 0xde
 8001eb2:	d109      	bne.n	8001ec8 <JoyStickControl+0x49c>
			x_axis_Moving_Status = 4;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <JoyStickControl+0x4d0>)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f80e 	bl	8000ee0 <motor>
 8001ec4:	e000      	b.n	8001ec8 <JoyStickControl+0x49c>
		break;
 8001ec6:	bf00      	nop
		}

	}

	switch (homing) {
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <JoyStickControl+0x50c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <JoyStickControl+0x4ae>
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d103      	bne.n	8001edc <JoyStickControl+0x4b0>
	case 0:
		break;
	case 1:
		Joy_Homing();
 8001ed4:	f7ff f8c6 	bl	8001064 <Joy_Homing>
		break;
 8001ed8:	e000      	b.n	8001edc <JoyStickControl+0x4b0>
		break;
 8001eda:	bf00      	nop
	}

	RX_last = RX[4];
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <JoyStickControl+0x500>)
 8001ede:	791a      	ldrb	r2, [r3, #4]
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <JoyStickControl+0x510>)
 8001ee2:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <JoyStickControl+0x500>)
 8001ee6:	791a      	ldrb	r2, [r3, #4]
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <JoyStickControl+0x514>)
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20001076 	.word	0x20001076
 8001ef8:	2000033c 	.word	0x2000033c
 8001efc:	20000e30 	.word	0x20000e30
 8001f00:	20000330 	.word	0x20000330
 8001f04:	20001088 	.word	0x20001088
 8001f08:	42c80000 	.word	0x42c80000
 8001f0c:	20000348 	.word	0x20000348
 8001f10:	20001048 	.word	0x20001048
 8001f14:	2000036c 	.word	0x2000036c
 8001f18:	20001024 	.word	0x20001024
 8001f1c:	2000032d 	.word	0x2000032d
 8001f20:	40020000 	.word	0x40020000
 8001f24:	20000268 	.word	0x20000268
 8001f28:	2000032a 	.word	0x2000032a
 8001f2c:	20000320 	.word	0x20000320
 8001f30:	2000022e 	.word	0x2000022e
 8001f34:	20000230 	.word	0x20000230
 8001f38:	20000390 	.word	0x20000390
 8001f3c:	2000032b 	.word	0x2000032b
 8001f40:	2000032c 	.word	0x2000032c

08001f44 <Calculate_Position>:

void Calculate_Position(float x_c1, float x_c2, float x_c3, float y_c1,
		float y_c2, float y_c3) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f4e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f52:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f56:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f5a:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f5e:	edc7 2a00 	vstr	s5, [r7]

//Parameter use in Equation
//Trigonometry
	a1 = x_c2 - x_c1;
 8001f62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6e:	4be1      	ldr	r3, [pc, #900]	; (80022f4 <Calculate_Position+0x3b0>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]
	b = y_c2 - y_c1;
 8001f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	4bdd      	ldr	r3, [pc, #884]	; (80022f8 <Calculate_Position+0x3b4>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	c = sqrt((a1 * a1) + (b * b));
 8001f86:	4bdb      	ldr	r3, [pc, #876]	; (80022f4 <Calculate_Position+0x3b0>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	4bd9      	ldr	r3, [pc, #868]	; (80022f4 <Calculate_Position+0x3b0>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f96:	4bd8      	ldr	r3, [pc, #864]	; (80022f8 <Calculate_Position+0x3b4>)
 8001f98:	edd3 6a00 	vldr	s13, [r3]
 8001f9c:	4bd6      	ldr	r3, [pc, #856]	; (80022f8 <Calculate_Position+0x3b4>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	ee17 0a90 	vmov	r0, s15
 8001fae:	f7fe fa77 	bl	80004a0 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b10 	vmov	d0, r2, r3
 8001fba:	f008 fdfd 	bl	800abb8 <sqrt>
 8001fbe:	ec53 2b10 	vmov	r2, r3, d0
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd93 	bl	8000af0 <__aeabi_d2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4acb      	ldr	r2, [pc, #812]	; (80022fc <Calculate_Position+0x3b8>)
 8001fce:	6013      	str	r3, [r2, #0]

//float cos_zeta1= a1/ c;
	cos_zeta = a1 / c;
 8001fd0:	4bc8      	ldr	r3, [pc, #800]	; (80022f4 <Calculate_Position+0x3b0>)
 8001fd2:	edd3 6a00 	vldr	s13, [r3]
 8001fd6:	4bc9      	ldr	r3, [pc, #804]	; (80022fc <Calculate_Position+0x3b8>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	4bc7      	ldr	r3, [pc, #796]	; (8002300 <Calculate_Position+0x3bc>)
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
	sin_zeta = b / c;
 8001fe6:	4bc4      	ldr	r3, [pc, #784]	; (80022f8 <Calculate_Position+0x3b4>)
 8001fe8:	edd3 6a00 	vldr	s13, [r3]
 8001fec:	4bc3      	ldr	r3, [pc, #780]	; (80022fc <Calculate_Position+0x3b8>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff6:	4bc3      	ldr	r3, [pc, #780]	; (8002304 <Calculate_Position+0x3c0>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
//	float tan_zeta1= b / a;

	x_final_joy[0] = (((10 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8001ffc:	4bc0      	ldr	r3, [pc, #768]	; (8002300 <Calculate_Position+0x3bc>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800200a:	4bbe      	ldr	r3, [pc, #760]	; (8002304 <Calculate_Position+0x3c0>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eddf 6abd 	vldr	s13, [pc, #756]	; 8002308 <Calculate_Position+0x3c4>
 8002014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800201c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	4bb7      	ldr	r3, [pc, #732]	; (800230c <Calculate_Position+0x3c8>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
	x_final_joy[1] = (((30 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8002032:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <Calculate_Position+0x3bc>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800203c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002040:	4bb0      	ldr	r3, [pc, #704]	; (8002304 <Calculate_Position+0x3c0>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002308 <Calculate_Position+0x3c4>
 800204a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800204e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002052:	edd7 7a05 	vldr	s15, [r7, #20]
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002062:	4baa      	ldr	r3, [pc, #680]	; (800230c <Calculate_Position+0x3c8>)
 8002064:	edc3 7a01 	vstr	s15, [r3, #4]
	x_final_joy[2] = (((50 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8002068:	4ba5      	ldr	r3, [pc, #660]	; (8002300 <Calculate_Position+0x3bc>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002310 <Calculate_Position+0x3cc>
 8002072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002076:	4ba3      	ldr	r3, [pc, #652]	; (8002304 <Calculate_Position+0x3c0>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8002308 <Calculate_Position+0x3c4>
 8002080:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002088:	edd7 7a05 	vldr	s15, [r7, #20]
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002098:	4b9c      	ldr	r3, [pc, #624]	; (800230c <Calculate_Position+0x3c8>)
 800209a:	edc3 7a02 	vstr	s15, [r3, #8]
	x_final_joy[3] = (((10 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 800209e:	4b98      	ldr	r3, [pc, #608]	; (8002300 <Calculate_Position+0x3bc>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ac:	4b95      	ldr	r3, [pc, #596]	; (8002304 <Calculate_Position+0x3c0>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80020b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020be:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	4b8f      	ldr	r3, [pc, #572]	; (800230c <Calculate_Position+0x3c8>)
 80020d0:	edc3 7a03 	vstr	s15, [r3, #12]
	x_final_joy[4] = (((30 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 80020d4:	4b8a      	ldr	r3, [pc, #552]	; (8002300 <Calculate_Position+0x3bc>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <Calculate_Position+0x3c0>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80020ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002104:	4b81      	ldr	r3, [pc, #516]	; (800230c <Calculate_Position+0x3c8>)
 8002106:	edc3 7a04 	vstr	s15, [r3, #16]
	x_final_joy[5] = (((50 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 800210a:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <Calculate_Position+0x3bc>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002310 <Calculate_Position+0x3cc>
 8002114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002118:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <Calculate_Position+0x3c0>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002122:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800212a:	edd7 7a05 	vldr	s15, [r7, #20]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213a:	4b74      	ldr	r3, [pc, #464]	; (800230c <Calculate_Position+0x3c8>)
 800213c:	edc3 7a05 	vstr	s15, [r3, #20]
	x_final_joy[6] = (((10 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <Calculate_Position+0x3bc>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800214a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <Calculate_Position+0x3c0>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002158:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800215c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	4b66      	ldr	r3, [pc, #408]	; (800230c <Calculate_Position+0x3c8>)
 8002172:	edc3 7a06 	vstr	s15, [r3, #24]
	x_final_joy[7] = (((30 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <Calculate_Position+0x3bc>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002180:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002184:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <Calculate_Position+0x3c0>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800218e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002192:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002196:	edd7 7a05 	vldr	s15, [r7, #20]
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a6:	4b59      	ldr	r3, [pc, #356]	; (800230c <Calculate_Position+0x3c8>)
 80021a8:	edc3 7a07 	vstr	s15, [r3, #28]
	x_final_joy[8] = (((50 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <Calculate_Position+0x3bc>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002310 <Calculate_Position+0x3cc>
 80021b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ba:	4b52      	ldr	r3, [pc, #328]	; (8002304 <Calculate_Position+0x3c0>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <Calculate_Position+0x3c8>)
 80021de:	edc3 7a08 	vstr	s15, [r3, #32]

	y_final_joy[0] = ((40 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <Calculate_Position+0x3bc>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002308 <Calculate_Position+0x3c4>
 80021ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f0:	4b44      	ldr	r3, [pc, #272]	; (8002304 <Calculate_Position+0x3c0>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002202:	edd7 7a02 	vldr	s15, [r7, #8]
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <Calculate_Position+0x3d0>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
	y_final_joy[1] = ((40 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <Calculate_Position+0x3bc>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002308 <Calculate_Position+0x3c4>
 800221a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <Calculate_Position+0x3c0>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800222c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002230:	edd7 7a02 	vldr	s15, [r7, #8]
 8002234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <Calculate_Position+0x3d0>)
 800223a:	edc3 7a01 	vstr	s15, [r3, #4]
	y_final_joy[2] = ((40 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <Calculate_Position+0x3bc>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002308 <Calculate_Position+0x3c4>
 8002248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <Calculate_Position+0x3c0>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002310 <Calculate_Position+0x3cc>
 8002256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800225a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800225e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <Calculate_Position+0x3d0>)
 8002268:	edc3 7a02 	vstr	s15, [r3, #8]
	y_final_joy[3] = ((25 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <Calculate_Position+0x3bc>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002276:	ee27 7a87 	vmul.f32	s14, s15, s14
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <Calculate_Position+0x3c0>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002284:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <Calculate_Position+0x3d0>)
 8002296:	edc3 7a03 	vstr	s15, [r3, #12]
	y_final_joy[4] = ((25 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <Calculate_Position+0x3bc>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <Calculate_Position+0x3c0>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80022b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <Calculate_Position+0x3d0>)
 80022c4:	edc3 7a04 	vstr	s15, [r3, #16]
	y_final_joy[5] = ((25 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <Calculate_Position+0x3bc>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <Calculate_Position+0x3c0>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002310 <Calculate_Position+0x3cc>
 80022e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	e012      	b.n	8002318 <Calculate_Position+0x3d4>
 80022f2:	bf00      	nop
 80022f4:	20001078 	.word	0x20001078
 80022f8:	2000107c 	.word	0x2000107c
 80022fc:	20001080 	.word	0x20001080
 8002300:	20001084 	.word	0x20001084
 8002304:	20001088 	.word	0x20001088
 8002308:	42200000 	.word	0x42200000
 800230c:	20000348 	.word	0x20000348
 8002310:	42480000 	.word	0x42480000
 8002314:	2000036c 	.word	0x2000036c
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <Calculate_Position+0x46c>)
 800231a:	edc3 7a05 	vstr	s15, [r3, #20]
	y_final_joy[6] = ((10 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <Calculate_Position+0x470>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <Calculate_Position+0x474>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <Calculate_Position+0x46c>)
 8002348:	edc3 7a06 	vstr	s15, [r3, #24]
	y_final_joy[7] = ((10 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <Calculate_Position+0x470>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <Calculate_Position+0x474>)
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002368:	ee37 7a27 	vadd.f32	s14, s14, s15
 800236c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <Calculate_Position+0x46c>)
 8002376:	edc3 7a07 	vstr	s15, [r3, #28]
	y_final_joy[8] = ((10 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <Calculate_Position+0x470>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <Calculate_Position+0x474>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80023bc <Calculate_Position+0x478>
 8002392:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239a:	edd7 7a02 	vldr	s15, [r7, #8]
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <Calculate_Position+0x46c>)
 80023a4:	edc3 7a08 	vstr	s15, [r3, #32]

}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000036c 	.word	0x2000036c
 80023b4:	20001084 	.word	0x20001084
 80023b8:	20001088 	.word	0x20001088
 80023bc:	42480000 	.word	0x42480000

080023c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023c4:	f3bf 8f4f 	dsb	sy
}
 80023c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <__NVIC_SystemReset+0x24>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023d2:	4904      	ldr	r1, [pc, #16]	; (80023e4 <__NVIC_SystemReset+0x24>)
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_SystemReset+0x28>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023da:	f3bf 8f4f 	dsb	sy
}
 80023de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <__NVIC_SystemReset+0x20>
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	05fa0004 	.word	0x05fa0004
 80023ec:	00000000 	.word	0x00000000

080023f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b0a4      	sub	sp, #144	; 0x90
 80023f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80023f8:	f002 fd04 	bl	8004e04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80023fc:	f000 feb6 	bl	800316c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002400:	f001 f9dc 	bl	80037bc <MX_GPIO_Init>
	MX_DMA_Init();
 8002404:	f001 f9ba 	bl	800377c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002408:	f001 f960 	bl	80036cc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800240c:	f001 f81a 	bl	8003444 <MX_TIM2_Init>
	MX_TIM1_Init();
 8002410:	f000 ff78 	bl	8003304 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002414:	f001 f86a 	bl	80034ec <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8002418:	f001 f984 	bl	8003724 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 800241c:	f001 f8b4 	bl	8003588 <MX_TIM5_Init>
	MX_SPI3_Init();
 8002420:	f000 ff3a 	bl	8003298 <MX_SPI3_Init>
	MX_TIM11_Init();
 8002424:	f001 f8fe 	bl	8003624 <MX_TIM11_Init>
	MX_I2C2_Init();
 8002428:	f000 ff08 	bl	800323c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 800242c:	2003      	movs	r0, #3
 800242e:	f7ff f9e1 	bl	80017f4 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002432:	2104      	movs	r1, #4
 8002434:	48b8      	ldr	r0, [pc, #736]	; (8002718 <main+0x328>)
 8002436:	f005 ffa3 	bl	8008380 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800243a:	48b8      	ldr	r0, [pc, #736]	; (800271c <main+0x32c>)
 800243c:	f005 fc40 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002440:	48b7      	ldr	r0, [pc, #732]	; (8002720 <main+0x330>)
 8002442:	f005 fbe3 	bl	8007c0c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002446:	2100      	movs	r1, #0
 8002448:	48b5      	ldr	r0, [pc, #724]	; (8002720 <main+0x330>)
 800244a:	f005 fd67 	bl	8007f1c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 800244e:	48b5      	ldr	r0, [pc, #724]	; (8002724 <main+0x334>)
 8002450:	f005 fc36 	bl	8007cc0 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8002454:	4bb4      	ldr	r3, [pc, #720]	; (8002728 <main+0x338>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe f841 	bl	80004e4 <__aeabi_ul2d>
 8002462:	a3ab      	add	r3, pc, #684	; (adr r3, 8002710 <main+0x320>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f99c 	bl	80007a4 <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	4bad      	ldr	r3, [pc, #692]	; (800272c <main+0x33c>)
 8002476:	e9c3 0100 	strd	r0, r1, [r3]
	t_DeAcce = traject_us / 1000000.00;
 800247a:	4bab      	ldr	r3, [pc, #684]	; (8002728 <main+0x338>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe f82e 	bl	80004e4 <__aeabi_ul2d>
 8002488:	a3a1      	add	r3, pc, #644	; (adr r3, 8002710 <main+0x320>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f989 	bl	80007a4 <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	4ba5      	ldr	r3, [pc, #660]	; (8002730 <main+0x340>)
 800249c:	e9c3 0100 	strd	r0, r1, [r3]
	t_Cons = traject_us / 1000000.00;
 80024a0:	4ba1      	ldr	r3, [pc, #644]	; (8002728 <main+0x338>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe f81b 	bl	80004e4 <__aeabi_ul2d>
 80024ae:	a398      	add	r3, pc, #608	; (adr r3, 8002710 <main+0x320>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f976 	bl	80007a4 <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <main+0x344>)
 80024c2:	e9c3 0100 	strd	r0, r1, [r3]
	t_count = traject_us / 1000000.00;
 80024c6:	4b98      	ldr	r3, [pc, #608]	; (8002728 <main+0x338>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe f808 	bl	80004e4 <__aeabi_ul2d>
 80024d4:	a38e      	add	r3, pc, #568	; (adr r3, 8002710 <main+0x320>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f963 	bl	80007a4 <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <main+0x348>)
 80024e8:	e9c3 0100 	strd	r0, r1, [r3]
	t_diff = traject_us / 1000000.00;
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <main+0x338>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fd fff5 	bl	80004e4 <__aeabi_ul2d>
 80024fa:	a385      	add	r3, pc, #532	; (adr r3, 8002710 <main+0x320>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f950 	bl	80007a4 <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	4b8b      	ldr	r3, [pc, #556]	; (800273c <main+0x34c>)
 800250e:	e9c3 0100 	strd	r0, r1, [r3]

	hmodbus.huart = &huart2;
 8002512:	4a8b      	ldr	r2, [pc, #556]	; (8002740 <main+0x350>)
 8002514:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <main+0x354>)
 8002516:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim11;
 8002518:	4a89      	ldr	r2, [pc, #548]	; (8002740 <main+0x350>)
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <main+0x358>)
 800251c:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 800251e:	4a88      	ldr	r2, [pc, #544]	; (8002740 <main+0x350>)
 8002520:	2315      	movs	r3, #21
 8002522:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8002524:	4a86      	ldr	r2, [pc, #536]	; (8002740 <main+0x350>)
 8002526:	23c8      	movs	r3, #200	; 0xc8
 8002528:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 800252a:	4988      	ldr	r1, [pc, #544]	; (800274c <main+0x35c>)
 800252c:	4884      	ldr	r0, [pc, #528]	; (8002740 <main+0x350>)
 800252e:	f7fe fe57 	bl	80011e0 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 8002532:	4b87      	ldr	r3, [pc, #540]	; (8002750 <main+0x360>)
 8002534:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8002538:	461c      	mov	r4, r3
 800253a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	602b      	str	r3, [r5, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 8002542:	4b84      	ldr	r3, [pc, #528]	; (8002754 <main+0x364>)
 8002544:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8002548:	461c      	mov	r4, r3
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	602b      	str	r3, [r5, #0]
			.LaserOn = 1, .GripperPower = 2, .GripperPicking = 6,
			.GripperPlacing = 10 };

	struct yaxisMovingStatusBit yaxisMovingStatusData =
 8002552:	4b81      	ldr	r3, [pc, #516]	; (8002758 <main+0x368>)
 8002554:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8002558:	461c      	mov	r4, r3
 800255a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002562:	e885 0003 	stmia.w	r5, {r0, r1}
			{ .JogPick = 1, .JogPlease = 2, .Home = 4, .GoPick = 8, .GoPlace =
					16, .Gopoint = 32 };

	struct xaxisMovingStatusBit xaxisMovingStatusData = { .Home = 1, .Run = 2,
 8002566:	4b7d      	ldr	r3, [pc, #500]	; (800275c <main+0x36c>)
 8002568:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800256c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.JogLeft = 4, .JogRight = 8 };

	x_axis_Actual_Position= 0;
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <main+0x35c>)
 8002574:	2300      	movs	r3, #0
 8002576:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	x_axis_Target_Speed= 3000;
 800257a:	4a74      	ldr	r2, [pc, #464]	; (800274c <main+0x35c>)
 800257c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002580:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	x_axis_Target_Acceleration_Time= 1;
 8002584:	4a71      	ldr	r2, [pc, #452]	; (800274c <main+0x35c>)
 8002586:	2301      	movs	r3, #1
 8002588:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
//		static uint64_t timestamp_Endeffecter = 0;

		int64_t GetTicku = micros();
 800258c:	f001 fa12 	bl	80039b4 <micros>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

		Modbus_Protocal_Worker();
 8002598:	f7fe feae 	bl	80012f8 <Modbus_Protocal_Worker>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 800259c:	f002 fc98 	bl	8004ed0 <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2200      	movs	r2, #0
 80025a4:	4698      	mov	r8, r3
 80025a6:	4691      	mov	r9, r2
 80025a8:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <main+0x370>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	4590      	cmp	r8, r2
 80025b0:	eb79 0303 	sbcs.w	r3, r9, r3
 80025b4:	d34d      	bcc.n	8002652 <main+0x262>
			timestamp_heartbeat = HAL_GetTick() + 200;
 80025b6:	f002 fc8b 	bl	8004ed0 <HAL_GetTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	33c8      	adds	r3, #200	; 0xc8
 80025be:	2200      	movs	r2, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	637a      	str	r2, [r7, #52]	; 0x34
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <main+0x370>)
 80025c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80025ca:	e9c3 1200 	strd	r1, r2, [r3]

			Heartbeat_Protocol= 22881;
 80025ce:	4a5f      	ldr	r2, [pc, #380]	; (800274c <main+0x35c>)
 80025d0:	f645 1361 	movw	r3, #22881	; 0x5961
 80025d4:	8013      	strh	r3, [r2, #0]

			y_axis_Actual_Position= (int32_t)(PosY*10);
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <main+0x374>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4a57      	ldr	r2, [pc, #348]	; (800274c <main+0x35c>)
 80025f0:	8453      	strh	r3, [r2, #34]	; 0x22
			y_axis_Actual_Speed= fabs(current_velocity)*10;
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <main+0x378>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eef0 7ae7 	vabs.f32	s15, s15
 80025fc:	ee17 0a90 	vmov	r0, s15
 8002600:	f7fd ff4e 	bl	80004a0 <__aeabi_f2d>
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <main+0x37c>)
 800260a:	f7fd ffa1 	bl	8000550 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fe fa4b 	bl	8000ab0 <__aeabi_d2uiz>
 800261a:	4603      	mov	r3, r0
 800261c:	b29b      	uxth	r3, r3
 800261e:	4a4b      	ldr	r2, [pc, #300]	; (800274c <main+0x35c>)
 8002620:	8493      	strh	r3, [r2, #36]	; 0x24
			y_axis_Actual_Acceleration= fabs(acc)*10;
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <main+0x380>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	eef0 7ae7 	vabs.f32	s15, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ff36 	bl	80004a0 <__aeabi_f2d>
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <main+0x37c>)
 800263a:	f7fd ff89 	bl	8000550 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f7fe fa33 	bl	8000ab0 <__aeabi_d2uiz>
 800264a:	4603      	mov	r3, r0
 800264c:	b29b      	uxth	r3, r3
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <main+0x35c>)
 8002650:	84d3      	strh	r3, [r2, #38]	; 0x26

		}

		switch (State) {
 8002652:	4b48      	ldr	r3, [pc, #288]	; (8002774 <main+0x384>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b08      	cmp	r3, #8
 8002658:	f200 8573 	bhi.w	8003142 <main+0xd52>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <main+0x274>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002689 	.word	0x08002689
 8002668:	08002693 	.word	0x08002693
 800266c:	080026ad 	.word	0x080026ad
 8002670:	08002997 	.word	0x08002997
 8002674:	0800299d 	.word	0x0800299d
 8002678:	08002ae5 	.word	0x08002ae5
 800267c:	080029a3 	.word	0x080029a3
 8002680:	08002faf 	.word	0x08002faf
 8002684:	0800304d 	.word	0x0800304d

		case INIT:
			State = INIT_HOMING;
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <main+0x384>)
 800268a:	2301      	movs	r3, #1
 800268c:	7013      	strb	r3, [r2, #0]
			break;
 800268e:	f000 bd58 	b.w	8003142 <main+0xd52>

		case INIT_HOMING:
			y_axis_Moving_Status= yaxisMovingStatusData.Home;
 8002692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	4a2d      	ldr	r2, [pc, #180]	; (800274c <main+0x35c>)
 8002698:	8413      	strh	r3, [r2, #32]
			x_axis_Moving_Status = xaxisMovingStatusData.Home;
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	b29b      	uxth	r3, r3
 800269e:	4a2b      	ldr	r2, [pc, #172]	; (800274c <main+0x35c>)
 80026a0:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
			Init_Homing();
 80026a4:	f7fe fc46 	bl	8000f34 <Init_Homing>

			break;
 80026a8:	f000 bd4b 	b.w	8003142 <main+0xd52>

			case IDLE: //HOME

			if(End_Effector_Status != last_endeffecter_status) {
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <main+0x35c>)
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <main+0x388>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d06d      	beq.n	8002796 <main+0x3a6>
				if (End_Effector_Status == EndEffectorStatusData.LaserOn) {
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <main+0x35c>)
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d103      	bne.n	80026ce <main+0x2de>
					EndEffector_Event(Test_Start);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff f894 	bl	80017f4 <EndEffector_Event>
 80026cc:	e012      	b.n	80026f4 <main+0x304>
				} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <main+0x35c>)
 80026d0:	889b      	ldrh	r3, [r3, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d103      	bne.n	80026e2 <main+0x2f2>
					EndEffector_Event(Test_Stop);
 80026da:	2002      	movs	r0, #2
 80026dc:	f7ff f88a 	bl	80017f4 <EndEffector_Event>
 80026e0:	e008      	b.n	80026f4 <main+0x304>
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <main+0x35c>)
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d102      	bne.n	80026f4 <main+0x304>
					EndEffector_Event(Run_Mode);
 80026ee:	2006      	movs	r0, #6
 80026f0:	f7ff f880 	bl	80017f4 <EndEffector_Event>
				}

				if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <main+0x35c>)
 80026f6:	889b      	ldrh	r3, [r3, #4]
 80026f8:	461a      	mov	r2, r3
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d13d      	bne.n	800277c <main+0x38c>
					//				EndEffector_Event(Run_Mode);
					//				HAL_Delay(300);
					EndEffector_Event(Pick);
 8002700:	2008      	movs	r0, #8
 8002702:	f7ff f877 	bl	80017f4 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 8002706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002708:	b29b      	uxth	r3, r3
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <main+0x35c>)
 800270c:	8093      	strh	r3, [r2, #4]
 800270e:	e042      	b.n	8002796 <main+0x3a6>
 8002710:	00000000 	.word	0x00000000
 8002714:	412e8480 	.word	0x412e8480
 8002718:	200004f8 	.word	0x200004f8
 800271c:	200005ac 	.word	0x200005ac
 8002720:	20000444 	.word	0x20000444
 8002724:	20000660 	.word	0x20000660
 8002728:	20000238 	.word	0x20000238
 800272c:	20000240 	.word	0x20000240
 8002730:	20000248 	.word	0x20000248
 8002734:	20000250 	.word	0x20000250
 8002738:	20000258 	.word	0x20000258
 800273c:	20000260 	.word	0x20000260
 8002740:	20000958 	.word	0x20000958
 8002744:	200007c8 	.word	0x200007c8
 8002748:	20000714 	.word	0x20000714
 800274c:	20000e30 	.word	0x20000e30
 8002750:	0800afd0 	.word	0x0800afd0
 8002754:	0800afe4 	.word	0x0800afe4
 8002758:	0800aff8 	.word	0x0800aff8
 800275c:	0800b010 	.word	0x0800b010
 8002760:	200010a0 	.word	0x200010a0
 8002764:	20000fd8 	.word	0x20000fd8
 8002768:	20000944 	.word	0x20000944
 800276c:	40240000 	.word	0x40240000
 8002770:	20000948 	.word	0x20000948
 8002774:	20000268 	.word	0x20000268
 8002778:	2000108c 	.word	0x2000108c
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 800277c:	4bae      	ldr	r3, [pc, #696]	; (8002a38 <main+0x648>)
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002784:	429a      	cmp	r2, r3
 8002786:	d106      	bne.n	8002796 <main+0x3a6>
					//				EndEffector_Event(Run_Mode);
					//				HAL_Delay(300);
					EndEffector_Event(Place);
 8002788:	200a      	movs	r0, #10
 800278a:	f7ff f833 	bl	80017f4 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 800278e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002790:	b29b      	uxth	r3, r3
 8002792:	4aa9      	ldr	r2, [pc, #676]	; (8002a38 <main+0x648>)
 8002794:	8093      	strh	r3, [r2, #4]
				}
			}

			last_endeffecter_status = End_Effector_Status;
 8002796:	4ba8      	ldr	r3, [pc, #672]	; (8002a38 <main+0x648>)
 8002798:	889b      	ldrh	r3, [r3, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	4ba7      	ldr	r3, [pc, #668]	; (8002a3c <main+0x64c>)
 800279e:	601a      	str	r2, [r3, #0]

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 80027a0:	4ba5      	ldr	r3, [pc, #660]	; (8002a38 <main+0x648>)
 80027a2:	885b      	ldrh	r3, [r3, #2]
 80027a4:	461a      	mov	r2, r3
 80027a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d123      	bne.n	80027f4 <main+0x404>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80027ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4aa1      	ldr	r2, [pc, #644]	; (8002a38 <main+0x648>)
 80027b2:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff f81d 	bl	80017f4 <EndEffector_Event>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80027ba:	2200      	movs	r2, #0
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	48a0      	ldr	r0, [pc, #640]	; (8002a40 <main+0x650>)
 80027c0:	f003 fa72 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80027c4:	2201      	movs	r2, #1
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	489d      	ldr	r0, [pc, #628]	; (8002a40 <main+0x650>)
 80027ca:	f003 fa6d 	bl	8005ca8 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80027ce:	2200      	movs	r2, #0
 80027d0:	2120      	movs	r1, #32
 80027d2:	489b      	ldr	r0, [pc, #620]	; (8002a40 <main+0x650>)
 80027d4:	f003 fa68 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				Base_System_Status = 0;
 80027d8:	4a97      	ldr	r2, [pc, #604]	; (8002a38 <main+0x648>)
 80027da:	2300      	movs	r3, #0
 80027dc:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPick;
 80027de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4a95      	ldr	r2, [pc, #596]	; (8002a38 <main+0x648>)
 80027e4:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PICK;
 80027e6:	4a97      	ldr	r2, [pc, #604]	; (8002a44 <main+0x654>)
 80027e8:	2300      	movs	r3, #0
 80027ea:	7013      	strb	r3, [r2, #0]
				State = SETPICKTRAY;
 80027ec:	4a96      	ldr	r2, [pc, #600]	; (8002a48 <main+0x658>)
 80027ee:	2303      	movs	r3, #3
 80027f0:	7013      	strb	r3, [r2, #0]
 80027f2:	e028      	b.n	8002846 <main+0x456>
			} else if(Base_System_Status == BaseSystemStatusData.SetPlaceTray) {
 80027f4:	4b90      	ldr	r3, [pc, #576]	; (8002a38 <main+0x648>)
 80027f6:	885b      	ldrh	r3, [r3, #2]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d122      	bne.n	8002846 <main+0x456>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 8002800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002802:	b29b      	uxth	r3, r3
 8002804:	4a8c      	ldr	r2, [pc, #560]	; (8002a38 <main+0x648>)
 8002806:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 8002808:	2001      	movs	r0, #1
 800280a:	f7fe fff3 	bl	80017f4 <EndEffector_Event>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	488b      	ldr	r0, [pc, #556]	; (8002a40 <main+0x650>)
 8002814:	f003 fa48 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002818:	2201      	movs	r2, #1
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	4888      	ldr	r0, [pc, #544]	; (8002a40 <main+0x650>)
 800281e:	f003 fa43 	bl	8005ca8 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002822:	2200      	movs	r2, #0
 8002824:	2120      	movs	r1, #32
 8002826:	4886      	ldr	r0, [pc, #536]	; (8002a40 <main+0x650>)
 8002828:	f003 fa3e 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				Base_System_Status = 0;
 800282c:	4a82      	ldr	r2, [pc, #520]	; (8002a38 <main+0x648>)
 800282e:	2300      	movs	r3, #0
 8002830:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPlease;
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	b29b      	uxth	r3, r3
 8002836:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <main+0x648>)
 8002838:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PLACE;
 800283a:	4a82      	ldr	r2, [pc, #520]	; (8002a44 <main+0x654>)
 800283c:	2301      	movs	r3, #1
 800283e:	7013      	strb	r3, [r2, #0]
				State = SETPLACETRAY;
 8002840:	4a81      	ldr	r2, [pc, #516]	; (8002a48 <main+0x658>)
 8002842:	2304      	movs	r3, #4
 8002844:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.RunPointMode) {
 8002846:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <main+0x648>)
 8002848:	885b      	ldrh	r3, [r3, #2]
 800284a:	461a      	mov	r2, r3
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002850:	429a      	cmp	r2, r3
 8002852:	d166      	bne.n	8002922 <main+0x532>
				Base_System_Status = 0;
 8002854:	4a78      	ldr	r2, [pc, #480]	; (8002a38 <main+0x648>)
 8002856:	2300      	movs	r3, #0
 8002858:	8053      	strh	r3, [r2, #2]
//				EndEffector_Event(Run_Mode);
				x_axis_Target_Position = Goal_Point_x;
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <main+0x648>)
 800285c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002860:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <main+0x648>)
 8002862:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002868:	b29b      	uxth	r3, r3
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <main+0x648>)
 800286c:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80

				pos_i = PosY;
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <main+0x65c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <main+0x660>)
 8002876:	601a      	str	r2, [r3, #0]

				if(Goal_Point_y >= 0 && Goal_Point_y <= 3500) {
 8002878:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <main+0x648>)
 800287a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800287e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002882:	429a      	cmp	r2, r3
 8002884:	d80e      	bhi.n	80028a4 <main+0x4b4>
					pos_f = (float)Goal_Point_y/10;
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <main+0x648>)
 8002888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289c:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <main+0x664>)
 800289e:	edc3 7a00 	vstr	s15, [r3]
 80028a2:	e01e      	b.n	80028e2 <main+0x4f2>
				} else if(Goal_Point_y >= 65535-3500 && Goal_Point_y <= 65535) {
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <main+0x648>)
 80028a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80028aa:	f24f 2352 	movw	r3, #62034	; 0xf252
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d917      	bls.n	80028e2 <main+0x4f2>
					pos_f = -(float)(65536%Goal_Point_y)/10;
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <main+0x648>)
 80028b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028be:	fb92 f3f1 	sdiv	r3, r2, r1
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	eeb1 7a67 	vneg.f32	s14, s15
 80028d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <main+0x664>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
				}

				Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 80028e2:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <main+0x660>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fdda 	bl	80004a0 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <main+0x664>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fdd3 	bl	80004a0 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8002a20 <main+0x630>
 8002902:	ed9f 2b49 	vldr	d2, [pc, #292]	; 8002a28 <main+0x638>
 8002906:	ec43 2b11 	vmov	d1, r2, r3
 800290a:	ec45 4b10 	vmov	d0, r4, r5
 800290e:	f001 fa5f 	bl	8003dd0 <Trajectory_Gen>

				y_axis_Moving_Status = yaxisMovingStatusData.Gopoint;
 8002912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002914:	b29b      	uxth	r3, r3
 8002916:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <main+0x648>)
 8002918:	8413      	strh	r3, [r2, #32]
				State = RUNPOINTMODE;
 800291a:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <main+0x658>)
 800291c:	2306      	movs	r3, #6
 800291e:	7013      	strb	r3, [r2, #0]
 8002920:	e02b      	b.n	800297a <main+0x58a>

			} else if(Base_System_Status == BaseSystemStatusData.RunTrayMode) {
 8002922:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <main+0x648>)
 8002924:	885b      	ldrh	r3, [r3, #2]
 8002926:	461a      	mov	r2, r3
 8002928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292c:	429a      	cmp	r2, r3
 800292e:	d124      	bne.n	800297a <main+0x58a>

				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	4842      	ldr	r0, [pc, #264]	; (8002a40 <main+0x650>)
 8002936:	f003 f9b7 	bl	8005ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	4840      	ldr	r0, [pc, #256]	; (8002a40 <main+0x650>)
 8002940:	f003 f9b2 	bl	8005ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, SET);
 8002944:	2201      	movs	r2, #1
 8002946:	2120      	movs	r1, #32
 8002948:	483d      	ldr	r0, [pc, #244]	; (8002a40 <main+0x650>)
 800294a:	f003 f9ad 	bl	8005ca8 <HAL_GPIO_WritePin>

				Base_System_Status = 0;
 800294e:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <main+0x648>)
 8002950:	2300      	movs	r3, #0
 8002952:	8053      	strh	r3, [r2, #2]
				position_index = 0;
 8002954:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <main+0x668>)
 8002956:	2300      	movs	r3, #0
 8002958:	6013      	str	r3, [r2, #0]
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 800295a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295c:	b29b      	uxth	r3, r3
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <main+0x648>)
 8002960:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Run_Mode);
 8002962:	2006      	movs	r0, #6
 8002964:	f7fe ff46 	bl	80017f4 <EndEffector_Event>
				State = RUNTRAYMODE;
 8002968:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <main+0x658>)
 800296a:	2305      	movs	r3, #5
 800296c:	7013      	strb	r3, [r2, #0]
				State_Control = TRAJECTGEN;
 800296e:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <main+0x66c>)
 8002970:	2300      	movs	r3, #0
 8002972:	7013      	strb	r3, [r2, #0]
				State_RUNTRAYMODE = GOPICK;
 8002974:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <main+0x670>)
 8002976:	2300      	movs	r3, #0
 8002978:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.Home) {
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <main+0x648>)
 800297c:	885b      	ldrh	r3, [r3, #2]
 800297e:	461a      	mov	r2, r3
 8002980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002982:	429a      	cmp	r2, r3
 8002984:	f040 83d8 	bne.w	8003138 <main+0xd48>
				Base_System_Status = 0;
 8002988:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <main+0x648>)
 800298a:	2300      	movs	r3, #0
 800298c:	8053      	strh	r3, [r2, #2]
				State = INIT_HOMING;
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <main+0x658>)
 8002990:	2301      	movs	r3, #1
 8002992:	7013      	strb	r3, [r2, #0]
			}
			break;
 8002994:	e3d0      	b.n	8003138 <main+0xd48>

			case SETPICKTRAY:
			JoyStickControl();
 8002996:	f7ff f849 	bl	8001a2c <JoyStickControl>
			break;
 800299a:	e3d2      	b.n	8003142 <main+0xd52>

			case SETPLACETRAY:
			JoyStickControl();
 800299c:	f7ff f846 	bl	8001a2c <JoyStickControl>
			break;
 80029a0:	e3cf      	b.n	8003142 <main+0xd52>

			case RUNPOINTMODE:
			if (GetTicku >= timestamp_traject) {
 80029a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <main+0x674>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	4290      	cmp	r0, r2
 80029ae:	eb71 0303 	sbcs.w	r3, r1, r3
 80029b2:	d31f      	bcc.n	80029f4 <main+0x604>
				timestamp_traject = GetTicku + traject_us;
 80029b4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <main+0x678>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	1884      	adds	r4, r0, r2
 80029c0:	62bc      	str	r4, [r7, #40]	; 0x28
 80029c2:	eb41 0303 	adc.w	r3, r1, r3
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <main+0x674>)
 80029ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80029ce:	e9c3 1200 	strd	r1, r2, [r3]
				Trajectory_Eva();
 80029d2:	f001 fb51 	bl	8004078 <Trajectory_Eva>
				read_pos();
 80029d6:	f7fe fa5d 	bl	8000e94 <read_pos>
				PID(x);
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <main+0x67c>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f884 	bl	8000af0 <__aeabi_d2f>
 80029e8:	4603      	mov	r3, r0
 80029ea:	ee00 3a10 	vmov	s0, r3
 80029ee:	f001 f81b 	bl	8003a28 <PID>
				pos_i = PosY;
				y_axis_Moving_Status = 0;

				State = IDLE;
			}
			break;
 80029f2:	e3a6      	b.n	8003142 <main+0xd52>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <main+0x664>)
 80029f6:	ed93 7a00 	vldr	s14, [r3]
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <main+0x65c>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a04:	ee17 0a90 	vmov	r0, s15
 8002a08:	f7fd fd4a 	bl	80004a0 <__aeabi_f2d>
 8002a0c:	a308      	add	r3, pc, #32	; (adr r3, 8002a30 <main+0x640>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fe f819 	bl	8000a48 <__aeabi_dcmple>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d129      	bne.n	8002a70 <main+0x680>
			break;
 8002a1c:	e391      	b.n	8003142 <main+0xd52>
 8002a1e:	bf00      	nop
 8002a20:	00000000 	.word	0x00000000
 8002a24:	40b04100 	.word	0x40b04100
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	408d8800 	.word	0x408d8800
 8002a30:	9999999a 	.word	0x9999999a
 8002a34:	3fc99999 	.word	0x3fc99999
 8002a38:	20000e30 	.word	0x20000e30
 8002a3c:	2000108c 	.word	0x2000108c
 8002a40:	40020000 	.word	0x40020000
 8002a44:	20001076 	.word	0x20001076
 8002a48:	20000268 	.word	0x20000268
 8002a4c:	20000fd8 	.word	0x20000fd8
 8002a50:	20000910 	.word	0x20000910
 8002a54:	20000914 	.word	0x20000914
 8002a58:	2000106c 	.word	0x2000106c
 8002a5c:	20001075 	.word	0x20001075
 8002a60:	20001074 	.word	0x20001074
 8002a64:	200010a8 	.word	0x200010a8
 8002a68:	20000238 	.word	0x20000238
 8002a6c:	20000920 	.word	0x20000920
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002a70:	4baf      	ldr	r3, [pc, #700]	; (8002d30 <main+0x940>)
 8002a72:	ed93 7a00 	vldr	s14, [r3]
 8002a76:	4baf      	ldr	r3, [pc, #700]	; (8002d34 <main+0x944>)
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	ee17 0a90 	vmov	r0, s15
 8002a84:	f7fd fd0c 	bl	80004a0 <__aeabi_f2d>
 8002a88:	a3a1      	add	r3, pc, #644	; (adr r3, 8002d10 <main+0x920>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd ffe5 	bl	8000a5c <__aeabi_dcmpge>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d100      	bne.n	8002a9a <main+0x6aa>
			break;
 8002a98:	e353      	b.n	8003142 <main+0xd52>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002a9a:	4ba7      	ldr	r3, [pc, #668]	; (8002d38 <main+0x948>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6353      	str	r3, [r2, #52]	; 0x34
				Intregral = 0;
 8002aa2:	4aa6      	ldr	r2, [pc, #664]	; (8002d3c <main+0x94c>)
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	6013      	str	r3, [r2, #0]
				Dutyfeedback = 0;
 8002aaa:	4aa5      	ldr	r2, [pc, #660]	; (8002d40 <main+0x950>)
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	6013      	str	r3, [r2, #0]
				v = 0;
 8002ab2:	49a4      	ldr	r1, [pc, #656]	; (8002d44 <main+0x954>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9c1 2300 	strd	r2, r3, [r1]
				a = 0;
 8002ac0:	49a1      	ldr	r1, [pc, #644]	; (8002d48 <main+0x958>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9c1 2300 	strd	r2, r3, [r1]
				pos_i = PosY;
 8002ace:	4b99      	ldr	r3, [pc, #612]	; (8002d34 <main+0x944>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b9e      	ldr	r3, [pc, #632]	; (8002d4c <main+0x95c>)
 8002ad4:	601a      	str	r2, [r3, #0]
				y_axis_Moving_Status = 0;
 8002ad6:	4a9e      	ldr	r2, [pc, #632]	; (8002d50 <main+0x960>)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	8413      	strh	r3, [r2, #32]
				State = IDLE;
 8002adc:	4a9d      	ldr	r2, [pc, #628]	; (8002d54 <main+0x964>)
 8002ade:	2302      	movs	r3, #2
 8002ae0:	7013      	strb	r3, [r2, #0]
			break;
 8002ae2:	e32e      	b.n	8003142 <main+0xd52>

			case RUNTRAYMODE:
			switch (State_RUNTRAYMODE) {
 8002ae4:	4b9c      	ldr	r3, [pc, #624]	; (8002d58 <main+0x968>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <main+0x704>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f000 8149 	beq.w	8002d84 <main+0x994>
					break;
				}
				break;
			}

			break;
 8002af2:	e326      	b.n	8003142 <main+0xd52>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPick;
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4a95      	ldr	r2, [pc, #596]	; (8002d50 <main+0x960>)
 8002afa:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 8002afc:	4b97      	ldr	r3, [pc, #604]	; (8002d5c <main+0x96c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f000 80bc 	beq.w	8002c7e <main+0x88e>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f300 824d 	bgt.w	8002fa6 <main+0xbb6>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <main+0x726>
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d043      	beq.n	8002b9c <main+0x7ac>
				break;
 8002b14:	e247      	b.n	8002fa6 <main+0xbb6>
					pos_i = PosY;
 8002b16:	4b87      	ldr	r3, [pc, #540]	; (8002d34 <main+0x944>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b8c      	ldr	r3, [pc, #560]	; (8002d4c <main+0x95c>)
 8002b1c:	601a      	str	r2, [r3, #0]
					pos_f = Pick_Point_Y[position_index];
 8002b1e:	4b90      	ldr	r3, [pc, #576]	; (8002d60 <main+0x970>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a90      	ldr	r2, [pc, #576]	; (8002d64 <main+0x974>)
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <main+0x940>)
 8002b2c:	601a      	str	r2, [r3, #0]
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002b2e:	4b87      	ldr	r3, [pc, #540]	; (8002d4c <main+0x95c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcb4 	bl	80004a0 <__aeabi_f2d>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	460d      	mov	r5, r1
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <main+0x940>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fcad 	bl	80004a0 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	ed9f 3b73 	vldr	d3, [pc, #460]	; 8002d18 <main+0x928>
 8002b4e:	ed9f 2b74 	vldr	d2, [pc, #464]	; 8002d20 <main+0x930>
 8002b52:	ec43 2b11 	vmov	d1, r2, r3
 8002b56:	ec45 4b10 	vmov	d0, r4, r5
 8002b5a:	f001 f939 	bl	8003dd0 <Trajectory_Gen>
					if(x_axis_Moving_Status == 0) {
 8002b5e:	4b7c      	ldr	r3, [pc, #496]	; (8002d50 <main+0x960>)
 8002b60:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 80ce 	bne.w	8002d06 <main+0x916>
						x_axis_Target_Position= (int16_t)Pick_Point_X[position_index];
 8002b6a:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <main+0x970>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <main+0x978>)
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <main+0x960>)
 8002b86:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
						x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4a70      	ldr	r2, [pc, #448]	; (8002d50 <main+0x960>)
 8002b90:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
						State_Control = TRAJECTEVA_PID;
 8002b94:	4a71      	ldr	r2, [pc, #452]	; (8002d5c <main+0x96c>)
 8002b96:	2301      	movs	r3, #1
 8002b98:	7013      	strb	r3, [r2, #0]
					break;
 8002b9a:	e0b4      	b.n	8002d06 <main+0x916>
					if (GetTicku >= timestamp_traject) {
 8002b9c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <main+0x97c>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	4290      	cmp	r0, r2
 8002ba8:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bac:	d31f      	bcc.n	8002bee <main+0x7fe>
						timestamp_traject = GetTicku + traject_us;
 8002bae:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <main+0x980>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	1884      	adds	r4, r0, r2
 8002bba:	623c      	str	r4, [r7, #32]
 8002bbc:	eb41 0303 	adc.w	r3, r1, r3
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <main+0x97c>)
 8002bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002bc8:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002bcc:	f001 fa54 	bl	8004078 <Trajectory_Eva>
						read_pos();
 8002bd0:	f7fe f960 	bl	8000e94 <read_pos>
						PID(x);
 8002bd4:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <main+0x984>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7fd ff87 	bl	8000af0 <__aeabi_d2f>
 8002be2:	4603      	mov	r3, r0
 8002be4:	ee00 3a10 	vmov	s0, r3
 8002be8:	f000 ff1e 	bl	8003a28 <PID>
					break;
 8002bec:	e08e      	b.n	8002d0c <main+0x91c>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <main+0x940>)
 8002bf0:	ed93 7a00 	vldr	s14, [r3]
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <main+0x944>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	f7fd fc4d 	bl	80004a0 <__aeabi_f2d>
 8002c06:	a348      	add	r3, pc, #288	; (adr r3, 8002d28 <main+0x938>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd ff1c 	bl	8000a48 <__aeabi_dcmple>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <main+0x828>
					break;
 8002c16:	e079      	b.n	8002d0c <main+0x91c>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <main+0x940>)
 8002c1a:	ed93 7a00 	vldr	s14, [r3]
 8002c1e:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <main+0x944>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c28:	ee17 0a90 	vmov	r0, s15
 8002c2c:	f7fd fc38 	bl	80004a0 <__aeabi_f2d>
 8002c30:	a337      	add	r3, pc, #220	; (adr r3, 8002d10 <main+0x920>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd ff11 	bl	8000a5c <__aeabi_dcmpge>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d100      	bne.n	8002c42 <main+0x852>
					break;
 8002c40:	e064      	b.n	8002d0c <main+0x91c>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <main+0x948>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <main+0x94c>)
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 8002c52:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <main+0x950>)
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
						v = 0;
 8002c5a:	493a      	ldr	r1, [pc, #232]	; (8002d44 <main+0x954>)
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 8002c68:	4937      	ldr	r1, [pc, #220]	; (8002d48 <main+0x958>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9c1 2300 	strd	r2, r3, [r1]
						State_Control = TRAJECTGENNEXT;
 8002c76:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <main+0x96c>)
 8002c78:	2302      	movs	r3, #2
 8002c7a:	7013      	strb	r3, [r2, #0]
					break;
 8002c7c:	e046      	b.n	8002d0c <main+0x91c>
					if(flag == 0 && x_axis_Moving_Status == 0) {
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <main+0x988>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <main+0x8c8>
 8002c86:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <main+0x960>)
 8002c88:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <main+0x8c8>
						EndEffector_Event(Pick);
 8002c90:	2008      	movs	r0, #8
 8002c92:	f7fe fdaf 	bl	80017f4 <EndEffector_Event>
						timestamp_wait = HAL_GetTick()+2200;
 8002c96:	f002 f91b 	bl	8004ed0 <HAL_GetTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <main+0x98c>)
 8002ca8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cac:	e9c3 1200 	strd	r1, r2, [r3]
						flag = 1;
 8002cb0:	4a31      	ldr	r2, [pc, #196]	; (8002d78 <main+0x988>)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	6013      	str	r3, [r2, #0]
					break;
 8002cb6:	e028      	b.n	8002d0a <main+0x91a>
					} else if(flag == 1) {
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <main+0x988>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d124      	bne.n	8002d0a <main+0x91a>
						if(HAL_GetTick() >= timestamp_wait) {
 8002cc0:	f002 f906 	bl	8004ed0 <HAL_GetTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	469a      	mov	sl, r3
 8002cca:	4693      	mov	fp, r2
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <main+0x98c>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	4592      	cmp	sl, r2
 8002cd4:	eb7b 0303 	sbcs.w	r3, fp, r3
 8002cd8:	d317      	bcc.n	8002d0a <main+0x91a>
							flag = 0;
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <main+0x988>)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6013      	str	r3, [r2, #0]
							pos_i = PosY;
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <main+0x944>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <main+0x95c>)
 8002ce6:	601a      	str	r2, [r3, #0]
							pos_f = Place_Point_Y[position_index];
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <main+0x970>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <main+0x990>)
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <main+0x940>)
 8002cf6:	601a      	str	r2, [r3, #0]
							State_Control = TRAJECTGEN;
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <main+0x96c>)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	7013      	strb	r3, [r2, #0]
							State_RUNTRAYMODE = GOPLACE;
 8002cfe:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <main+0x968>)
 8002d00:	2301      	movs	r3, #1
 8002d02:	7013      	strb	r3, [r2, #0]
					break;
 8002d04:	e001      	b.n	8002d0a <main+0x91a>
					break;
 8002d06:	bf00      	nop
 8002d08:	e14d      	b.n	8002fa6 <main+0xbb6>
					break;
 8002d0a:	bf00      	nop
				break;
 8002d0c:	e14b      	b.n	8002fa6 <main+0xbb6>
 8002d0e:	bf00      	nop
 8002d10:	9999999a 	.word	0x9999999a
 8002d14:	bfc99999 	.word	0xbfc99999
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	40b04100 	.word	0x40b04100
 8002d20:	00000000 	.word	0x00000000
 8002d24:	408d8800 	.word	0x408d8800
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3fc99999 	.word	0x3fc99999
 8002d30:	20000914 	.word	0x20000914
 8002d34:	20000fd8 	.word	0x20000fd8
 8002d38:	20000444 	.word	0x20000444
 8002d3c:	2000093c 	.word	0x2000093c
 8002d40:	20000938 	.word	0x20000938
 8002d44:	20000928 	.word	0x20000928
 8002d48:	20000930 	.word	0x20000930
 8002d4c:	20000910 	.word	0x20000910
 8002d50:	20000e30 	.word	0x20000e30
 8002d54:	20000268 	.word	0x20000268
 8002d58:	20001074 	.word	0x20001074
 8002d5c:	20001075 	.word	0x20001075
 8002d60:	2000106c 	.word	0x2000106c
 8002d64:	20000fdc 	.word	0x20000fdc
 8002d68:	20001000 	.word	0x20001000
 8002d6c:	200010a8 	.word	0x200010a8
 8002d70:	20000238 	.word	0x20000238
 8002d74:	20000920 	.word	0x20000920
 8002d78:	20001090 	.word	0x20001090
 8002d7c:	20001098 	.word	0x20001098
 8002d80:	20001024 	.word	0x20001024
				y_axis_Moving_Status = yaxisMovingStatusData.GoPlace;
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4a9b      	ldr	r2, [pc, #620]	; (8002ff8 <main+0xc08>)
 8002d8a:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 8002d8c:	4b9b      	ldr	r3, [pc, #620]	; (8002ffc <main+0xc0c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f000 80b4 	beq.w	8002efe <main+0xb0e>
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	f300 8107 	bgt.w	8002faa <main+0xbba>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <main+0x9b6>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d037      	beq.n	8002e14 <main+0xa24>
				break;
 8002da4:	e101      	b.n	8002faa <main+0xbba>
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002da6:	4b96      	ldr	r3, [pc, #600]	; (8003000 <main+0xc10>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fb78 	bl	80004a0 <__aeabi_f2d>
 8002db0:	4604      	mov	r4, r0
 8002db2:	460d      	mov	r5, r1
 8002db4:	4b93      	ldr	r3, [pc, #588]	; (8003004 <main+0xc14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fb71 	bl	80004a0 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	ed9f 3b85 	vldr	d3, [pc, #532]	; 8002fd8 <main+0xbe8>
 8002dc6:	ed9f 2b86 	vldr	d2, [pc, #536]	; 8002fe0 <main+0xbf0>
 8002dca:	ec43 2b11 	vmov	d1, r2, r3
 8002dce:	ec45 4b10 	vmov	d0, r4, r5
 8002dd2:	f000 fffd 	bl	8003dd0 <Trajectory_Gen>
					if(x_axis_Moving_Status == 0) {
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <main+0xc08>)
 8002dd8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 80de 	bne.w	8002f9e <main+0xbae>
						x_axis_Target_Position= (int16_t)Place_Point_X[position_index];
 8002de2:	4b89      	ldr	r3, [pc, #548]	; (8003008 <main+0xc18>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a89      	ldr	r2, [pc, #548]	; (800300c <main+0xc1c>)
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df4:	ee17 3a90 	vmov	r3, s15
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <main+0xc08>)
 8002dfe:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
						x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4a7c      	ldr	r2, [pc, #496]	; (8002ff8 <main+0xc08>)
 8002e08:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
						State_Control = TRAJECTEVA_PID;
 8002e0c:	4a7b      	ldr	r2, [pc, #492]	; (8002ffc <main+0xc0c>)
 8002e0e:	2301      	movs	r3, #1
 8002e10:	7013      	strb	r3, [r2, #0]
					break;
 8002e12:	e0c4      	b.n	8002f9e <main+0xbae>
					if (GetTicku >= timestamp_traject) {
 8002e14:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002e18:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <main+0xc20>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	4290      	cmp	r0, r2
 8002e20:	eb71 0303 	sbcs.w	r3, r1, r3
 8002e24:	d31f      	bcc.n	8002e66 <main+0xa76>
						timestamp_traject = GetTicku + traject_us;
 8002e26:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	; (8003014 <main+0xc24>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	1884      	adds	r4, r0, r2
 8002e32:	613c      	str	r4, [r7, #16]
 8002e34:	eb41 0303 	adc.w	r3, r1, r3
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	4b75      	ldr	r3, [pc, #468]	; (8003010 <main+0xc20>)
 8002e3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e40:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002e44:	f001 f918 	bl	8004078 <Trajectory_Eva>
						read_pos();
 8002e48:	f7fe f824 	bl	8000e94 <read_pos>
						PID(x);
 8002e4c:	4b72      	ldr	r3, [pc, #456]	; (8003018 <main+0xc28>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f7fd fe4b 	bl	8000af0 <__aeabi_d2f>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	ee00 3a10 	vmov	s0, r3
 8002e60:	f000 fde2 	bl	8003a28 <PID>
					break;
 8002e64:	e09e      	b.n	8002fa4 <main+0xbb4>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary) {
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <main+0xc14>)
 8002e68:	ed93 7a00 	vldr	s14, [r3]
 8002e6c:	4b6b      	ldr	r3, [pc, #428]	; (800301c <main+0xc2c>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	ee17 0a90 	vmov	r0, s15
 8002e7a:	f7fd fb11 	bl	80004a0 <__aeabi_f2d>
 8002e7e:	a35a      	add	r3, pc, #360	; (adr r3, 8002fe8 <main+0xbf8>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd fde0 	bl	8000a48 <__aeabi_dcmple>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d100      	bne.n	8002e90 <main+0xaa0>
					break;
 8002e8e:	e089      	b.n	8002fa4 <main+0xbb4>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary) {
 8002e90:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <main+0xc14>)
 8002e92:	ed93 7a00 	vldr	s14, [r3]
 8002e96:	4b61      	ldr	r3, [pc, #388]	; (800301c <main+0xc2c>)
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fafc 	bl	80004a0 <__aeabi_f2d>
 8002ea8:	a351      	add	r3, pc, #324	; (adr r3, 8002ff0 <main+0xc00>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fdd5 	bl	8000a5c <__aeabi_dcmpge>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d100      	bne.n	8002eba <main+0xaca>
					break;
 8002eb8:	e074      	b.n	8002fa4 <main+0xbb4>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002eba:	4b59      	ldr	r3, [pc, #356]	; (8003020 <main+0xc30>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 8002ec2:	4a58      	ldr	r2, [pc, #352]	; (8003024 <main+0xc34>)
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 8002eca:	4a57      	ldr	r2, [pc, #348]	; (8003028 <main+0xc38>)
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]
						v = 0;
 8002ed2:	4956      	ldr	r1, [pc, #344]	; (800302c <main+0xc3c>)
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 8002ee0:	4953      	ldr	r1, [pc, #332]	; (8003030 <main+0xc40>)
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
						pos_i = PosY;
 8002eee:	4b4b      	ldr	r3, [pc, #300]	; (800301c <main+0xc2c>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <main+0xc10>)
 8002ef4:	601a      	str	r2, [r3, #0]
						State_Control = TRAJECTGENNEXT;
 8002ef6:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <main+0xc0c>)
 8002ef8:	2302      	movs	r3, #2
 8002efa:	7013      	strb	r3, [r2, #0]
					break;
 8002efc:	e052      	b.n	8002fa4 <main+0xbb4>
					if(flag == 0 && x_axis_Moving_Status == 0) {
 8002efe:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <main+0xc44>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <main+0xb48>
 8002f06:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <main+0xc08>)
 8002f08:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <main+0xb48>
						EndEffector_Event(Place);
 8002f10:	200a      	movs	r0, #10
 8002f12:	f7fe fc6f 	bl	80017f4 <EndEffector_Event>
						timestamp_wait = HAL_GetTick()+2200;
 8002f16:	f001 ffdb 	bl	8004ed0 <HAL_GetTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8002f20:	2200      	movs	r2, #0
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	60fa      	str	r2, [r7, #12]
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <main+0xc48>)
 8002f28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f2c:	e9c3 1200 	strd	r1, r2, [r3]
						flag = 1;
 8002f30:	4a40      	ldr	r2, [pc, #256]	; (8003034 <main+0xc44>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	6013      	str	r3, [r2, #0]
					break;
 8002f36:	e034      	b.n	8002fa2 <main+0xbb2>
					} else if(flag == 1) {
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <main+0xc44>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d130      	bne.n	8002fa2 <main+0xbb2>
						if(HAL_GetTick() >= timestamp_wait) {
 8002f40:	f001 ffc6 	bl	8004ed0 <HAL_GetTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2200      	movs	r2, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <main+0xc48>)
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f56:	4621      	mov	r1, r4
 8002f58:	4291      	cmp	r1, r2
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002f60:	d31f      	bcc.n	8002fa2 <main+0xbb2>
							flag = 0;
 8002f62:	4a34      	ldr	r2, [pc, #208]	; (8003034 <main+0xc44>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	6013      	str	r3, [r2, #0]
							if(position_index < 8) {
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <main+0xc18>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	dc0f      	bgt.n	8002f90 <main+0xba0>
								pos_i = PosY;
 8002f70:	4b2a      	ldr	r3, [pc, #168]	; (800301c <main+0xc2c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <main+0xc10>)
 8002f76:	601a      	str	r2, [r3, #0]
								position_index++;
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <main+0xc18>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <main+0xc18>)
 8002f80:	601a      	str	r2, [r3, #0]
								State_Control = TRAJECTGEN;
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <main+0xc0c>)
 8002f84:	2300      	movs	r3, #0
 8002f86:	7013      	strb	r3, [r2, #0]
								State_RUNTRAYMODE = GOPICK;
 8002f88:	4a2c      	ldr	r2, [pc, #176]	; (800303c <main+0xc4c>)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	7013      	strb	r3, [r2, #0]
					break;
 8002f8e:	e008      	b.n	8002fa2 <main+0xbb2>
								y_axis_Moving_Status = 0;
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <main+0xc08>)
 8002f92:	2300      	movs	r3, #0
 8002f94:	8413      	strh	r3, [r2, #32]
								State = INIT_HOMING;
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <main+0xc50>)
 8002f98:	2301      	movs	r3, #1
 8002f9a:	7013      	strb	r3, [r2, #0]
					break;
 8002f9c:	e001      	b.n	8002fa2 <main+0xbb2>
					break;
 8002f9e:	bf00      	nop
 8002fa0:	e003      	b.n	8002faa <main+0xbba>
					break;
 8002fa2:	bf00      	nop
				break;
 8002fa4:	e001      	b.n	8002faa <main+0xbba>
				break;
 8002fa6:	bf00      	nop
 8002fa8:	e0cb      	b.n	8003142 <main+0xd52>
				break;
 8002faa:	bf00      	nop
			break;
 8002fac:	e0c9      	b.n	8003142 <main+0xd52>

			case EMERGENCY_LIMIT:
			if(HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == 0) {
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4824      	ldr	r0, [pc, #144]	; (8003044 <main+0xc54>)
 8002fb2:	f002 fe61 	bl	8005c78 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 80bf 	bne.w	800313c <main+0xd4c>
				EndEffector_Event(Out_Emergency);
 8002fbe:	2005      	movs	r0, #5
 8002fc0:	f7fe fc18 	bl	80017f4 <EndEffector_Event>
				State = LAST_STATE;
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <main+0xc58>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <main+0xc50>)
 8002fcc:	7013      	strb	r3, [r2, #0]
				LAST_STATE = 0;
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <main+0xc58>)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
			}
			break;
 8002fd4:	e0b2      	b.n	800313c <main+0xd4c>
 8002fd6:	bf00      	nop
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	40b04100 	.word	0x40b04100
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	408d8800 	.word	0x408d8800
 8002fe8:	9999999a 	.word	0x9999999a
 8002fec:	3fc99999 	.word	0x3fc99999
 8002ff0:	9999999a 	.word	0x9999999a
 8002ff4:	bfc99999 	.word	0xbfc99999
 8002ff8:	20000e30 	.word	0x20000e30
 8002ffc:	20001075 	.word	0x20001075
 8003000:	20000910 	.word	0x20000910
 8003004:	20000914 	.word	0x20000914
 8003008:	2000106c 	.word	0x2000106c
 800300c:	20001048 	.word	0x20001048
 8003010:	200010a8 	.word	0x200010a8
 8003014:	20000238 	.word	0x20000238
 8003018:	20000920 	.word	0x20000920
 800301c:	20000fd8 	.word	0x20000fd8
 8003020:	20000444 	.word	0x20000444
 8003024:	2000093c 	.word	0x2000093c
 8003028:	20000938 	.word	0x20000938
 800302c:	20000928 	.word	0x20000928
 8003030:	20000930 	.word	0x20000930
 8003034:	20001090 	.word	0x20001090
 8003038:	20001098 	.word	0x20001098
 800303c:	20001074 	.word	0x20001074
 8003040:	20000268 	.word	0x20000268
 8003044:	40020800 	.word	0x40020800
 8003048:	20001070 	.word	0x20001070

			case SENSOR_CHECK:
			read_pos();
 800304c:	f7fd ff22 	bl	8000e94 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,Photoelectric_sensor_1_Pin);
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	483f      	ldr	r0, [pc, #252]	; (8003150 <main+0xd60>)
 8003054:	f002 fe10 	bl	8005c78 <HAL_GPIO_ReadPin>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <main+0xd64>)
 800305e:	601a      	str	r2, [r3, #0]
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,Photoelectric_sensor_2_Pin);
 8003060:	2104      	movs	r1, #4
 8003062:	483d      	ldr	r0, [pc, #244]	; (8003158 <main+0xd68>)
 8003064:	f002 fe08 	bl	8005c78 <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <main+0xd64>)
 800306e:	605a      	str	r2, [r3, #4]
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,Photoelectric_sensor_3_Pin);
 8003070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003074:	4838      	ldr	r0, [pc, #224]	; (8003158 <main+0xd68>)
 8003076:	f002 fdff 	bl	8005c78 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	4b35      	ldr	r3, [pc, #212]	; (8003154 <main+0xd64>)
 8003080:	609a      	str	r2, [r3, #8]
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port,Emergency_Pin);
 8003082:	2108      	movs	r1, #8
 8003084:	4832      	ldr	r0, [pc, #200]	; (8003150 <main+0xd60>)
 8003086:	f002 fdf7 	bl	8005c78 <HAL_GPIO_ReadPin>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <main+0xd64>)
 8003090:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <main+0xd64>)
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10f      	bne.n	80030ba <main+0xcca>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 800309a:	2201      	movs	r2, #1
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	482f      	ldr	r0, [pc, #188]	; (800315c <main+0xd6c>)
 80030a0:	f002 fe02 	bl	8005ca8 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	482c      	ldr	r0, [pc, #176]	; (800315c <main+0xd6c>)
 80030aa:	f002 fdfd 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80030ae:	2200      	movs	r2, #0
 80030b0:	2120      	movs	r1, #32
 80030b2:	482a      	ldr	r0, [pc, #168]	; (800315c <main+0xd6c>)
 80030b4:	f002 fdf8 	bl	8005ca8 <HAL_GPIO_WritePin>
 80030b8:	e036      	b.n	8003128 <main+0xd38>
						RESET);
			} else if (GPIO_test.ramp == 2) {
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <main+0xd64>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d10f      	bne.n	80030e2 <main+0xcf2>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80030c2:	2200      	movs	r2, #0
 80030c4:	2140      	movs	r1, #64	; 0x40
 80030c6:	4825      	ldr	r0, [pc, #148]	; (800315c <main+0xd6c>)
 80030c8:	f002 fdee 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80030cc:	2201      	movs	r2, #1
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	4822      	ldr	r0, [pc, #136]	; (800315c <main+0xd6c>)
 80030d2:	f002 fde9 	bl	8005ca8 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80030d6:	2200      	movs	r2, #0
 80030d8:	2120      	movs	r1, #32
 80030da:	4820      	ldr	r0, [pc, #128]	; (800315c <main+0xd6c>)
 80030dc:	f002 fde4 	bl	8005ca8 <HAL_GPIO_WritePin>
 80030e0:	e022      	b.n	8003128 <main+0xd38>
						RESET);
			} else if (GPIO_test.ramp == 3) {
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <main+0xd64>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d10f      	bne.n	800310a <main+0xd1a>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80030ea:	2200      	movs	r2, #0
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	481b      	ldr	r0, [pc, #108]	; (800315c <main+0xd6c>)
 80030f0:	f002 fdda 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	4818      	ldr	r0, [pc, #96]	; (800315c <main+0xd6c>)
 80030fa:	f002 fdd5 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80030fe:	2201      	movs	r2, #1
 8003100:	2120      	movs	r1, #32
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <main+0xd6c>)
 8003104:	f002 fdd0 	bl	8005ca8 <HAL_GPIO_WritePin>
 8003108:	e00e      	b.n	8003128 <main+0xd38>
						SET);
			} else {
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 800310a:	2200      	movs	r2, #0
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	4813      	ldr	r0, [pc, #76]	; (800315c <main+0xd6c>)
 8003110:	f002 fdca 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	4810      	ldr	r0, [pc, #64]	; (800315c <main+0xd6c>)
 800311a:	f002 fdc5 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 800311e:	2200      	movs	r2, #0
 8003120:	2120      	movs	r1, #32
 8003122:	480e      	ldr	r0, [pc, #56]	; (800315c <main+0xd6c>)
 8003124:	f002 fdc0 	bl	8005ca8 <HAL_GPIO_WritePin>
						RESET);
			}

			if(go_next == 1 ) {
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <main+0xd70>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <main+0xd50>
				State = INIT;
 8003130:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <main+0xd74>)
 8003132:	2300      	movs	r3, #0
 8003134:	7013      	strb	r3, [r2, #0]
			}

			break;
 8003136:	e003      	b.n	8003140 <main+0xd50>
			break;
 8003138:	bf00      	nop
 800313a:	e002      	b.n	8003142 <main+0xd52>
			break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <main+0xd52>
			break;
 8003140:	bf00      	nop
		}

		if (Re == 1) {
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <main+0xd78>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	f47f aa20 	bne.w	800258c <main+0x19c>
			NVIC_SystemReset();
 800314c:	f7ff f938 	bl	80023c0 <__NVIC_SystemReset>
 8003150:	40020800 	.word	0x40020800
 8003154:	20000fc0 	.word	0x20000fc0
 8003158:	40020400 	.word	0x40020400
 800315c:	40020000 	.word	0x40020000
 8003160:	20000918 	.word	0x20000918
 8003164:	20000268 	.word	0x20000268
 8003168:	20000919 	.word	0x20000919

0800316c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b094      	sub	sp, #80	; 0x50
 8003170:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	2230      	movs	r2, #48	; 0x30
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f007 fd14 	bl	800aba8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <SystemClock_Config+0xc8>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <SystemClock_Config+0xc8>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <SystemClock_Config+0xc8>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <SystemClock_Config+0xcc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a20      	ldr	r2, [pc, #128]	; (8003238 <SystemClock_Config+0xcc>)
 80031b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <SystemClock_Config+0xcc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d2:	2302      	movs	r3, #2
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80031dc:	2304      	movs	r3, #4
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80031e8:	2304      	movs	r3, #4
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fd21 	bl	8006c38 <HAL_RCC_OscConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <SystemClock_Config+0x94>
		Error_Handler();
 80031fc:	f000 fc0e 	bl	8003a1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003200:	230f      	movs	r3, #15
 8003202:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003204:	2302      	movs	r3, #2
 8003206:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800320c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003210:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	2103      	movs	r1, #3
 800321c:	4618      	mov	r0, r3
 800321e:	f003 ff83 	bl	8007128 <HAL_RCC_ClockConfig>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <SystemClock_Config+0xc0>
		Error_Handler();
 8003228:	f000 fbf8 	bl	8003a1c <Error_Handler>
	}
}
 800322c:	bf00      	nop
 800322e:	3750      	adds	r7, #80	; 0x50
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000

0800323c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <MX_I2C2_Init+0x50>)
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <MX_I2C2_Init+0x54>)
 8003244:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <MX_I2C2_Init+0x50>)
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <MX_I2C2_Init+0x58>)
 800324a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <MX_I2C2_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_I2C2_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <MX_I2C2_Init+0x50>)
 800325a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800325e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <MX_I2C2_Init+0x50>)
 8003262:	2200      	movs	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <MX_I2C2_Init+0x50>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <MX_I2C2_Init+0x50>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <MX_I2C2_Init+0x50>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003278:	4804      	ldr	r0, [pc, #16]	; (800328c <MX_I2C2_Init+0x50>)
 800327a:	f002 fd47 	bl	8005d0c <HAL_I2C_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8003284:	f000 fbca 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000398 	.word	0x20000398
 8003290:	40005800 	.word	0x40005800
 8003294:	000186a0 	.word	0x000186a0

08003298 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <MX_SPI3_Init+0x64>)
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <MX_SPI3_Init+0x68>)
 80032a0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <MX_SPI3_Init+0x64>)
 80032a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_SPI3_Init+0x64>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <MX_SPI3_Init+0x64>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <MX_SPI3_Init+0x64>)
 80032b8:	2202      	movs	r2, #2
 80032ba:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MX_SPI3_Init+0x64>)
 80032be:	2201      	movs	r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <MX_SPI3_Init+0x64>)
 80032c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <MX_SPI3_Init+0x64>)
 80032cc:	2238      	movs	r2, #56	; 0x38
 80032ce:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <MX_SPI3_Init+0x64>)
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <MX_SPI3_Init+0x64>)
 80032d8:	2200      	movs	r2, #0
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <MX_SPI3_Init+0x64>)
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <MX_SPI3_Init+0x64>)
 80032e4:	220a      	movs	r2, #10
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80032e8:	4804      	ldr	r0, [pc, #16]	; (80032fc <MX_SPI3_Init+0x64>)
 80032ea:	f004 f93d 	bl	8007568 <HAL_SPI_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_SPI3_Init+0x60>
		Error_Handler();
 80032f4:	f000 fb92 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200003ec 	.word	0x200003ec
 8003300:	40003c00 	.word	0x40003c00

08003304 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b096      	sub	sp, #88	; 0x58
 8003308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800330a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	609a      	str	r2, [r3, #8]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	615a      	str	r2, [r3, #20]
 8003334:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	2220      	movs	r2, #32
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f007 fc33 	bl	800aba8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <MX_TIM1_Init+0x138>)
 8003344:	4a3e      	ldr	r2, [pc, #248]	; (8003440 <MX_TIM1_Init+0x13c>)
 8003346:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <MX_TIM1_Init+0x138>)
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <MX_TIM1_Init+0x138>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <MX_TIM1_Init+0x138>)
 8003356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800335c:	4b37      	ldr	r3, [pc, #220]	; (800343c <MX_TIM1_Init+0x138>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <MX_TIM1_Init+0x138>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <MX_TIM1_Init+0x138>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800336e:	4833      	ldr	r0, [pc, #204]	; (800343c <MX_TIM1_Init+0x138>)
 8003370:	f004 fbf0 	bl	8007b54 <HAL_TIM_Base_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800337a:	f000 fb4f 	bl	8003a1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800337e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003382:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003388:	4619      	mov	r1, r3
 800338a:	482c      	ldr	r0, [pc, #176]	; (800343c <MX_TIM1_Init+0x138>)
 800338c:	f005 facc 	bl	8008928 <HAL_TIM_ConfigClockSource>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM1_Init+0x96>
		Error_Handler();
 8003396:	f000 fb41 	bl	8003a1c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800339a:	4828      	ldr	r0, [pc, #160]	; (800343c <MX_TIM1_Init+0x138>)
 800339c:	f004 fd58 	bl	8007e50 <HAL_TIM_PWM_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM1_Init+0xa6>
		Error_Handler();
 80033a6:	f000 fb39 	bl	8003a1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80033b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033b6:	4619      	mov	r1, r3
 80033b8:	4820      	ldr	r0, [pc, #128]	; (800343c <MX_TIM1_Init+0x138>)
 80033ba:	f006 f845 	bl	8009448 <HAL_TIMEx_MasterConfigSynchronization>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80033c4:	f000 fb2a 	bl	8003a1c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c8:	2360      	movs	r3, #96	; 0x60
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	2200      	movs	r2, #0
 80033ea:	4619      	mov	r1, r3
 80033ec:	4813      	ldr	r0, [pc, #76]	; (800343c <MX_TIM1_Init+0x138>)
 80033ee:	f005 f9d9 	bl	80087a4 <HAL_TIM_PWM_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80033f8:	f000 fb10 	bl	8003a1c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003414:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4807      	ldr	r0, [pc, #28]	; (800343c <MX_TIM1_Init+0x138>)
 8003420:	f006 f880 	bl	8009524 <HAL_TIMEx_ConfigBreakDeadTime>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 800342a:	f000 faf7 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800342e:	4803      	ldr	r0, [pc, #12]	; (800343c <MX_TIM1_Init+0x138>)
 8003430:	f001 fb3a 	bl	8004aa8 <HAL_TIM_MspPostInit>

}
 8003434:	bf00      	nop
 8003436:	3758      	adds	r7, #88	; 0x58
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000444 	.word	0x20000444
 8003440:	40010000 	.word	0x40010000

08003444 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f007 fba8 	bl	800aba8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <MX_TIM2_Init+0xa4>)
 8003462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003466:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <MX_TIM2_Init+0xa4>)
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <MX_TIM2_Init+0xa4>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <MX_TIM2_Init+0xa4>)
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <MX_TIM2_Init+0xa4>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <MX_TIM2_Init+0xa4>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003488:	2303      	movs	r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8003498:	230f      	movs	r3, #15
 800349a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034a0:	2301      	movs	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 80034a8:	230f      	movs	r3, #15
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	4619      	mov	r1, r3
 80034b2:	480d      	ldr	r0, [pc, #52]	; (80034e8 <MX_TIM2_Init+0xa4>)
 80034b4:	f004 feb0 	bl	8008218 <HAL_TIM_Encoder_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80034be:	f000 faad 	bl	8003a1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <MX_TIM2_Init+0xa4>)
 80034d0:	f005 ffba 	bl	8009448 <HAL_TIMEx_MasterConfigSynchronization>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80034da:	f000 fa9f 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80034de:	bf00      	nop
 80034e0:	3730      	adds	r7, #48	; 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200004f8 	.word	0x200004f8

080034ec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003500:	463b      	mov	r3, r7
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <MX_TIM3_Init+0x94>)
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <MX_TIM3_Init+0x98>)
 800350c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <MX_TIM3_Init+0x94>)
 8003510:	2263      	movs	r2, #99	; 0x63
 8003512:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <MX_TIM3_Init+0x94>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <MX_TIM3_Init+0x94>)
 800351c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003520:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <MX_TIM3_Init+0x94>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_TIM3_Init+0x94>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800352e:	4814      	ldr	r0, [pc, #80]	; (8003580 <MX_TIM3_Init+0x94>)
 8003530:	f004 fb10 	bl	8007b54 <HAL_TIM_Base_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM3_Init+0x52>
		Error_Handler();
 800353a:	f000 fa6f 	bl	8003a1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800353e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003542:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	4619      	mov	r1, r3
 800354a:	480d      	ldr	r0, [pc, #52]	; (8003580 <MX_TIM3_Init+0x94>)
 800354c:	f005 f9ec 	bl	8008928 <HAL_TIM_ConfigClockSource>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8003556:	f000 fa61 	bl	8003a1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003562:	463b      	mov	r3, r7
 8003564:	4619      	mov	r1, r3
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <MX_TIM3_Init+0x94>)
 8003568:	f005 ff6e 	bl	8009448 <HAL_TIMEx_MasterConfigSynchronization>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8003572:	f000 fa53 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200005ac 	.word	0x200005ac
 8003584:	40000400 	.word	0x40000400

08003588 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800359c:	463b      	mov	r3, r7
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <MX_TIM5_Init+0x94>)
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <MX_TIM5_Init+0x98>)
 80035a8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <MX_TIM5_Init+0x94>)
 80035ac:	2263      	movs	r2, #99	; 0x63
 80035ae:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <MX_TIM5_Init+0x94>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <MX_TIM5_Init+0x94>)
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <MX_TIM5_Init+0x94>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <MX_TIM5_Init+0x94>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80035ca:	4814      	ldr	r0, [pc, #80]	; (800361c <MX_TIM5_Init+0x94>)
 80035cc:	f004 fac2 	bl	8007b54 <HAL_TIM_Base_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM5_Init+0x52>
		Error_Handler();
 80035d6:	f000 fa21 	bl	8003a1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80035e0:	f107 0308 	add.w	r3, r7, #8
 80035e4:	4619      	mov	r1, r3
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <MX_TIM5_Init+0x94>)
 80035e8:	f005 f99e 	bl	8008928 <HAL_TIM_ConfigClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM5_Init+0x6e>
		Error_Handler();
 80035f2:	f000 fa13 	bl	8003a1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80035fe:	463b      	mov	r3, r7
 8003600:	4619      	mov	r1, r3
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM5_Init+0x94>)
 8003604:	f005 ff20 	bl	8009448 <HAL_TIMEx_MasterConfigSynchronization>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800360e:	f000 fa05 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000660 	.word	0x20000660
 8003620:	40000c00 	.word	0x40000c00

08003624 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
 8003638:	615a      	str	r2, [r3, #20]
 800363a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <MX_TIM11_Init+0xa0>)
 800363e:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <MX_TIM11_Init+0xa4>)
 8003640:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003644:	2263      	movs	r2, #99	; 0x63
 8003646:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <MX_TIM11_Init+0xa0>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003650:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003654:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <MX_TIM11_Init+0xa0>)
 800365e:	2200      	movs	r2, #0
 8003660:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8003662:	4818      	ldr	r0, [pc, #96]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003664:	f004 fa76 	bl	8007b54 <HAL_TIM_Base_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM11_Init+0x4e>
		Error_Handler();
 800366e:	f000 f9d5 	bl	8003a1c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003674:	f004 fb86 	bl	8007d84 <HAL_TIM_OC_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM11_Init+0x5e>
		Error_Handler();
 800367e:	f000 f9cd 	bl	8003a1c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003682:	2108      	movs	r1, #8
 8003684:	480f      	ldr	r0, [pc, #60]	; (80036c4 <MX_TIM11_Init+0xa0>)
 8003686:	f004 fcf9 	bl	800807c <HAL_TIM_OnePulse_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM11_Init+0x70>
		Error_Handler();
 8003690:	f000 f9c4 	bl	8003a1c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003694:	2310      	movs	r3, #16
 8003696:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8003698:	f240 5399 	movw	r3, #1433	; 0x599
 800369c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	2200      	movs	r2, #0
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <MX_TIM11_Init+0xa0>)
 80036ae:	f005 f81d 	bl	80086ec <HAL_TIM_OC_ConfigChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80036b8:	f000 f9b0 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000714 	.word	0x20000714
 80036c8:	40014800 	.word	0x40014800

080036cc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <MX_USART2_UART_Init+0x54>)
 80036d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036d8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80036dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036f6:	220c      	movs	r2, #12
 80036f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <MX_USART2_UART_Init+0x50>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_USART2_UART_Init+0x50>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003706:	4805      	ldr	r0, [pc, #20]	; (800371c <MX_USART2_UART_Init+0x50>)
 8003708:	f005 ff7c 	bl	8009604 <HAL_UART_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8003712:	f000 f983 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	200007c8 	.word	0x200007c8
 8003720:	40004400 	.word	0x40004400

08003724 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <MX_USART6_UART_Init+0x50>)
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <MX_USART6_UART_Init+0x54>)
 800372c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003734:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800373c:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <MX_USART6_UART_Init+0x50>)
 800374e:	220c      	movs	r2, #12
 8003750:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <MX_USART6_UART_Init+0x50>)
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <MX_USART6_UART_Init+0x50>)
 8003760:	f005 ff50 	bl	8009604 <HAL_UART_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 800376a:	f000 f957 	bl	8003a1c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000083c 	.word	0x2000083c
 8003778:	40011400 	.word	0x40011400

0800377c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <MX_DMA_Init+0x3c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <MX_DMA_Init+0x3c>)
 800378c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <MX_DMA_Init+0x3c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	2011      	movs	r0, #17
 80037a4:	f001 fc9f 	bl	80050e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80037a8:	2011      	movs	r0, #17
 80037aa:	f001 fcb8 	bl	800511e <HAL_NVIC_EnableIRQ>

}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <MX_GPIO_Init+0x18c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a5b      	ldr	r2, [pc, #364]	; (8003948 <MX_GPIO_Init+0x18c>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <MX_GPIO_Init+0x18c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b55      	ldr	r3, [pc, #340]	; (8003948 <MX_GPIO_Init+0x18c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a54      	ldr	r2, [pc, #336]	; (8003948 <MX_GPIO_Init+0x18c>)
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b52      	ldr	r3, [pc, #328]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a4d      	ldr	r2, [pc, #308]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <MX_GPIO_Init+0x18c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <MX_GPIO_Init+0x18c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a46      	ldr	r2, [pc, #280]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a3f      	ldr	r2, [pc, #252]	; (8003948 <MX_GPIO_Init+0x18c>)
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b3d      	ldr	r3, [pc, #244]	; (8003948 <MX_GPIO_Init+0x18c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800385e:	2200      	movs	r2, #0
 8003860:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8003864:	4839      	ldr	r0, [pc, #228]	; (800394c <MX_GPIO_Init+0x190>)
 8003866:	f002 fa1f 	bl	8005ca8 <HAL_GPIO_WritePin>
			Switch_Relay_3_Pin | Switch_Relay_1_Pin | Switch_Relay_2_Pin
					| DIR_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 800386a:	2200      	movs	r2, #0
 800386c:	2104      	movs	r1, #4
 800386e:	4838      	ldr	r0, [pc, #224]	; (8003950 <MX_GPIO_Init+0x194>)
 8003870:	f002 fa1a 	bl	8005ca8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Photoelectric_sensor_1_Pin;
 8003874:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8003878:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800387a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800387e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	4619      	mov	r1, r3
 800388a:	4832      	ldr	r0, [pc, #200]	; (8003954 <MX_GPIO_Init+0x198>)
 800388c:	f002 f870 	bl	8005970 <HAL_GPIO_Init>

	/*Configure GPIO pin : Emergency_Pin */
	GPIO_InitStruct.Pin = Emergency_Pin;
 8003890:	2308      	movs	r3, #8
 8003892:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003894:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003898:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	482b      	ldr	r0, [pc, #172]	; (8003954 <MX_GPIO_Init+0x198>)
 80038a6:	f002 f863 	bl	8005970 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_3_Pin | Switch_Relay_1_Pin
 80038aa:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80038ae:	617b      	str	r3, [r7, #20]
			| Switch_Relay_2_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	4822      	ldr	r0, [pc, #136]	; (800394c <MX_GPIO_Init+0x190>)
 80038c4:	f002 f854 	bl	8005970 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 80038c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80038cc:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	481e      	ldr	r0, [pc, #120]	; (8003958 <MX_GPIO_Init+0x19c>)
 80038e0:	f002 f846 	bl	8005970 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 80038e4:	2304      	movs	r3, #4
 80038e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4619      	mov	r1, r3
 80038fa:	4815      	ldr	r0, [pc, #84]	; (8003950 <MX_GPIO_Init+0x194>)
 80038fc:	f002 f838 	bl	8005970 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003900:	2200      	movs	r2, #0
 8003902:	2100      	movs	r1, #0
 8003904:	2008      	movs	r0, #8
 8003906:	f001 fbee 	bl	80050e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800390a:	2008      	movs	r0, #8
 800390c:	f001 fc07 	bl	800511e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	2009      	movs	r0, #9
 8003916:	f001 fbe6 	bl	80050e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800391a:	2009      	movs	r0, #9
 800391c:	f001 fbff 	bl	800511e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003920:	2200      	movs	r2, #0
 8003922:	2100      	movs	r1, #0
 8003924:	2017      	movs	r0, #23
 8003926:	f001 fbde 	bl	80050e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800392a:	2017      	movs	r0, #23
 800392c:	f001 fbf7 	bl	800511e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003930:	2200      	movs	r2, #0
 8003932:	2100      	movs	r1, #0
 8003934:	2028      	movs	r0, #40	; 0x28
 8003936:	f001 fbd6 	bl	80050e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800393a:	2028      	movs	r0, #40	; 0x28
 800393c:	f001 fbef 	bl	800511e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020c00 	.word	0x40020c00
 8003954:	40020800 	.word	0x40020800
 8003958:	40020400 	.word	0x40020400

0800395c <HAL_GPIO_EXTI_Callback>:
		motor(0, 1);
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
//			state_IT = 1;
//			State = EMERGENCY_LIMIT;
//		}
//	}

	if (GPIO_Pin == Emergency_Pin) {
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d116      	bne.n	800399a <HAL_GPIO_EXTI_Callback+0x3e>
		if (State != SENSOR_CHECK) {
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <HAL_GPIO_EXTI_Callback+0x48>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d012      	beq.n	800399a <HAL_GPIO_EXTI_Callback+0x3e>
			LAST_STATE = State;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800397c:	601a      	str	r2, [r3, #0]
			Dutyfeedback = 0;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_GPIO_EXTI_Callback+0x50>)
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

			EndEffector_Event(In_Emergency);
 800398e:	2004      	movs	r0, #4
 8003990:	f7fd ff30 	bl	80017f4 <EndEffector_Event>

			State = EMERGENCY_LIMIT;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8003996:	2207      	movs	r2, #7
 8003998:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000268 	.word	0x20000268
 80039a8:	20001070 	.word	0x20001070
 80039ac:	20000938 	.word	0x20000938
 80039b0:	20000444 	.word	0x20000444

080039b4 <micros>:

uint64_t micros() {
 80039b4:	b4b0      	push	{r4, r5, r7}
 80039b6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <micros+0x2c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2200      	movs	r2, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <micros+0x30>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	1884      	adds	r4, r0, r2
 80039cc:	eb41 0503 	adc.w	r5, r1, r3
 80039d0:	4622      	mov	r2, r4
 80039d2:	462b      	mov	r3, r5
}
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	bcb0      	pop	{r4, r5, r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000660 	.word	0x20000660
 80039e4:	20000950 	.word	0x20000950

080039e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80039e8:	b4b0      	push	{r4, r5, r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	1e54      	subs	r4, r2, #1
 8003a00:	f143 0500 	adc.w	r5, r3, #0
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003a06:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bcb0      	pop	{r4, r5, r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000660 	.word	0x20000660
 8003a18:	20000950 	.word	0x20000950

08003a1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a24:	e7fe      	b.n	8003a24 <Error_Handler+0x8>
	...

08003a28 <PID>:
	RUNPOINTMODE,
	EMERGENCY_LIMIT,
	SENSOR_CHECK,
} State ;

void PID(float setposition) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8003a32:	4bb1      	ldr	r3, [pc, #708]	; (8003cf8 <PID+0x2d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4ab1      	ldr	r2, [pc, #708]	; (8003cfc <PID+0x2d4>)
 8003a38:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (traject_us / 1000000.0);
 8003a3a:	4bb0      	ldr	r3, [pc, #704]	; (8003cfc <PID+0x2d4>)
 8003a3c:	ed93 7a00 	vldr	s14, [r3]
 8003a40:	4baf      	ldr	r3, [pc, #700]	; (8003d00 <PID+0x2d8>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4a:	ee17 0a90 	vmov	r0, s15
 8003a4e:	f7fc fd27 	bl	80004a0 <__aeabi_f2d>
 8003a52:	4604      	mov	r4, r0
 8003a54:	460d      	mov	r5, r1
 8003a56:	4bab      	ldr	r3, [pc, #684]	; (8003d04 <PID+0x2dc>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fc fd40 	bl	80004e4 <__aeabi_ul2d>
 8003a64:	a39e      	add	r3, pc, #632	; (adr r3, 8003ce0 <PID+0x2b8>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fe9b 	bl	80007a4 <__aeabi_ddiv>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	f7fc fe95 	bl	80007a4 <__aeabi_ddiv>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fd f835 	bl	8000af0 <__aeabi_d2f>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4a9f      	ldr	r2, [pc, #636]	; (8003d08 <PID+0x2e0>)
 8003a8a:	6013      	str	r3, [r2, #0]
	acc = (current_velocity - previous_velocity) / (traject_us / 1000000.0);
 8003a8c:	4b9e      	ldr	r3, [pc, #632]	; (8003d08 <PID+0x2e0>)
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	4b9e      	ldr	r3, [pc, #632]	; (8003d0c <PID+0x2e4>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9c:	ee17 0a90 	vmov	r0, s15
 8003aa0:	f7fc fcfe 	bl	80004a0 <__aeabi_f2d>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4b96      	ldr	r3, [pc, #600]	; (8003d04 <PID+0x2dc>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f7fc fd17 	bl	80004e4 <__aeabi_ul2d>
 8003ab6:	a38a      	add	r3, pc, #552	; (adr r3, 8003ce0 <PID+0x2b8>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fe72 	bl	80007a4 <__aeabi_ddiv>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc fe6c 	bl	80007a4 <__aeabi_ddiv>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7fd f80c 	bl	8000af0 <__aeabi_d2f>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a8d      	ldr	r2, [pc, #564]	; (8003d10 <PID+0x2e8>)
 8003adc:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8003ade:	4b87      	ldr	r3, [pc, #540]	; (8003cfc <PID+0x2d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a87      	ldr	r2, [pc, #540]	; (8003d00 <PID+0x2d8>)
 8003ae4:	6013      	str	r3, [r2, #0]
	previous_velocity = current_velocity;
 8003ae6:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <PID+0x2e0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a88      	ldr	r2, [pc, #544]	; (8003d0c <PID+0x2e4>)
 8003aec:	6013      	str	r3, [r2, #0]

	if (pos_f < -350) {
 8003aee:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <PID+0x2ec>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003d18 <PID+0x2f0>
 8003af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	d503      	bpl.n	8003b0a <PID+0xe2>
		pos_f = -350;
 8003b02:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <PID+0x2ec>)
 8003b04:	4a85      	ldr	r2, [pc, #532]	; (8003d1c <PID+0x2f4>)
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e00c      	b.n	8003b24 <PID+0xfc>
	} else if (pos_f > 350) {
 8003b0a:	4b82      	ldr	r3, [pc, #520]	; (8003d14 <PID+0x2ec>)
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003d20 <PID+0x2f8>
 8003b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	dd02      	ble.n	8003b24 <PID+0xfc>
		pos_f = 350;
 8003b1e:	4b7d      	ldr	r3, [pc, #500]	; (8003d14 <PID+0x2ec>)
 8003b20:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <PID+0x2fc>)
 8003b22:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8003b24:	4b74      	ldr	r3, [pc, #464]	; (8003cf8 <PID+0x2d0>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b32:	4b7d      	ldr	r3, [pc, #500]	; (8003d28 <PID+0x300>)
 8003b34:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 8003b38:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <PID+0x304>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003d30 <PID+0x308>
 8003b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	bfac      	ite	ge
 8003b4c:	2301      	movge	r3, #1
 8003b4e:	2300      	movlt	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f083 0301 	eor.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13f      	bne.n	8003bdc <PID+0x1b4>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003b5c:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <PID+0x300>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	bfac      	ite	ge
 8003b6c:	2301      	movge	r3, #1
 8003b6e:	2300      	movlt	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f083 0301 	eor.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10f      	bne.n	8003b9c <PID+0x174>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003b7c:	4b6d      	ldr	r3, [pc, #436]	; (8003d34 <PID+0x30c>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	bfac      	ite	ge
 8003b8c:	2301      	movge	r3, #1
 8003b8e:	2300      	movlt	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02a      	beq.n	8003bf2 <PID+0x1ca>
 8003b9c:	4b62      	ldr	r3, [pc, #392]	; (8003d28 <PID+0x300>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003baa:	bf4c      	ite	mi
 8003bac:	2301      	movmi	r3, #1
 8003bae:	2300      	movpl	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <PID+0x1b4>
 8003bbc:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <PID+0x30c>)
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	bf4c      	ite	mi
 8003bcc:	2301      	movmi	r3, #1
 8003bce:	2300      	movpl	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f083 0301 	eor.w	r3, r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <PID+0x1ca>
		Intregral = Intregral + Error;
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <PID+0x30c>)
 8003bde:	ed93 7a00 	vldr	s14, [r3]
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <PID+0x300>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bec:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <PID+0x30c>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <PID+0x310>)
 8003bf4:	ed93 7a00 	vldr	s14, [r3]
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <PID+0x300>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c02:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <PID+0x300>)
 8003c04:	edd3 6a00 	vldr	s13, [r3]
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <PID+0x314>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003c12:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <PID+0x318>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <PID+0x31c>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c26:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 8003c2a:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <PID+0x30c>)
 8003c2c:	edd3 6a00 	vldr	s13, [r3]
 8003c30:	4b45      	ldr	r3, [pc, #276]	; (8003d48 <PID+0x320>)
 8003c32:	edd3 7a00 	vldr	s15, [r3]
 8003c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <PID+0x304>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <PID+0x304>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc29 	bl	80004a0 <__aeabi_f2d>
 8003c4e:	a326      	add	r3, pc, #152	; (adr r3, 8003ce8 <PID+0x2c0>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f7fc ff02 	bl	8000a5c <__aeabi_dcmpge>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <PID+0x23e>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8003c5e:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <PID+0x304>)
 8003c60:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <PID+0x324>)
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e00f      	b.n	8003c86 <PID+0x25e>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <PID+0x304>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fc18 	bl	80004a0 <__aeabi_f2d>
 8003c70:	a31f      	add	r3, pc, #124	; (adr r3, 8003cf0 <PID+0x2c8>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fee7 	bl	8000a48 <__aeabi_dcmple>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <PID+0x25e>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <PID+0x304>)
 8003c82:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <PID+0x328>)
 8003c84:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <PID+0x304>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	d503      	bpl.n	8003c9e <PID+0x276>
		dir = -1;
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <PID+0x32c>)
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e00a      	b.n	8003cb4 <PID+0x28c>
	} else if (Dutyfeedback > 0) {
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <PID+0x304>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	dd02      	ble.n	8003cb4 <PID+0x28c>
		dir = 1;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <PID+0x32c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <PID+0x300>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc6:	dd47      	ble.n	8003d58 <PID+0x330>
		Dutyfeedback += 1 * Kp; //230
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <PID+0x304>)
 8003cca:	ed93 7a00 	vldr	s14, [r3]
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <PID+0x310>)
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <PID+0x304>)
 8003cda:	edc3 7a00 	vstr	s15, [r3]
 8003cde:	e050      	b.n	8003d82 <PID+0x35a>
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	412e8480 	.word	0x412e8480
 8003ce8:	66666666 	.word	0x66666666
 8003cec:	40e66666 	.word	0x40e66666
 8003cf0:	66666666 	.word	0x66666666
 8003cf4:	c0e66666 	.word	0xc0e66666
 8003cf8:	20000fd8 	.word	0x20000fd8
 8003cfc:	20000940 	.word	0x20000940
 8003d00:	200010b4 	.word	0x200010b4
 8003d04:	20000238 	.word	0x20000238
 8003d08:	20000944 	.word	0x20000944
 8003d0c:	200010b8 	.word	0x200010b8
 8003d10:	20000948 	.word	0x20000948
 8003d14:	20000914 	.word	0x20000914
 8003d18:	c3af0000 	.word	0xc3af0000
 8003d1c:	c3af0000 	.word	0xc3af0000
 8003d20:	43af0000 	.word	0x43af0000
 8003d24:	43af0000 	.word	0x43af0000
 8003d28:	200010bc 	.word	0x200010bc
 8003d2c:	20000938 	.word	0x20000938
 8003d30:	47800000 	.word	0x47800000
 8003d34:	2000093c 	.word	0x2000093c
 8003d38:	2000026c 	.word	0x2000026c
 8003d3c:	200010c0 	.word	0x200010c0
 8003d40:	20000278 	.word	0x20000278
 8003d44:	20000274 	.word	0x20000274
 8003d48:	20000270 	.word	0x20000270
 8003d4c:	47333333 	.word	0x47333333
 8003d50:	c7333333 	.word	0xc7333333
 8003d54:	200010b0 	.word	0x200010b0
	} else if (Error < -1.0) {
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <PID+0x394>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d50a      	bpl.n	8003d82 <PID+0x35a>
		Dutyfeedback -= 1 * Kp;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <PID+0x398>)
 8003d6e:	ed93 7a00 	vldr	s14, [r3]
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <PID+0x39c>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <PID+0x398>)
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <PID+0x398>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	eef0 7ae7 	vabs.f32	s15, s15
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <PID+0x398>)
 8003d8e:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <PID+0x398>)
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <PID+0x3a0>)
 8003d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003da2:	4619      	mov	r1, r3
 8003da4:	ee17 0a90 	vmov	r0, s15
 8003da8:	f7fd f89a 	bl	8000ee0 <motor>
	Last_Error = Error;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <PID+0x394>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <PID+0x3a4>)
 8003db2:	6013      	str	r3, [r2, #0]
//			State = INIT_HOMING;
//		}

//	}

}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bdb0      	pop	{r4, r5, r7, pc}
 8003dbc:	200010bc 	.word	0x200010bc
 8003dc0:	20000938 	.word	0x20000938
 8003dc4:	2000026c 	.word	0x2000026c
 8003dc8:	200010b0 	.word	0x200010b0
 8003dcc:	200010c0 	.word	0x200010c0

08003dd0 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8003dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dd4:	b088      	sub	sp, #32
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	ed87 0b06 	vstr	d0, [r7, #24]
 8003ddc:	ed87 1b04 	vstr	d1, [r7, #16]
 8003de0:	ed87 2b02 	vstr	d2, [r7, #8]
 8003de4:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8003de8:	4993      	ldr	r1, [pc, #588]	; (8004038 <Trajectory_Gen+0x268>)
 8003dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dee:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8003df2:	4992      	ldr	r1, [pc, #584]	; (800403c <Trajectory_Gen+0x26c>)
 8003df4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003df8:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8003dfc:	4990      	ldr	r1, [pc, #576]	; (8004040 <Trajectory_Gen+0x270>)
 8003dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e02:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 8003e06:	498f      	ldr	r1, [pc, #572]	; (8004044 <Trajectory_Gen+0x274>)
 8003e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0c:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8003e10:	4b8d      	ldr	r3, [pc, #564]	; (8004048 <Trajectory_Gen+0x278>)
 8003e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e16:	4a8d      	ldr	r2, [pc, #564]	; (800404c <Trajectory_Gen+0x27c>)
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f7fc feb8 	bl	8000b90 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fc fb5c 	bl	80004e4 <__aeabi_ul2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4987      	ldr	r1, [pc, #540]	; (8004050 <Trajectory_Gen+0x280>)
 8003e32:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 8003e36:	4b84      	ldr	r3, [pc, #528]	; (8004048 <Trajectory_Gen+0x278>)
 8003e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e3c:	4a83      	ldr	r2, [pc, #524]	; (800404c <Trajectory_Gen+0x27c>)
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	f7fc fea5 	bl	8000b90 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7fc fb49 	bl	80004e4 <__aeabi_ul2d>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	497f      	ldr	r1, [pc, #508]	; (8004054 <Trajectory_Gen+0x284>)
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8003e5c:	4b7a      	ldr	r3, [pc, #488]	; (8004048 <Trajectory_Gen+0x278>)
 8003e5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e62:	4a7a      	ldr	r2, [pc, #488]	; (800404c <Trajectory_Gen+0x27c>)
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f7fc fe92 	bl	8000b90 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f7fc fb36 	bl	80004e4 <__aeabi_ul2d>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4976      	ldr	r1, [pc, #472]	; (8004058 <Trajectory_Gen+0x288>)
 8003e7e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 8003e82:	4b71      	ldr	r3, [pc, #452]	; (8004048 <Trajectory_Gen+0x278>)
 8003e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e88:	4a70      	ldr	r2, [pc, #448]	; (800404c <Trajectory_Gen+0x27c>)
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f7fc fe7f 	bl	8000b90 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fc fb23 	bl	80004e4 <__aeabi_ul2d>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	496e      	ldr	r1, [pc, #440]	; (800405c <Trajectory_Gen+0x28c>)
 8003ea4:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <Trajectory_Gen+0x26c>)
 8003eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <Trajectory_Gen+0x268>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc f994 	bl	80001e0 <__aeabi_dsub>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <Trajectory_Gen+0x290>)
 8003ec4:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	; (800403c <Trajectory_Gen+0x26c>)
 8003eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <Trajectory_Gen+0x268>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc f984 	bl	80001e0 <__aeabi_dsub>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f7fc fdc2 	bl	8000a70 <__aeabi_dcmpgt>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <Trajectory_Gen+0x12a>
		direct = 1;
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <Trajectory_Gen+0x294>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e018      	b.n	8003f2c <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8003efa:	4b50      	ldr	r3, [pc, #320]	; (800403c <Trajectory_Gen+0x26c>)
 8003efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f00:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <Trajectory_Gen+0x268>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f7fc f96b 	bl	80001e0 <__aeabi_dsub>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	f7fc fd8b 	bl	8000a34 <__aeabi_dcmplt>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <Trajectory_Gen+0x15c>
		direct = -1;
 8003f24:	4b4f      	ldr	r3, [pc, #316]	; (8004064 <Trajectory_Gen+0x294>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8003f2c:	4b44      	ldr	r3, [pc, #272]	; (8004040 <Trajectory_Gen+0x270>)
 8003f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f32:	4b44      	ldr	r3, [pc, #272]	; (8004044 <Trajectory_Gen+0x274>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc fc34 	bl	80007a4 <__aeabi_ddiv>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4949      	ldr	r1, [pc, #292]	; (8004068 <Trajectory_Gen+0x298>)
 8003f42:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8003f46:	4b46      	ldr	r3, [pc, #280]	; (8004060 <Trajectory_Gen+0x290>)
 8003f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <Trajectory_Gen+0x274>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc fc27 	bl	80007a4 <__aeabi_ddiv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b17 	vmov	d7, r2, r3
 8003f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f62:	eef0 0a67 	vmov.f32	s1, s15
 8003f66:	f006 fe27 	bl	800abb8 <sqrt>
 8003f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8003f6e:	eef0 7a60 	vmov.f32	s15, s1
 8003f72:	4b3e      	ldr	r3, [pc, #248]	; (800406c <Trajectory_Gen+0x29c>)
 8003f74:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8003f78:	4b3c      	ldr	r3, [pc, #240]	; (800406c <Trajectory_Gen+0x29c>)
 8003f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f7e:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <Trajectory_Gen+0x298>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc fd56 	bl	8000a34 <__aeabi_dcmplt>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <Trajectory_Gen+0x29c>)
 8003f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	f7fc f924 	bl	80001e4 <__adddf3>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4933      	ldr	r1, [pc, #204]	; (8004070 <Trajectory_Gen+0x2a0>)
 8003fa2:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <Trajectory_Gen+0x2a4>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8003fac:	e03e      	b.n	800402c <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8003fae:	4b2f      	ldr	r3, [pc, #188]	; (800406c <Trajectory_Gen+0x29c>)
 8003fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <Trajectory_Gen+0x298>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc fd4f 	bl	8000a5c <__aeabi_dcmpge>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d100      	bne.n	8003fc6 <Trajectory_Gen+0x1f6>
}
 8003fc4:	e032      	b.n	800402c <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 8003fc6:	4b28      	ldr	r3, [pc, #160]	; (8004068 <Trajectory_Gen+0x298>)
 8003fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	f7fc f908 	bl	80001e4 <__adddf3>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4690      	mov	r8, r2
 8003fda:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <Trajectory_Gen+0x290>)
 8003fde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <Trajectory_Gen+0x298>)
 8003fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <Trajectory_Gen+0x270>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc faaf 	bl	8000550 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	f7fc f8f1 	bl	80001e0 <__aeabi_dsub>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <Trajectory_Gen+0x270>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f7fc fbca 	bl	80007a4 <__aeabi_ddiv>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4640      	mov	r0, r8
 8004016:	4649      	mov	r1, r9
 8004018:	f7fc f8e4 	bl	80001e4 <__adddf3>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8004020:	4913      	ldr	r1, [pc, #76]	; (8004070 <Trajectory_Gen+0x2a0>)
 8004022:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <Trajectory_Gen+0x2a4>)
 8004028:	2202      	movs	r2, #2
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004036:	bf00      	nop
 8004038:	200010d0 	.word	0x200010d0
 800403c:	200010d8 	.word	0x200010d8
 8004040:	200010e0 	.word	0x200010e0
 8004044:	200010e8 	.word	0x200010e8
 8004048:	20000238 	.word	0x20000238
 800404c:	000f4240 	.word	0x000f4240
 8004050:	20000240 	.word	0x20000240
 8004054:	20000248 	.word	0x20000248
 8004058:	20000250 	.word	0x20000250
 800405c:	20000258 	.word	0x20000258
 8004060:	200010f0 	.word	0x200010f0
 8004064:	200010c8 	.word	0x200010c8
 8004068:	20001118 	.word	0x20001118
 800406c:	20001128 	.word	0x20001128
 8004070:	20001120 	.word	0x20001120
 8004074:	200010c4 	.word	0x200010c4

08004078 <Trajectory_Eva>:

void Trajectory_Eva() {
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 800407e:	4ba3      	ldr	r3, [pc, #652]	; (800430c <Trajectory_Eva+0x294>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b02      	cmp	r3, #2
 8004084:	f000 8173 	beq.w	800436e <Trajectory_Eva+0x2f6>
 8004088:	2b02      	cmp	r3, #2
 800408a:	f300 835e 	bgt.w	800474a <Trajectory_Eva+0x6d2>
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 835a 	beq.w	8004748 <Trajectory_Eva+0x6d0>
 8004094:	2b01      	cmp	r3, #1
 8004096:	d000      	beq.n	800409a <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8004098:	e357      	b.n	800474a <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 800409a:	4b9d      	ldr	r3, [pc, #628]	; (8004310 <Trajectory_Eva+0x298>)
 800409c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040a0:	4b9c      	ldr	r3, [pc, #624]	; (8004314 <Trajectory_Eva+0x29c>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fccf 	bl	8000a48 <__aeabi_dcmple>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8085 	beq.w	80041bc <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 80040b2:	4b99      	ldr	r3, [pc, #612]	; (8004318 <Trajectory_Eva+0x2a0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc f9e0 	bl	800047c <__aeabi_i2d>
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	4b96      	ldr	r3, [pc, #600]	; (800431c <Trajectory_Eva+0x2a4>)
 80040c2:	f7fc fa45 	bl	8000550 <__aeabi_dmul>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4b94      	ldr	r3, [pc, #592]	; (8004320 <Trajectory_Eva+0x2a8>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa3c 	bl	8000550 <__aeabi_dmul>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4b90      	ldr	r3, [pc, #576]	; (8004324 <Trajectory_Eva+0x2ac>)
 80040e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040e6:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <Trajectory_Eva+0x2ac>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f7fc fa30 	bl	8000550 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4620      	mov	r0, r4
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc fa2a 	bl	8000550 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	4b88      	ldr	r3, [pc, #544]	; (8004328 <Trajectory_Eva+0x2b0>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc f86b 	bl	80001e4 <__adddf3>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
			x = x_initial
 8004112:	4986      	ldr	r1, [pc, #536]	; (800432c <Trajectory_Eva+0x2b4>)
 8004114:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8004118:	4b81      	ldr	r3, [pc, #516]	; (8004320 <Trajectory_Eva+0x2a8>)
 800411a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800411e:	4b81      	ldr	r3, [pc, #516]	; (8004324 <Trajectory_Eva+0x2ac>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fa14 	bl	8000550 <__aeabi_dmul>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <Trajectory_Eva+0x2a0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc f9a1 	bl	800047c <__aeabi_i2d>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc fa05 	bl	8000550 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4979      	ldr	r1, [pc, #484]	; (8004330 <Trajectory_Eva+0x2b8>)
 800414c:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8004150:	4b71      	ldr	r3, [pc, #452]	; (8004318 <Trajectory_Eva+0x2a0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f991 	bl	800047c <__aeabi_i2d>
 800415a:	4b71      	ldr	r3, [pc, #452]	; (8004320 <Trajectory_Eva+0x2a8>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc f9f6 	bl	8000550 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4972      	ldr	r1, [pc, #456]	; (8004334 <Trajectory_Eva+0x2bc>)
 800416a:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800416e:	4b6f      	ldr	r3, [pc, #444]	; (800432c <Trajectory_Eva+0x2b4>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	4970      	ldr	r1, [pc, #448]	; (8004338 <Trajectory_Eva+0x2c0>)
 8004176:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 800417a:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <Trajectory_Eva+0x2b8>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	496e      	ldr	r1, [pc, #440]	; (800433c <Trajectory_Eva+0x2c4>)
 8004182:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <Trajectory_Eva+0x2ac>)
 8004188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800418c:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <Trajectory_Eva+0x2c8>)
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f7fc f827 	bl	80001e4 <__adddf3>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4962      	ldr	r1, [pc, #392]	; (8004324 <Trajectory_Eva+0x2ac>)
 800419c:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80041a0:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <Trajectory_Eva+0x298>)
 80041a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041a6:	4b66      	ldr	r3, [pc, #408]	; (8004340 <Trajectory_Eva+0x2c8>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f81a 	bl	80001e4 <__adddf3>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4956      	ldr	r1, [pc, #344]	; (8004310 <Trajectory_Eva+0x298>)
 80041b6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80041ba:	e2c6      	b.n	800474a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 80041bc:	4b54      	ldr	r3, [pc, #336]	; (8004310 <Trajectory_Eva+0x298>)
 80041be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c2:	4b60      	ldr	r3, [pc, #384]	; (8004344 <Trajectory_Eva+0x2cc>)
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f7fc fc3e 	bl	8000a48 <__aeabi_dcmple>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80bc 	beq.w	800434c <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <Trajectory_Eva+0x2c4>)
 80041d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041da:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <Trajectory_Eva+0x2d0>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc f9b6 	bl	8000550 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	4b52      	ldr	r3, [pc, #328]	; (8004338 <Trajectory_Eva+0x2c0>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f7fb fff7 	bl	80001e4 <__adddf3>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4614      	mov	r4, r2
 80041fc:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <Trajectory_Eva+0x2a0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc f93a 	bl	800047c <__aeabi_i2d>
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <Trajectory_Eva+0x2a4>)
 800420e:	f7fc f99f 	bl	8000550 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <Trajectory_Eva+0x2a8>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f7fc f996 	bl	8000550 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <Trajectory_Eva+0x2d0>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fc f98d 	bl	8000550 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	4b42      	ldr	r3, [pc, #264]	; (8004348 <Trajectory_Eva+0x2d0>)
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f7fc f984 	bl	8000550 <__aeabi_dmul>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4620      	mov	r0, r4
 800424e:	4629      	mov	r1, r5
 8004250:	f7fb ffc6 	bl	80001e0 <__aeabi_dsub>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8004258:	4934      	ldr	r1, [pc, #208]	; (800432c <Trajectory_Eva+0x2b4>)
 800425a:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <Trajectory_Eva+0x2c4>)
 8004260:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004264:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <Trajectory_Eva+0x2a8>)
 8004266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <Trajectory_Eva+0x2d0>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fc f96e 	bl	8000550 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4692      	mov	sl, r2
 800427a:	469b      	mov	fp, r3
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <Trajectory_Eva+0x2a0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc f8fb 	bl	800047c <__aeabi_i2d>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4650      	mov	r0, sl
 800428c:	4659      	mov	r1, fp
 800428e:	f7fc f95f 	bl	8000550 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fb ffa1 	bl	80001e0 <__aeabi_dsub>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4923      	ldr	r1, [pc, #140]	; (8004330 <Trajectory_Eva+0x2b8>)
 80042a4:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <Trajectory_Eva+0x2a8>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	4690      	mov	r8, r2
 80042b0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80042b4:	4b18      	ldr	r3, [pc, #96]	; (8004318 <Trajectory_Eva+0x2a0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f8df 	bl	800047c <__aeabi_i2d>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f7fc f943 	bl	8000550 <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4919      	ldr	r1, [pc, #100]	; (8004334 <Trajectory_Eva+0x2bc>)
 80042d0:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <Trajectory_Eva+0x2d0>)
 80042d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <Trajectory_Eva+0x2c8>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fb ff80 	bl	80001e4 <__adddf3>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4917      	ldr	r1, [pc, #92]	; (8004348 <Trajectory_Eva+0x2d0>)
 80042ea:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <Trajectory_Eva+0x298>)
 80042f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <Trajectory_Eva+0x2c8>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fb ff73 	bl	80001e4 <__adddf3>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4903      	ldr	r1, [pc, #12]	; (8004310 <Trajectory_Eva+0x298>)
 8004304:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004308:	e21f      	b.n	800474a <Trajectory_Eva+0x6d2>
 800430a:	bf00      	nop
 800430c:	200010c4 	.word	0x200010c4
 8004310:	20000258 	.word	0x20000258
 8004314:	20001128 	.word	0x20001128
 8004318:	200010c8 	.word	0x200010c8
 800431c:	3fe00000 	.word	0x3fe00000
 8004320:	200010e8 	.word	0x200010e8
 8004324:	20000240 	.word	0x20000240
 8004328:	200010d0 	.word	0x200010d0
 800432c:	20000920 	.word	0x20000920
 8004330:	20000928 	.word	0x20000928
 8004334:	20000930 	.word	0x20000930
 8004338:	200010f8 	.word	0x200010f8
 800433c:	20001108 	.word	0x20001108
 8004340:	20000260 	.word	0x20000260
 8004344:	20001120 	.word	0x20001120
 8004348:	20000248 	.word	0x20000248
			x = x_final;
 800434c:	4b8e      	ldr	r3, [pc, #568]	; (8004588 <Trajectory_Eva+0x510>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	498e      	ldr	r1, [pc, #568]	; (800458c <Trajectory_Eva+0x514>)
 8004354:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8004358:	498d      	ldr	r1, [pc, #564]	; (8004590 <Trajectory_Eva+0x518>)
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8004366:	4b8b      	ldr	r3, [pc, #556]	; (8004594 <Trajectory_Eva+0x51c>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
		break;
 800436c:	e1ed      	b.n	800474a <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 800436e:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <Trajectory_Eva+0x520>)
 8004370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004374:	4b89      	ldr	r3, [pc, #548]	; (800459c <Trajectory_Eva+0x524>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fc fb65 	bl	8000a48 <__aeabi_dcmple>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8089 	beq.w	8004498 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8004386:	4b86      	ldr	r3, [pc, #536]	; (80045a0 <Trajectory_Eva+0x528>)
 8004388:	e9d3 0100 	ldrd	r0, r1, [r3]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	4b84      	ldr	r3, [pc, #528]	; (80045a4 <Trajectory_Eva+0x52c>)
 8004392:	f7fc f8dd 	bl	8000550 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4614      	mov	r4, r2
 800439c:	461d      	mov	r5, r3
 800439e:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <Trajectory_Eva+0x530>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f86a 	bl	800047c <__aeabi_i2d>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fc f8ce 	bl	8000550 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b7b      	ldr	r3, [pc, #492]	; (80045ac <Trajectory_Eva+0x534>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fc f8c5 	bl	8000550 <__aeabi_dmul>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4b77      	ldr	r3, [pc, #476]	; (80045ac <Trajectory_Eva+0x534>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f8bc 	bl	8000550 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <Trajectory_Eva+0x538>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f7fb fefd 	bl	80001e4 <__adddf3>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4967      	ldr	r1, [pc, #412]	; (800458c <Trajectory_Eva+0x514>)
 80043f0:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <Trajectory_Eva+0x528>)
 80043f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043fa:	4b6c      	ldr	r3, [pc, #432]	; (80045ac <Trajectory_Eva+0x534>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fc f8a6 	bl	8000550 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4614      	mov	r4, r2
 800440a:	461d      	mov	r5, r3
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <Trajectory_Eva+0x530>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc f833 	bl	800047c <__aeabi_i2d>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	f7fc f897 	bl	8000550 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	495a      	ldr	r1, [pc, #360]	; (8004590 <Trajectory_Eva+0x518>)
 8004428:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <Trajectory_Eva+0x530>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fc f823 	bl	800047c <__aeabi_i2d>
 8004436:	4b5a      	ldr	r3, [pc, #360]	; (80045a0 <Trajectory_Eva+0x528>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f888 	bl	8000550 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	495b      	ldr	r1, [pc, #364]	; (80045b4 <Trajectory_Eva+0x53c>)
 8004446:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <Trajectory_Eva+0x514>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	4959      	ldr	r1, [pc, #356]	; (80045b8 <Trajectory_Eva+0x540>)
 8004452:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8004456:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <Trajectory_Eva+0x518>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	4957      	ldr	r1, [pc, #348]	; (80045bc <Trajectory_Eva+0x544>)
 800445e:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8004462:	4b52      	ldr	r3, [pc, #328]	; (80045ac <Trajectory_Eva+0x534>)
 8004464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004468:	4b55      	ldr	r3, [pc, #340]	; (80045c0 <Trajectory_Eva+0x548>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fb feb9 	bl	80001e4 <__adddf3>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	494d      	ldr	r1, [pc, #308]	; (80045ac <Trajectory_Eva+0x534>)
 8004478:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <Trajectory_Eva+0x520>)
 800447e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004482:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <Trajectory_Eva+0x548>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fb feac 	bl	80001e4 <__adddf3>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4941      	ldr	r1, [pc, #260]	; (8004598 <Trajectory_Eva+0x520>)
 8004492:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004496:	e158      	b.n	800474a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <Trajectory_Eva+0x54c>)
 800449a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <Trajectory_Eva+0x524>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fb fe9c 	bl	80001e0 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <Trajectory_Eva+0x520>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fc fad1 	bl	8000a5c <__aeabi_dcmpge>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 808b 	beq.w	80045d8 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <Trajectory_Eva+0x550>)
 80044c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044c8:	4b40      	ldr	r3, [pc, #256]	; (80045cc <Trajectory_Eva+0x554>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f83f 	bl	8000550 <__aeabi_dmul>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4614      	mov	r4, r2
 80044d8:	461d      	mov	r5, r3
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <Trajectory_Eva+0x530>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb ffcc 	bl	800047c <__aeabi_i2d>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4620      	mov	r0, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	f7fc f830 	bl	8000550 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <Trajectory_Eva+0x540>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f7fb fe71 	bl	80001e4 <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4921      	ldr	r1, [pc, #132]	; (800458c <Trajectory_Eva+0x514>)
 8004508:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <Trajectory_Eva+0x530>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fb ffb3 	bl	800047c <__aeabi_i2d>
 8004516:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <Trajectory_Eva+0x550>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fc f818 	bl	8000550 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	491a      	ldr	r1, [pc, #104]	; (8004590 <Trajectory_Eva+0x518>)
 8004526:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 800452a:	4922      	ldr	r1, [pc, #136]	; (80045b4 <Trajectory_Eva+0x53c>)
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <Trajectory_Eva+0x514>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	4924      	ldr	r1, [pc, #144]	; (80045d0 <Trajectory_Eva+0x558>)
 8004540:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <Trajectory_Eva+0x518>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	4922      	ldr	r1, [pc, #136]	; (80045d4 <Trajectory_Eva+0x55c>)
 800454c:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <Trajectory_Eva+0x554>)
 8004552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <Trajectory_Eva+0x548>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb fe42 	bl	80001e4 <__adddf3>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4919      	ldr	r1, [pc, #100]	; (80045cc <Trajectory_Eva+0x554>)
 8004566:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <Trajectory_Eva+0x520>)
 800456c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <Trajectory_Eva+0x548>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fb fe35 	bl	80001e4 <__adddf3>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4906      	ldr	r1, [pc, #24]	; (8004598 <Trajectory_Eva+0x520>)
 8004580:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004584:	e0e1      	b.n	800474a <Trajectory_Eva+0x6d2>
 8004586:	bf00      	nop
 8004588:	200010d8 	.word	0x200010d8
 800458c:	20000920 	.word	0x20000920
 8004590:	20000928 	.word	0x20000928
 8004594:	200010c4 	.word	0x200010c4
 8004598:	20000258 	.word	0x20000258
 800459c:	20001118 	.word	0x20001118
 80045a0:	200010e8 	.word	0x200010e8
 80045a4:	3fe00000 	.word	0x3fe00000
 80045a8:	200010c8 	.word	0x200010c8
 80045ac:	20000240 	.word	0x20000240
 80045b0:	200010d0 	.word	0x200010d0
 80045b4:	20000930 	.word	0x20000930
 80045b8:	200010f8 	.word	0x200010f8
 80045bc:	20001108 	.word	0x20001108
 80045c0:	20000260 	.word	0x20000260
 80045c4:	20001120 	.word	0x20001120
 80045c8:	200010e0 	.word	0x200010e0
 80045cc:	20000250 	.word	0x20000250
 80045d0:	20001100 	.word	0x20001100
 80045d4:	20001110 	.word	0x20001110
		} else if (t_count <= t_final) {
 80045d8:	4b5d      	ldr	r3, [pc, #372]	; (8004750 <Trajectory_Eva+0x6d8>)
 80045da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045de:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <Trajectory_Eva+0x6dc>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fc fa30 	bl	8000a48 <__aeabi_dcmple>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 809b 	beq.w	8004726 <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 80045f0:	4b59      	ldr	r3, [pc, #356]	; (8004758 <Trajectory_Eva+0x6e0>)
 80045f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <Trajectory_Eva+0x6e4>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fb ffa8 	bl	8000550 <__aeabi_dmul>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	4b55      	ldr	r3, [pc, #340]	; (8004760 <Trajectory_Eva+0x6e8>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb fde9 	bl	80001e4 <__adddf3>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 800461a:	4b52      	ldr	r3, [pc, #328]	; (8004764 <Trajectory_Eva+0x6ec>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb ff2c 	bl	800047c <__aeabi_i2d>
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	4b4f      	ldr	r3, [pc, #316]	; (8004768 <Trajectory_Eva+0x6f0>)
 800462a:	f7fb ff91 	bl	8000550 <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <Trajectory_Eva+0x6f4>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb ff88 	bl	8000550 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4692      	mov	sl, r2
 8004646:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8004648:	4b44      	ldr	r3, [pc, #272]	; (800475c <Trajectory_Eva+0x6e4>)
 800464a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464e:	4b43      	ldr	r3, [pc, #268]	; (800475c <Trajectory_Eva+0x6e4>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ff7c 	bl	8000550 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4650      	mov	r0, sl
 800465e:	4659      	mov	r1, fp
 8004660:	f7fb ff76 	bl	8000550 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f7fb fdb8 	bl	80001e0 <__aeabi_dsub>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
			x =
 8004674:	493e      	ldr	r1, [pc, #248]	; (8004770 <Trajectory_Eva+0x6f8>)
 8004676:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <Trajectory_Eva+0x6e0>)
 800467c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004680:	4b3a      	ldr	r3, [pc, #232]	; (800476c <Trajectory_Eva+0x6f4>)
 8004682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004686:	4b35      	ldr	r3, [pc, #212]	; (800475c <Trajectory_Eva+0x6e4>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fb ff60 	bl	8000550 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4692      	mov	sl, r2
 8004696:	469b      	mov	fp, r3
 8004698:	4b32      	ldr	r3, [pc, #200]	; (8004764 <Trajectory_Eva+0x6ec>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb feed 	bl	800047c <__aeabi_i2d>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4650      	mov	r0, sl
 80046a8:	4659      	mov	r1, fp
 80046aa:	f7fb ff51 	bl	8000550 <__aeabi_dmul>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4640      	mov	r0, r8
 80046b4:	4649      	mov	r1, r9
 80046b6:	f7fb fd93 	bl	80001e0 <__aeabi_dsub>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	492d      	ldr	r1, [pc, #180]	; (8004774 <Trajectory_Eva+0x6fc>)
 80046c0:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <Trajectory_Eva+0x6f4>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	4614      	mov	r4, r2
 80046cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <Trajectory_Eva+0x6ec>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb fed1 	bl	800047c <__aeabi_i2d>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7fb ff35 	bl	8000550 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4923      	ldr	r1, [pc, #140]	; (8004778 <Trajectory_Eva+0x700>)
 80046ec:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <Trajectory_Eva+0x6e4>)
 80046f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <Trajectory_Eva+0x704>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb fd72 	bl	80001e4 <__adddf3>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4915      	ldr	r1, [pc, #84]	; (800475c <Trajectory_Eva+0x6e4>)
 8004706:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <Trajectory_Eva+0x6d8>)
 800470c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <Trajectory_Eva+0x704>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb fd65 	bl	80001e4 <__adddf3>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	490c      	ldr	r1, [pc, #48]	; (8004750 <Trajectory_Eva+0x6d8>)
 8004720:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004724:	e011      	b.n	800474a <Trajectory_Eva+0x6d2>
			x = x_final;
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <Trajectory_Eva+0x708>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	4910      	ldr	r1, [pc, #64]	; (8004770 <Trajectory_Eva+0x6f8>)
 800472e:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8004732:	4910      	ldr	r1, [pc, #64]	; (8004774 <Trajectory_Eva+0x6fc>)
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <Trajectory_Eva+0x70c>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
		break;
 8004746:	e000      	b.n	800474a <Trajectory_Eva+0x6d2>
		break;
 8004748:	bf00      	nop
}
 800474a:	bf00      	nop
 800474c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004750:	20000258 	.word	0x20000258
 8004754:	20001120 	.word	0x20001120
 8004758:	20001110 	.word	0x20001110
 800475c:	20000248 	.word	0x20000248
 8004760:	20001100 	.word	0x20001100
 8004764:	200010c8 	.word	0x200010c8
 8004768:	3fe00000 	.word	0x3fe00000
 800476c:	200010e8 	.word	0x200010e8
 8004770:	20000920 	.word	0x20000920
 8004774:	20000928 	.word	0x20000928
 8004778:	20000930 	.word	0x20000930
 800477c:	20000260 	.word	0x20000260
 8004780:	200010d8 	.word	0x200010d8
 8004784:	200010c4 	.word	0x200010c4

08004788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_MspInit+0x4c>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <HAL_MspInit+0x4c>)
 8004798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <HAL_MspInit+0x4c>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_MspInit+0x4c>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <HAL_MspInit+0x4c>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_MspInit+0x4c>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047c6:	2007      	movs	r0, #7
 80047c8:	f000 fc82 	bl	80050d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800

080047d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a21      	ldr	r2, [pc, #132]	; (800487c <HAL_I2C_MspInit+0xa4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d13c      	bne.n	8004874 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	6313      	str	r3, [r2, #48]	; 0x30
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800481c:	2312      	movs	r3, #18
 800481e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004820:	2301      	movs	r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004824:	2303      	movs	r3, #3
 8004826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004828:	2304      	movs	r3, #4
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4619      	mov	r1, r3
 8004832:	4814      	ldr	r0, [pc, #80]	; (8004884 <HAL_I2C_MspInit+0xac>)
 8004834:	f001 f89c 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004838:	2308      	movs	r3, #8
 800483a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800483c:	2312      	movs	r3, #18
 800483e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004840:	2301      	movs	r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004844:	2303      	movs	r3, #3
 8004846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004848:	2309      	movs	r3, #9
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4619      	mov	r1, r3
 8004852:	480c      	ldr	r0, [pc, #48]	; (8004884 <HAL_I2C_MspInit+0xac>)
 8004854:	f001 f88c 	bl	8005970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 8004862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_I2C_MspInit+0xa8>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004874:	bf00      	nop
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40005800 	.word	0x40005800
 8004880:	40023800 	.word	0x40023800
 8004884:	40020400 	.word	0x40020400

08004888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d12c      	bne.n	8004904 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6313      	str	r3, [r2, #48]	; 0x30
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <HAL_SPI_MspInit+0x88>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80048e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f0:	2303      	movs	r3, #3
 80048f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80048f4:	2306      	movs	r3, #6
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4619      	mov	r1, r3
 80048fe:	4805      	ldr	r0, [pc, #20]	; (8004914 <HAL_SPI_MspInit+0x8c>)
 8004900:	f001 f836 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40003c00 	.word	0x40003c00
 8004910:	40023800 	.word	0x40023800
 8004914:	40020800 	.word	0x40020800

08004918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a38      	ldr	r2, [pc, #224]	; (8004a08 <HAL_TIM_Base_MspInit+0xf0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d116      	bne.n	8004958 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a36      	ldr	r2, [pc, #216]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	201a      	movs	r0, #26
 800494c:	f000 fbcb 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004950:	201a      	movs	r0, #26
 8004952:	f000 fbe4 	bl	800511e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004956:	e052      	b.n	80049fe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <HAL_TIM_Base_MspInit+0xf8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d116      	bne.n	8004990 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 800496c:	f043 0302 	orr.w	r3, r3, #2
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	201d      	movs	r0, #29
 8004984:	f000 fbaf 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004988:	201d      	movs	r0, #29
 800498a:	f000 fbc8 	bl	800511e <HAL_NVIC_EnableIRQ>
}
 800498e:	e036      	b.n	80049fe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_TIM_Base_MspInit+0xfc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d116      	bne.n	80049c8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	4a1a      	ldr	r2, [pc, #104]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6413      	str	r3, [r2, #64]	; 0x40
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	2032      	movs	r0, #50	; 0x32
 80049bc:	f000 fb93 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80049c0:	2032      	movs	r0, #50	; 0x32
 80049c2:	f000 fbac 	bl	800511e <HAL_NVIC_EnableIRQ>
}
 80049c6:	e01a      	b.n	80049fe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <HAL_TIM_Base_MspInit+0x100>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e0:	6453      	str	r3, [r2, #68]	; 0x44
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_TIM_Base_MspInit+0xf4>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	201a      	movs	r0, #26
 80049f4:	f000 fb77 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80049f8:	201a      	movs	r0, #26
 80049fa:	f000 fb90 	bl	800511e <HAL_NVIC_EnableIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014800 	.word	0x40014800

08004a1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d12b      	bne.n	8004a96 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a76:	2303      	movs	r3, #3
 8004a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a86:	2301      	movs	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a92:	f000 ff6d 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004a96:	bf00      	nop
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40020000 	.word	0x40020000

08004aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <HAL_TIM_MspPostInit+0x68>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d11e      	bne.n	8004b08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_TIM_MspPostInit+0x6c>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <HAL_TIM_MspPostInit+0x6c>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <HAL_TIM_MspPostInit+0x6c>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	4619      	mov	r1, r3
 8004b02:	4805      	ldr	r0, [pc, #20]	; (8004b18 <HAL_TIM_MspPostInit+0x70>)
 8004b04:	f000 ff34 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b08:	bf00      	nop
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020000 	.word	0x40020000

08004b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 031c 	add.w	r3, r7, #28
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4d      	ldr	r2, [pc, #308]	; (8004c70 <HAL_UART_MspInit+0x154>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d162      	bne.n	8004c04 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	4b4c      	ldr	r3, [pc, #304]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a4b      	ldr	r2, [pc, #300]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b49      	ldr	r3, [pc, #292]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	4b45      	ldr	r3, [pc, #276]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4a44      	ldr	r2, [pc, #272]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6a:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b76:	230c      	movs	r3, #12
 8004b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b82:	2303      	movs	r3, #3
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b86:	2307      	movs	r3, #7
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8a:	f107 031c 	add.w	r3, r7, #28
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4839      	ldr	r0, [pc, #228]	; (8004c78 <HAL_UART_MspInit+0x15c>)
 8004b92:	f000 feed 	bl	8005970 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b98:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <HAL_UART_MspInit+0x164>)
 8004b9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004b9c:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ba2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004ba6:	2240      	movs	r2, #64	; 0x40
 8004ba8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004baa:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb8:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bd6:	4829      	ldr	r0, [pc, #164]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bd8:	f000 fabc 	bl	8005154 <HAL_DMA_Init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004be2:	f7fe ff1b 	bl	8003a1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2026      	movs	r0, #38	; 0x26
 8004bf8:	f000 fa75 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bfc:	2026      	movs	r0, #38	; 0x26
 8004bfe:	f000 fa8e 	bl	800511e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004c02:	e031      	b.n	8004c68 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d12c      	bne.n	8004c68 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_UART_MspInit+0x158>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004c46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c54:	2303      	movs	r3, #3
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c58:	2308      	movs	r3, #8
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	4619      	mov	r1, r3
 8004c62:	4805      	ldr	r0, [pc, #20]	; (8004c78 <HAL_UART_MspInit+0x15c>)
 8004c64:	f000 fe84 	bl	8005970 <HAL_GPIO_Init>
}
 8004c68:	bf00      	nop
 8004c6a:	3730      	adds	r7, #48	; 0x30
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40020000 	.word	0x40020000
 8004c7c:	200008b0 	.word	0x200008b0
 8004c80:	400260a0 	.word	0x400260a0
 8004c84:	40011400 	.word	0x40011400

08004c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c8c:	e7fe      	b.n	8004c8c <NMI_Handler+0x4>

08004c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c92:	e7fe      	b.n	8004c92 <HardFault_Handler+0x4>

08004c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c98:	e7fe      	b.n	8004c98 <MemManage_Handler+0x4>

08004c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c9e:	e7fe      	b.n	8004c9e <BusFault_Handler+0x4>

08004ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ca4:	e7fe      	b.n	8004ca4 <UsageFault_Handler+0x4>

08004ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cd4:	f000 f8e8 	bl	8004ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cd8:	bf00      	nop
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8004ce0:	2004      	movs	r0, #4
 8004ce2:	f000 fffb 	bl	8005cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8004cee:	2008      	movs	r0, #8
 8004cf0:	f000 fff4 	bl	8005cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004cfc:	4802      	ldr	r0, [pc, #8]	; (8004d08 <DMA1_Stream6_IRQHandler+0x10>)
 8004cfe:	f000 fbc1 	bl	8005484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200008b0 	.word	0x200008b0

08004d0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8004d10:	2040      	movs	r0, #64	; 0x40
 8004d12:	f000 ffe3 	bl	8005cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8004d16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d1a:	f000 ffdf 	bl	8005cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d28:	4803      	ldr	r0, [pc, #12]	; (8004d38 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004d2a:	f003 fbb7 	bl	800849c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004d2e:	4803      	ldr	r0, [pc, #12]	; (8004d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004d30:	f003 fbb4 	bl	800849c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000444 	.word	0x20000444
 8004d3c:	20000714 	.word	0x20000714

08004d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d44:	4802      	ldr	r0, [pc, #8]	; (8004d50 <TIM3_IRQHandler+0x10>)
 8004d46:	f003 fba9 	bl	800849c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200005ac 	.word	0x200005ac

08004d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <USART2_IRQHandler+0x10>)
 8004d5a:	f004 fea7 	bl	8009aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200007c8 	.word	0x200007c8

08004d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004d6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d70:	f000 ffb4 	bl	8005cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <TIM5_IRQHandler+0x10>)
 8004d7e:	f003 fb8d 	bl	800849c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000660 	.word	0x20000660

08004d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <SystemInit+0x20>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <SystemInit+0x20>)
 8004d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004db6:	490e      	ldr	r1, [pc, #56]	; (8004df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004db8:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dbc:	e002      	b.n	8004dc4 <LoopCopyDataInit>

08004dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dc2:	3304      	adds	r3, #4

08004dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dc8:	d3f9      	bcc.n	8004dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dca:	4a0b      	ldr	r2, [pc, #44]	; (8004df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004dcc:	4c0b      	ldr	r4, [pc, #44]	; (8004dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dd0:	e001      	b.n	8004dd6 <LoopFillZerobss>

08004dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dd4:	3204      	adds	r2, #4

08004dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dd8:	d3fb      	bcc.n	8004dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dda:	f7ff ffd7 	bl	8004d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dde:	f005 feb1 	bl	800ab44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004de2:	f7fd fb05 	bl	80023f0 <main>
  bx  lr    
 8004de6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004df0:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8004df4:	0800b054 	.word	0x0800b054
  ldr r2, =_sbss
 8004df8:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8004dfc:	20001134 	.word	0x20001134

08004e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e00:	e7fe      	b.n	8004e00 <ADC_IRQHandler>
	...

08004e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_Init+0x40>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <HAL_Init+0x40>)
 8004e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_Init+0x40>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_Init+0x40>)
 8004e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_Init+0x40>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <HAL_Init+0x40>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e2c:	2003      	movs	r0, #3
 8004e2e:	f000 f94f 	bl	80050d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f000 f808 	bl	8004e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e38:	f7ff fca6 	bl	8004788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00

08004e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_InitTick+0x54>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_InitTick+0x58>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f967 	bl	800513a <HAL_SYSTICK_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00e      	b.n	8004e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d80a      	bhi.n	8004e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	f000 f92f 	bl	80050e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e88:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <HAL_InitTick+0x5c>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	2000027c 	.word	0x2000027c
 8004ea0:	20000284 	.word	0x20000284
 8004ea4:	20000280 	.word	0x20000280

08004ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_IncTick+0x20>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_IncTick+0x24>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <HAL_IncTick+0x24>)
 8004eba:	6013      	str	r3, [r2, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000284 	.word	0x20000284
 8004ecc:	20001130 	.word	0x20001130

08004ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_GetTick+0x14>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20001130 	.word	0x20001130

08004ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7ff ffee 	bl	8004ed0 <HAL_GetTick>
 8004ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d005      	beq.n	8004f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_Delay+0x44>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f0e:	bf00      	nop
 8004f10:	f7ff ffde 	bl	8004ed0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d8f7      	bhi.n	8004f10 <HAL_Delay+0x28>
  {
  }
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000284 	.word	0x20000284

08004f30 <__NVIC_SetPriorityGrouping>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	60d3      	str	r3, [r2, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_GetPriorityGrouping>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <__NVIC_GetPriorityGrouping+0x18>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 0307 	and.w	r3, r3, #7
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <__NVIC_EnableIRQ>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db0b      	blt.n	8004fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4907      	ldr	r1, [pc, #28]	; (8004fcc <__NVIC_EnableIRQ+0x38>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_SetPriority>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db0a      	blt.n	8004ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	490c      	ldr	r1, [pc, #48]	; (800501c <__NVIC_SetPriority+0x4c>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ff8:	e00a      	b.n	8005010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4908      	ldr	r1, [pc, #32]	; (8005020 <__NVIC_SetPriority+0x50>)
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3b04      	subs	r3, #4
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	440b      	add	r3, r1
 800500e:	761a      	strb	r2, [r3, #24]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000e100 	.word	0xe000e100
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <NVIC_EncodePriority>:
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f1c3 0307 	rsb	r3, r3, #7
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf28      	it	cs
 8005042:	2304      	movcs	r3, #4
 8005044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3304      	adds	r3, #4
 800504a:	2b06      	cmp	r3, #6
 800504c:	d902      	bls.n	8005054 <NVIC_EncodePriority+0x30>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3b03      	subs	r3, #3
 8005052:	e000      	b.n	8005056 <NVIC_EncodePriority+0x32>
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43da      	mvns	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	401a      	ands	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800506c:	f04f 31ff 	mov.w	r1, #4294967295
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43d9      	mvns	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	4313      	orrs	r3, r2
}
 800507e:	4618      	mov	r0, r3
 8005080:	3724      	adds	r7, #36	; 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800509c:	d301      	bcc.n	80050a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800509e:	2301      	movs	r3, #1
 80050a0:	e00f      	b.n	80050c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <SysTick_Config+0x40>)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050aa:	210f      	movs	r1, #15
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	f7ff ff8e 	bl	8004fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <SysTick_Config+0x40>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <SysTick_Config+0x40>)
 80050bc:	2207      	movs	r2, #7
 80050be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	e000e010 	.word	0xe000e010

080050d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff29 	bl	8004f30 <__NVIC_SetPriorityGrouping>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	4603      	mov	r3, r0
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050f8:	f7ff ff3e 	bl	8004f78 <__NVIC_GetPriorityGrouping>
 80050fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff ff8e 	bl	8005024 <NVIC_EncodePriority>
 8005108:	4602      	mov	r2, r0
 800510a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff5d 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005116:	bf00      	nop
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	4603      	mov	r3, r0
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff31 	bl	8004f94 <__NVIC_EnableIRQ>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ffa2 	bl	800508c <SysTick_Config>
 8005148:	4603      	mov	r3, r0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff feb6 	bl	8004ed0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e099      	b.n	80052a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005190:	e00f      	b.n	80051b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005192:	f7ff fe9d 	bl	8004ed0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b05      	cmp	r3, #5
 800519e:	d908      	bls.n	80051b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e078      	b.n	80052a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e8      	bne.n	8005192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4b38      	ldr	r3, [pc, #224]	; (80052ac <HAL_DMA_Init+0x158>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b04      	cmp	r3, #4
 800520a:	d107      	bne.n	800521c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4313      	orrs	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b04      	cmp	r3, #4
 8005244:	d117      	bne.n	8005276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fb0d 	bl	8005878 <DMA_CheckFifoParam>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2240      	movs	r2, #64	; 0x40
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005272:	2301      	movs	r3, #1
 8005274:	e016      	b.n	80052a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fac4 	bl	800580c <DMA_CalcBaseAndBitshift>
 8005284:	4603      	mov	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	223f      	movs	r2, #63	; 0x3f
 800528e:	409a      	lsls	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	f010803f 	.word	0xf010803f

080052b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_DMA_Start_IT+0x26>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e040      	b.n	8005358 <HAL_DMA_Start_IT+0xa8>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d12f      	bne.n	800534a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fa56 	bl	80057b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	223f      	movs	r2, #63	; 0x3f
 800530a:	409a      	lsls	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0216 	orr.w	r2, r2, #22
 800531e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e005      	b.n	8005356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800536e:	f7ff fdaf 	bl	8004ed0 <HAL_GetTick>
 8005372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d008      	beq.n	8005392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2280      	movs	r2, #128	; 0x80
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e052      	b.n	8005438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0216 	bic.w	r2, r2, #22
 80053a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_DMA_Abort+0x62>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0208 	bic.w	r2, r2, #8
 80053d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e2:	e013      	b.n	800540c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e4:	f7ff fd74 	bl	8004ed0 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d90c      	bls.n	800540c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2203      	movs	r2, #3
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e015      	b.n	8005438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e4      	bne.n	80053e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541e:	223f      	movs	r2, #63	; 0x3f
 8005420:	409a      	lsls	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d004      	beq.n	800545e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e00c      	b.n	8005478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2205      	movs	r2, #5
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005490:	4b8e      	ldr	r3, [pc, #568]	; (80056cc <HAL_DMA_IRQHandler+0x248>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a8e      	ldr	r2, [pc, #568]	; (80056d0 <HAL_DMA_IRQHandler+0x24c>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	2208      	movs	r2, #8
 80054b0:	409a      	lsls	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	2208      	movs	r2, #8
 80054de:	409a      	lsls	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	f043 0201 	orr.w	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d012      	beq.n	8005526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	2201      	movs	r2, #1
 8005514:	409a      	lsls	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	f043 0202 	orr.w	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552a:	2204      	movs	r2, #4
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005548:	2204      	movs	r2, #4
 800554a:	409a      	lsls	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	2210      	movs	r2, #16
 8005562:	409a      	lsls	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d043      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d03c      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557e:	2210      	movs	r2, #16
 8005580:	409a      	lsls	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d024      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	e01f      	b.n	80055f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
 80055c4:	e016      	b.n	80055f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0208 	bic.w	r2, r2, #8
 80055e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f8:	2220      	movs	r2, #32
 80055fa:	409a      	lsls	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 808f 	beq.w	8005724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8087 	beq.w	8005724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561a:	2220      	movs	r2, #32
 800561c:	409a      	lsls	r2, r3
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b05      	cmp	r3, #5
 800562c:	d136      	bne.n	800569c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0216 	bic.w	r2, r2, #22
 800563c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_DMA_IRQHandler+0x1da>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0208 	bic.w	r2, r2, #8
 800566c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	223f      	movs	r2, #63	; 0x3f
 8005674:	409a      	lsls	r2, r3
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d07e      	beq.n	8005790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
        }
        return;
 800569a:	e079      	b.n	8005790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01d      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d031      	beq.n	8005724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
 80056c8:	e02c      	b.n	8005724 <HAL_DMA_IRQHandler+0x2a0>
 80056ca:	bf00      	nop
 80056cc:	2000027c 	.word	0x2000027c
 80056d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d023      	beq.n	8005724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	e01e      	b.n	8005724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0210 	bic.w	r2, r2, #16
 8005702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	2b00      	cmp	r3, #0
 800572a:	d032      	beq.n	8005792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d022      	beq.n	800577e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2205      	movs	r2, #5
 800573c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3301      	adds	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	429a      	cmp	r2, r3
 800575a:	d307      	bcc.n	800576c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f2      	bne.n	8005750 <HAL_DMA_IRQHandler+0x2cc>
 800576a:	e000      	b.n	800576e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800576c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	e000      	b.n	8005792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005790:	bf00      	nop
    }
  }
}
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d108      	bne.n	80057f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057ee:	e007      	b.n	8005800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	3b10      	subs	r3, #16
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <DMA_CalcBaseAndBitshift+0x64>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005826:	4a13      	ldr	r2, [pc, #76]	; (8005874 <DMA_CalcBaseAndBitshift+0x68>)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d909      	bls.n	800584e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	659a      	str	r2, [r3, #88]	; 0x58
 800584c:	e007      	b.n	800585e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	aaaaaaab 	.word	0xaaaaaaab
 8005874:	0800b038 	.word	0x0800b038

08005878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11f      	bne.n	80058d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d856      	bhi.n	8005946 <DMA_CheckFifoParam+0xce>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <DMA_CheckFifoParam+0x28>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058c3 	.word	0x080058c3
 80058a8:	080058b1 	.word	0x080058b1
 80058ac:	08005947 	.word	0x08005947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d046      	beq.n	800594a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c0:	e043      	b.n	800594a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ca:	d140      	bne.n	800594e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d0:	e03d      	b.n	800594e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058da:	d121      	bne.n	8005920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d837      	bhi.n	8005952 <DMA_CheckFifoParam+0xda>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <DMA_CheckFifoParam+0x70>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	080058ff 	.word	0x080058ff
 80058f0:	080058f9 	.word	0x080058f9
 80058f4:	08005911 	.word	0x08005911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	e030      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d025      	beq.n	8005956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590e:	e022      	b.n	8005956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005918:	d11f      	bne.n	800595a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800591e:	e01c      	b.n	800595a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d903      	bls.n	800592e <DMA_CheckFifoParam+0xb6>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d003      	beq.n	8005934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800592c:	e018      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      break;
 8005932:	e015      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      break;
 8005944:	e00b      	b.n	800595e <DMA_CheckFifoParam+0xe6>
      break;
 8005946:	bf00      	nop
 8005948:	e00a      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;
 800594a:	bf00      	nop
 800594c:	e008      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;
 800594e:	bf00      	nop
 8005950:	e006      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;
 8005952:	bf00      	nop
 8005954:	e004      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;
 8005956:	bf00      	nop
 8005958:	e002      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;   
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <DMA_CheckFifoParam+0xe8>
      break;
 800595e:	bf00      	nop
    }
  } 
  
  return status; 
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	; 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005982:	2300      	movs	r3, #0
 8005984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e159      	b.n	8005c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800598c:	2201      	movs	r2, #1
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	f040 8148 	bne.w	8005c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d005      	beq.n	80059c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d130      	bne.n	8005a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f8:	2201      	movs	r2, #1
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 0201 	and.w	r2, r3, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d017      	beq.n	8005a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d123      	bne.n	8005ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	220f      	movs	r2, #15
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	08da      	lsrs	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3208      	adds	r2, #8
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	2203      	movs	r2, #3
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 0203 	and.w	r2, r3, #3
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a2 	beq.w	8005c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <HAL_GPIO_Init+0x2e8>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4a56      	ldr	r2, [pc, #344]	; (8005c58 <HAL_GPIO_Init+0x2e8>)
 8005b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b04:	6453      	str	r3, [r2, #68]	; 0x44
 8005b06:	4b54      	ldr	r3, [pc, #336]	; (8005c58 <HAL_GPIO_Init+0x2e8>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b12:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_GPIO_Init+0x2ec>)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	220f      	movs	r2, #15
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a49      	ldr	r2, [pc, #292]	; (8005c60 <HAL_GPIO_Init+0x2f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d019      	beq.n	8005b72 <HAL_GPIO_Init+0x202>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a48      	ldr	r2, [pc, #288]	; (8005c64 <HAL_GPIO_Init+0x2f4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_GPIO_Init+0x1fe>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a47      	ldr	r2, [pc, #284]	; (8005c68 <HAL_GPIO_Init+0x2f8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00d      	beq.n	8005b6a <HAL_GPIO_Init+0x1fa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a46      	ldr	r2, [pc, #280]	; (8005c6c <HAL_GPIO_Init+0x2fc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <HAL_GPIO_Init+0x1f6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a45      	ldr	r2, [pc, #276]	; (8005c70 <HAL_GPIO_Init+0x300>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_GPIO_Init+0x1f2>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	e008      	b.n	8005b74 <HAL_GPIO_Init+0x204>
 8005b62:	2307      	movs	r3, #7
 8005b64:	e006      	b.n	8005b74 <HAL_GPIO_Init+0x204>
 8005b66:	2303      	movs	r3, #3
 8005b68:	e004      	b.n	8005b74 <HAL_GPIO_Init+0x204>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e002      	b.n	8005b74 <HAL_GPIO_Init+0x204>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_GPIO_Init+0x204>
 8005b72:	2300      	movs	r3, #0
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	f002 0203 	and.w	r2, r2, #3
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	4093      	lsls	r3, r2
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b84:	4935      	ldr	r1, [pc, #212]	; (8005c5c <HAL_GPIO_Init+0x2ec>)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b92:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be0:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005be6:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c10:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c34:	4a0f      	ldr	r2, [pc, #60]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	f67f aea2 	bls.w	800598c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40013800 	.word	0x40013800
 8005c60:	40020000 	.word	0x40020000
 8005c64:	40020400 	.word	0x40020400
 8005c68:	40020800 	.word	0x40020800
 8005c6c:	40020c00 	.word	0x40020c00
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40013c00 	.word	0x40013c00

08005c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
 8005c94:	e001      	b.n	8005c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cb8:	787b      	ldrb	r3, [r7, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cbe:	887a      	ldrh	r2, [r7, #2]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cc4:	e003      	b.n	8005cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cc6:	887b      	ldrh	r3, [r7, #2]
 8005cc8:	041a      	lsls	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	619a      	str	r2, [r3, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d006      	beq.n	8005d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cf2:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd fe2e 	bl	800395c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40013c00 	.word	0x40013c00

08005d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e12b      	b.n	8005f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fe fd50 	bl	80047d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2224      	movs	r2, #36	; 0x24
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d70:	f001 fbd2 	bl	8007518 <HAL_RCC_GetPCLK1Freq>
 8005d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a81      	ldr	r2, [pc, #516]	; (8005f80 <HAL_I2C_Init+0x274>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d807      	bhi.n	8005d90 <HAL_I2C_Init+0x84>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a80      	ldr	r2, [pc, #512]	; (8005f84 <HAL_I2C_Init+0x278>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	bf94      	ite	ls
 8005d88:	2301      	movls	r3, #1
 8005d8a:	2300      	movhi	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e006      	b.n	8005d9e <HAL_I2C_Init+0x92>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a7d      	ldr	r2, [pc, #500]	; (8005f88 <HAL_I2C_Init+0x27c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bf94      	ite	ls
 8005d98:	2301      	movls	r3, #1
 8005d9a:	2300      	movhi	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0e7      	b.n	8005f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a78      	ldr	r2, [pc, #480]	; (8005f8c <HAL_I2C_Init+0x280>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	0c9b      	lsrs	r3, r3, #18
 8005db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4a6a      	ldr	r2, [pc, #424]	; (8005f80 <HAL_I2C_Init+0x274>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d802      	bhi.n	8005de0 <HAL_I2C_Init+0xd4>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	e009      	b.n	8005df4 <HAL_I2C_Init+0xe8>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	4a69      	ldr	r2, [pc, #420]	; (8005f90 <HAL_I2C_Init+0x284>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	099b      	lsrs	r3, r3, #6
 8005df2:	3301      	adds	r3, #1
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	495c      	ldr	r1, [pc, #368]	; (8005f80 <HAL_I2C_Init+0x274>)
 8005e10:	428b      	cmp	r3, r1
 8005e12:	d819      	bhi.n	8005e48 <HAL_I2C_Init+0x13c>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e59      	subs	r1, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e28:	400b      	ands	r3, r1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_I2C_Init+0x138>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1e59      	subs	r1, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e42:	e051      	b.n	8005ee8 <HAL_I2C_Init+0x1dc>
 8005e44:	2304      	movs	r3, #4
 8005e46:	e04f      	b.n	8005ee8 <HAL_I2C_Init+0x1dc>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d111      	bne.n	8005e74 <HAL_I2C_Init+0x168>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1e58      	subs	r0, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	440b      	add	r3, r1
 8005e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e62:	3301      	adds	r3, #1
 8005e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e012      	b.n	8005e9a <HAL_I2C_Init+0x18e>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1e58      	subs	r0, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	0099      	lsls	r1, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_I2C_Init+0x196>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e022      	b.n	8005ee8 <HAL_I2C_Init+0x1dc>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_I2C_Init+0x1bc>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1e58      	subs	r0, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	440b      	add	r3, r1
 8005eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec6:	e00f      	b.n	8005ee8 <HAL_I2C_Init+0x1dc>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1e58      	subs	r0, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	0099      	lsls	r1, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	6809      	ldr	r1, [r1, #0]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6911      	ldr	r1, [r2, #16]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68d2      	ldr	r2, [r2, #12]
 8005f22:	4311      	orrs	r1, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	000186a0 	.word	0x000186a0
 8005f84:	001e847f 	.word	0x001e847f
 8005f88:	003d08ff 	.word	0x003d08ff
 8005f8c:	431bde83 	.word	0x431bde83
 8005f90:	10624dd3 	.word	0x10624dd3

08005f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	817b      	strh	r3, [r7, #10]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fa8:	f7fe ff92 	bl	8004ed0 <HAL_GetTick>
 8005fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f040 80e0 	bne.w	800617c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2319      	movs	r3, #25
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4970      	ldr	r1, [pc, #448]	; (8006188 <HAL_I2C_Master_Transmit+0x1f4>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fc58 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e0d3      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_I2C_Master_Transmit+0x50>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e0cc      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d007      	beq.n	800600a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2210      	movs	r2, #16
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	893a      	ldrh	r2, [r7, #8]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a50      	ldr	r2, [pc, #320]	; (800618c <HAL_I2C_Master_Transmit+0x1f8>)
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800604c:	8979      	ldrh	r1, [r7, #10]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fac2 	bl	80065dc <I2C_MasterRequestWrite>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e08d      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006078:	e066      	b.n	8006148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	6a39      	ldr	r1, [r7, #32]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fcd2 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	2b04      	cmp	r3, #4
 8006090:	d107      	bne.n	80060a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e06b      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d11b      	bne.n	800611c <HAL_I2C_Master_Transmit+0x188>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d017      	beq.n	800611c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	6a39      	ldr	r1, [r7, #32]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fcc2 	bl	8006aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	2b04      	cmp	r3, #4
 8006132:	d107      	bne.n	8006144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01a      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d194      	bne.n	800607a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	00100002 	.word	0x00100002
 800618c:	ffff0000 	.word	0xffff0000

08006190 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	817b      	strh	r3, [r7, #10]
 80061a0:	4613      	mov	r3, r2
 80061a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7fe fe94 	bl	8004ed0 <HAL_GetTick>
 80061a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 820b 	bne.w	80065ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2319      	movs	r3, #25
 80061be:	2201      	movs	r2, #1
 80061c0:	497c      	ldr	r1, [pc, #496]	; (80063b4 <HAL_I2C_Master_Receive+0x224>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fb5a 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
 80061d0:	e1fe      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_I2C_Master_Receive+0x50>
 80061dc:	2302      	movs	r3, #2
 80061de:	e1f7      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d007      	beq.n	8006206 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2222      	movs	r2, #34	; 0x22
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2210      	movs	r2, #16
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	893a      	ldrh	r2, [r7, #8]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a5c      	ldr	r2, [pc, #368]	; (80063b8 <HAL_I2C_Master_Receive+0x228>)
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fa46 	bl	80066e0 <I2C_MasterRequestRead>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e1b8      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d113      	bne.n	800628e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e18c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006292:	2b01      	cmp	r3, #1
 8006294:	d11b      	bne.n	80062ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e16c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11b      	bne.n	800630e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	e14c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800631c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006334:	e138      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	2b03      	cmp	r3, #3
 800633c:	f200 80f1 	bhi.w	8006522 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	2b01      	cmp	r3, #1
 8006346:	d123      	bne.n	8006390 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fbed 	bl	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e139      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800638e:	e10b      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	2b02      	cmp	r3, #2
 8006396:	d14e      	bne.n	8006436 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	2200      	movs	r2, #0
 80063a0:	4906      	ldr	r1, [pc, #24]	; (80063bc <HAL_I2C_Master_Receive+0x22c>)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fa6a 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e10e      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
 80063b2:	bf00      	nop
 80063b4:	00100002 	.word	0x00100002
 80063b8:	ffff0000 	.word	0xffff0000
 80063bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006434:	e0b8      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	2200      	movs	r2, #0
 800643e:	4966      	ldr	r1, [pc, #408]	; (80065d8 <HAL_I2C_Master_Receive+0x448>)
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fa1b 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0bf      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2200      	movs	r2, #0
 800649a:	494f      	ldr	r1, [pc, #316]	; (80065d8 <HAL_I2C_Master_Receive+0x448>)
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f9ed 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e091      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006520:	e042      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fb00 	bl	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e04c      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d118      	bne.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f47f aec2 	bne.w	8006336 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e000      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065ce:	2302      	movs	r3, #2
  }
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	00010004 	.word	0x00010004

080065dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	460b      	mov	r3, r1
 80065ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d006      	beq.n	8006606 <I2C_MasterRequestWrite+0x2a>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <I2C_MasterRequestWrite+0x2a>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006604:	d108      	bne.n	8006618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e00b      	b.n	8006630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b12      	cmp	r3, #18
 800661e:	d107      	bne.n	8006630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f91d 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d103      	bne.n	8006660 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e035      	b.n	80066d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800666c:	d108      	bne.n	8006680 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800667c:	611a      	str	r2, [r3, #16]
 800667e:	e01b      	b.n	80066b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	11db      	asrs	r3, r3, #7
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f063 030f 	orn	r3, r3, #15
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	490e      	ldr	r1, [pc, #56]	; (80066d8 <I2C_MasterRequestWrite+0xfc>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f943 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e010      	b.n	80066d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066ae:	897b      	ldrh	r3, [r7, #10]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4907      	ldr	r1, [pc, #28]	; (80066dc <I2C_MasterRequestWrite+0x100>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f933 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	00010008 	.word	0x00010008
 80066dc:	00010002 	.word	0x00010002

080066e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	460b      	mov	r3, r1
 80066ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006704:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d006      	beq.n	800671a <I2C_MasterRequestRead+0x3a>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d003      	beq.n	800671a <I2C_MasterRequestRead+0x3a>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006718:	d108      	bne.n	800672c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e00b      	b.n	8006744 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	2b11      	cmp	r3, #17
 8006732:	d107      	bne.n	8006744 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f893 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00d      	beq.n	8006778 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	d103      	bne.n	8006774 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e079      	b.n	800686c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006780:	d108      	bne.n	8006794 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	611a      	str	r2, [r3, #16]
 8006792:	e05f      	b.n	8006854 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006794:	897b      	ldrh	r3, [r7, #10]
 8006796:	11db      	asrs	r3, r3, #7
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 0306 	and.w	r3, r3, #6
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f063 030f 	orn	r3, r3, #15
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4930      	ldr	r1, [pc, #192]	; (8006874 <I2C_MasterRequestRead+0x194>)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f8b9 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e054      	b.n	800686c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4929      	ldr	r1, [pc, #164]	; (8006878 <I2C_MasterRequestRead+0x198>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8a9 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e044      	b.n	800686c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006806:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f831 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682e:	d103      	bne.n	8006838 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006836:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e017      	b.n	800686c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800683c:	897b      	ldrh	r3, [r7, #10]
 800683e:	11db      	asrs	r3, r3, #7
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 0306 	and.w	r3, r3, #6
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f063 030e 	orn	r3, r3, #14
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <I2C_MasterRequestRead+0x198>)
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f865 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	00010008 	.word	0x00010008
 8006878:	00010002 	.word	0x00010002

0800687c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800688c:	e025      	b.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d021      	beq.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006896:	f7fe fb1b 	bl	8004ed0 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d116      	bne.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e023      	b.n	8006922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d10d      	bne.n	8006900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf0c      	ite	eq
 80068f6:	2301      	moveq	r3, #1
 80068f8:	2300      	movne	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	e00c      	b.n	800691a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	43da      	mvns	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	429a      	cmp	r2, r3
 800691e:	d0b6      	beq.n	800688e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006938:	e051      	b.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d123      	bne.n	8006992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0204 	orr.w	r2, r3, #4
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e046      	b.n	8006a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d021      	beq.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699a:	f7fe fa99 	bl	8004ed0 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d116      	bne.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0220 	orr.w	r2, r3, #32
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e020      	b.n	8006a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d10c      	bne.n	8006a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	43da      	mvns	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4013      	ands	r3, r2
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	2300      	moveq	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	e00b      	b.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	43da      	mvns	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d18d      	bne.n	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a34:	e02d      	b.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f8ce 	bl	8006bd8 <I2C_IsAcknowledgeFailed>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e02d      	b.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d021      	beq.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fe fa3f 	bl	8004ed0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e007      	b.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d1ca      	bne.n	8006a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ab6:	e02d      	b.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f88d 	bl	8006bd8 <I2C_IsAcknowledgeFailed>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e02d      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d021      	beq.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad0:	f7fe f9fe 	bl	8004ed0 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e007      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d1ca      	bne.n	8006ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b38:	e042      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d119      	bne.n	8006b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e029      	b.n	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7c:	f7fe f9a8 	bl	8004ed0 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d116      	bne.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e007      	b.n	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d1b5      	bne.n	8006b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bee:	d11b      	bne.n	8006c28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	f043 0204 	orr.w	r2, r3, #4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e267      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d075      	beq.n	8006d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c56:	4b88      	ldr	r3, [pc, #544]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00c      	beq.n	8006c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c62:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d112      	bne.n	8006c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6e:	4b82      	ldr	r3, [pc, #520]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c7a:	d10b      	bne.n	8006c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7c:	4b7e      	ldr	r3, [pc, #504]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d05b      	beq.n	8006d40 <HAL_RCC_OscConfig+0x108>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d157      	bne.n	8006d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e242      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d106      	bne.n	8006cac <HAL_RCC_OscConfig+0x74>
 8006c9e:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a75      	ldr	r2, [pc, #468]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e01d      	b.n	8006ce8 <HAL_RCC_OscConfig+0xb0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x98>
 8006cb6:	4b70      	ldr	r3, [pc, #448]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6f      	ldr	r2, [pc, #444]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4b6d      	ldr	r3, [pc, #436]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6c      	ldr	r2, [pc, #432]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	e00b      	b.n	8006ce8 <HAL_RCC_OscConfig+0xb0>
 8006cd0:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a68      	ldr	r2, [pc, #416]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4b66      	ldr	r3, [pc, #408]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fe f8ee 	bl	8004ed0 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf8:	f7fe f8ea 	bl	8004ed0 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	; 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e207      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0a:	4b5b      	ldr	r3, [pc, #364]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0xc0>
 8006d16:	e014      	b.n	8006d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7fe f8da 	bl	8004ed0 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d20:	f7fe f8d6 	bl	8004ed0 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b64      	cmp	r3, #100	; 0x64
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e1f3      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d32:	4b51      	ldr	r3, [pc, #324]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0xe8>
 8006d3e:	e000      	b.n	8006d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d063      	beq.n	8006e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d4e:	4b4a      	ldr	r3, [pc, #296]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5a:	4b47      	ldr	r3, [pc, #284]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d11c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d66:	4b44      	ldr	r3, [pc, #272]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d116      	bne.n	8006da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_RCC_OscConfig+0x152>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d001      	beq.n	8006d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1c7      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8a:	4b3b      	ldr	r3, [pc, #236]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4937      	ldr	r1, [pc, #220]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9e:	e03a      	b.n	8006e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d020      	beq.n	8006dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da8:	4b34      	ldr	r3, [pc, #208]	; (8006e7c <HAL_RCC_OscConfig+0x244>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fe f88f 	bl	8004ed0 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db6:	f7fe f88b 	bl	8004ed0 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e1a8      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd4:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4925      	ldr	r1, [pc, #148]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]
 8006de8:	e015      	b.n	8006e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <HAL_RCC_OscConfig+0x244>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fe f86e 	bl	8004ed0 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df8:	f7fe f86a 	bl	8004ed0 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e187      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d036      	beq.n	8006e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d016      	beq.n	8006e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2a:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <HAL_RCC_OscConfig+0x248>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e30:	f7fe f84e 	bl	8004ed0 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e38:	f7fe f84a 	bl	8004ed0 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e167      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x200>
 8006e56:	e01b      	b.n	8006e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCC_OscConfig+0x248>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5e:	f7fe f837 	bl	8004ed0 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e64:	e00e      	b.n	8006e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e66:	f7fe f833 	bl	8004ed0 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d907      	bls.n	8006e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e150      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	42470000 	.word	0x42470000
 8006e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e84:	4b88      	ldr	r3, [pc, #544]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ea      	bne.n	8006e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8097 	beq.w	8006fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea2:	4b81      	ldr	r3, [pc, #516]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	4a7c      	ldr	r2, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ebe:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ece:	4b77      	ldr	r3, [pc, #476]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d118      	bne.n	8006f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eda:	4b74      	ldr	r3, [pc, #464]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a73      	ldr	r2, [pc, #460]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee6:	f7fd fff3 	bl	8004ed0 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eee:	f7fd ffef 	bl	8004ed0 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e10c      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f00:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <HAL_RCC_OscConfig+0x2ea>
 8006f14:	4b64      	ldr	r3, [pc, #400]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	4a63      	ldr	r2, [pc, #396]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f20:	e01c      	b.n	8006f5c <HAL_RCC_OscConfig+0x324>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x30c>
 8006f2a:	4b5f      	ldr	r3, [pc, #380]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a5e      	ldr	r2, [pc, #376]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
 8006f36:	4b5c      	ldr	r3, [pc, #368]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a5b      	ldr	r2, [pc, #364]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
 8006f42:	e00b      	b.n	8006f5c <HAL_RCC_OscConfig+0x324>
 8006f44:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4a57      	ldr	r2, [pc, #348]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f50:	4b55      	ldr	r3, [pc, #340]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4a54      	ldr	r2, [pc, #336]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f56:	f023 0304 	bic.w	r3, r3, #4
 8006f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d015      	beq.n	8006f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fd ffb4 	bl	8004ed0 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f6c:	f7fd ffb0 	bl	8004ed0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0cb      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f82:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0ee      	beq.n	8006f6c <HAL_RCC_OscConfig+0x334>
 8006f8e:	e014      	b.n	8006fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f90:	f7fd ff9e 	bl	8004ed0 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fd ff9a 	bl	8004ed0 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0b5      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fae:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ee      	bne.n	8006f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d105      	bne.n	8006fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc0:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80a1 	beq.w	8007118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fd6:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 030c 	and.w	r3, r3, #12
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d05c      	beq.n	800709c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d141      	bne.n	800706e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff0:	f7fd ff6e 	bl	8004ed0 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff8:	f7fd ff6a 	bl	8004ed0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e087      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700a:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	019b      	lsls	r3, r3, #6
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	3b01      	subs	r3, #1
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	061b      	lsls	r3, r3, #24
 800703a:	491b      	ldr	r1, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 800703c:	4313      	orrs	r3, r2
 800703e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007046:	f7fd ff43 	bl	8004ed0 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704e:	f7fd ff3f 	bl	8004ed0 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e05c      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x416>
 800706c:	e054      	b.n	8007118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007074:	f7fd ff2c 	bl	8004ed0 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707c:	f7fd ff28 	bl	8004ed0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e045      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x444>
 800709a:	e03d      	b.n	8007118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d107      	bne.n	80070b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e038      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000
 80070b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_RCC_OscConfig+0x4ec>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d028      	beq.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d121      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d11a      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070e4:	4013      	ands	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d111      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	3b01      	subs	r3, #1
 80070fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d107      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023800 	.word	0x40023800

08007128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0cc      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800713c:	4b68      	ldr	r3, [pc, #416]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d90c      	bls.n	8007164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714a:	4b65      	ldr	r3, [pc, #404]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007152:	4b63      	ldr	r3, [pc, #396]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d001      	beq.n	8007164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0b8      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a58      	ldr	r2, [pc, #352]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007194:	4b53      	ldr	r3, [pc, #332]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4a52      	ldr	r2, [pc, #328]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800719e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	494d      	ldr	r1, [pc, #308]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d044      	beq.n	8007248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d119      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e07f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d003      	beq.n	80071e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d107      	bne.n	80071f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e6:	4b3f      	ldr	r3, [pc, #252]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e06f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f6:	4b3b      	ldr	r3, [pc, #236]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e067      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007206:	4b37      	ldr	r3, [pc, #220]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 0203 	bic.w	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4934      	ldr	r1, [pc, #208]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007218:	f7fd fe5a 	bl	8004ed0 <HAL_GetTick>
 800721c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	e00a      	b.n	8007236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007220:	f7fd fe56 	bl	8004ed0 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f241 3288 	movw	r2, #5000	; 0x1388
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e04f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 020c 	and.w	r2, r3, #12
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	429a      	cmp	r2, r3
 8007246:	d1eb      	bne.n	8007220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007248:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d20c      	bcs.n	8007270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b22      	ldr	r3, [pc, #136]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e032      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727c:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4916      	ldr	r1, [pc, #88]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	4313      	orrs	r3, r2
 800728c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	490e      	ldr	r1, [pc, #56]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072ae:	f000 f821 	bl	80072f4 <HAL_RCC_GetSysClockFreq>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	490a      	ldr	r1, [pc, #40]	; (80072e8 <HAL_RCC_ClockConfig+0x1c0>)
 80072c0:	5ccb      	ldrb	r3, [r1, r3]
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 80072c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd fdba 	bl	8004e48 <HAL_InitTick>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40023c00 	.word	0x40023c00
 80072e4:	40023800 	.word	0x40023800
 80072e8:	0800b020 	.word	0x0800b020
 80072ec:	2000027c 	.word	0x2000027c
 80072f0:	20000280 	.word	0x20000280

080072f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f8:	b094      	sub	sp, #80	; 0x50
 80072fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007300:	2300      	movs	r3, #0
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007304:	2300      	movs	r3, #0
 8007306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800730c:	4b79      	ldr	r3, [pc, #484]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b08      	cmp	r3, #8
 8007316:	d00d      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x40>
 8007318:	2b08      	cmp	r3, #8
 800731a:	f200 80e1 	bhi.w	80074e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x34>
 8007322:	2b04      	cmp	r3, #4
 8007324:	d003      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0x3a>
 8007326:	e0db      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007328:	4b73      	ldr	r3, [pc, #460]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800732a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800732c:	e0db      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800732e:	4b73      	ldr	r3, [pc, #460]	; (80074fc <HAL_RCC_GetSysClockFreq+0x208>)
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007332:	e0d8      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007334:	4b6f      	ldr	r3, [pc, #444]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800733e:	4b6d      	ldr	r3, [pc, #436]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d063      	beq.n	8007412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734a:	4b6a      	ldr	r3, [pc, #424]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	2200      	movs	r2, #0
 8007352:	63bb      	str	r3, [r7, #56]	; 0x38
 8007354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007366:	4622      	mov	r2, r4
 8007368:	462b      	mov	r3, r5
 800736a:	f04f 0000 	mov.w	r0, #0
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	0159      	lsls	r1, r3, #5
 8007374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007378:	0150      	lsls	r0, r2, #5
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4621      	mov	r1, r4
 8007380:	1a51      	subs	r1, r2, r1
 8007382:	6139      	str	r1, [r7, #16]
 8007384:	4629      	mov	r1, r5
 8007386:	eb63 0301 	sbc.w	r3, r3, r1
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007398:	4659      	mov	r1, fp
 800739a:	018b      	lsls	r3, r1, #6
 800739c:	4651      	mov	r1, sl
 800739e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073a2:	4651      	mov	r1, sl
 80073a4:	018a      	lsls	r2, r1, #6
 80073a6:	4651      	mov	r1, sl
 80073a8:	ebb2 0801 	subs.w	r8, r2, r1
 80073ac:	4659      	mov	r1, fp
 80073ae:	eb63 0901 	sbc.w	r9, r3, r1
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073c6:	4690      	mov	r8, r2
 80073c8:	4699      	mov	r9, r3
 80073ca:	4623      	mov	r3, r4
 80073cc:	eb18 0303 	adds.w	r3, r8, r3
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	462b      	mov	r3, r5
 80073d4:	eb49 0303 	adc.w	r3, r9, r3
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073e6:	4629      	mov	r1, r5
 80073e8:	024b      	lsls	r3, r1, #9
 80073ea:	4621      	mov	r1, r4
 80073ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073f0:	4621      	mov	r1, r4
 80073f2:	024a      	lsls	r2, r1, #9
 80073f4:	4610      	mov	r0, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	2200      	movs	r2, #0
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007404:	f7f9 fbc4 	bl	8000b90 <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4613      	mov	r3, r2
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007410:	e058      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007412:	4b38      	ldr	r3, [pc, #224]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	099b      	lsrs	r3, r3, #6
 8007418:	2200      	movs	r2, #0
 800741a:	4618      	mov	r0, r3
 800741c:	4611      	mov	r1, r2
 800741e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	2300      	movs	r3, #0
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	f04f 0000 	mov.w	r0, #0
 8007434:	f04f 0100 	mov.w	r1, #0
 8007438:	0159      	lsls	r1, r3, #5
 800743a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800743e:	0150      	lsls	r0, r2, #5
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4641      	mov	r1, r8
 8007446:	ebb2 0a01 	subs.w	sl, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800745c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007464:	ebb2 040a 	subs.w	r4, r2, sl
 8007468:	eb63 050b 	sbc.w	r5, r3, fp
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	00eb      	lsls	r3, r5, #3
 8007476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800747a:	00e2      	lsls	r2, r4, #3
 800747c:	4614      	mov	r4, r2
 800747e:	461d      	mov	r5, r3
 8007480:	4643      	mov	r3, r8
 8007482:	18e3      	adds	r3, r4, r3
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	464b      	mov	r3, r9
 8007488:	eb45 0303 	adc.w	r3, r5, r3
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800749a:	4629      	mov	r1, r5
 800749c:	028b      	lsls	r3, r1, #10
 800749e:	4621      	mov	r1, r4
 80074a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074a4:	4621      	mov	r1, r4
 80074a6:	028a      	lsls	r2, r1, #10
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ae:	2200      	movs	r2, #0
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	61fa      	str	r2, [r7, #28]
 80074b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b8:	f7f9 fb6a 	bl	8000b90 <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4613      	mov	r3, r2
 80074c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	3301      	adds	r3, #1
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074de:	e002      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80074e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3750      	adds	r7, #80	; 0x50
 80074ec:	46bd      	mov	sp, r7
 80074ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f2:	bf00      	nop
 80074f4:	40023800 	.word	0x40023800
 80074f8:	00f42400 	.word	0x00f42400
 80074fc:	007a1200 	.word	0x007a1200

08007500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <HAL_RCC_GetHCLKFreq+0x14>)
 8007506:	681b      	ldr	r3, [r3, #0]
}
 8007508:	4618      	mov	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	2000027c 	.word	0x2000027c

08007518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800751c:	f7ff fff0 	bl	8007500 <HAL_RCC_GetHCLKFreq>
 8007520:	4602      	mov	r2, r0
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	0a9b      	lsrs	r3, r3, #10
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	4903      	ldr	r1, [pc, #12]	; (800753c <HAL_RCC_GetPCLK1Freq+0x24>)
 800752e:	5ccb      	ldrb	r3, [r1, r3]
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40023800 	.word	0x40023800
 800753c:	0800b030 	.word	0x0800b030

08007540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007544:	f7ff ffdc 	bl	8007500 <HAL_RCC_GetHCLKFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	0b5b      	lsrs	r3, r3, #13
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	4903      	ldr	r1, [pc, #12]	; (8007564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40023800 	.word	0x40023800
 8007564:	0800b030 	.word	0x0800b030

08007568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e07b      	b.n	8007672 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758a:	d009      	beq.n	80075a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	61da      	str	r2, [r3, #28]
 8007592:	e005      	b.n	80075a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fd f964 	bl	8004888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	ea42 0103 	orr.w	r1, r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 0104 	and.w	r1, r3, #4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	f003 0210 	and.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b08c      	sub	sp, #48	; 0x30
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007688:	2301      	movs	r3, #1
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x26>
 800769c:	2302      	movs	r3, #2
 800769e:	e18a      	b.n	80079b6 <HAL_SPI_TransmitReceive+0x33c>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a8:	f7fd fc12 	bl	8004ed0 <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00f      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d0:	d107      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
 80076da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d003      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
 80076e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e8:	e15b      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007702:	e14e      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b04      	cmp	r3, #4
 800770e:	d003      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2205      	movs	r2, #5
 8007714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	887a      	ldrh	r2, [r7, #2]
 800773a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d007      	beq.n	800776c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007774:	d178      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x10a>
 800777e:	8b7b      	ldrh	r3, [r7, #26]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d166      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077a8:	e053      	b.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d11b      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d113      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	1c9a      	adds	r2, r3, #2
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d119      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d014      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	b292      	uxth	r2, r2
 8007814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800782e:	2301      	movs	r3, #1
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007832:	f7fd fb4d 	bl	8004ed0 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783e:	429a      	cmp	r2, r3
 8007840:	d807      	bhi.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d003      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007850:	e0a7      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1a6      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1a1      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 8007866:	e07c      	b.n	8007962 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x1fc>
 8007870:	8b7b      	ldrh	r3, [r7, #26]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d16b      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	e057      	b.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d11c      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d017      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d114      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d119      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d014      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007924:	2301      	movs	r3, #1
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007928:	f7fd fad2 	bl	8004ed0 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007934:	429a      	cmp	r2, r3
 8007936:	d803      	bhi.n	8007940 <HAL_SPI_TransmitReceive+0x2c6>
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d102      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x2cc>
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794c:	e029      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1a2      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d19d      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f8b2 	bl	8007ad0 <SPI_EndRxTxTransaction>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800797e:	e010      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	e000      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	; 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d0:	f7fd fa7e 	bl	8004ed0 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e0:	f7fd fa76 	bl	8004ed0 <HAL_GetTick>
 80079e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	e054      	b.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d050      	beq.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a00:	f7fd fa66 	bl	8004ed0 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d902      	bls.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2e:	d111      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a38:	d004      	beq.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d107      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d10f      	bne.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e017      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d19b      	bne.n	80079f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	2000027c 	.word	0x2000027c

08007ad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007adc:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <SPI_EndRxTxTransaction+0x7c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <SPI_EndRxTxTransaction+0x80>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	0d5b      	lsrs	r3, r3, #21
 8007ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007afa:	d112      	bne.n	8007b22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff ff5a 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e00f      	b.n	8007b42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d0f2      	beq.n	8007b22 <SPI_EndRxTxTransaction+0x52>
 8007b3c:	e000      	b.n	8007b40 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b3e:	bf00      	nop
  }

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000027c 	.word	0x2000027c
 8007b50:	165e9f81 	.word	0x165e9f81

08007b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e04c      	b.n	8007c00 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d111      	bne.n	8007b96 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fc0c 	bl	8009398 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_TIM_Base_Init+0xb4>)
 8007b8c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f001 f929 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	08004919 	.word	0x08004919

08007c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d001      	beq.n	8007c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e03c      	b.n	8007c9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <HAL_TIM_Base_Start+0xa0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d018      	beq.n	8007c68 <HAL_TIM_Base_Start+0x5c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d013      	beq.n	8007c68 <HAL_TIM_Base_Start+0x5c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1a      	ldr	r2, [pc, #104]	; (8007cb0 <HAL_TIM_Base_Start+0xa4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00e      	beq.n	8007c68 <HAL_TIM_Base_Start+0x5c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a19      	ldr	r2, [pc, #100]	; (8007cb4 <HAL_TIM_Base_Start+0xa8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d009      	beq.n	8007c68 <HAL_TIM_Base_Start+0x5c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a17      	ldr	r2, [pc, #92]	; (8007cb8 <HAL_TIM_Base_Start+0xac>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <HAL_TIM_Base_Start+0x5c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIM_Base_Start+0xb0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d111      	bne.n	8007c8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b06      	cmp	r3, #6
 8007c78:	d010      	beq.n	8007c9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0201 	orr.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8a:	e007      	b.n	8007c9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0201 	orr.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40014000 	.word	0x40014000

08007cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e044      	b.n	8007d62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d018      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d02:	d013      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1a      	ldr	r2, [pc, #104]	; (8007d74 <HAL_TIM_Base_Start_IT+0xb4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00e      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a19      	ldr	r2, [pc, #100]	; (8007d78 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d111      	bne.n	8007d50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b06      	cmp	r3, #6
 8007d3c:	d010      	beq.n	8007d60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0201 	orr.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4e:	e007      	b.n	8007d60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40014000 	.word	0x40014000

08007d84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e04c      	b.n	8007e30 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d111      	bne.n	8007dc6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 faf4 	bl	8009398 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <HAL_TIM_OC_Init+0xb4>)
 8007dbc:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f001 f811 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	08007e3d 	.word	0x08007e3d

08007e3c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e04c      	b.n	8007efc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d111      	bne.n	8007e92 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa8e 	bl	8009398 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <HAL_TIM_PWM_Init+0xb4>)
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 ffab 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08007f09 	.word	0x08007f09

08007f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_TIM_PWM_Start+0x24>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	bf14      	ite	ne
 8007f38:	2301      	movne	r3, #1
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e022      	b.n	8007f86 <HAL_TIM_PWM_Start+0x6a>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d109      	bne.n	8007f5a <HAL_TIM_PWM_Start+0x3e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	bf14      	ite	ne
 8007f52:	2301      	movne	r3, #1
 8007f54:	2300      	moveq	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e015      	b.n	8007f86 <HAL_TIM_PWM_Start+0x6a>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d109      	bne.n	8007f74 <HAL_TIM_PWM_Start+0x58>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	bf14      	ite	ne
 8007f6c:	2301      	movne	r3, #1
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	e008      	b.n	8007f86 <HAL_TIM_PWM_Start+0x6a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e068      	b.n	8008060 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <HAL_TIM_PWM_Start+0x82>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	e013      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xaa>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d104      	bne.n	8007fae <HAL_TIM_PWM_Start+0x92>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fac:	e00b      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xaa>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_PWM_Start+0xa2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fbc:	e003      	b.n	8007fc6 <HAL_TIM_PWM_Start+0xaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 f9bc 	bl	800934c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a23      	ldr	r2, [pc, #140]	; (8008068 <HAL_TIM_PWM_Start+0x14c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d107      	bne.n	8007fee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1d      	ldr	r2, [pc, #116]	; (8008068 <HAL_TIM_PWM_Start+0x14c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d018      	beq.n	800802a <HAL_TIM_PWM_Start+0x10e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008000:	d013      	beq.n	800802a <HAL_TIM_PWM_Start+0x10e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a19      	ldr	r2, [pc, #100]	; (800806c <HAL_TIM_PWM_Start+0x150>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00e      	beq.n	800802a <HAL_TIM_PWM_Start+0x10e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <HAL_TIM_PWM_Start+0x154>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d009      	beq.n	800802a <HAL_TIM_PWM_Start+0x10e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a16      	ldr	r2, [pc, #88]	; (8008074 <HAL_TIM_PWM_Start+0x158>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d004      	beq.n	800802a <HAL_TIM_PWM_Start+0x10e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a14      	ldr	r2, [pc, #80]	; (8008078 <HAL_TIM_PWM_Start+0x15c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d111      	bne.n	800804e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b06      	cmp	r3, #6
 800803a:	d010      	beq.n	800805e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804c:	e007      	b.n	800805e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40014000 	.word	0x40014000

0800807c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e04c      	b.n	800812a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d111      	bne.n	80080c0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f977 	bl	8009398 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <HAL_TIM_OnePulse_Init+0xb8>)
 80080b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f000 fe94 	bl	8008e00 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0208 	bic.w	r2, r2, #8
 80080e6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	08008139 	.word	0x08008139

08008138 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008164:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800816c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008174:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d108      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d105      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008182:	7b7b      	ldrb	r3, [r7, #13]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d102      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008188:	7b3b      	ldrb	r3, [r7, #12]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d001      	beq.n	8008192 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e03b      	b.n	800820a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0202 	orr.w	r2, r2, #2
 80081c0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0204 	orr.w	r2, r2, #4
 80081d0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2201      	movs	r2, #1
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 f8b6 	bl	800934c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2201      	movs	r2, #1
 80081e6:	2104      	movs	r1, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 f8af 	bl	800934c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d107      	bne.n	8008208 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008206:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000

08008218 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0a2      	b.n	8008372 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d111      	bne.n	800825c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f8a9 	bl	8009398 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a4a      	ldr	r2, [pc, #296]	; (800837c <HAL_TIM_Encoder_Init+0x164>)
 8008252:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008272:	f023 0307 	bic.w	r3, r3, #7
 8008276:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f000 fdbc 	bl	8008e00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	4313      	orrs	r3, r2
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082ce:	f023 030c 	bic.w	r3, r3, #12
 80082d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	4313      	orrs	r3, r2
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	011a      	lsls	r2, r3, #4
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	4313      	orrs	r3, r2
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800830c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008314:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	4313      	orrs	r3, r2
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	08004a1d 	.word	0x08004a1d

08008380 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008390:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008398:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d110      	bne.n	80083d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d102      	bne.n	80083bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80083b6:	7b7b      	ldrb	r3, [r7, #13]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d001      	beq.n	80083c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e069      	b.n	8008494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d0:	e031      	b.n	8008436 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d110      	bne.n	80083fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d102      	bne.n	80083e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083de:	7b3b      	ldrb	r3, [r7, #12]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d001      	beq.n	80083e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e055      	b.n	8008494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f8:	e01d      	b.n	8008436 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d108      	bne.n	8008412 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008406:	7b7b      	ldrb	r3, [r7, #13]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d102      	bne.n	8008412 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800840c:	7b3b      	ldrb	r3, [r7, #12]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d001      	beq.n	8008416 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e03e      	b.n	8008494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_TIM_Encoder_Start+0xc4>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d008      	beq.n	8008454 <HAL_TIM_Encoder_Start+0xd4>
 8008442:	e00f      	b.n	8008464 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2201      	movs	r2, #1
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f000 ff7d 	bl	800934c <TIM_CCxChannelCmd>
      break;
 8008452:	e016      	b.n	8008482 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2201      	movs	r2, #1
 800845a:	2104      	movs	r1, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f000 ff75 	bl	800934c <TIM_CCxChannelCmd>
      break;
 8008462:	e00e      	b.n	8008482 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2201      	movs	r2, #1
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f000 ff6d 	bl	800934c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2201      	movs	r2, #1
 8008478:	2104      	movs	r1, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f000 ff66 	bl	800934c <TIM_CCxChannelCmd>
      break;
 8008480:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0201 	orr.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d128      	bne.n	8008504 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d121      	bne.n	8008504 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f06f 0202 	mvn.w	r2, #2
 80084c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
 80084e8:	e009      	b.n	80084fe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b04      	cmp	r3, #4
 8008510:	d128      	bne.n	8008564 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b04      	cmp	r3, #4
 800851e:	d121      	bne.n	8008564 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0204 	mvn.w	r2, #4
 8008528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
 8008548:	e009      	b.n	800855e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b08      	cmp	r3, #8
 8008570:	d128      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b08      	cmp	r3, #8
 800857e:	d121      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0208 	mvn.w	r2, #8
 8008588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2204      	movs	r2, #4
 800858e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
 80085a8:	e009      	b.n	80085be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f003 0310 	and.w	r3, r3, #16
 80085ce:	2b10      	cmp	r3, #16
 80085d0:	d128      	bne.n	8008624 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d121      	bne.n	8008624 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0210 	mvn.w	r2, #16
 80085e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2208      	movs	r2, #8
 80085ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3
 8008608:	e009      	b.n	800861e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b01      	cmp	r3, #1
 8008630:	d110      	bne.n	8008654 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b01      	cmp	r3, #1
 800863e:	d109      	bne.n	8008654 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0201 	mvn.w	r2, #1
 8008648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865e:	2b80      	cmp	r3, #128	; 0x80
 8008660:	d110      	bne.n	8008684 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d109      	bne.n	8008684 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	d110      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	d109      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d110      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d109      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0220 	mvn.w	r2, #32
 80086d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008706:	2302      	movs	r3, #2
 8008708:	e048      	b.n	800879c <HAL_TIM_OC_ConfigChannel+0xb0>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b0c      	cmp	r3, #12
 8008716:	d839      	bhi.n	800878c <HAL_TIM_OC_ConfigChannel+0xa0>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <HAL_TIM_OC_ConfigChannel+0x34>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008755 	.word	0x08008755
 8008724:	0800878d 	.word	0x0800878d
 8008728:	0800878d 	.word	0x0800878d
 800872c:	0800878d 	.word	0x0800878d
 8008730:	08008763 	.word	0x08008763
 8008734:	0800878d 	.word	0x0800878d
 8008738:	0800878d 	.word	0x0800878d
 800873c:	0800878d 	.word	0x0800878d
 8008740:	08008771 	.word	0x08008771
 8008744:	0800878d 	.word	0x0800878d
 8008748:	0800878d 	.word	0x0800878d
 800874c:	0800878d 	.word	0x0800878d
 8008750:	0800877f 	.word	0x0800877f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fbd0 	bl	8008f00 <TIM_OC1_SetConfig>
      break;
 8008760:	e017      	b.n	8008792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fc2f 	bl	8008fcc <TIM_OC2_SetConfig>
      break;
 800876e:	e010      	b.n	8008792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fc94 	bl	80090a4 <TIM_OC3_SetConfig>
      break;
 800877c:	e009      	b.n	8008792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 fcf7 	bl	8009178 <TIM_OC4_SetConfig>
      break;
 800878a:	e002      	b.n	8008792 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	75fb      	strb	r3, [r7, #23]
      break;
 8008790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087be:	2302      	movs	r3, #2
 80087c0:	e0ae      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b0c      	cmp	r3, #12
 80087ce:	f200 809f 	bhi.w	8008910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	0800880d 	.word	0x0800880d
 80087dc:	08008911 	.word	0x08008911
 80087e0:	08008911 	.word	0x08008911
 80087e4:	08008911 	.word	0x08008911
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	08008911 	.word	0x08008911
 80087f0:	08008911 	.word	0x08008911
 80087f4:	08008911 	.word	0x08008911
 80087f8:	0800888f 	.word	0x0800888f
 80087fc:	08008911 	.word	0x08008911
 8008800:	08008911 	.word	0x08008911
 8008804:	08008911 	.word	0x08008911
 8008808:	080088cf 	.word	0x080088cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fb74 	bl	8008f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0208 	orr.w	r2, r2, #8
 8008826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0204 	bic.w	r2, r2, #4
 8008836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6999      	ldr	r1, [r3, #24]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	619a      	str	r2, [r3, #24]
      break;
 800884a:	e064      	b.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fbba 	bl	8008fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6999      	ldr	r1, [r3, #24]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	021a      	lsls	r2, r3, #8
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	619a      	str	r2, [r3, #24]
      break;
 800888c:	e043      	b.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fc05 	bl	80090a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0208 	orr.w	r2, r2, #8
 80088a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0204 	bic.w	r2, r2, #4
 80088b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69d9      	ldr	r1, [r3, #28]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	61da      	str	r2, [r3, #28]
      break;
 80088cc:	e023      	b.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fc4f 	bl	8009178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69da      	ldr	r2, [r3, #28]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69d9      	ldr	r1, [r3, #28]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	021a      	lsls	r2, r3, #8
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	61da      	str	r2, [r3, #28]
      break;
 800890e:	e002      	b.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_TIM_ConfigClockSource+0x1c>
 8008940:	2302      	movs	r3, #2
 8008942:	e0b4      	b.n	8008aae <HAL_TIM_ConfigClockSource+0x186>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800896a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897c:	d03e      	beq.n	80089fc <HAL_TIM_ConfigClockSource+0xd4>
 800897e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008982:	f200 8087 	bhi.w	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898a:	f000 8086 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x172>
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008992:	d87f      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 8008994:	2b70      	cmp	r3, #112	; 0x70
 8008996:	d01a      	beq.n	80089ce <HAL_TIM_ConfigClockSource+0xa6>
 8008998:	2b70      	cmp	r3, #112	; 0x70
 800899a:	d87b      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 800899c:	2b60      	cmp	r3, #96	; 0x60
 800899e:	d050      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x11a>
 80089a0:	2b60      	cmp	r3, #96	; 0x60
 80089a2:	d877      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 80089a4:	2b50      	cmp	r3, #80	; 0x50
 80089a6:	d03c      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0xfa>
 80089a8:	2b50      	cmp	r3, #80	; 0x50
 80089aa:	d873      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 80089ac:	2b40      	cmp	r3, #64	; 0x40
 80089ae:	d058      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x13a>
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	d86f      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 80089b4:	2b30      	cmp	r3, #48	; 0x30
 80089b6:	d064      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	2b30      	cmp	r3, #48	; 0x30
 80089ba:	d86b      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d060      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15a>
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d867      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d05c      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15a>
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d05a      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15a>
 80089cc:	e062      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f000 fc95 	bl	800930c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	609a      	str	r2, [r3, #8]
      break;
 80089fa:	e04f      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f000 fc7e 	bl	800930c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a1e:	609a      	str	r2, [r3, #8]
      break;
 8008a20:	e03c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6859      	ldr	r1, [r3, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f000 fbf2 	bl	8009218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2150      	movs	r1, #80	; 0x50
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fc4b 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008a40:	e02c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6859      	ldr	r1, [r3, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f000 fc11 	bl	8009276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2160      	movs	r1, #96	; 0x60
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fc3b 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008a60:	e01c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f000 fbd2 	bl	8009218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2140      	movs	r1, #64	; 0x40
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fc2b 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008a80:	e00c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f000 fc22 	bl	80092d6 <TIM_ITRx_SetConfig>
      break;
 8008a92:	e003      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	73fb      	strb	r3, [r7, #15]
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	460b      	mov	r3, r1
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e135      	b.n	8008df4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d101      	bne.n	8008b96 <HAL_TIM_RegisterCallback+0x2a>
 8008b92:	2302      	movs	r3, #2
 8008b94:	e12e      	b.n	8008df4 <HAL_TIM_RegisterCallback+0x288>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	f040 80ba 	bne.w	8008d20 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	2b1a      	cmp	r3, #26
 8008bb0:	f200 80b3 	bhi.w	8008d1a <HAL_TIM_RegisterCallback+0x1ae>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <HAL_TIM_RegisterCallback+0x50>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008c29 	.word	0x08008c29
 8008bc0:	08008c31 	.word	0x08008c31
 8008bc4:	08008c39 	.word	0x08008c39
 8008bc8:	08008c41 	.word	0x08008c41
 8008bcc:	08008c49 	.word	0x08008c49
 8008bd0:	08008c51 	.word	0x08008c51
 8008bd4:	08008c59 	.word	0x08008c59
 8008bd8:	08008c61 	.word	0x08008c61
 8008bdc:	08008c69 	.word	0x08008c69
 8008be0:	08008c71 	.word	0x08008c71
 8008be4:	08008c79 	.word	0x08008c79
 8008be8:	08008c81 	.word	0x08008c81
 8008bec:	08008c89 	.word	0x08008c89
 8008bf0:	08008c91 	.word	0x08008c91
 8008bf4:	08008c99 	.word	0x08008c99
 8008bf8:	08008ca3 	.word	0x08008ca3
 8008bfc:	08008cad 	.word	0x08008cad
 8008c00:	08008cb7 	.word	0x08008cb7
 8008c04:	08008cc1 	.word	0x08008cc1
 8008c08:	08008ccb 	.word	0x08008ccb
 8008c0c:	08008cd5 	.word	0x08008cd5
 8008c10:	08008cdf 	.word	0x08008cdf
 8008c14:	08008ce9 	.word	0x08008ce9
 8008c18:	08008cf3 	.word	0x08008cf3
 8008c1c:	08008cfd 	.word	0x08008cfd
 8008c20:	08008d07 	.word	0x08008d07
 8008c24:	08008d11 	.word	0x08008d11
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008c2e:	e0dc      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008c36:	e0d8      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008c3e:	e0d4      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008c46:	e0d0      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008c4e:	e0cc      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008c56:	e0c8      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008c5e:	e0c4      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008c66:	e0c0      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008c6e:	e0bc      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008c76:	e0b8      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008c7e:	e0b4      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008c86:	e0b0      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008c8e:	e0ac      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008c96:	e0a8      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008ca0:	e0a3      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008caa:	e09e      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008cb4:	e099      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008cbe:	e094      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008cc8:	e08f      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008cd2:	e08a      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008cdc:	e085      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008ce6:	e080      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008cf0:	e07b      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008cfa:	e076      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008d04:	e071      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008d0e:	e06c      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008d18:	e067      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d1e:	e064      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d15c      	bne.n	8008de6 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	2b0d      	cmp	r3, #13
 8008d30:	d856      	bhi.n	8008de0 <HAL_TIM_RegisterCallback+0x274>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <HAL_TIM_RegisterCallback+0x1cc>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d71 	.word	0x08008d71
 8008d3c:	08008d79 	.word	0x08008d79
 8008d40:	08008d81 	.word	0x08008d81
 8008d44:	08008d89 	.word	0x08008d89
 8008d48:	08008d91 	.word	0x08008d91
 8008d4c:	08008d99 	.word	0x08008d99
 8008d50:	08008da1 	.word	0x08008da1
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008db1 	.word	0x08008db1
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc9 	.word	0x08008dc9
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008dd9 	.word	0x08008dd9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008d76:	e038      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d7e:	e034      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d86:	e030      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d8e:	e02c      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d96:	e028      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d9e:	e024      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008da6:	e020      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008dae:	e01c      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008db6:	e018      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008dbe:	e014      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008dc6:	e010      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008dce:	e00c      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008dd6:	e008      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008dde:	e004      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
        break;
 8008de4:	e001      	b.n	8008dea <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a34      	ldr	r2, [pc, #208]	; (8008ee4 <TIM_Base_SetConfig+0xe4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00f      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1e:	d00b      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a31      	ldr	r2, [pc, #196]	; (8008ee8 <TIM_Base_SetConfig+0xe8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a30      	ldr	r2, [pc, #192]	; (8008eec <TIM_Base_SetConfig+0xec>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a2f      	ldr	r2, [pc, #188]	; (8008ef0 <TIM_Base_SetConfig+0xf0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d108      	bne.n	8008e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <TIM_Base_SetConfig+0xe4>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01b      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d017      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a22      	ldr	r2, [pc, #136]	; (8008ee8 <TIM_Base_SetConfig+0xe8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a21      	ldr	r2, [pc, #132]	; (8008eec <TIM_Base_SetConfig+0xec>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <TIM_Base_SetConfig+0xf0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <TIM_Base_SetConfig+0xf4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <TIM_Base_SetConfig+0xf8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <TIM_Base_SetConfig+0xfc>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <TIM_Base_SetConfig+0xe4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d103      	bne.n	8008ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40000c00 	.word	0x40000c00
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800

08008f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	f023 0201 	bic.w	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f023 0302 	bic.w	r3, r3, #2
 8008f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <TIM_OC1_SetConfig+0xc8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d10c      	bne.n	8008f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f023 0308 	bic.w	r3, r3, #8
 8008f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 0304 	bic.w	r3, r3, #4
 8008f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <TIM_OC1_SetConfig+0xc8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d111      	bne.n	8008fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	621a      	str	r2, [r3, #32]
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	40010000 	.word	0x40010000

08008fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f023 0210 	bic.w	r2, r3, #16
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f023 0320 	bic.w	r3, r3, #32
 8009016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1e      	ldr	r2, [pc, #120]	; (80090a0 <TIM_OC2_SetConfig+0xd4>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d10d      	bne.n	8009048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	4313      	orrs	r3, r2
 800903e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <TIM_OC2_SetConfig+0xd4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d113      	bne.n	8009078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800905e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	40010000 	.word	0x40010000

080090a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	021b      	lsls	r3, r3, #8
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1d      	ldr	r2, [pc, #116]	; (8009174 <TIM_OC3_SetConfig+0xd0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d10d      	bne.n	800911e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800911c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a14      	ldr	r2, [pc, #80]	; (8009174 <TIM_OC3_SetConfig+0xd0>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d113      	bne.n	800914e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800912c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	4313      	orrs	r3, r2
 800914c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	621a      	str	r2, [r3, #32]
}
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	40010000 	.word	0x40010000

08009178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	031b      	lsls	r3, r3, #12
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a10      	ldr	r2, [pc, #64]	; (8009214 <TIM_OC4_SetConfig+0x9c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d109      	bne.n	80091ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	019b      	lsls	r3, r3, #6
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	621a      	str	r2, [r3, #32]
}
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40010000 	.word	0x40010000

08009218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 030a 	bic.w	r3, r3, #10
 8009254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009276:	b480      	push	{r7}
 8009278:	b087      	sub	sp, #28
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f023 0210 	bic.w	r2, r3, #16
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	031b      	lsls	r3, r3, #12
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	621a      	str	r2, [r3, #32]
}
 80092ca:	bf00      	nop
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b085      	sub	sp, #20
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f043 0307 	orr.w	r3, r3, #7
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	021a      	lsls	r2, r3, #8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	431a      	orrs	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	4313      	orrs	r3, r2
 8009338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	609a      	str	r2, [r3, #8]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 031f 	and.w	r3, r3, #31
 800935e:	2201      	movs	r2, #1
 8009360:	fa02 f303 	lsl.w	r3, r2, r3
 8009364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a1a      	ldr	r2, [r3, #32]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	43db      	mvns	r3, r3
 800936e:	401a      	ands	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a1a      	ldr	r2, [r3, #32]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f003 031f 	and.w	r3, r3, #31
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	fa01 f303 	lsl.w	r3, r1, r3
 8009384:	431a      	orrs	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	621a      	str	r2, [r3, #32]
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
	...

08009398 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	; (8009414 <TIM_ResetCallback+0x7c>)
 80093a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a1b      	ldr	r2, [pc, #108]	; (8009418 <TIM_ResetCallback+0x80>)
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a1a      	ldr	r2, [pc, #104]	; (800941c <TIM_ResetCallback+0x84>)
 80093b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a19      	ldr	r2, [pc, #100]	; (8009420 <TIM_ResetCallback+0x88>)
 80093bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a18      	ldr	r2, [pc, #96]	; (8009424 <TIM_ResetCallback+0x8c>)
 80093c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a17      	ldr	r2, [pc, #92]	; (8009428 <TIM_ResetCallback+0x90>)
 80093cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a16      	ldr	r2, [pc, #88]	; (800942c <TIM_ResetCallback+0x94>)
 80093d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a15      	ldr	r2, [pc, #84]	; (8009430 <TIM_ResetCallback+0x98>)
 80093dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a14      	ldr	r2, [pc, #80]	; (8009434 <TIM_ResetCallback+0x9c>)
 80093e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a13      	ldr	r2, [pc, #76]	; (8009438 <TIM_ResetCallback+0xa0>)
 80093ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a12      	ldr	r2, [pc, #72]	; (800943c <TIM_ResetCallback+0xa4>)
 80093f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a11      	ldr	r2, [pc, #68]	; (8009440 <TIM_ResetCallback+0xa8>)
 80093fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a10      	ldr	r2, [pc, #64]	; (8009444 <TIM_ResetCallback+0xac>)
 8009404:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	080039e9 	.word	0x080039e9
 8009418:	08008ab7 	.word	0x08008ab7
 800941c:	08008b2f 	.word	0x08008b2f
 8009420:	08008b43 	.word	0x08008b43
 8009424:	08008adf 	.word	0x08008adf
 8009428:	08008af3 	.word	0x08008af3
 800942c:	08008acb 	.word	0x08008acb
 8009430:	08008b07 	.word	0x08008b07
 8009434:	08008b1b 	.word	0x08008b1b
 8009438:	08008b57 	.word	0x08008b57
 800943c:	080095c9 	.word	0x080095c9
 8009440:	080095dd 	.word	0x080095dd
 8009444:	080095f1 	.word	0x080095f1

08009448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800945c:	2302      	movs	r3, #2
 800945e:	e050      	b.n	8009502 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1c      	ldr	r2, [pc, #112]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d018      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ac:	d013      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a18      	ldr	r2, [pc, #96]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00e      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d009      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a15      	ldr	r2, [pc, #84]	; (800951c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d004      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a13      	ldr	r2, [pc, #76]	; (8009520 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10c      	bne.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40014000 	.word	0x40014000

08009524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d101      	bne.n	8009540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800953c:	2302      	movs	r3, #2
 800953e:	e03d      	b.n	80095bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e04a      	b.n	80096ac <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d111      	bne.n	8009646 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fd2c 	bl	800a088 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <HAL_UART_Init+0xb0>)
 800963c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	; 0x24
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800965c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fff6 	bl	800a650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009672:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695a      	ldr	r2, [r3, #20]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009682:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009692:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	08004b1d 	.word	0x08004b1d

080096b8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	460b      	mov	r3, r1
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d107      	bne.n	80096e0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e08c      	b.n	80097fa <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_UART_RegisterCallback+0x36>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e085      	b.n	80097fa <HAL_UART_RegisterCallback+0x142>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d151      	bne.n	80097a6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	2b0c      	cmp	r3, #12
 8009706:	d845      	bhi.n	8009794 <HAL_UART_RegisterCallback+0xdc>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <HAL_UART_RegisterCallback+0x58>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009745 	.word	0x08009745
 8009714:	0800974d 	.word	0x0800974d
 8009718:	08009755 	.word	0x08009755
 800971c:	0800975d 	.word	0x0800975d
 8009720:	08009765 	.word	0x08009765
 8009724:	0800976d 	.word	0x0800976d
 8009728:	08009775 	.word	0x08009775
 800972c:	0800977d 	.word	0x0800977d
 8009730:	08009795 	.word	0x08009795
 8009734:	08009795 	.word	0x08009795
 8009738:	08009795 	.word	0x08009795
 800973c:	08009785 	.word	0x08009785
 8009740:	0800978d 	.word	0x0800978d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800974a:	e051      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009752:	e04d      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800975a:	e049      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009762:	e045      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800976a:	e041      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009772:	e03d      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800977a:	e039      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009782:	e035      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800978a:	e031      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009792:	e02d      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009798:	f043 0220 	orr.w	r2, r3, #32
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	75fb      	strb	r3, [r7, #23]
        break;
 80097a4:	e024      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d116      	bne.n	80097e0 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80097b2:	7afb      	ldrb	r3, [r7, #11]
 80097b4:	2b0b      	cmp	r3, #11
 80097b6:	d002      	beq.n	80097be <HAL_UART_RegisterCallback+0x106>
 80097b8:	2b0c      	cmp	r3, #12
 80097ba:	d004      	beq.n	80097c6 <HAL_UART_RegisterCallback+0x10e>
 80097bc:	e007      	b.n	80097ce <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80097c4:	e014      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80097cc:	e010      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	f043 0220 	orr.w	r2, r3, #32
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
        break;
 80097de:	e007      	b.n	80097f0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop

08009808 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4613      	mov	r3, r2
 8009814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b20      	cmp	r3, #32
 8009820:	d11d      	bne.n	800985e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <HAL_UART_Receive_IT+0x26>
 8009828:	88fb      	ldrh	r3, [r7, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e016      	b.n	8009860 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_UART_Receive_IT+0x38>
 800983c:	2302      	movs	r3, #2
 800983e:	e00f      	b.n	8009860 <HAL_UART_Receive_IT+0x58>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	461a      	mov	r2, r3
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fcf7 	bl	800a248 <UART_Start_Receive_IT>
 800985a:	4603      	mov	r3, r0
 800985c:	e000      	b.n	8009860 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800985e:	2302      	movs	r3, #2
  }
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	; 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b20      	cmp	r3, #32
 8009880:	d165      	bne.n	800994e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <HAL_UART_Transmit_DMA+0x26>
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e05e      	b.n	8009950 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_UART_Transmit_DMA+0x38>
 800989c:	2302      	movs	r3, #2
 800989e:	e057      	b.n	8009950 <HAL_UART_Transmit_DMA+0xe8>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	88fa      	ldrh	r2, [r7, #6]
 80098b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2221      	movs	r2, #33	; 0x21
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098cc:	4a22      	ldr	r2, [pc, #136]	; (8009958 <HAL_UART_Transmit_DMA+0xf0>)
 80098ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d4:	4a21      	ldr	r2, [pc, #132]	; (800995c <HAL_UART_Transmit_DMA+0xf4>)
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098dc:	4a20      	ldr	r2, [pc, #128]	; (8009960 <HAL_UART_Transmit_DMA+0xf8>)
 80098de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	2200      	movs	r2, #0
 80098e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80098e8:	f107 0308 	add.w	r3, r7, #8
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	6819      	ldr	r1, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3304      	adds	r3, #4
 80098fc:	461a      	mov	r2, r3
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	f7fb fcd6 	bl	80052b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800990c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3314      	adds	r3, #20
 800991c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	617b      	str	r3, [r7, #20]
   return(result);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	62bb      	str	r3, [r7, #40]	; 0x28
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3314      	adds	r3, #20
 8009934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009936:	627a      	str	r2, [r7, #36]	; 0x24
 8009938:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6a39      	ldr	r1, [r7, #32]
 800993c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	61fb      	str	r3, [r7, #28]
   return(result);
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e5      	bne.n	8009916 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	e000      	b.n	8009950 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800994e:	2302      	movs	r3, #2
  }
}
 8009950:	4618      	mov	r0, r3
 8009952:	3730      	adds	r7, #48	; 0x30
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	0800a0f9 	.word	0x0800a0f9
 800995c:	0800a195 	.word	0x0800a195
 8009960:	0800a1b3 	.word	0x0800a1b3

08009964 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b09a      	sub	sp, #104	; 0x68
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	330c      	adds	r3, #12
 8009972:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800997c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800997e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009982:	667b      	str	r3, [r7, #100]	; 0x64
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	330c      	adds	r3, #12
 800998a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800998c:	657a      	str	r2, [r7, #84]	; 0x54
 800998e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009992:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800999a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e5      	bne.n	800996c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3314      	adds	r3, #20
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	f023 0301 	bic.w	r3, r3, #1
 80099b6:	663b      	str	r3, [r7, #96]	; 0x60
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3314      	adds	r3, #20
 80099be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099c0:	643a      	str	r2, [r7, #64]	; 0x40
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e5      	bne.n	80099a0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d119      	bne.n	8009a10 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	330c      	adds	r3, #12
 80099e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	f023 0310 	bic.w	r3, r3, #16
 80099f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	330c      	adds	r3, #12
 80099fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1a:	2b40      	cmp	r3, #64	; 0x40
 8009a1c:	d136      	bne.n	8009a8c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3314      	adds	r3, #20
 8009a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3314      	adds	r3, #20
 8009a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a3e:	61ba      	str	r2, [r7, #24]
 8009a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6979      	ldr	r1, [r7, #20]
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e5      	bne.n	8009a1e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d018      	beq.n	8009a8c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	2200      	movs	r2, #0
 8009a60:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fb fc7a 	bl	8005360 <HAL_DMA_Abort>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00c      	beq.n	8009a8c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fb fe8e 	bl	8005798 <HAL_DMA_GetError>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d104      	bne.n	8009a8c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2210      	movs	r2, #16
 8009a86:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e00a      	b.n	8009aa2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3768      	adds	r7, #104	; 0x68
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b0ba      	sub	sp, #232	; 0xe8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10f      	bne.n	8009b12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af6:	f003 0320 	and.w	r3, r3, #32
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <HAL_UART_IRQHandler+0x66>
 8009afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fce3 	bl	800a4d6 <UART_Receive_IT>
      return;
 8009b10:	e25b      	b.n	8009fca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 80e1 	beq.w	8009cde <HAL_UART_IRQHandler+0x232>
 8009b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d106      	bne.n	8009b36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 80d4 	beq.w	8009cde <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <HAL_UART_IRQHandler+0xae>
 8009b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	f043 0201 	orr.w	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <HAL_UART_IRQHandler+0xd2>
 8009b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f043 0202 	orr.w	r2, r3, #2
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00b      	beq.n	8009ba2 <HAL_UART_IRQHandler+0xf6>
 8009b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f043 0204 	orr.w	r2, r3, #4
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d011      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x126>
 8009bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	f043 0208 	orr.w	r2, r3, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 81f2 	beq.w	8009fc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <HAL_UART_IRQHandler+0x14e>
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fc6e 	bl	800a4d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c04:	2b40      	cmp	r3, #64	; 0x40
 8009c06:	bf0c      	ite	eq
 8009c08:	2301      	moveq	r3, #1
 8009c0a:	2300      	movne	r3, #0
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d103      	bne.n	8009c26 <HAL_UART_IRQHandler+0x17a>
 8009c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d051      	beq.n	8009cca <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fb74 	bl	800a314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c36:	2b40      	cmp	r3, #64	; 0x40
 8009c38:	d142      	bne.n	8009cc0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3314      	adds	r3, #20
 8009c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3314      	adds	r3, #20
 8009c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1d9      	bne.n	8009c3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d013      	beq.n	8009cb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c92:	4a7f      	ldr	r2, [pc, #508]	; (8009e90 <HAL_UART_IRQHandler+0x3e4>)
 8009c94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fb fbd0 	bl	8005440 <HAL_DMA_Abort_IT>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d019      	beq.n	8009cda <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	e011      	b.n	8009cda <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cbe:	e00c      	b.n	8009cda <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc8:	e007      	b.n	8009cda <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009cd8:	e172      	b.n	8009fc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	bf00      	nop
    return;
 8009cdc:	e170      	b.n	8009fc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	f040 814c 	bne.w	8009f80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8145 	beq.w	8009f80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 813e 	beq.w	8009f80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d04:	2300      	movs	r3, #0
 8009d06:	60bb      	str	r3, [r7, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60bb      	str	r3, [r7, #8]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	60bb      	str	r3, [r7, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	f040 80b5 	bne.w	8009e94 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8142 	beq.w	8009fc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	f080 813b 	bcs.w	8009fc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d60:	f000 8088 	beq.w	8009e74 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	330c      	adds	r3, #12
 8009d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d90:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1d9      	bne.n	8009d64 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3314      	adds	r3, #20
 8009db6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dc2:	f023 0301 	bic.w	r3, r3, #1
 8009dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3314      	adds	r3, #20
 8009dd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009dd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e1      	bne.n	8009db0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3314      	adds	r3, #20
 8009df2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3314      	adds	r3, #20
 8009e0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e3      	bne.n	8009dec <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	330c      	adds	r3, #12
 8009e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e44:	f023 0310 	bic.w	r3, r3, #16
 8009e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	330c      	adds	r3, #12
 8009e52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009e56:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e3      	bne.n	8009e32 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fb fa76 	bl	8005360 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009e80:	b292      	uxth	r2, r2
 8009e82:	1a8a      	subs	r2, r1, r2
 8009e84:	b292      	uxth	r2, r2
 8009e86:	4611      	mov	r1, r2
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e8c:	e09a      	b.n	8009fc4 <HAL_UART_IRQHandler+0x518>
 8009e8e:	bf00      	nop
 8009e90:	0800a3db 	.word	0x0800a3db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 808c 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8087 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	330c      	adds	r3, #12
 8009ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ede:	647a      	str	r2, [r7, #68]	; 0x44
 8009ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e3      	bne.n	8009eba <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	623b      	str	r3, [r7, #32]
   return(result);
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f023 0301 	bic.w	r3, r3, #1
 8009f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f16:	633a      	str	r2, [r7, #48]	; 0x30
 8009f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0310 	bic.w	r3, r3, #16
 8009f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009f5c:	61fa      	str	r2, [r7, #28]
 8009f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	69b9      	ldr	r1, [r7, #24]
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e3      	bne.n	8009f38 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f74:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009f78:	4611      	mov	r1, r2
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f7e:	e023      	b.n	8009fc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d009      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x4f4>
 8009f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa33 	bl	800a404 <UART_Transmit_IT>
    return;
 8009f9e:	e014      	b.n	8009fca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <HAL_UART_IRQHandler+0x51e>
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fa73 	bl	800a4a4 <UART_EndTransmit_IT>
    return;
 8009fbe:	e004      	b.n	8009fca <HAL_UART_IRQHandler+0x51e>
    return;
 8009fc0:	bf00      	nop
 8009fc2:	e002      	b.n	8009fca <HAL_UART_IRQHandler+0x51e>
      return;
 8009fc4:	bf00      	nop
 8009fc6:	e000      	b.n	8009fca <HAL_UART_IRQHandler+0x51e>
      return;
 8009fc8:	bf00      	nop
  }
}
 8009fca:	37e8      	adds	r7, #232	; 0xe8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <UART_InitCallbacksToDefault+0x4c>)
 800a094:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a0f      	ldr	r2, [pc, #60]	; (800a0d8 <UART_InitCallbacksToDefault+0x50>)
 800a09a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a0f      	ldr	r2, [pc, #60]	; (800a0dc <UART_InitCallbacksToDefault+0x54>)
 800a0a0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a0e      	ldr	r2, [pc, #56]	; (800a0e0 <UART_InitCallbacksToDefault+0x58>)
 800a0a6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a0e      	ldr	r2, [pc, #56]	; (800a0e4 <UART_InitCallbacksToDefault+0x5c>)
 800a0ac:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a0d      	ldr	r2, [pc, #52]	; (800a0e8 <UART_InitCallbacksToDefault+0x60>)
 800a0b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <UART_InitCallbacksToDefault+0x64>)
 800a0b8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a0c      	ldr	r2, [pc, #48]	; (800a0f0 <UART_InitCallbacksToDefault+0x68>)
 800a0be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a0c      	ldr	r2, [pc, #48]	; (800a0f4 <UART_InitCallbacksToDefault+0x6c>)
 800a0c4:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	08009fe5 	.word	0x08009fe5
 800a0d8:	08009fd1 	.word	0x08009fd1
 800a0dc:	0800a00d 	.word	0x0800a00d
 800a0e0:	08009ff9 	.word	0x08009ff9
 800a0e4:	0800a021 	.word	0x0800a021
 800a0e8:	0800a035 	.word	0x0800a035
 800a0ec:	0800a049 	.word	0x0800a049
 800a0f0:	0800a05d 	.word	0x0800a05d
 800a0f4:	0800a071 	.word	0x0800a071

0800a0f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b090      	sub	sp, #64	; 0x40
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d137      	bne.n	800a184 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	2200      	movs	r2, #0
 800a118:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3314      	adds	r3, #20
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	623b      	str	r3, [r7, #32]
   return(result);
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a130:	63bb      	str	r3, [r7, #56]	; 0x38
 800a132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3314      	adds	r3, #20
 800a138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13a:	633a      	str	r2, [r7, #48]	; 0x30
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e5      	bne.n	800a11a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	330c      	adds	r3, #12
 800a154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
 800a166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	330c      	adds	r3, #12
 800a16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a16e:	61fa      	str	r2, [r7, #28]
 800a170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	69b9      	ldr	r1, [r7, #24]
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	617b      	str	r3, [r7, #20]
   return(result);
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e5      	bne.n	800a14e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a182:	e003      	b.n	800a18c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800a184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a188:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a18a:	4798      	blx	r3
}
 800a18c:	bf00      	nop
 800a18e:	3740      	adds	r7, #64	; 0x40
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ce:	2b80      	cmp	r3, #128	; 0x80
 800a1d0:	bf0c      	ite	eq
 800a1d2:	2301      	moveq	r3, #1
 800a1d4:	2300      	movne	r3, #0
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b21      	cmp	r3, #33	; 0x21
 800a1e4:	d108      	bne.n	800a1f8 <UART_DMAError+0x46>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a1f2:	68b8      	ldr	r0, [r7, #8]
 800a1f4:	f000 f866 	bl	800a2c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a202:	2b40      	cmp	r3, #64	; 0x40
 800a204:	bf0c      	ite	eq
 800a206:	2301      	moveq	r3, #1
 800a208:	2300      	movne	r3, #0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b22      	cmp	r3, #34	; 0x22
 800a218:	d108      	bne.n	800a22c <UART_DMAError+0x7a>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2200      	movs	r2, #0
 800a224:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a226:	68b8      	ldr	r0, [r7, #8]
 800a228:	f000 f874 	bl	800a314 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	f043 0210 	orr.w	r2, r3, #16
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23c:	68b8      	ldr	r0, [r7, #8]
 800a23e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	88fa      	ldrh	r2, [r7, #6]
 800a260:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	88fa      	ldrh	r2, [r7, #6]
 800a266:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2222      	movs	r2, #34	; 0x22
 800a272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d007      	beq.n	800a296 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a294:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f042 0201 	orr.w	r2, r2, #1
 800a2a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f042 0220 	orr.w	r2, r2, #32
 800a2b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b089      	sub	sp, #36	; 0x24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	330c      	adds	r3, #12
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	61ba      	str	r2, [r7, #24]
 800a2ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6979      	ldr	r1, [r7, #20]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e5      	bne.n	800a2cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2220      	movs	r2, #32
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a308:	bf00      	nop
 800a30a:	3724      	adds	r7, #36	; 0x24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b095      	sub	sp, #84	; 0x54
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	330c      	adds	r3, #12
 800a322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a332:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	330c      	adds	r3, #12
 800a33a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a33c:	643a      	str	r2, [r7, #64]	; 0x40
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e5      	bne.n	800a31c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3314      	adds	r3, #20
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	64bb      	str	r3, [r7, #72]	; 0x48
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3314      	adds	r3, #20
 800a36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a370:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d119      	bne.n	800a3c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f023 0310 	bic.w	r3, r3, #16
 800a3a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3ac:	61ba      	str	r2, [r7, #24]
 800a3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6979      	ldr	r1, [r7, #20]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e5      	bne.n	800a38c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a3ce:	bf00      	nop
 800a3d0:	3754      	adds	r7, #84	; 0x54
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b21      	cmp	r3, #33	; 0x21
 800a416:	d13e      	bne.n	800a496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a420:	d114      	bne.n	800a44c <UART_Transmit_IT+0x48>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d110      	bne.n	800a44c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a43e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	1c9a      	adds	r2, r3, #2
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	621a      	str	r2, [r3, #32]
 800a44a:	e008      	b.n	800a45e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	1c59      	adds	r1, r3, #1
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6211      	str	r1, [r2, #32]
 800a456:	781a      	ldrb	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29b      	uxth	r3, r3
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	4619      	mov	r1, r3
 800a46c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10f      	bne.n	800a492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e000      	b.n	800a498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a496:	2302      	movs	r3, #2
  }
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b08c      	sub	sp, #48	; 0x30
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b22      	cmp	r3, #34	; 0x22
 800a4e8:	f040 80ad 	bne.w	800a646 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d117      	bne.n	800a526 <UART_Receive_IT+0x50>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d113      	bne.n	800a526 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a514:	b29a      	uxth	r2, r3
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51e:	1c9a      	adds	r2, r3, #2
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	629a      	str	r2, [r3, #40]	; 0x28
 800a524:	e026      	b.n	800a574 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a538:	d007      	beq.n	800a54a <UART_Receive_IT+0x74>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <UART_Receive_IT+0x82>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	b2da      	uxtb	r2, r3
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e008      	b.n	800a56a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a564:	b2da      	uxtb	r2, r3
 800a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a568:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	4619      	mov	r1, r3
 800a582:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a584:	2b00      	cmp	r3, #0
 800a586:	d15c      	bne.n	800a642 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0220 	bic.w	r2, r2, #32
 800a596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	695a      	ldr	r2, [r3, #20]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0201 	bic.w	r2, r2, #1
 800a5b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d136      	bne.n	800a636 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f023 0310 	bic.w	r3, r3, #16
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ee:	623a      	str	r2, [r7, #32]
 800a5f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	69f9      	ldr	r1, [r7, #28]
 800a5f4:	6a3a      	ldr	r2, [r7, #32]
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e5      	bne.n	800a5ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2b10      	cmp	r3, #16
 800a60e:	d10a      	bne.n	800a626 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a62e:	4611      	mov	r1, r2
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
 800a634:	e003      	b.n	800a63e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	e002      	b.n	800a648 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e000      	b.n	800a648 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a646:	2302      	movs	r3, #2
  }
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3730      	adds	r7, #48	; 0x30
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a654:	b0c0      	sub	sp, #256	; 0x100
 800a656:	af00      	add	r7, sp, #0
 800a658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a66c:	68d9      	ldr	r1, [r3, #12]
 800a66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	ea40 0301 	orr.w	r3, r0, r1
 800a678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	431a      	orrs	r2, r3
 800a688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	431a      	orrs	r2, r3
 800a690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	4313      	orrs	r3, r2
 800a698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a6a8:	f021 010c 	bic.w	r1, r1, #12
 800a6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ca:	6999      	ldr	r1, [r3, #24]
 800a6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	ea40 0301 	orr.w	r3, r0, r1
 800a6d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b8f      	ldr	r3, [pc, #572]	; (800a91c <UART_SetConfig+0x2cc>)
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d005      	beq.n	800a6f0 <UART_SetConfig+0xa0>
 800a6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4b8d      	ldr	r3, [pc, #564]	; (800a920 <UART_SetConfig+0x2d0>)
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d104      	bne.n	800a6fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6f0:	f7fc ff26 	bl	8007540 <HAL_RCC_GetPCLK2Freq>
 800a6f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a6f8:	e003      	b.n	800a702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6fa:	f7fc ff0d 	bl	8007518 <HAL_RCC_GetPCLK1Freq>
 800a6fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70c:	f040 810c 	bne.w	800a928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a714:	2200      	movs	r2, #0
 800a716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a71a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a71e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a722:	4622      	mov	r2, r4
 800a724:	462b      	mov	r3, r5
 800a726:	1891      	adds	r1, r2, r2
 800a728:	65b9      	str	r1, [r7, #88]	; 0x58
 800a72a:	415b      	adcs	r3, r3
 800a72c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a72e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a732:	4621      	mov	r1, r4
 800a734:	eb12 0801 	adds.w	r8, r2, r1
 800a738:	4629      	mov	r1, r5
 800a73a:	eb43 0901 	adc.w	r9, r3, r1
 800a73e:	f04f 0200 	mov.w	r2, #0
 800a742:	f04f 0300 	mov.w	r3, #0
 800a746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a74a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a74e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a752:	4690      	mov	r8, r2
 800a754:	4699      	mov	r9, r3
 800a756:	4623      	mov	r3, r4
 800a758:	eb18 0303 	adds.w	r3, r8, r3
 800a75c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a760:	462b      	mov	r3, r5
 800a762:	eb49 0303 	adc.w	r3, r9, r3
 800a766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a77a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a77e:	460b      	mov	r3, r1
 800a780:	18db      	adds	r3, r3, r3
 800a782:	653b      	str	r3, [r7, #80]	; 0x50
 800a784:	4613      	mov	r3, r2
 800a786:	eb42 0303 	adc.w	r3, r2, r3
 800a78a:	657b      	str	r3, [r7, #84]	; 0x54
 800a78c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a794:	f7f6 f9fc 	bl	8000b90 <__aeabi_uldivmod>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4b61      	ldr	r3, [pc, #388]	; (800a924 <UART_SetConfig+0x2d4>)
 800a79e:	fba3 2302 	umull	r2, r3, r3, r2
 800a7a2:	095b      	lsrs	r3, r3, #5
 800a7a4:	011c      	lsls	r4, r3, #4
 800a7a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a7b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	1891      	adds	r1, r2, r2
 800a7be:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7c0:	415b      	adcs	r3, r3
 800a7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	eb12 0a01 	adds.w	sl, r2, r1
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	eb43 0b01 	adc.w	fp, r3, r1
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	f04f 0300 	mov.w	r3, #0
 800a7dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a7e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a7e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7e8:	4692      	mov	sl, r2
 800a7ea:	469b      	mov	fp, r3
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	eb1a 0303 	adds.w	r3, sl, r3
 800a7f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	eb4b 0303 	adc.w	r3, fp, r3
 800a7fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a80c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a814:	460b      	mov	r3, r1
 800a816:	18db      	adds	r3, r3, r3
 800a818:	643b      	str	r3, [r7, #64]	; 0x40
 800a81a:	4613      	mov	r3, r2
 800a81c:	eb42 0303 	adc.w	r3, r2, r3
 800a820:	647b      	str	r3, [r7, #68]	; 0x44
 800a822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a82a:	f7f6 f9b1 	bl	8000b90 <__aeabi_uldivmod>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4611      	mov	r1, r2
 800a834:	4b3b      	ldr	r3, [pc, #236]	; (800a924 <UART_SetConfig+0x2d4>)
 800a836:	fba3 2301 	umull	r2, r3, r3, r1
 800a83a:	095b      	lsrs	r3, r3, #5
 800a83c:	2264      	movs	r2, #100	; 0x64
 800a83e:	fb02 f303 	mul.w	r3, r2, r3
 800a842:	1acb      	subs	r3, r1, r3
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a84a:	4b36      	ldr	r3, [pc, #216]	; (800a924 <UART_SetConfig+0x2d4>)
 800a84c:	fba3 2302 	umull	r2, r3, r3, r2
 800a850:	095b      	lsrs	r3, r3, #5
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a858:	441c      	add	r4, r3
 800a85a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a86c:	4642      	mov	r2, r8
 800a86e:	464b      	mov	r3, r9
 800a870:	1891      	adds	r1, r2, r2
 800a872:	63b9      	str	r1, [r7, #56]	; 0x38
 800a874:	415b      	adcs	r3, r3
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a87c:	4641      	mov	r1, r8
 800a87e:	1851      	adds	r1, r2, r1
 800a880:	6339      	str	r1, [r7, #48]	; 0x30
 800a882:	4649      	mov	r1, r9
 800a884:	414b      	adcs	r3, r1
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	f04f 0300 	mov.w	r3, #0
 800a890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a894:	4659      	mov	r1, fp
 800a896:	00cb      	lsls	r3, r1, #3
 800a898:	4651      	mov	r1, sl
 800a89a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a89e:	4651      	mov	r1, sl
 800a8a0:	00ca      	lsls	r2, r1, #3
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	189b      	adds	r3, r3, r2
 800a8ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8b0:	464b      	mov	r3, r9
 800a8b2:	460a      	mov	r2, r1
 800a8b4:	eb42 0303 	adc.w	r3, r2, r3
 800a8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a8c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a8cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	18db      	adds	r3, r3, r3
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	eb42 0303 	adc.w	r3, r2, r3
 800a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a8e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a8e6:	f7f6 f953 	bl	8000b90 <__aeabi_uldivmod>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <UART_SetConfig+0x2d4>)
 800a8f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f4:	095b      	lsrs	r3, r3, #5
 800a8f6:	2164      	movs	r1, #100	; 0x64
 800a8f8:	fb01 f303 	mul.w	r3, r1, r3
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	3332      	adds	r3, #50	; 0x32
 800a902:	4a08      	ldr	r2, [pc, #32]	; (800a924 <UART_SetConfig+0x2d4>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	f003 0207 	and.w	r2, r3, #7
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4422      	add	r2, r4
 800a916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a918:	e105      	b.n	800ab26 <UART_SetConfig+0x4d6>
 800a91a:	bf00      	nop
 800a91c:	40011000 	.word	0x40011000
 800a920:	40011400 	.word	0x40011400
 800a924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a92c:	2200      	movs	r2, #0
 800a92e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a93a:	4642      	mov	r2, r8
 800a93c:	464b      	mov	r3, r9
 800a93e:	1891      	adds	r1, r2, r2
 800a940:	6239      	str	r1, [r7, #32]
 800a942:	415b      	adcs	r3, r3
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
 800a946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a94a:	4641      	mov	r1, r8
 800a94c:	1854      	adds	r4, r2, r1
 800a94e:	4649      	mov	r1, r9
 800a950:	eb43 0501 	adc.w	r5, r3, r1
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	00eb      	lsls	r3, r5, #3
 800a95e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a962:	00e2      	lsls	r2, r4, #3
 800a964:	4614      	mov	r4, r2
 800a966:	461d      	mov	r5, r3
 800a968:	4643      	mov	r3, r8
 800a96a:	18e3      	adds	r3, r4, r3
 800a96c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a970:	464b      	mov	r3, r9
 800a972:	eb45 0303 	adc.w	r3, r5, r3
 800a976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	f04f 0300 	mov.w	r3, #0
 800a992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a996:	4629      	mov	r1, r5
 800a998:	008b      	lsls	r3, r1, #2
 800a99a:	4621      	mov	r1, r4
 800a99c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	008a      	lsls	r2, r1, #2
 800a9a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a9a8:	f7f6 f8f2 	bl	8000b90 <__aeabi_uldivmod>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4b60      	ldr	r3, [pc, #384]	; (800ab34 <UART_SetConfig+0x4e4>)
 800a9b2:	fba3 2302 	umull	r2, r3, r3, r2
 800a9b6:	095b      	lsrs	r3, r3, #5
 800a9b8:	011c      	lsls	r4, r3, #4
 800a9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a9c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	1891      	adds	r1, r2, r2
 800a9d2:	61b9      	str	r1, [r7, #24]
 800a9d4:	415b      	adcs	r3, r3
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9dc:	4641      	mov	r1, r8
 800a9de:	1851      	adds	r1, r2, r1
 800a9e0:	6139      	str	r1, [r7, #16]
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	414b      	adcs	r3, r1
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9f4:	4659      	mov	r1, fp
 800a9f6:	00cb      	lsls	r3, r1, #3
 800a9f8:	4651      	mov	r1, sl
 800a9fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9fe:	4651      	mov	r1, sl
 800aa00:	00ca      	lsls	r2, r1, #3
 800aa02:	4610      	mov	r0, r2
 800aa04:	4619      	mov	r1, r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	4642      	mov	r2, r8
 800aa0a:	189b      	adds	r3, r3, r2
 800aa0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa10:	464b      	mov	r3, r9
 800aa12:	460a      	mov	r2, r1
 800aa14:	eb42 0303 	adc.w	r3, r2, r3
 800aa18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa26:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aa28:	f04f 0200 	mov.w	r2, #0
 800aa2c:	f04f 0300 	mov.w	r3, #0
 800aa30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aa34:	4649      	mov	r1, r9
 800aa36:	008b      	lsls	r3, r1, #2
 800aa38:	4641      	mov	r1, r8
 800aa3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa3e:	4641      	mov	r1, r8
 800aa40:	008a      	lsls	r2, r1, #2
 800aa42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aa46:	f7f6 f8a3 	bl	8000b90 <__aeabi_uldivmod>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4b39      	ldr	r3, [pc, #228]	; (800ab34 <UART_SetConfig+0x4e4>)
 800aa50:	fba3 1302 	umull	r1, r3, r3, r2
 800aa54:	095b      	lsrs	r3, r3, #5
 800aa56:	2164      	movs	r1, #100	; 0x64
 800aa58:	fb01 f303 	mul.w	r3, r1, r3
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	3332      	adds	r3, #50	; 0x32
 800aa62:	4a34      	ldr	r2, [pc, #208]	; (800ab34 <UART_SetConfig+0x4e4>)
 800aa64:	fba2 2303 	umull	r2, r3, r2, r3
 800aa68:	095b      	lsrs	r3, r3, #5
 800aa6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa6e:	441c      	add	r4, r3
 800aa70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa74:	2200      	movs	r2, #0
 800aa76:	673b      	str	r3, [r7, #112]	; 0x70
 800aa78:	677a      	str	r2, [r7, #116]	; 0x74
 800aa7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aa7e:	4642      	mov	r2, r8
 800aa80:	464b      	mov	r3, r9
 800aa82:	1891      	adds	r1, r2, r2
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	415b      	adcs	r3, r3
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa8e:	4641      	mov	r1, r8
 800aa90:	1851      	adds	r1, r2, r1
 800aa92:	6039      	str	r1, [r7, #0]
 800aa94:	4649      	mov	r1, r9
 800aa96:	414b      	adcs	r3, r1
 800aa98:	607b      	str	r3, [r7, #4]
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aaa6:	4659      	mov	r1, fp
 800aaa8:	00cb      	lsls	r3, r1, #3
 800aaaa:	4651      	mov	r1, sl
 800aaac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aab0:	4651      	mov	r1, sl
 800aab2:	00ca      	lsls	r2, r1, #3
 800aab4:	4610      	mov	r0, r2
 800aab6:	4619      	mov	r1, r3
 800aab8:	4603      	mov	r3, r0
 800aaba:	4642      	mov	r2, r8
 800aabc:	189b      	adds	r3, r3, r2
 800aabe:	66bb      	str	r3, [r7, #104]	; 0x68
 800aac0:	464b      	mov	r3, r9
 800aac2:	460a      	mov	r2, r1
 800aac4:	eb42 0303 	adc.w	r3, r2, r3
 800aac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	663b      	str	r3, [r7, #96]	; 0x60
 800aad4:	667a      	str	r2, [r7, #100]	; 0x64
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	f04f 0300 	mov.w	r3, #0
 800aade:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aae2:	4649      	mov	r1, r9
 800aae4:	008b      	lsls	r3, r1, #2
 800aae6:	4641      	mov	r1, r8
 800aae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaec:	4641      	mov	r1, r8
 800aaee:	008a      	lsls	r2, r1, #2
 800aaf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aaf4:	f7f6 f84c 	bl	8000b90 <__aeabi_uldivmod>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <UART_SetConfig+0x4e4>)
 800aafe:	fba3 1302 	umull	r1, r3, r3, r2
 800ab02:	095b      	lsrs	r3, r3, #5
 800ab04:	2164      	movs	r1, #100	; 0x64
 800ab06:	fb01 f303 	mul.w	r3, r1, r3
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	011b      	lsls	r3, r3, #4
 800ab0e:	3332      	adds	r3, #50	; 0x32
 800ab10:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <UART_SetConfig+0x4e4>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	095b      	lsrs	r3, r3, #5
 800ab18:	f003 020f 	and.w	r2, r3, #15
 800ab1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4422      	add	r2, r4
 800ab24:	609a      	str	r2, [r3, #8]
}
 800ab26:	bf00      	nop
 800ab28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab32:	bf00      	nop
 800ab34:	51eb851f 	.word	0x51eb851f

0800ab38 <__errno>:
 800ab38:	4b01      	ldr	r3, [pc, #4]	; (800ab40 <__errno+0x8>)
 800ab3a:	6818      	ldr	r0, [r3, #0]
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20000288 	.word	0x20000288

0800ab44 <__libc_init_array>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4d0d      	ldr	r5, [pc, #52]	; (800ab7c <__libc_init_array+0x38>)
 800ab48:	4c0d      	ldr	r4, [pc, #52]	; (800ab80 <__libc_init_array+0x3c>)
 800ab4a:	1b64      	subs	r4, r4, r5
 800ab4c:	10a4      	asrs	r4, r4, #2
 800ab4e:	2600      	movs	r6, #0
 800ab50:	42a6      	cmp	r6, r4
 800ab52:	d109      	bne.n	800ab68 <__libc_init_array+0x24>
 800ab54:	4d0b      	ldr	r5, [pc, #44]	; (800ab84 <__libc_init_array+0x40>)
 800ab56:	4c0c      	ldr	r4, [pc, #48]	; (800ab88 <__libc_init_array+0x44>)
 800ab58:	f000 fa2e 	bl	800afb8 <_init>
 800ab5c:	1b64      	subs	r4, r4, r5
 800ab5e:	10a4      	asrs	r4, r4, #2
 800ab60:	2600      	movs	r6, #0
 800ab62:	42a6      	cmp	r6, r4
 800ab64:	d105      	bne.n	800ab72 <__libc_init_array+0x2e>
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6c:	4798      	blx	r3
 800ab6e:	3601      	adds	r6, #1
 800ab70:	e7ee      	b.n	800ab50 <__libc_init_array+0xc>
 800ab72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab76:	4798      	blx	r3
 800ab78:	3601      	adds	r6, #1
 800ab7a:	e7f2      	b.n	800ab62 <__libc_init_array+0x1e>
 800ab7c:	0800b04c 	.word	0x0800b04c
 800ab80:	0800b04c 	.word	0x0800b04c
 800ab84:	0800b04c 	.word	0x0800b04c
 800ab88:	0800b050 	.word	0x0800b050

0800ab8c <memcpy>:
 800ab8c:	440a      	add	r2, r1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab94:	d100      	bne.n	800ab98 <memcpy+0xc>
 800ab96:	4770      	bx	lr
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d1f9      	bne.n	800ab9a <memcpy+0xe>
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <memset>:
 800aba8:	4402      	add	r2, r0
 800abaa:	4603      	mov	r3, r0
 800abac:	4293      	cmp	r3, r2
 800abae:	d100      	bne.n	800abb2 <memset+0xa>
 800abb0:	4770      	bx	lr
 800abb2:	f803 1b01 	strb.w	r1, [r3], #1
 800abb6:	e7f9      	b.n	800abac <memset+0x4>

0800abb8 <sqrt>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	ed2d 8b02 	vpush	{d8}
 800abbe:	ec55 4b10 	vmov	r4, r5, d0
 800abc2:	f000 f851 	bl	800ac68 <__ieee754_sqrt>
 800abc6:	4622      	mov	r2, r4
 800abc8:	462b      	mov	r3, r5
 800abca:	4620      	mov	r0, r4
 800abcc:	4629      	mov	r1, r5
 800abce:	eeb0 8a40 	vmov.f32	s16, s0
 800abd2:	eef0 8a60 	vmov.f32	s17, s1
 800abd6:	f7f5 ff55 	bl	8000a84 <__aeabi_dcmpun>
 800abda:	b990      	cbnz	r0, 800ac02 <sqrt+0x4a>
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 ff26 	bl	8000a34 <__aeabi_dcmplt>
 800abe8:	b158      	cbz	r0, 800ac02 <sqrt+0x4a>
 800abea:	f7ff ffa5 	bl	800ab38 <__errno>
 800abee:	2321      	movs	r3, #33	; 0x21
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	2300      	movs	r3, #0
 800abf6:	4610      	mov	r0, r2
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7f5 fdd3 	bl	80007a4 <__aeabi_ddiv>
 800abfe:	ec41 0b18 	vmov	d8, r0, r1
 800ac02:	eeb0 0a48 	vmov.f32	s0, s16
 800ac06:	eef0 0a68 	vmov.f32	s1, s17
 800ac0a:	ecbd 8b02 	vpop	{d8}
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}

0800ac10 <asinf>:
 800ac10:	b508      	push	{r3, lr}
 800ac12:	ed2d 8b02 	vpush	{d8}
 800ac16:	eeb0 8a40 	vmov.f32	s16, s0
 800ac1a:	f000 f8d7 	bl	800adcc <__ieee754_asinf>
 800ac1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac26:	eef0 8a40 	vmov.f32	s17, s0
 800ac2a:	d615      	bvs.n	800ac58 <asinf+0x48>
 800ac2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac30:	f000 f9b5 	bl	800af9e <fabsf>
 800ac34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ac38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac40:	dd0a      	ble.n	800ac58 <asinf+0x48>
 800ac42:	f7ff ff79 	bl	800ab38 <__errno>
 800ac46:	ecbd 8b02 	vpop	{d8}
 800ac4a:	2321      	movs	r3, #33	; 0x21
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac52:	4804      	ldr	r0, [pc, #16]	; (800ac64 <asinf+0x54>)
 800ac54:	f000 b9aa 	b.w	800afac <nanf>
 800ac58:	eeb0 0a68 	vmov.f32	s0, s17
 800ac5c:	ecbd 8b02 	vpop	{d8}
 800ac60:	bd08      	pop	{r3, pc}
 800ac62:	bf00      	nop
 800ac64:	0800b040 	.word	0x0800b040

0800ac68 <__ieee754_sqrt>:
 800ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6c:	ec55 4b10 	vmov	r4, r5, d0
 800ac70:	4e55      	ldr	r6, [pc, #340]	; (800adc8 <__ieee754_sqrt+0x160>)
 800ac72:	43ae      	bics	r6, r5
 800ac74:	ee10 0a10 	vmov	r0, s0
 800ac78:	ee10 3a10 	vmov	r3, s0
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	4629      	mov	r1, r5
 800ac80:	d110      	bne.n	800aca4 <__ieee754_sqrt+0x3c>
 800ac82:	ee10 2a10 	vmov	r2, s0
 800ac86:	462b      	mov	r3, r5
 800ac88:	f7f5 fc62 	bl	8000550 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	f7f5 faa6 	bl	80001e4 <__adddf3>
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	ec45 4b10 	vmov	d0, r4, r5
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	dc10      	bgt.n	800acca <__ieee754_sqrt+0x62>
 800aca8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800acac:	4330      	orrs	r0, r6
 800acae:	d0f5      	beq.n	800ac9c <__ieee754_sqrt+0x34>
 800acb0:	b15d      	cbz	r5, 800acca <__ieee754_sqrt+0x62>
 800acb2:	ee10 2a10 	vmov	r2, s0
 800acb6:	462b      	mov	r3, r5
 800acb8:	ee10 0a10 	vmov	r0, s0
 800acbc:	f7f5 fa90 	bl	80001e0 <__aeabi_dsub>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	f7f5 fd6e 	bl	80007a4 <__aeabi_ddiv>
 800acc8:	e7e6      	b.n	800ac98 <__ieee754_sqrt+0x30>
 800acca:	1512      	asrs	r2, r2, #20
 800accc:	d074      	beq.n	800adb8 <__ieee754_sqrt+0x150>
 800acce:	07d4      	lsls	r4, r2, #31
 800acd0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800acd4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800acd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acdc:	bf5e      	ittt	pl
 800acde:	0fda      	lsrpl	r2, r3, #31
 800ace0:	005b      	lslpl	r3, r3, #1
 800ace2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ace6:	2400      	movs	r4, #0
 800ace8:	0fda      	lsrs	r2, r3, #31
 800acea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800acee:	107f      	asrs	r7, r7, #1
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	2516      	movs	r5, #22
 800acf4:	4620      	mov	r0, r4
 800acf6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800acfa:	1886      	adds	r6, r0, r2
 800acfc:	428e      	cmp	r6, r1
 800acfe:	bfde      	ittt	le
 800ad00:	1b89      	suble	r1, r1, r6
 800ad02:	18b0      	addle	r0, r6, r2
 800ad04:	18a4      	addle	r4, r4, r2
 800ad06:	0049      	lsls	r1, r1, #1
 800ad08:	3d01      	subs	r5, #1
 800ad0a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ad0e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad16:	d1f0      	bne.n	800acfa <__ieee754_sqrt+0x92>
 800ad18:	462a      	mov	r2, r5
 800ad1a:	f04f 0e20 	mov.w	lr, #32
 800ad1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad22:	4281      	cmp	r1, r0
 800ad24:	eb06 0c05 	add.w	ip, r6, r5
 800ad28:	dc02      	bgt.n	800ad30 <__ieee754_sqrt+0xc8>
 800ad2a:	d113      	bne.n	800ad54 <__ieee754_sqrt+0xec>
 800ad2c:	459c      	cmp	ip, r3
 800ad2e:	d811      	bhi.n	800ad54 <__ieee754_sqrt+0xec>
 800ad30:	f1bc 0f00 	cmp.w	ip, #0
 800ad34:	eb0c 0506 	add.w	r5, ip, r6
 800ad38:	da43      	bge.n	800adc2 <__ieee754_sqrt+0x15a>
 800ad3a:	2d00      	cmp	r5, #0
 800ad3c:	db41      	blt.n	800adc2 <__ieee754_sqrt+0x15a>
 800ad3e:	f100 0801 	add.w	r8, r0, #1
 800ad42:	1a09      	subs	r1, r1, r0
 800ad44:	459c      	cmp	ip, r3
 800ad46:	bf88      	it	hi
 800ad48:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ad4c:	eba3 030c 	sub.w	r3, r3, ip
 800ad50:	4432      	add	r2, r6
 800ad52:	4640      	mov	r0, r8
 800ad54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ad58:	f1be 0e01 	subs.w	lr, lr, #1
 800ad5c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ad60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad68:	d1db      	bne.n	800ad22 <__ieee754_sqrt+0xba>
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	d006      	beq.n	800ad7c <__ieee754_sqrt+0x114>
 800ad6e:	1c50      	adds	r0, r2, #1
 800ad70:	bf13      	iteet	ne
 800ad72:	3201      	addne	r2, #1
 800ad74:	3401      	addeq	r4, #1
 800ad76:	4672      	moveq	r2, lr
 800ad78:	f022 0201 	bicne.w	r2, r2, #1
 800ad7c:	1063      	asrs	r3, r4, #1
 800ad7e:	0852      	lsrs	r2, r2, #1
 800ad80:	07e1      	lsls	r1, r4, #31
 800ad82:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad8a:	bf48      	it	mi
 800ad8c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ad90:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ad94:	4614      	mov	r4, r2
 800ad96:	e781      	b.n	800ac9c <__ieee754_sqrt+0x34>
 800ad98:	0ad9      	lsrs	r1, r3, #11
 800ad9a:	3815      	subs	r0, #21
 800ad9c:	055b      	lsls	r3, r3, #21
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d0fa      	beq.n	800ad98 <__ieee754_sqrt+0x130>
 800ada2:	02cd      	lsls	r5, r1, #11
 800ada4:	d50a      	bpl.n	800adbc <__ieee754_sqrt+0x154>
 800ada6:	f1c2 0420 	rsb	r4, r2, #32
 800adaa:	fa23 f404 	lsr.w	r4, r3, r4
 800adae:	1e55      	subs	r5, r2, #1
 800adb0:	4093      	lsls	r3, r2
 800adb2:	4321      	orrs	r1, r4
 800adb4:	1b42      	subs	r2, r0, r5
 800adb6:	e78a      	b.n	800acce <__ieee754_sqrt+0x66>
 800adb8:	4610      	mov	r0, r2
 800adba:	e7f0      	b.n	800ad9e <__ieee754_sqrt+0x136>
 800adbc:	0049      	lsls	r1, r1, #1
 800adbe:	3201      	adds	r2, #1
 800adc0:	e7ef      	b.n	800ada2 <__ieee754_sqrt+0x13a>
 800adc2:	4680      	mov	r8, r0
 800adc4:	e7bd      	b.n	800ad42 <__ieee754_sqrt+0xda>
 800adc6:	bf00      	nop
 800adc8:	7ff00000 	.word	0x7ff00000

0800adcc <__ieee754_asinf>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	ee10 5a10 	vmov	r5, s0
 800add2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800add6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800adda:	ed2d 8b04 	vpush	{d8-d9}
 800adde:	d10c      	bne.n	800adfa <__ieee754_asinf+0x2e>
 800ade0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800af58 <__ieee754_asinf+0x18c>
 800ade4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800af5c <__ieee754_asinf+0x190>
 800ade8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800adec:	eee0 7a07 	vfma.f32	s15, s0, s14
 800adf0:	eeb0 0a67 	vmov.f32	s0, s15
 800adf4:	ecbd 8b04 	vpop	{d8-d9}
 800adf8:	bd38      	pop	{r3, r4, r5, pc}
 800adfa:	dd04      	ble.n	800ae06 <__ieee754_asinf+0x3a>
 800adfc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae00:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ae04:	e7f6      	b.n	800adf4 <__ieee754_asinf+0x28>
 800ae06:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ae0a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ae0e:	da0b      	bge.n	800ae28 <__ieee754_asinf+0x5c>
 800ae10:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ae14:	da52      	bge.n	800aebc <__ieee754_asinf+0xf0>
 800ae16:	eddf 7a52 	vldr	s15, [pc, #328]	; 800af60 <__ieee754_asinf+0x194>
 800ae1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ae1e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ae22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae26:	dce5      	bgt.n	800adf4 <__ieee754_asinf+0x28>
 800ae28:	f000 f8b9 	bl	800af9e <fabsf>
 800ae2c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ae30:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ae34:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ae38:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800af64 <__ieee754_asinf+0x198>
 800ae3c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800af68 <__ieee754_asinf+0x19c>
 800ae40:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800af6c <__ieee754_asinf+0x1a0>
 800ae44:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ae48:	eddf 7a49 	vldr	s15, [pc, #292]	; 800af70 <__ieee754_asinf+0x1a4>
 800ae4c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ae50:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800af74 <__ieee754_asinf+0x1a8>
 800ae54:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ae58:	eddf 7a47 	vldr	s15, [pc, #284]	; 800af78 <__ieee754_asinf+0x1ac>
 800ae5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ae60:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800af7c <__ieee754_asinf+0x1b0>
 800ae64:	eea7 9a88 	vfma.f32	s18, s15, s16
 800ae68:	eddf 7a45 	vldr	s15, [pc, #276]	; 800af80 <__ieee754_asinf+0x1b4>
 800ae6c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ae70:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800af84 <__ieee754_asinf+0x1b8>
 800ae74:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ae78:	eddf 7a43 	vldr	s15, [pc, #268]	; 800af88 <__ieee754_asinf+0x1bc>
 800ae7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ae80:	eeb0 0a48 	vmov.f32	s0, s16
 800ae84:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ae88:	f000 f886 	bl	800af98 <__ieee754_sqrtf>
 800ae8c:	4b3f      	ldr	r3, [pc, #252]	; (800af8c <__ieee754_asinf+0x1c0>)
 800ae8e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ae92:	429c      	cmp	r4, r3
 800ae94:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ae98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae9c:	dd3d      	ble.n	800af1a <__ieee754_asinf+0x14e>
 800ae9e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aea2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800af90 <__ieee754_asinf+0x1c4>
 800aea6:	eee0 7a26 	vfma.f32	s15, s0, s13
 800aeaa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800af5c <__ieee754_asinf+0x190>
 800aeae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	bfd8      	it	le
 800aeb6:	eeb1 0a40 	vnegle.f32	s0, s0
 800aeba:	e79b      	b.n	800adf4 <__ieee754_asinf+0x28>
 800aebc:	ee60 7a00 	vmul.f32	s15, s0, s0
 800aec0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800af64 <__ieee754_asinf+0x198>
 800aec4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800af68 <__ieee754_asinf+0x19c>
 800aec8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800af7c <__ieee754_asinf+0x1b0>
 800aecc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800aed0:	eddf 6a27 	vldr	s13, [pc, #156]	; 800af70 <__ieee754_asinf+0x1a4>
 800aed4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aed8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800af74 <__ieee754_asinf+0x1a8>
 800aedc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aee0:	eddf 6a25 	vldr	s13, [pc, #148]	; 800af78 <__ieee754_asinf+0x1ac>
 800aee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aee8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800af6c <__ieee754_asinf+0x1a0>
 800aeec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aef0:	eddf 6a23 	vldr	s13, [pc, #140]	; 800af80 <__ieee754_asinf+0x1b4>
 800aef4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800aef8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800af84 <__ieee754_asinf+0x1b8>
 800aefc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800af00:	eddf 6a21 	vldr	s13, [pc, #132]	; 800af88 <__ieee754_asinf+0x1bc>
 800af04:	eee6 6a27 	vfma.f32	s13, s12, s15
 800af08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af0c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800af10:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800af14:	eea0 0a27 	vfma.f32	s0, s0, s15
 800af18:	e76c      	b.n	800adf4 <__ieee754_asinf+0x28>
 800af1a:	ee10 3a10 	vmov	r3, s0
 800af1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800af22:	f023 030f 	bic.w	r3, r3, #15
 800af26:	ee07 3a10 	vmov	s14, r3
 800af2a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800af2e:	ee70 7a07 	vadd.f32	s15, s0, s14
 800af32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af36:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800af3a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800af58 <__ieee754_asinf+0x18c>
 800af3e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800af42:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800af46:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800af94 <__ieee754_asinf+0x1c8>
 800af4a:	eeb0 6a40 	vmov.f32	s12, s0
 800af4e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800af52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800af56:	e7aa      	b.n	800aeae <__ieee754_asinf+0xe2>
 800af58:	b33bbd2e 	.word	0xb33bbd2e
 800af5c:	3fc90fdb 	.word	0x3fc90fdb
 800af60:	7149f2ca 	.word	0x7149f2ca
 800af64:	3811ef08 	.word	0x3811ef08
 800af68:	3a4f7f04 	.word	0x3a4f7f04
 800af6c:	3e2aaaab 	.word	0x3e2aaaab
 800af70:	bd241146 	.word	0xbd241146
 800af74:	3e4e0aa8 	.word	0x3e4e0aa8
 800af78:	bea6b090 	.word	0xbea6b090
 800af7c:	3d9dc62e 	.word	0x3d9dc62e
 800af80:	bf303361 	.word	0xbf303361
 800af84:	4001572d 	.word	0x4001572d
 800af88:	c019d139 	.word	0xc019d139
 800af8c:	3f799999 	.word	0x3f799999
 800af90:	333bbd2e 	.word	0x333bbd2e
 800af94:	3f490fdb 	.word	0x3f490fdb

0800af98 <__ieee754_sqrtf>:
 800af98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af9c:	4770      	bx	lr

0800af9e <fabsf>:
 800af9e:	ee10 3a10 	vmov	r3, s0
 800afa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afa6:	ee00 3a10 	vmov	s0, r3
 800afaa:	4770      	bx	lr

0800afac <nanf>:
 800afac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afb4 <nanf+0x8>
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	7fc00000 	.word	0x7fc00000

0800afb8 <_init>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr

0800afc4 <_fini>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	bf00      	nop
 800afc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afca:	bc08      	pop	{r3}
 800afcc:	469e      	mov	lr, r3
 800afce:	4770      	bx	lr
