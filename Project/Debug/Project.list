
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a8c  08008a8c  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a94  08008a94  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08008a9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  200002c8  08008d60  000202c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f34  08008d60  00020f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e62  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b35  00000000  00000000  00037156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00039c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ad  00000000  00000000  0003c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c9  00000000  00000000  0005463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c2a  00000000  00000000  0006bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  00100780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002c8 	.word	0x200002c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008a2c 	.word	0x08008a2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002cc 	.word	0x200002cc
 80001d4:	08008a2c 	.word	0x08008a2c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <read_pos>:

extern enum State_Machine {
	INIT, INIT_HOMING, CALIBRATE, TRAJECT_GEN, PID_STATE, EMERGENCY_LIMIT, IDLE
} State ;

void read_pos() {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <read_pos+0x3c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <read_pos+0x40>)
 8000d26:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <read_pos+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fba5 	bl	800047c <__aeabi_i2d>
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <read_pos+0x44>)
 8000d38:	f7ff fc0a 	bl	8000550 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fe16 	bl	8000974 <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <read_pos+0x48>)
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000046c 	.word	0x2000046c
 8000d58:	20000f1c 	.word	0x20000f1c
 8000d5c:	3f8e0000 	.word	0x3f8e0000
 8000d60:	20000f20 	.word	0x20000f20

08000d64 <motor>:

void motor(uint32_t speed, int DIR) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d10a      	bne.n	8000d8c <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <motor+0x4c>)
 8000d7e:	f002 fed3 	bl	8003b28 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <motor+0x50>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 8000d8a:	e00c      	b.n	8000da6 <motor+0x42>
	} else if (DIR == 1) {
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d109      	bne.n	8000da6 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <motor+0x4c>)
 8000d9a:	f002 fec5 	bl	8003b28 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <motor+0x50>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020000 	.word	0x40020000
 8000db4:	200003b8 	.word	0x200003b8

08000db8 <Init_Homing>:

void Init_Homing() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000dbc:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <Init_Homing+0xe0>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <Init_Homing+0x12>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d01a      	beq.n	8000dfe <Init_Homing+0x46>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000dc8:	e064      	b.n	8000e94 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4833      	ldr	r0, [pc, #204]	; (8000e9c <Init_Homing+0xe4>)
 8000dce:	f002 fe93 	bl	8003af8 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10b      	bne.n	8000df0 <Init_Homing+0x38>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000dd8:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <Init_Homing+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000de0:	2101      	movs	r1, #1
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ffbe 	bl	8000d64 <motor>
			state_homing = 1;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <Init_Homing+0xe0>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	801a      	strh	r2, [r3, #0]
		break;
 8000dee:	e051      	b.n	8000e94 <Init_Homing+0xdc>
			motor(Max_Counter_PWM * 0.25, -1);
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000df8:	f7ff ffb4 	bl	8000d64 <motor>
		break;
 8000dfc:	e04a      	b.n	8000e94 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <Init_Homing+0xec>)
 8000e02:	f002 fe79 	bl	8003af8 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d13d      	bne.n	8000e88 <Init_Homing+0xd0>
			motor(0, 1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ffa8 	bl	8000d64 <motor>
			HAL_Delay(400);
 8000e14:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e18:	f001 ffa6 	bl	8002d68 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <Init_Homing+0xe8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <Init_Homing+0xe8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <Init_Homing+0xf0>)
 8000e2e:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <Init_Homing+0xf0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb21 	bl	800047c <__aeabi_i2d>
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <Init_Homing+0xf4>)
 8000e40:	f7ff fb86 	bl	8000550 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fd92 	bl	8000974 <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <Init_Homing+0xf8>)
 8000e54:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <Init_Homing+0xf8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <Init_Homing+0xfc>)
 8000e5c:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <Init_Homing+0x100>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <Init_Homing+0x104>)
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <Init_Homing+0x108>)
 8000e6c:	6013      	str	r3, [r2, #0]
			State_PID = 2;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <Init_Homing+0x10c>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <Init_Homing+0xe0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000e7a:	2006      	movs	r0, #6
 8000e7c:	f000 fb82 	bl	8001584 <EndEffector_Event>
			State = IDLE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <Init_Homing+0x110>)
 8000e82:	2206      	movs	r2, #6
 8000e84:	701a      	strb	r2, [r3, #0]
		break;
 8000e86:	e004      	b.n	8000e92 <Init_Homing+0xda>
			motor(Max_Counter_PWM * 0.18, 1);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	f642 6014 	movw	r0, #11796	; 0x2e14
 8000e8e:	f7ff ff69 	bl	8000d64 <motor>
		break;
 8000e92:	bf00      	nop
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200002e4 	.word	0x200002e4
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	2000046c 	.word	0x2000046c
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	20000f1c 	.word	0x20000f1c
 8000eac:	3f8e0000 	.word	0x3f8e0000
 8000eb0:	20000f20 	.word	0x20000f20
 8000eb4:	20000884 	.word	0x20000884
 8000eb8:	20000f24 	.word	0x20000f24
 8000ebc:	2000026c 	.word	0x2000026c
 8000ec0:	20000888 	.word	0x20000888
 8000ec4:	20000268 	.word	0x20000268
 8000ec8:	200002b4 	.word	0x200002b4

08000ecc <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <modbus_1t5_Timeout+0x1c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	751a      	strb	r2, [r3, #20]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	200002e8 	.word	0x200002e8

08000eec <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <modbus_3t5_Timeout+0x1c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	755a      	strb	r2, [r3, #21]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200002e8 	.word	0x200002e8

08000f0c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f26:	1c59      	adds	r1, r3, #1
 8000f28:	b289      	uxth	r1, r1
 8000f2a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f2e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f32:	d210      	bcs.n	8000f56 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68d8      	ldr	r0, [r3, #12]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f46:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f006 fb99 	bl	8007688 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <modbus_UART_Recived+0x60>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002e8 	.word	0x200002e8

08000f70 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <Modbus_init+0x9c>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <Modbus_init+0x9c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <Modbus_init+0xa0>)
 8000f90:	2114      	movs	r1, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fd2a 	bl	80069ec <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <Modbus_init+0x9c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <Modbus_init+0xa4>)
 8000fa0:	210e      	movs	r1, #14
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fd22 	bl	80069ec <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <Modbus_init+0x9c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <Modbus_init+0xa8>)
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fac0 	bl	8007538 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <Modbus_init+0x9c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68d8      	ldr	r0, [r3, #12]
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <Modbus_init+0x9c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fca:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fce:	4413      	add	r3, r2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f006 fb57 	bl	8007688 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <Modbus_init+0x9c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10c      	bne.n	8001004 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <Modbus_init+0x9c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fda5 	bl	8005b40 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <Modbus_init+0x9c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 ffe4 	bl	8005fcc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200002e8 	.word	0x200002e8
 8001010:	08000ecd 	.word	0x08000ecd
 8001014:	08000eed 	.word	0x08000eed
 8001018:	08000f0d 	.word	0x08000f0d

0800101c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800102c:	23ff      	movs	r3, #255	; 0xff
 800102e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001030:	e013      	b.n	800105a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	4053      	eors	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <CRC16+0x64>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4413      	add	r3, r2
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	4053      	eors	r3, r2
 800104e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <CRC16+0x68>)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800105a:	883b      	ldrh	r3, [r7, #0]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	803a      	strh	r2, [r7, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e6      	bne.n	8001032 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000100 	.word	0x20000100
 8001084:	20000000 	.word	0x20000000

08001088 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800108e:	4b81      	ldr	r3, [pc, #516]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
 8001094:	3b01      	subs	r3, #1
 8001096:	2b03      	cmp	r3, #3
 8001098:	d80a      	bhi.n	80010b0 <Modbus_Protocal_Worker+0x28>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <Modbus_Protocal_Worker+0x18>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010bb 	.word	0x080010bb
 80010a4:	0800125b 	.word	0x0800125b
 80010a8:	08001147 	.word	0x08001147
 80010ac:	0800116d 	.word	0x0800116d
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010b0:	4b78      	ldr	r3, [pc, #480]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	761a      	strb	r2, [r3, #24]
		break;
 80010b8:	e0e8      	b.n	800128c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80010c6:	f000 f9dd 	bl	8001484 <Modbus_Emission>
 80010ca:	e01c      	b.n	8001106 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010cc:	4b71      	ldr	r3, [pc, #452]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	7d9b      	ldrb	r3, [r3, #22]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d017      	beq.n	8001106 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010de:	4b6d      	ldr	r3, [pc, #436]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010fe:	4b65      	ldr	r3, [pc, #404]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2203      	movs	r2, #3
 8001104:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b20      	cmp	r3, #32
 8001114:	f040 80b3 	bne.w	800127e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001118:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68d8      	ldr	r0, [r3, #12]
 8001128:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001134:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001138:	4413      	add	r3, r2
 800113a:	3302      	adds	r3, #2
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f006 faa2 	bl	8007688 <HAL_UART_Receive_IT>
		}
		break;
 8001144:	e09b      	b.n	800127e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7d1b      	ldrb	r3, [r3, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8098 	beq.w	8001282 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22fe      	movs	r2, #254	; 0xfe
 8001160:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2204      	movs	r2, #4
 8001168:	761a      	strb	r2, [r3, #24]
		}
		break;
 800116a:	e08a      	b.n	8001282 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800116c:	4b49      	ldr	r3, [pc, #292]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	7d9b      	ldrb	r3, [r3, #22]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d103      	bne.n	800118a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800118a:	4b42      	ldr	r3, [pc, #264]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001192:	f113 0f02 	cmn.w	r3, #2
 8001196:	d150      	bne.n	800123a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011b0:	3b02      	subs	r3, #2
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f7ff ff31 	bl	800101c <CRC16>
 80011ba:	4603      	mov	r3, r0
 80011bc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011be:	793a      	ldrb	r2, [r7, #4]
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011cc:	3b02      	subs	r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10c      	bne.n	80011f2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011d8:	797a      	ldrb	r2, [r7, #5]
 80011da:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011e6:	3b01      	subs	r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d004      	beq.n	80011fc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	75da      	strb	r2, [r3, #23]
				break;
 80011fa:	e047      	b.n	800128c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d113      	bne.n	8001236 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800121e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001228:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800122a:	461a      	mov	r2, r3
 800122c:	f007 fbe8 	bl	8008a00 <memcpy>

			//execute command
			Modbus_frame_response();
 8001230:	f000 f910 	bl	8001454 <Modbus_frame_response>
 8001234:	e001      	b.n	800123a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001236:	bf00      	nop
					}
		break;


	}
}
 8001238:	e028      	b.n	800128c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	7d5b      	ldrb	r3, [r3, #21]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	4618      	mov	r0, r3
 8001254:	f006 fac6 	bl	80077e4 <HAL_UART_AbortReceive>
		break;
 8001258:	e015      	b.n	8001286 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b20      	cmp	r3, #32
 8001268:	d10f      	bne.n	800128a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <Modbus_Protocal_Worker+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	761a      	strb	r2, [r3, #24]
		break;
 800127c:	e005      	b.n	800128a <Modbus_Protocal_Worker+0x202>
		break;
 800127e:	bf00      	nop
 8001280:	e004      	b.n	800128c <Modbus_Protocal_Worker+0x204>
		break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <Modbus_Protocal_Worker+0x204>
		break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <Modbus_Protocal_Worker+0x204>
		break;
 800128a:	bf00      	nop
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002e8 	.word	0x200002e8

08001298 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <modbusWrite1Register+0x80>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	7e9b      	ldrb	r3, [r3, #26]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <modbusWrite1Register+0x80>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	7edb      	ldrb	r3, [r3, #27]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <modbusWrite1Register+0x80>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d903      	bls.n	80012ca <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f000 f8a4 	bl	8001410 <ModbusErrorReply>
			 return;
 80012c8:	e023      	b.n	8001312 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <modbusWrite1Register+0x80>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <modbusWrite1Register+0x80>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	440b      	add	r3, r1
 80012da:	7f12      	ldrb	r2, [r2, #28]
 80012dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <modbusWrite1Register+0x80>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <modbusWrite1Register+0x80>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	440b      	add	r3, r1
 80012ee:	7f52      	ldrb	r2, [r2, #29]
 80012f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <modbusWrite1Register+0x80>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <modbusWrite1Register+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	f007 fb7c 	bl	8008a00 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <modbusWrite1Register+0x80>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200002e8 	.word	0x200002e8

0800131c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <modbusRead1Register+0xf0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7f1b      	ldrb	r3, [r3, #28]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <modbusRead1Register+0xf0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	7f5b      	ldrb	r3, [r3, #29]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <modbusRead1Register+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7e9b      	ldrb	r3, [r3, #26]
 8001340:	b29b      	uxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <modbusRead1Register+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7edb      	ldrb	r3, [r3, #27]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <modbusRead1Register+0x42>
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	2b7d      	cmp	r3, #125	; 0x7d
 800135c:	d903      	bls.n	8001366 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f856 	bl	8001410 <ModbusErrorReply>
		 return;
 8001364:	e04e      	b.n	8001404 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001366:	88ba      	ldrh	r2, [r7, #4]
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <modbusRead1Register+0xf0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d808      	bhi.n	8001384 <modbusRead1Register+0x68>
 8001372:	88ba      	ldrh	r2, [r7, #4]
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	4413      	add	r3, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <modbusRead1Register+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	d903      	bls.n	800138c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001384:	2002      	movs	r0, #2
 8001386:	f000 f843 	bl	8001410 <ModbusErrorReply>
		 return;
 800138a:	e03b      	b.n	8001404 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <modbusRead1Register+0xf0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <modbusRead1Register+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0052      	lsls	r2, r2, #1
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013a6:	2400      	movs	r4, #0
 80013a8:	e020      	b.n	80013ec <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <modbusRead1Register+0xf0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	4423      	add	r3, r4
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	18d1      	adds	r1, r2, r3
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <modbusRead1Register+0xf0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	1c63      	adds	r3, r4, #1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	7849      	ldrb	r1, [r1, #1]
 80013c2:	4413      	add	r3, r2
 80013c4:	460a      	mov	r2, r1
 80013c6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <modbusRead1Register+0xf0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	4423      	add	r3, r4
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	18d1      	adds	r1, r2, r3
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <modbusRead1Register+0xf0>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	0063      	lsls	r3, r4, #1
 80013de:	3303      	adds	r3, #3
 80013e0:	7809      	ldrb	r1, [r1, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	460a      	mov	r2, r1
 80013e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013ea:	3401      	adds	r4, #1
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	429c      	cmp	r4, r3
 80013f0:	dbdb      	blt.n	80013aa <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <modbusRead1Register+0xf0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	200002e8 	.word	0x200002e8

08001410 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <ModbusErrorReply+0x40>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	7e5a      	ldrb	r2, [r3, #25]
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <ModbusErrorReply+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <ModbusErrorReply+0x40>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <ModbusErrorReply+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2202      	movs	r2, #2
 800143e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200002e8 	.word	0x200002e8

08001454 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <Modbus_frame_response+0x2c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	7e5b      	ldrb	r3, [r3, #25]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d004      	beq.n	800146c <Modbus_frame_response+0x18>
 8001462:	2b06      	cmp	r3, #6
 8001464:	d105      	bne.n	8001472 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001466:	f7ff ff17 	bl	8001298 <modbusWrite1Register>
		break;
 800146a:	e006      	b.n	800147a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800146c:	f7ff ff56 	bl	800131c <modbusRead1Register>
		break;
 8001470:	e003      	b.n	800147a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ffcc 	bl	8001410 <ModbusErrorReply>
		break;
 8001478:	bf00      	nop

	}
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002e8 	.word	0x200002e8

08001484 <Modbus_Emission>:

void Modbus_Emission()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	d15e      	bne.n	8001558 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <Modbus_Emission+0xfc>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <Modbus_Emission+0xfc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <Modbus_Emission+0xfc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80014b0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <Modbus_Emission+0xfc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <Modbus_Emission+0xfc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80014c2:	461a      	mov	r2, r3
 80014c4:	f007 fa9c 	bl	8008a00 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <Modbus_Emission+0xfc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <Modbus_Emission+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3203      	adds	r2, #3
 80014d8:	b292      	uxth	r2, r2
 80014da:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <Modbus_Emission+0xfc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014ee:	3b02      	subs	r3, #2
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff fd92 	bl	800101c <CRC16>
 80014f8:	4603      	mov	r3, r0
 80014fa:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <Modbus_Emission+0xfc>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <Modbus_Emission+0xfc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001508:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800150a:	7939      	ldrb	r1, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	460a      	mov	r2, r1
 8001510:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <Modbus_Emission+0xfc>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <Modbus_Emission+0xfc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001520:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001522:	7979      	ldrb	r1, [r7, #5]
 8001524:	4413      	add	r3, r2
 8001526:	460a      	mov	r2, r1
 8001528:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <Modbus_Emission+0xfc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b20      	cmp	r3, #32
 800153a:	d10d      	bne.n	8001558 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <Modbus_Emission+0xfc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <Modbus_Emission+0xfc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <Modbus_Emission+0xfc>)
 800154c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800154e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001552:	461a      	mov	r2, r3
 8001554:	f006 f8c8 	bl	80076e8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <Modbus_Emission+0xfc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <Modbus_Emission+0xfc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <Modbus_Emission+0xfc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <Modbus_Emission+0xfc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2202      	movs	r2, #2
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002e8 	.word	0x200002e8

08001584 <EndEffector_Event>:
	Pick,
	Place,
	Read,
} EndEffector_State;

void EndEffector_Event(char EndEffector_State) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af02      	add	r7, sp, #8
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 800158e:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <EndEffector_Event+0x160>)
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b20      	cmp	r3, #32
 8001598:	f040 809c 	bne.w	80016d4 <EndEffector_Event+0x150>
		switch (EndEffector_State) {
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	f200 809b 	bhi.w	80016da <EndEffector_Event+0x156>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <EndEffector_Event+0x28>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080016d9 	.word	0x080016d9
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015f1 	.word	0x080015f1
 80015b8:	08001609 	.word	0x08001609
 80015bc:	08001621 	.word	0x08001621
 80015c0:	08001639 	.word	0x08001639
 80015c4:	08001651 	.word	0x08001651
 80015c8:	08001669 	.word	0x08001669
 80015cc:	08001681 	.word	0x08001681
 80015d0:	080016a1 	.word	0x080016a1
 80015d4:	080016c1 	.word	0x080016c1
		case Init:
			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 80015d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2302      	movs	r3, #2
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <EndEffector_Event+0x164>)
 80015e2:	212a      	movs	r1, #42	; 0x2a
 80015e4:	483f      	ldr	r0, [pc, #252]	; (80016e4 <EndEffector_Event+0x160>)
 80015e6:	f002 fc15 	bl	8003e14 <HAL_I2C_Master_Transmit>
					2, 10000);
			EndEffector_State = Init;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
			break;
 80015ee:	e074      	b.n	80016da <EndEffector_Event+0x156>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 80015f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <EndEffector_Event+0x168>)
 80015fa:	212a      	movs	r1, #42	; 0x2a
 80015fc:	4839      	ldr	r0, [pc, #228]	; (80016e4 <EndEffector_Event+0x160>)
 80015fe:	f002 fc09 	bl	8003e14 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8001602:	2300      	movs	r3, #0
 8001604:	71fb      	strb	r3, [r7, #7]
			break;
 8001606:	e068      	b.n	80016da <EndEffector_Event+0x156>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 8001608:	f242 7310 	movw	r3, #10000	; 0x2710
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2304      	movs	r3, #4
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <EndEffector_Event+0x16c>)
 8001612:	212a      	movs	r1, #42	; 0x2a
 8001614:	4833      	ldr	r0, [pc, #204]	; (80016e4 <EndEffector_Event+0x160>)
 8001616:	f002 fbfd 	bl	8003e14 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800161a:	2300      	movs	r3, #0
 800161c:	71fb      	strb	r3, [r7, #7]
			break;
 800161e:	e05c      	b.n	80016da <EndEffector_Event+0x156>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001620:	f242 7310 	movw	r3, #10000	; 0x2710
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <EndEffector_Event+0x170>)
 800162a:	212a      	movs	r1, #42	; 0x2a
 800162c:	482d      	ldr	r0, [pc, #180]	; (80016e4 <EndEffector_Event+0x160>)
 800162e:	f002 fbf1 	bl	8003e14 <HAL_I2C_Master_Transmit>
					1, 10000);
			EndEffector_State = Init;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
			break;
 8001636:	e050      	b.n	80016da <EndEffector_Event+0x156>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001638:	f242 7310 	movw	r3, #10000	; 0x2710
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2304      	movs	r3, #4
 8001640:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <EndEffector_Event+0x174>)
 8001642:	212a      	movs	r1, #42	; 0x2a
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <EndEffector_Event+0x160>)
 8001646:	f002 fbe5 	bl	8003e14 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 10000);
			EndEffector_State = Init;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
			break;
 800164e:	e044      	b.n	80016da <EndEffector_Event+0x156>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 8001650:	f242 7310 	movw	r3, #10000	; 0x2710
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2302      	movs	r3, #2
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <EndEffector_Event+0x178>)
 800165a:	212a      	movs	r1, #42	; 0x2a
 800165c:	4821      	ldr	r0, [pc, #132]	; (80016e4 <EndEffector_Event+0x160>)
 800165e:	f002 fbd9 	bl	8003e14 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
			break;
 8001666:	e038      	b.n	80016da <EndEffector_Event+0x156>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001668:	f242 7310 	movw	r3, #10000	; 0x2710
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	4a23      	ldr	r2, [pc, #140]	; (8001700 <EndEffector_Event+0x17c>)
 8001672:	212a      	movs	r1, #42	; 0x2a
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <EndEffector_Event+0x160>)
 8001676:	f002 fbcd 	bl	8003e14 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 10000);
			EndEffector_State = Init;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
			break;
 800167e:	e02c      	b.n	80016da <EndEffector_Event+0x156>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 8001680:	f242 7310 	movw	r3, #10000	; 0x2710
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2302      	movs	r3, #2
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <EndEffector_Event+0x180>)
 800168a:	212a      	movs	r1, #42	; 0x2a
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <EndEffector_Event+0x160>)
 800168e:	f002 fbc1 	bl	8003e14 <HAL_I2C_Master_Transmit>
					10000);
			HAL_Delay(2000);
 8001692:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001696:	f001 fb67 	bl	8002d68 <HAL_Delay>
			EndEffector_State = Init;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
			break;
 800169e:	e01c      	b.n	80016da <EndEffector_Event+0x156>
		case Place:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 80016a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2302      	movs	r3, #2
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <EndEffector_Event+0x184>)
 80016aa:	212a      	movs	r1, #42	; 0x2a
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <EndEffector_Event+0x160>)
 80016ae:	f002 fbb1 	bl	8003e14 <HAL_I2C_Master_Transmit>
					10000);
			HAL_Delay(2000);
 80016b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016b6:	f001 fb57 	bl	8002d68 <HAL_Delay>
			EndEffector_State = Init;
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]
			break;
 80016be:	e00c      	b.n	80016da <EndEffector_Event+0x156>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 80016c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	4a10      	ldr	r2, [pc, #64]	; (800170c <EndEffector_Event+0x188>)
 80016ca:	212a      	movs	r1, #42	; 0x2a
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <EndEffector_Event+0x160>)
 80016ce:	f002 fc9f 	bl	8004010 <HAL_I2C_Master_Receive>
					10000);
			break;
 80016d2:	e002      	b.n	80016da <EndEffector_Event+0x156>
		}

	}
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <EndEffector_Event+0x156>
			break;
 80016d8:	bf00      	nop
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000030c 	.word	0x2000030c
 80016e8:	20000200 	.word	0x20000200
 80016ec:	20000204 	.word	0x20000204
 80016f0:	20000208 	.word	0x20000208
 80016f4:	2000020c 	.word	0x2000020c
 80016f8:	20000210 	.word	0x20000210
 80016fc:	20000214 	.word	0x20000214
 8001700:	20000218 	.word	0x20000218
 8001704:	2000021c 	.word	0x2000021c
 8001708:	20000220 	.word	0x20000220
 800170c:	200002ec 	.word	0x200002ec

08001710 <JoyStickControl>:
float y_pre_final[9];
float x_final_joy[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float y_final[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float q;

void JoyStickControl() {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af02      	add	r7, sp, #8

	read_pos();
 8001716:	f7ff faff 	bl	8000d18 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2104      	movs	r1, #4
 800171e:	4857      	ldr	r0, [pc, #348]	; (800187c <JoyStickControl+0x16c>)
 8001720:	f002 fa02 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8001724:	231e      	movs	r3, #30
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	230a      	movs	r3, #10
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <JoyStickControl+0x170>)
 800172c:	4955      	ldr	r1, [pc, #340]	; (8001884 <JoyStickControl+0x174>)
 800172e:	4856      	ldr	r0, [pc, #344]	; (8001888 <JoyStickControl+0x178>)
 8001730:	f003 fee3 	bl	80054fa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	2104      	movs	r1, #4
 8001738:	4850      	ldr	r0, [pc, #320]	; (800187c <JoyStickControl+0x16c>)
 800173a:	f002 f9f5 	bl	8003b28 <HAL_GPIO_WritePin>

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <JoyStickControl+0x170>)
 8001740:	791b      	ldrb	r3, [r3, #4]
 8001742:	2bfe      	cmp	r3, #254	; 0xfe
 8001744:	d113      	bne.n	800176e <JoyStickControl+0x5e>
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <JoyStickControl+0x17c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d10f      	bne.n	800176e <JoyStickControl+0x5e>
		if (state_motor == 1) {
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <JoyStickControl+0x180>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d103      	bne.n	800175e <JoyStickControl+0x4e>
			state_motor = 0;
 8001756:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <JoyStickControl+0x180>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 800175c:	e037      	b.n	80017ce <JoyStickControl+0xbe>
		} else if (state_motor == 0) {
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <JoyStickControl+0x180>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d133      	bne.n	80017ce <JoyStickControl+0xbe>
			state_motor = 1;
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <JoyStickControl+0x180>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 800176c:	e02f      	b.n	80017ce <JoyStickControl+0xbe>
		}
	} else if (RX[4] == 0xBF && button_last == 0xFF) { //X Button
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <JoyStickControl+0x170>)
 8001770:	791b      	ldrb	r3, [r3, #4]
 8001772:	2bbf      	cmp	r3, #191	; 0xbf
 8001774:	d11c      	bne.n	80017b0 <JoyStickControl+0xa0>
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <JoyStickControl+0x184>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d118      	bne.n	80017b0 <JoyStickControl+0xa0>

		if (y_count >= 4) {
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <JoyStickControl+0x188>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d904      	bls.n	8001790 <JoyStickControl+0x80>
			motor(0, 0);
 8001786:	2100      	movs	r1, #0
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff faeb 	bl	8000d64 <motor>
 800178e:	e005      	b.n	800179c <JoyStickControl+0x8c>
		} else {
			y_count += 1;
 8001790:	4b41      	ldr	r3, [pc, #260]	; (8001898 <JoyStickControl+0x188>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <JoyStickControl+0x188>)
 800179a:	701a      	strb	r2, [r3, #0]
		}
		y_c[y_count] = PosY;
 800179c:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <JoyStickControl+0x188>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <JoyStickControl+0x18c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	493e      	ldr	r1, [pc, #248]	; (80018a0 <JoyStickControl+0x190>)
 80017a8:	0083      	lsls	r3, r0, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e00f      	b.n	80017d0 <JoyStickControl+0xc0>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <JoyStickControl+0x170>)
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	2bef      	cmp	r3, #239	; 0xef
 80017b6:	d10b      	bne.n	80017d0 <JoyStickControl+0xc0>
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <JoyStickControl+0x184>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d107      	bne.n	80017d0 <JoyStickControl+0xc0>
		workState = 1;
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <JoyStickControl+0x194>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <JoyStickControl+0x198>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e000      	b.n	80017d0 <JoyStickControl+0xc0>
		if (state_motor == 1) {
 80017ce:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <JoyStickControl+0x180>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <JoyStickControl+0xce>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d020      	beq.n	800181e <JoyStickControl+0x10e>
 80017dc:	e042      	b.n	8001864 <JoyStickControl+0x154>
	case 0:
		if (RX[3] == 0xfe) //Not be push
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <JoyStickControl+0x170>)
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	2bfe      	cmp	r3, #254	; 0xfe
 80017e4:	d104      	bne.n	80017f0 <JoyStickControl+0xe0>
			motor(0, 1);
 80017e6:	2101      	movs	r1, #1
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fabb 	bl	8000d64 <motor>
		else if (RX[3] == 0xee) //UP
			motor(fast, -1);
		else if (RX[3] == 0xbe) //Down
			motor(fast, 1);
		break;
 80017ee:	e036      	b.n	800185e <JoyStickControl+0x14e>
		else if (RX[3] == 0xee) //UP
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <JoyStickControl+0x170>)
 80017f2:	78db      	ldrb	r3, [r3, #3]
 80017f4:	2bee      	cmp	r3, #238	; 0xee
 80017f6:	d107      	bne.n	8001808 <JoyStickControl+0xf8>
			motor(fast, -1);
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <JoyStickControl+0x19c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff faaf 	bl	8000d64 <motor>
		break;
 8001806:	e02a      	b.n	800185e <JoyStickControl+0x14e>
		else if (RX[3] == 0xbe) //Down
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <JoyStickControl+0x170>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	2bbe      	cmp	r3, #190	; 0xbe
 800180e:	d126      	bne.n	800185e <JoyStickControl+0x14e>
			motor(fast, 1);
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <JoyStickControl+0x19c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff faa4 	bl	8000d64 <motor>
		break;
 800181c:	e01f      	b.n	800185e <JoyStickControl+0x14e>
	case 1:
		if (RX[3] == 0xfe) //Not be push
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <JoyStickControl+0x170>)
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	2bfe      	cmp	r3, #254	; 0xfe
 8001824:	d104      	bne.n	8001830 <JoyStickControl+0x120>
			motor(0, 1);
 8001826:	2101      	movs	r1, #1
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fa9b 	bl	8000d64 <motor>
		else if (RX[3] == 0xee) //UP
			motor(slow, -1);
		else if (RX[3] == 0xbe) //Down
			motor(slow, 1);
		break;
 800182e:	e018      	b.n	8001862 <JoyStickControl+0x152>
		else if (RX[3] == 0xee) //UP
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <JoyStickControl+0x170>)
 8001832:	78db      	ldrb	r3, [r3, #3]
 8001834:	2bee      	cmp	r3, #238	; 0xee
 8001836:	d107      	bne.n	8001848 <JoyStickControl+0x138>
			motor(slow, -1);
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <JoyStickControl+0x1a0>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa8f 	bl	8000d64 <motor>
		break;
 8001846:	e00c      	b.n	8001862 <JoyStickControl+0x152>
		else if (RX[3] == 0xbe) //Down
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <JoyStickControl+0x170>)
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2bbe      	cmp	r3, #190	; 0xbe
 800184e:	d108      	bne.n	8001862 <JoyStickControl+0x152>
			motor(slow, 1);
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <JoyStickControl+0x1a0>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fa84 	bl	8000d64 <motor>
		break;
 800185c:	e001      	b.n	8001862 <JoyStickControl+0x152>
		break;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <JoyStickControl+0x154>
		break;
 8001862:	bf00      	nop
//X-axis
//		else if (RX[3] == 0x7F) //Left
//			printf("Left \r\n");
//		else if (RX[3] == 0xDF) //Right
//			printf("Right \r\n");
	RX_last = RX[4];
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <JoyStickControl+0x170>)
 8001866:	791a      	ldrb	r2, [r3, #4]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <JoyStickControl+0x17c>)
 800186a:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <JoyStickControl+0x170>)
 800186e:	791a      	ldrb	r2, [r3, #4]
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <JoyStickControl+0x184>)
 8001872:	701a      	strb	r2, [r3, #0]

}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020c00 	.word	0x40020c00
 8001880:	200002f0 	.word	0x200002f0
 8001884:	20000224 	.word	0x20000224
 8001888:	20000360 	.word	0x20000360
 800188c:	200002fc 	.word	0x200002fc
 8001890:	200002fb 	.word	0x200002fb
 8001894:	200002fd 	.word	0x200002fd
 8001898:	200002fe 	.word	0x200002fe
 800189c:	20000f20 	.word	0x20000f20
 80018a0:	20000300 	.word	0x20000300
 80018a4:	200002fa 	.word	0x200002fa
 80018a8:	200002b4 	.word	0x200002b4
 80018ac:	2000022e 	.word	0x2000022e
 80018b0:	20000230 	.word	0x20000230

080018b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b8:	f3bf 8f4f 	dsb	sy
}
 80018bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <__NVIC_SystemReset+0x24>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018c6:	4904      	ldr	r1, [pc, #16]	; (80018d8 <__NVIC_SystemReset+0x24>)
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_SystemReset+0x28>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018ce:	f3bf 8f4f 	dsb	sy
}
 80018d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <__NVIC_SystemReset+0x20>
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	05fa0004 	.word	0x05fa0004

080018e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b08c      	sub	sp, #48	; 0x30
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018e8:	f001 f9cc 	bl	8002c84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018ec:	f000 f9fc 	bl	8001ce8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018f0:	f000 fd22 	bl	8002338 <MX_GPIO_Init>
	MX_DMA_Init();
 80018f4:	f000 fd00 	bl	80022f8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80018f8:	f000 fca6 	bl	8002248 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80018fc:	f000 fb60 	bl	8001fc0 <MX_TIM2_Init>
	MX_TIM1_Init();
 8001900:	f000 fabe 	bl	8001e80 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001904:	f000 fbb0 	bl	8002068 <MX_TIM3_Init>
	MX_I2C2_Init();
 8001908:	f000 fa56 	bl	8001db8 <MX_I2C2_Init>
	MX_USART6_UART_Init();
 800190c:	f000 fcc8 	bl	80022a0 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8001910:	f000 fbf8 	bl	8002104 <MX_TIM5_Init>
	MX_SPI3_Init();
 8001914:	f000 fa7e 	bl	8001e14 <MX_SPI3_Init>
	MX_TIM11_Init();
 8001918:	f000 fc42 	bl	80021a0 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 800191c:	2003      	movs	r0, #3
 800191e:	f7ff fe31 	bl	8001584 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001922:	2104      	movs	r1, #4
 8001924:	48b6      	ldr	r0, [pc, #728]	; (8001c00 <main+0x320>)
 8001926:	f004 fc6b 	bl	8006200 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800192a:	48b6      	ldr	r0, [pc, #728]	; (8001c04 <main+0x324>)
 800192c:	f004 f908 	bl	8005b40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001930:	48b5      	ldr	r0, [pc, #724]	; (8001c08 <main+0x328>)
 8001932:	f004 f8ab 	bl	8005a8c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001936:	2100      	movs	r1, #0
 8001938:	48b3      	ldr	r0, [pc, #716]	; (8001c08 <main+0x328>)
 800193a:	f004 fa2f 	bl	8005d9c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 800193e:	48b3      	ldr	r0, [pc, #716]	; (8001c0c <main+0x32c>)
 8001940:	f004 f8fe 	bl	8005b40 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8001944:	4bb2      	ldr	r3, [pc, #712]	; (8001c10 <main+0x330>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7fe fdc9 	bl	80004e4 <__aeabi_ul2d>
 8001952:	a3a9      	add	r3, pc, #676	; (adr r3, 8001bf8 <main+0x318>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe ff24 	bl	80007a4 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	49ac      	ldr	r1, [pc, #688]	; (8001c14 <main+0x334>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 8001966:	4baa      	ldr	r3, [pc, #680]	; (8001c10 <main+0x330>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe fdb8 	bl	80004e4 <__aeabi_ul2d>
 8001974:	a3a0      	add	r3, pc, #640	; (adr r3, 8001bf8 <main+0x318>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe ff13 	bl	80007a4 <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	49a5      	ldr	r1, [pc, #660]	; (8001c18 <main+0x338>)
 8001984:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 8001988:	4ba1      	ldr	r3, [pc, #644]	; (8001c10 <main+0x330>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7fe fda7 	bl	80004e4 <__aeabi_ul2d>
 8001996:	a398      	add	r3, pc, #608	; (adr r3, 8001bf8 <main+0x318>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff02 	bl	80007a4 <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	499d      	ldr	r1, [pc, #628]	; (8001c1c <main+0x33c>)
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 80019aa:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <main+0x330>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7fe fd96 	bl	80004e4 <__aeabi_ul2d>
 80019b8:	a38f      	add	r3, pc, #572	; (adr r3, 8001bf8 <main+0x318>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fef1 	bl	80007a4 <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4996      	ldr	r1, [pc, #600]	; (8001c20 <main+0x340>)
 80019c8:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 80019cc:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <main+0x330>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7fe fd85 	bl	80004e4 <__aeabi_ul2d>
 80019da:	a387      	add	r3, pc, #540	; (adr r3, 8001bf8 <main+0x318>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fee0 	bl	80007a4 <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	498e      	ldr	r1, [pc, #568]	; (8001c24 <main+0x344>)
 80019ea:	e9c1 2300 	strd	r2, r3, [r1]

	hmodbus.huart = &huart2;
 80019ee:	4b8e      	ldr	r3, [pc, #568]	; (8001c28 <main+0x348>)
 80019f0:	4a8e      	ldr	r2, [pc, #568]	; (8001c2c <main+0x34c>)
 80019f2:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <main+0x348>)
 80019f6:	4a8e      	ldr	r2, [pc, #568]	; (8001c30 <main+0x350>)
 80019f8:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <main+0x348>)
 80019fc:	2215      	movs	r2, #21
 80019fe:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001a00:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <main+0x348>)
 8001a02:	22c8      	movs	r2, #200	; 0xc8
 8001a04:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001a06:	498b      	ldr	r1, [pc, #556]	; (8001c34 <main+0x354>)
 8001a08:	4887      	ldr	r0, [pc, #540]	; (8001c28 <main+0x348>)
 8001a0a:	f7ff fab1 	bl	8000f70 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 8001a0e:	4b8a      	ldr	r3, [pc, #552]	; (8001c38 <main+0x358>)
 8001a10:	f107 0414 	add.w	r4, r7, #20
 8001a14:	461d      	mov	r5, r3
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	6023      	str	r3, [r4, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <main+0x35c>)
 8001a20:	463c      	mov	r4, r7
 8001a22:	461d      	mov	r5, r3
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	6023      	str	r3, [r4, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		int64_t GetTicku = micros();
 8001a2c:	f000 fdb0 	bl	8002590 <micros>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		Modbus_Protocal_Worker();
 8001a38:	f7ff fb26 	bl	8001088 <Modbus_Protocal_Worker>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 8001a3c:	f001 f988 	bl	8002d50 <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2200      	movs	r2, #0
 8001a44:	4698      	mov	r8, r3
 8001a46:	4691      	mov	r9, r2
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <main+0x360>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	4590      	cmp	r8, r2
 8001a50:	eb79 0303 	sbcs.w	r3, r9, r3
 8001a54:	d322      	bcc.n	8001a9c <main+0x1bc>
			timestamp_heartbeat = HAL_GetTick() + 200;
 8001a56:	f001 f97b 	bl	8002d50 <HAL_GetTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	33c8      	adds	r3, #200	; 0xc8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	469a      	mov	sl, r3
 8001a62:	4693      	mov	fp, r2
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <main+0x360>)
 8001a66:	e9c3 ab00 	strd	sl, fp, [r3]

			Heartbeat_Protocol= 22881;
 8001a6a:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <main+0x354>)
 8001a6c:	f645 1261 	movw	r2, #22881	; 0x5961
 8001a70:	801a      	strh	r2, [r3, #0]

			y_axis_Actual_Position= ((int32_t) PosY) * 10;
 8001a72:	4b74      	ldr	r3, [pc, #464]	; (8001c44 <main+0x364>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <main+0x354>)
 8001a8e:	845a      	strh	r2, [r3, #34]	; 0x22
			y_axis_Actual_Speed= 0;
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <main+0x354>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	849a      	strh	r2, [r3, #36]	; 0x24
			y_axis_Actual_Acceleration= 0;
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <main+0x354>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	84da      	strh	r2, [r3, #38]	; 0x26
		}

		switch (State) {
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <main+0x368>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	f200 8114 	bhi.w	8001cce <main+0x3ee>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <main+0x1cc>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001ad1 	.word	0x08001ad1
 8001ab0:	08001ad9 	.word	0x08001ad9
 8001ab4:	08001b7d 	.word	0x08001b7d
 8001ab8:	08001ccf 	.word	0x08001ccf
 8001abc:	08001ccf 	.word	0x08001ccf
 8001ac0:	08001ccf 	.word	0x08001ccf
 8001ac4:	08001b83 	.word	0x08001b83
 8001ac8:	08001adf 	.word	0x08001adf
 8001acc:	08001b89 	.word	0x08001b89
		case INIT:
			State = INIT_HOMING;
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <main+0x368>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
			break;
 8001ad6:	e0fa      	b.n	8001cce <main+0x3ee>
		case INIT_HOMING:
			Init_Homing();
 8001ad8:	f7ff f96e 	bl	8000db8 <Init_Homing>
			break;
 8001adc:	e0f7      	b.n	8001cce <main+0x3ee>
		case IDLE:

			if (End_Effector_Status== EndEffectorStatusData.LaserOn) {
 8001ade:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <main+0x354>)
 8001ae0:	889b      	ldrh	r3, [r3, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d103      	bne.n	8001af2 <main+0x212>
				EndEffector_Event(Test_Start);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff fd4a 	bl	8001584 <EndEffector_Event>
 8001af0:	e012      	b.n	8001b18 <main+0x238>
			} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <main+0x354>)
 8001af4:	889b      	ldrh	r3, [r3, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d103      	bne.n	8001b06 <main+0x226>
				EndEffector_Event(Test_Stop);
 8001afe:	2002      	movs	r0, #2
 8001b00:	f7ff fd40 	bl	8001584 <EndEffector_Event>
 8001b04:	e008      	b.n	8001b18 <main+0x238>
			} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <main+0x354>)
 8001b08:	889b      	ldrh	r3, [r3, #4]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d102      	bne.n	8001b18 <main+0x238>
				EndEffector_Event(Run_Mode);
 8001b12:	2006      	movs	r0, #6
 8001b14:	f7ff fd36 	bl	8001584 <EndEffector_Event>
			}

			if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <main+0x354>)
 8001b1a:	889b      	ldrh	r3, [r3, #4]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d10a      	bne.n	8001b3a <main+0x25a>
				EndEffector_Event(Run_Mode);EndEffector_Event(Pick);
 8001b24:	2006      	movs	r0, #6
 8001b26:	f7ff fd2d 	bl	8001584 <EndEffector_Event>
 8001b2a:	2008      	movs	r0, #8
 8001b2c:	f7ff fd2a 	bl	8001584 <EndEffector_Event>
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <main+0x354>)
 8001b36:	809a      	strh	r2, [r3, #4]
 8001b38:	e00f      	b.n	8001b5a <main+0x27a>
			} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <main+0x354>)
 8001b3c:	889b      	ldrh	r3, [r3, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d109      	bne.n	8001b5a <main+0x27a>
				EndEffector_Event(Run_Mode);EndEffector_Event(Place);
 8001b46:	2006      	movs	r0, #6
 8001b48:	f7ff fd1c 	bl	8001584 <EndEffector_Event>
 8001b4c:	2009      	movs	r0, #9
 8001b4e:	f7ff fd19 	bl	8001584 <EndEffector_Event>
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <main+0x354>)
 8001b58:	809a      	strh	r2, [r3, #4]
			}

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <main+0x354>)
 8001b5c:	885b      	ldrh	r3, [r3, #2]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	f040 80b2 	bne.w	8001ccc <main+0x3ec>
				EndEffector_Event(Test_Start);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fd0b 	bl	8001584 <EndEffector_Event>
				Base_System_Status = 0;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <main+0x354>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	805a      	strh	r2, [r3, #2]
				State = SETPICKTRAY;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <main+0x368>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001b7a:	e0a7      	b.n	8001ccc <main+0x3ec>

			case SETPICKTRAY:

			JoyStickControl();
 8001b7c:	f7ff fdc8 	bl	8001710 <JoyStickControl>

			break;
 8001b80:	e0a5      	b.n	8001cce <main+0x3ee>

			case EMERGENCY_LIMIT:

			Photo_IT();
 8001b82:	f000 fc9d 	bl	80024c0 <Photo_IT>

			break;
 8001b86:	e0a2      	b.n	8001cce <main+0x3ee>

			case SENSOR_CHECK:

			read_pos();
 8001b88:	f7ff f8c6 	bl	8000d18 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,Photoelectric_sensor_1_Pin);
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	482f      	ldr	r0, [pc, #188]	; (8001c4c <main+0x36c>)
 8001b90:	f001 ffb2 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <main+0x370>)
 8001b9a:	601a      	str	r2, [r3, #0]
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,Photoelectric_sensor_2_Pin);
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	482d      	ldr	r0, [pc, #180]	; (8001c54 <main+0x374>)
 8001ba0:	f001 ffaa 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <main+0x370>)
 8001baa:	605a      	str	r2, [r3, #4]
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,Photoelectric_sensor_3_Pin);
 8001bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb0:	4828      	ldr	r0, [pc, #160]	; (8001c54 <main+0x374>)
 8001bb2:	f001 ffa1 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <main+0x370>)
 8001bbc:	609a      	str	r2, [r3, #8]
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port,Emergency_Pin);
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	4822      	ldr	r0, [pc, #136]	; (8001c4c <main+0x36c>)
 8001bc2:	f001 ff99 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <main+0x370>)
 8001bcc:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <main+0x370>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d142      	bne.n	8001c5c <main+0x37c>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2140      	movs	r1, #64	; 0x40
 8001bda:	481f      	ldr	r0, [pc, #124]	; (8001c58 <main+0x378>)
 8001bdc:	f001 ffa4 	bl	8003b28 <HAL_GPIO_WritePin>
				SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8001be0:	2200      	movs	r2, #0
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	481c      	ldr	r0, [pc, #112]	; (8001c58 <main+0x378>)
 8001be6:	f001 ff9f 	bl	8003b28 <HAL_GPIO_WritePin>
				RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001bea:	2200      	movs	r2, #0
 8001bec:	2120      	movs	r1, #32
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <main+0x378>)
 8001bf0:	f001 ff9a 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
				RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
				RESET);
			}
			break;
 8001bf4:	e06b      	b.n	8001cce <main+0x3ee>
 8001bf6:	bf00      	nop
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	412e8480 	.word	0x412e8480
 8001c00:	2000046c 	.word	0x2000046c
 8001c04:	20000520 	.word	0x20000520
 8001c08:	200003b8 	.word	0x200003b8
 8001c0c:	200005d4 	.word	0x200005d4
 8001c10:	20000238 	.word	0x20000238
 8001c14:	20000240 	.word	0x20000240
 8001c18:	20000248 	.word	0x20000248
 8001c1c:	20000250 	.word	0x20000250
 8001c20:	20000258 	.word	0x20000258
 8001c24:	20000260 	.word	0x20000260
 8001c28:	200008a0 	.word	0x200008a0
 8001c2c:	2000073c 	.word	0x2000073c
 8001c30:	20000688 	.word	0x20000688
 8001c34:	20000d78 	.word	0x20000d78
 8001c38:	08008a44 	.word	0x08008a44
 8001c3c:	08008a58 	.word	0x08008a58
 8001c40:	20000f28 	.word	0x20000f28
 8001c44:	20000f20 	.word	0x20000f20
 8001c48:	200002b4 	.word	0x200002b4
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	20000f08 	.word	0x20000f08
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020000 	.word	0x40020000
			} else if (GPIO_test.ramp == 2) {
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <main+0x3fc>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d10f      	bne.n	8001c84 <main+0x3a4>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <main+0x400>)
 8001c6a:	f001 ff5d 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <main+0x400>)
 8001c74:	f001 ff58 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <main+0x400>)
 8001c7e:	f001 ff53 	bl	8003b28 <HAL_GPIO_WritePin>
			break;
 8001c82:	e024      	b.n	8001cce <main+0x3ee>
			} else if (GPIO_test.ramp == 3) {
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <main+0x3fc>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d10f      	bne.n	8001cac <main+0x3cc>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <main+0x400>)
 8001c92:	f001 ff49 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8001c96:	2200      	movs	r2, #0
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <main+0x400>)
 8001c9c:	f001 ff44 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <main+0x400>)
 8001ca6:	f001 ff3f 	bl	8003b28 <HAL_GPIO_WritePin>
			break;
 8001caa:	e010      	b.n	8001cce <main+0x3ee>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001cac:	2200      	movs	r2, #0
 8001cae:	2140      	movs	r1, #64	; 0x40
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <main+0x400>)
 8001cb2:	f001 ff39 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <main+0x400>)
 8001cbc:	f001 ff34 	bl	8003b28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <main+0x400>)
 8001cc6:	f001 ff2f 	bl	8003b28 <HAL_GPIO_WritePin>
			break;
 8001cca:	e000      	b.n	8001cce <main+0x3ee>
			break;
 8001ccc:	bf00      	nop
//		case EMERGENCY_LIMIT:
//			Photo_IT();
//			break;
//		}

		if (Re == 1) {
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <main+0x404>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f47f aeaa 	bne.w	8001a2c <main+0x14c>
			NVIC_SystemReset();
 8001cd8:	f7ff fdec 	bl	80018b4 <__NVIC_SystemReset>
 8001cdc:	20000f08 	.word	0x20000f08
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	2000088d 	.word	0x2000088d

08001ce8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b094      	sub	sp, #80	; 0x50
 8001cec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	2230      	movs	r2, #48	; 0x30
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 fe90 	bl	8008a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fea3 	bl	8004ab8 <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x94>
		Error_Handler();
 8001d78:	f000 fc3e 	bl	80025f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2103      	movs	r1, #3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f905 	bl	8004fa8 <HAL_RCC_ClockConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0xc0>
		Error_Handler();
 8001da4:	f000 fc28 	bl	80025f8 <Error_Handler>
	}
}
 8001da8:	bf00      	nop
 8001daa:	3750      	adds	r7, #80	; 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <MX_I2C2_Init+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_I2C2_Init+0x58>)
 8001dc6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dda:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_I2C2_Init+0x50>)
 8001df6:	f001 fec9 	bl	8003b8c <HAL_I2C_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001e00:	f000 fbfa 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000030c 	.word	0x2000030c
 8001e0c:	40005800 	.word	0x40005800
 8001e10:	000186a0 	.word	0x000186a0

08001e14 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <MX_SPI3_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e24:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e44:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e48:	2238      	movs	r2, #56	; 0x38
 8001e4a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e60:	220a      	movs	r2, #10
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_SPI3_Init+0x64>)
 8001e66:	f003 fabf 	bl	80053e8 <HAL_SPI_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_SPI3_Init+0x60>
		Error_Handler();
 8001e70:	f000 fbc2 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000360 	.word	0x20000360
 8001e7c:	40003c00 	.word	0x40003c00

08001e80 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b096      	sub	sp, #88	; 0x58
 8001e84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f006 fdaf 	bl	8008a1c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ec0:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <MX_TIM1_Init+0x13c>)
 8001ec2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001eea:	4833      	ldr	r0, [pc, #204]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001eec:	f003 fd72 	bl	80059d4 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001ef6:	f000 fb7f 	bl	80025f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001f00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f04:	4619      	mov	r1, r3
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001f08:	f004 fc4e 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001f12:	f000 fb71 	bl	80025f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001f16:	4828      	ldr	r0, [pc, #160]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001f18:	f003 feda 	bl	8005cd0 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001f22:	f000 fb69 	bl	80025f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f32:	4619      	mov	r1, r3
 8001f34:	4820      	ldr	r0, [pc, #128]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001f36:	f005 f9c7 	bl	80072c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001f40:	f000 fb5a 	bl	80025f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f44:	2360      	movs	r3, #96	; 0x60
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	2200      	movs	r2, #0
 8001f66:	4619      	mov	r1, r3
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001f6a:	f004 fb5b 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001f74:	f000 fb40 	bl	80025f8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001f9c:	f005 fa02 	bl	80073a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001fa6:	f000 fb27 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <MX_TIM1_Init+0x138>)
 8001fac:	f000 fcbc 	bl	8002928 <HAL_TIM_MspPostInit>

}
 8001fb0:	bf00      	nop
 8001fb2:	3758      	adds	r7, #88	; 0x58
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200003b8 	.word	0x200003b8
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f006 fd24 	bl	8008a1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_TIM2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002004:	2303      	movs	r3, #3
 8002006:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002014:	230f      	movs	r3, #15
 8002016:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8002024:	230f      	movs	r3, #15
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_TIM2_Init+0xa4>)
 8002030:	f004 f832 	bl	8006098 <HAL_TIM_Encoder_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800203a:	f000 fadd 	bl	80025f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_TIM2_Init+0xa4>)
 800204c:	f005 f93c 	bl	80072c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002056:	f000 facf 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	; 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000046c 	.word	0x2000046c

08002068 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800207c:	463b      	mov	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MX_TIM3_Init+0x94>)
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <MX_TIM3_Init+0x98>)
 8002088:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_TIM3_Init+0x94>)
 800208c:	2263      	movs	r2, #99	; 0x63
 800208e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_TIM3_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <MX_TIM3_Init+0x94>)
 8002098:	f242 720f 	movw	r2, #9999	; 0x270f
 800209c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <MX_TIM3_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <MX_TIM3_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <MX_TIM3_Init+0x94>)
 80020ac:	f003 fc92 	bl	80059d4 <HAL_TIM_Base_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM3_Init+0x52>
		Error_Handler();
 80020b6:	f000 fa9f 	bl	80025f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_TIM3_Init+0x94>)
 80020c8:	f004 fb6e 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80020d2:	f000 fa91 	bl	80025f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80020de:	463b      	mov	r3, r7
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_TIM3_Init+0x94>)
 80020e4:	f005 f8f0 	bl	80072c8 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80020ee:	f000 fa83 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000520 	.word	0x20000520
 8002100:	40000400 	.word	0x40000400

08002104 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_TIM5_Init+0x94>)
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <MX_TIM5_Init+0x98>)
 8002124:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <MX_TIM5_Init+0x94>)
 8002128:	2263      	movs	r2, #99	; 0x63
 800212a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_TIM5_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <MX_TIM5_Init+0x94>)
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_TIM5_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_TIM5_Init+0x94>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <MX_TIM5_Init+0x94>)
 8002148:	f003 fc44 	bl	80059d4 <HAL_TIM_Base_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM5_Init+0x52>
		Error_Handler();
 8002152:	f000 fa51 	bl	80025f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4619      	mov	r1, r3
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <MX_TIM5_Init+0x94>)
 8002164:	f004 fb20 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM5_Init+0x6e>
		Error_Handler();
 800216e:	f000 fa43 	bl	80025f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800217a:	463b      	mov	r3, r7
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <MX_TIM5_Init+0x94>)
 8002180:	f005 f8a2 	bl	80072c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800218a:	f000 fa35 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200005d4 	.word	0x200005d4
 800219c:	40000c00 	.word	0x40000c00

080021a0 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <MX_TIM11_Init+0xa4>)
 80021bc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021c0:	2263      	movs	r2, #99	; 0x63
 80021c2:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021cc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80021d0:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021e0:	f003 fbf8 	bl	80059d4 <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM11_Init+0x4e>
		Error_Handler();
 80021ea:	f000 fa05 	bl	80025f8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <MX_TIM11_Init+0xa0>)
 80021f0:	f003 fd08 	bl	8005c04 <HAL_TIM_OC_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM11_Init+0x5e>
		Error_Handler();
 80021fa:	f000 f9fd 	bl	80025f8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 80021fe:	2108      	movs	r1, #8
 8002200:	480f      	ldr	r0, [pc, #60]	; (8002240 <MX_TIM11_Init+0xa0>)
 8002202:	f003 fe7b 	bl	8005efc <HAL_TIM_OnePulse_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM11_Init+0x70>
		Error_Handler();
 800220c:	f000 f9f4 	bl	80025f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002210:	2310      	movs	r3, #16
 8002212:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8002214:	f240 5399 	movw	r3, #1433	; 0x599
 8002218:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_TIM11_Init+0xa0>)
 800222a:	f004 f99f 	bl	800656c <HAL_TIM_OC_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002234:	f000 f9e0 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000688 	.word	0x20000688
 8002244:	40014800 	.word	0x40014800

08002248 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <MX_USART2_UART_Init+0x50>)
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <MX_USART2_UART_Init+0x54>)
 8002250:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002254:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002258:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <MX_USART2_UART_Init+0x50>)
 800225c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002260:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_USART2_UART_Init+0x50>)
 800226a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_USART2_UART_Init+0x50>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002284:	f005 f8fe 	bl	8007484 <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 800228e:	f000 f9b3 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000073c 	.word	0x2000073c
 800229c:	40004400 	.word	0x40004400

080022a0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <MX_USART6_UART_Init+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022b8:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_USART6_UART_Init+0x50>)
 80022dc:	f005 f8d2 	bl	8007484 <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 80022e6:	f000 f987 	bl	80025f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200007b0 	.word	0x200007b0
 80022f4:	40011400 	.word	0x40011400

080022f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_DMA_Init+0x3c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <MX_DMA_Init+0x3c>)
 8002308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_DMA_Init+0x3c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2011      	movs	r0, #17
 8002320:	f000 fe21 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002324:	2011      	movs	r0, #17
 8002326:	f000 fe3a 	bl	8002f9e <HAL_NVIC_EnableIRQ>

}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <MX_GPIO_Init+0x174>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a55      	ldr	r2, [pc, #340]	; (80024ac <MX_GPIO_Init+0x174>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b53      	ldr	r3, [pc, #332]	; (80024ac <MX_GPIO_Init+0x174>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <MX_GPIO_Init+0x174>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <MX_GPIO_Init+0x174>)
 8002374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <MX_GPIO_Init+0x174>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <MX_GPIO_Init+0x174>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a47      	ldr	r2, [pc, #284]	; (80024ac <MX_GPIO_Init+0x174>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <MX_GPIO_Init+0x174>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <MX_GPIO_Init+0x174>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a40      	ldr	r2, [pc, #256]	; (80024ac <MX_GPIO_Init+0x174>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <MX_GPIO_Init+0x174>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <MX_GPIO_Init+0x174>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a39      	ldr	r2, [pc, #228]	; (80024ac <MX_GPIO_Init+0x174>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <MX_GPIO_Init+0x174>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80023e0:	4833      	ldr	r0, [pc, #204]	; (80024b0 <MX_GPIO_Init+0x178>)
 80023e2:	f001 fba1 	bl	8003b28 <HAL_GPIO_WritePin>
	Switch_Relay_3_Pin | Switch_Relay_1_Pin | Switch_Relay_2_Pin | DIR_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 80023e6:	2200      	movs	r2, #0
 80023e8:	2104      	movs	r1, #4
 80023ea:	4832      	ldr	r0, [pc, #200]	; (80024b4 <MX_GPIO_Init+0x17c>)
 80023ec:	f001 fb9c 	bl	8003b28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_1_Pin;
 80023f0:	f242 0348 	movw	r3, #8264	; 0x2048
 80023f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	482c      	ldr	r0, [pc, #176]	; (80024b8 <MX_GPIO_Init+0x180>)
 8002408:	f001 f9f2 	bl	80037f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_3_Pin | Switch_Relay_1_Pin
 800240c:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002410:	617b      	str	r3, [r7, #20]
			| Switch_Relay_2_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4822      	ldr	r0, [pc, #136]	; (80024b0 <MX_GPIO_Init+0x178>)
 8002426:	f001 f9e3 	bl	80037f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 800242a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800242e:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002430:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002434:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	481e      	ldr	r0, [pc, #120]	; (80024bc <MX_GPIO_Init+0x184>)
 8002442:	f001 f9d5 	bl	80037f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 8002446:	2304      	movs	r3, #4
 8002448:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4815      	ldr	r0, [pc, #84]	; (80024b4 <MX_GPIO_Init+0x17c>)
 800245e:	f001 f9c7 	bl	80037f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2008      	movs	r0, #8
 8002468:	f000 fd7d 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800246c:	2008      	movs	r0, #8
 800246e:	f000 fd96 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2009      	movs	r0, #9
 8002478:	f000 fd75 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800247c:	2009      	movs	r0, #9
 800247e:	f000 fd8e 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	2017      	movs	r0, #23
 8002488:	f000 fd6d 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800248c:	2017      	movs	r0, #23
 800248e:	f000 fd86 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2028      	movs	r0, #40	; 0x28
 8002498:	f000 fd65 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800249c:	2028      	movs	r0, #40	; 0x28
 800249e:	f000 fd7e 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	; 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020400 	.word	0x40020400

080024c0 <Photo_IT>:

/* USER CODE BEGIN 4 */
void Photo_IT() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	switch (state_IT) {
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <Photo_IT+0x4c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <Photo_IT+0x12>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d011      	beq.n	80024f4 <Photo_IT+0x34>
	case 1:
		Dutyfeedback = 0;
		motor(0, 1);
		break;
	}
}
 80024d0:	e01a      	b.n	8002508 <Photo_IT+0x48>
		if (state_IT == 0) {
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <Photo_IT+0x4c>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <Photo_IT+0x46>
		} else if (state_IT == 1) {
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <Photo_IT+0x4c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d111      	bne.n	8002506 <Photo_IT+0x46>
			Dutyfeedback = 0;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <Photo_IT+0x50>)
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
			motor(0, 1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fc39 	bl	8000d64 <motor>
		break;
 80024f2:	e008      	b.n	8002506 <Photo_IT+0x46>
		Dutyfeedback = 0;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <Photo_IT+0x50>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
		motor(0, 1);
 80024fc:	2101      	movs	r1, #1
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fc30 	bl	8000d64 <motor>
		break;
 8002504:	e000      	b.n	8002508 <Photo_IT+0x48>
		break;
 8002506:	bf00      	nop
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2000088c 	.word	0x2000088c
 8002510:	20000890 	.word	0x20000890

08002514 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Photoelectric_sensor_1_Pin) {
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d111      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x34>
		if (State == PID_STATE) {
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10d      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x34>
			Dutyfeedback = 0;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_GPIO_EXTI_Callback+0x70>)
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_GPIO_EXTI_Callback+0x74>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_GPIO_EXTI_Callback+0x78>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002544:	2206      	movs	r2, #6
 8002546:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == Photoelectric_sensor_3_Pin) {
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d111      	bne.n	8002574 <HAL_GPIO_EXTI_Callback+0x60>
		if (State == PID_STATE) {
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10d      	bne.n	8002574 <HAL_GPIO_EXTI_Callback+0x60>
			Dutyfeedback = 0;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_GPIO_EXTI_Callback+0x70>)
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_GPIO_EXTI_Callback+0x74>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_GPIO_EXTI_Callback+0x78>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002570:	2206      	movs	r2, #6
 8002572:	701a      	strb	r2, [r3, #0]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	200002b4 	.word	0x200002b4
 8002584:	20000890 	.word	0x20000890
 8002588:	200003b8 	.word	0x200003b8
 800258c:	2000088c 	.word	0x2000088c

08002590 <micros>:

uint64_t micros() {
 8002590:	b4b0      	push	{r4, r5, r7}
 8002592:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <micros+0x2c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	4618      	mov	r0, r3
 800259e:	4611      	mov	r1, r2
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <micros+0x30>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	1884      	adds	r4, r0, r2
 80025a8:	eb41 0503 	adc.w	r5, r1, r3
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
}
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bcb0      	pop	{r4, r5, r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200005d4 	.word	0x200005d4
 80025c0:	20000898 	.word	0x20000898

080025c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025c4:	b4b0      	push	{r4, r5, r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	1e54      	subs	r4, r2, #1
 80025dc:	f143 0500 	adc.w	r5, r3, #0
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025e2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bcb0      	pop	{r4, r5, r7}
 80025ee:	4770      	bx	lr
 80025f0:	200005d4 	.word	0x200005d4
 80025f4:	20000898 	.word	0x20000898

080025f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002600:	e7fe      	b.n	8002600 <Error_Handler+0x8>
	...

08002604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_MspInit+0x4c>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_MspInit+0x4c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002642:	2007      	movs	r0, #7
 8002644:	f000 fc84 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800

08002654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_I2C_MspInit+0xa8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d13d      	bne.n	80026f2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_I2C_MspInit+0xac>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a20      	ldr	r2, [pc, #128]	; (8002700 <HAL_I2C_MspInit+0xac>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_I2C_MspInit+0xac>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002698:	2312      	movs	r3, #18
 800269a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269c:	2301      	movs	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026a4:	2304      	movs	r3, #4
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4815      	ldr	r0, [pc, #84]	; (8002704 <HAL_I2C_MspInit+0xb0>)
 80026b0:	f001 f89e 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ba:	2312      	movs	r3, #18
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80026c6:	2309      	movs	r3, #9
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <HAL_I2C_MspInit+0xb0>)
 80026d2:	f001 f88d 	bl	80037f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_I2C_MspInit+0xac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_I2C_MspInit+0xac>)
 80026e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_I2C_MspInit+0xac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40005800 	.word	0x40005800
 8002700:	40023800 	.word	0x40023800
 8002704:	40020400 	.word	0x40020400

08002708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_SPI_MspInit+0x84>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d12c      	bne.n	8002784 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_SPI_MspInit+0x88>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_SPI_MspInit+0x88>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002762:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002774:	2306      	movs	r3, #6
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_SPI_MspInit+0x8c>)
 8002780:	f001 f836 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40003c00 	.word	0x40003c00
 8002790:	40023800 	.word	0x40023800
 8002794:	40020800 	.word	0x40020800

08002798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_TIM_Base_MspInit+0xf0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d116      	bne.n	80027d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a36      	ldr	r2, [pc, #216]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	201a      	movs	r0, #26
 80027cc:	f000 fbcb 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027d0:	201a      	movs	r0, #26
 80027d2:	f000 fbe4 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80027d6:	e052      	b.n	800287e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <HAL_TIM_Base_MspInit+0xf8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d116      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	201d      	movs	r0, #29
 8002804:	f000 fbaf 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002808:	201d      	movs	r0, #29
 800280a:	f000 fbc8 	bl	8002f9e <HAL_NVIC_EnableIRQ>
}
 800280e:	e036      	b.n	800287e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_TIM_Base_MspInit+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d116      	bne.n	8002848 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2032      	movs	r0, #50	; 0x32
 800283c:	f000 fb93 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f000 fbac 	bl	8002f9e <HAL_NVIC_EnableIRQ>
}
 8002846:	e01a      	b.n	800287e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a12      	ldr	r2, [pc, #72]	; (8002898 <HAL_TIM_Base_MspInit+0x100>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d115      	bne.n	800287e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	201a      	movs	r0, #26
 8002874:	f000 fb77 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002878:	201a      	movs	r0, #26
 800287a:	f000 fb90 	bl	8002f9e <HAL_NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40023800 	.word	0x40023800
 8002890:	40000400 	.word	0x40000400
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40014800 	.word	0x40014800

0800289c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d12b      	bne.n	8002916 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_TIM_Encoder_MspInit+0x84>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028f6:	2303      	movs	r3, #3
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002906:	2301      	movs	r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4804      	ldr	r0, [pc, #16]	; (8002924 <HAL_TIM_Encoder_MspInit+0x88>)
 8002912:	f000 ff6d 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40020000 	.word	0x40020000

08002928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_TIM_MspPostInit+0x68>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d11e      	bne.n	8002988 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_TIM_MspPostInit+0x6c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_MspPostInit+0x6c>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_TIM_MspPostInit+0x6c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002978:	2301      	movs	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	4619      	mov	r1, r3
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_TIM_MspPostInit+0x70>)
 8002984:	f000 ff34 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010000 	.word	0x40010000
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000

0800299c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_UART_MspInit+0x154>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d162      	bne.n	8002a84 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	4b45      	ldr	r3, [pc, #276]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a44      	ldr	r2, [pc, #272]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_UART_MspInit+0x158>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029f6:	230c      	movs	r3, #12
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a06:	2307      	movs	r3, #7
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4839      	ldr	r0, [pc, #228]	; (8002af8 <HAL_UART_MspInit+0x15c>)
 8002a12:	f000 feed 	bl	80037f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a18:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_UART_MspInit+0x164>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a1c:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a56:	4829      	ldr	r0, [pc, #164]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a58:	f000 fabc 	bl	8002fd4 <HAL_DMA_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002a62:	f7ff fdc9 	bl	80025f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_UART_MspInit+0x160>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2026      	movs	r0, #38	; 0x26
 8002a78:	f000 fa75 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a7c:	2026      	movs	r0, #38	; 0x26
 8002a7e:	f000 fa8e 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a82:	e031      	b.n	8002ae8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_UART_MspInit+0x168>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12c      	bne.n	8002ae8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002a98:	f043 0320 	orr.w	r3, r3, #32
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_UART_MspInit+0x158>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_UART_MspInit+0x15c>)
 8002ae4:	f000 fe84 	bl	80037f0 <HAL_GPIO_Init>
}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40004400 	.word	0x40004400
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	20000824 	.word	0x20000824
 8002b00:	400260a0 	.word	0x400260a0
 8002b04:	40011400 	.word	0x40011400

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f8e8 	bl	8002d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8002b60:	2004      	movs	r0, #4
 8002b62:	f000 fffb 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f000 fff4 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <DMA1_Stream6_IRQHandler+0x10>)
 8002b7e:	f000 fbc1 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000824 	.word	0x20000824

08002b8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8002b90:	2040      	movs	r0, #64	; 0x40
 8002b92:	f000 ffe3 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8002b96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b9a:	f000 ffdf 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba8:	4803      	ldr	r0, [pc, #12]	; (8002bb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002baa:	f003 fbb7 	bl	800631c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002bb0:	f003 fbb4 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200003b8 	.word	0x200003b8
 8002bbc:	20000688 	.word	0x20000688

08002bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <TIM3_IRQHandler+0x10>)
 8002bc6:	f003 fba9 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000520 	.word	0x20000520

08002bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <USART2_IRQHandler+0x10>)
 8002bda:	f004 fea7 	bl	800792c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000073c 	.word	0x2000073c

08002be8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002bec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bf0:	f000 ffb4 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <TIM5_IRQHandler+0x10>)
 8002bfe:	f003 fb8d 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200005d4 	.word	0x200005d4

08002c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <SystemInit+0x20>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <SystemInit+0x20>)
 8002c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c36:	490e      	ldr	r1, [pc, #56]	; (8002c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c38:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c4c:	4c0b      	ldr	r4, [pc, #44]	; (8002c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c5a:	f7ff ffd7 	bl	8002c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f005 feab 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7fe fe3d 	bl	80018e0 <main>
  bx  lr    
 8002c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c70:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002c74:	08008a9c 	.word	0x08008a9c
  ldr r2, =_sbss
 8002c78:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002c7c:	20000f34 	.word	0x20000f34

08002c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_Init+0x40>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_Init+0x40>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_Init+0x40>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 f94f 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f808 	bl	8002cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7ff fca4 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x54>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x58>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f967 	bl	8002fba <HAL_SYSTICK_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00e      	b.n	8002d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d80a      	bhi.n	8002d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f000 f92f 	bl	8002f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <HAL_InitTick+0x5c>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200002b8 	.word	0x200002b8
 8002d20:	200002c0 	.word	0x200002c0
 8002d24:	200002bc 	.word	0x200002bc

08002d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x20>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x24>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_IncTick+0x24>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200002c0 	.word	0x200002c0
 8002d4c:	20000f30 	.word	0x20000f30

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_GetTick+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000f30 	.word	0x20000f30

08002d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff ffee 	bl	8002d50 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d005      	beq.n	8002d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_Delay+0x44>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8e:	bf00      	nop
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d8f7      	bhi.n	8002d90 <HAL_Delay+0x28>
  {
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200002c0 	.word	0x200002c0

08002db0 <__NVIC_SetPriorityGrouping>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4907      	ldr	r1, [pc, #28]	; (8002e4c <__NVIC_EnableIRQ+0x38>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e100 	.word	0xe000e100

08002e50 <__NVIC_SetPriority>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	; (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf28      	it	cs
 8002ec2:	2304      	movcs	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b03      	subs	r3, #3
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff8e 	bl	8002e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff29 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff ff3e 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff8e 	bl	8002ea4 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5d 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff31 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ffa2 	bl	8002f0c <SysTick_Config>
 8002fc8:	4603      	mov	r3, r0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff feb6 	bl	8002d50 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e099      	b.n	8003124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003010:	e00f      	b.n	8003032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7ff fe9d 	bl	8002d50 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d908      	bls.n	8003032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e078      	b.n	8003124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e8      	bne.n	8003012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4b38      	ldr	r3, [pc, #224]	; (800312c <HAL_DMA_Init+0x158>)
 800304c:	4013      	ands	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b04      	cmp	r3, #4
 800308a:	d107      	bne.n	800309c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4313      	orrs	r3, r2
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d117      	bne.n	80030f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb0d 	bl	80036f8 <DMA_CheckFifoParam>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030f2:	2301      	movs	r3, #1
 80030f4:	e016      	b.n	8003124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fac4 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003104:	4603      	mov	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	223f      	movs	r2, #63	; 0x3f
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	f010803f 	.word	0xf010803f

08003130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Start_IT+0x26>
 8003152:	2302      	movs	r3, #2
 8003154:	e040      	b.n	80031d8 <HAL_DMA_Start_IT+0xa8>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12f      	bne.n	80031ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa56 	bl	8003630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0216 	orr.w	r2, r2, #22
 800319e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e005      	b.n	80031d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ee:	f7ff fdaf 	bl	8002d50 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e052      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0216 	bic.w	r2, r2, #22
 8003220:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003230:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_DMA_Abort+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0208 	bic.w	r2, r2, #8
 8003250:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	e013      	b.n	800328c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003264:	f7ff fd74 	bl	8002d50 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b05      	cmp	r3, #5
 8003270:	d90c      	bls.n	800328c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e015      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e4      	bne.n	8003264 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	223f      	movs	r2, #63	; 0x3f
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00c      	b.n	80032f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2205      	movs	r2, #5
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_DMA_IRQHandler+0x248>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8e      	ldr	r2, [pc, #568]	; (8003550 <HAL_DMA_IRQHandler+0x24c>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2208      	movs	r2, #8
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2210      	movs	r2, #16
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d043      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2210      	movs	r2, #16
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d018      	beq.n	8003446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d024      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e01f      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e016      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2220      	movs	r2, #32
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 808f 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8087 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2220      	movs	r2, #32
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d136      	bne.n	800351c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_IRQHandler+0x1da>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
        }
        return;
 800351a:	e079      	b.n	8003610 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	2b00      	cmp	r3, #0
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e02c      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
 800354a:	bf00      	nop
 800354c:	200002b8 	.word	0x200002b8
 8003550:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2205      	movs	r2, #5
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d307      	bcc.n	80035ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x2cc>
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e000      	b.n	8003612 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003610:	bf00      	nop
    }
  }
}
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d108      	bne.n	8003670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800366e:	e007      	b.n	8003680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	08008a84 	.word	0x08008a84

080036f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
    }
  } 
  
  return status; 
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e159      	b.n	8003ac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 8148 	bne.w	8003aba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a2 	beq.w	8003aba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x202>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <HAL_GPIO_Init+0x2f4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x1fe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a47      	ldr	r2, [pc, #284]	; (8003ae8 <HAL_GPIO_Init+0x2f8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x1fa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <HAL_GPIO_Init+0x2fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x1f6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_GPIO_Init+0x300>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x1f2>
 80039de:	2304      	movs	r3, #4
 80039e0:	e008      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e004      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039f2:	2300      	movs	r3, #0
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f002 0203 	and.w	r2, r2, #3
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	4093      	lsls	r3, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a04:	4935      	ldr	r1, [pc, #212]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	f67f aea2 	bls.w	800380c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e001      	b.n	8003b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fcca 	bl	8002514 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e12b      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fd4e 	bl	8002654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f001 fbd2 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a81      	ldr	r2, [pc, #516]	; (8003e00 <HAL_I2C_Init+0x274>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d807      	bhi.n	8003c10 <HAL_I2C_Init+0x84>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a80      	ldr	r2, [pc, #512]	; (8003e04 <HAL_I2C_Init+0x278>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bf94      	ite	ls
 8003c08:	2301      	movls	r3, #1
 8003c0a:	2300      	movhi	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e006      	b.n	8003c1e <HAL_I2C_Init+0x92>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_I2C_Init+0x27c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0e7      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a78      	ldr	r2, [pc, #480]	; (8003e0c <HAL_I2C_Init+0x280>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0c9b      	lsrs	r3, r3, #18
 8003c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a6a      	ldr	r2, [pc, #424]	; (8003e00 <HAL_I2C_Init+0x274>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d802      	bhi.n	8003c60 <HAL_I2C_Init+0xd4>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	e009      	b.n	8003c74 <HAL_I2C_Init+0xe8>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a69      	ldr	r2, [pc, #420]	; (8003e10 <HAL_I2C_Init+0x284>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	3301      	adds	r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	495c      	ldr	r1, [pc, #368]	; (8003e00 <HAL_I2C_Init+0x274>)
 8003c90:	428b      	cmp	r3, r1
 8003c92:	d819      	bhi.n	8003cc8 <HAL_I2C_Init+0x13c>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e59      	subs	r1, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca2:	1c59      	adds	r1, r3, #1
 8003ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ca8:	400b      	ands	r3, r1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_I2C_Init+0x138>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e59      	subs	r1, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc2:	e051      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e04f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <HAL_I2C_Init+0x168>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e012      	b.n	8003d1a <HAL_I2C_Init+0x18e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e58      	subs	r0, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	0099      	lsls	r1, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Init+0x196>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e022      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10e      	bne.n	8003d48 <HAL_I2C_Init+0x1bc>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e58      	subs	r0, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	440b      	add	r3, r1
 8003d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d46:	e00f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6809      	ldr	r1, [r1, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6911      	ldr	r1, [r2, #16]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	000186a0 	.word	0x000186a0
 8003e04:	001e847f 	.word	0x001e847f
 8003e08:	003d08ff 	.word	0x003d08ff
 8003e0c:	431bde83 	.word	0x431bde83
 8003e10:	10624dd3 	.word	0x10624dd3

08003e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	460b      	mov	r3, r1
 8003e22:	817b      	strh	r3, [r7, #10]
 8003e24:	4613      	mov	r3, r2
 8003e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7fe ff92 	bl	8002d50 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	f040 80e0 	bne.w	8003ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2319      	movs	r3, #25
 8003e42:	2201      	movs	r2, #1
 8003e44:	4970      	ldr	r1, [pc, #448]	; (8004008 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fc58 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0d3      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x50>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0cc      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d007      	beq.n	8003e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2221      	movs	r2, #33	; 0x21
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	; (800400c <HAL_I2C_Master_Transmit+0x1f8>)
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fac2 	bl	800445c <I2C_MasterRequestWrite>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e08d      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ef8:	e066      	b.n	8003fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	6a39      	ldr	r1, [r7, #32]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fcd2 	bl	80048a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00d      	beq.n	8003f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d107      	bne.n	8003f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06b      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d11b      	bne.n	8003f9c <HAL_I2C_Master_Transmit+0x188>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d017      	beq.n	8003f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	6a39      	ldr	r1, [r7, #32]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fcc2 	bl	800492a <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e01a      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d194      	bne.n	8003efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	00100002 	.word	0x00100002
 800400c:	ffff0000 	.word	0xffff0000

08004010 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	461a      	mov	r2, r3
 800401c:	460b      	mov	r3, r1
 800401e:	817b      	strh	r3, [r7, #10]
 8004020:	4613      	mov	r3, r2
 8004022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7fe fe94 	bl	8002d50 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b20      	cmp	r3, #32
 8004034:	f040 820b 	bne.w	800444e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2319      	movs	r3, #25
 800403e:	2201      	movs	r2, #1
 8004040:	497c      	ldr	r1, [pc, #496]	; (8004234 <HAL_I2C_Master_Receive+0x224>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb5a 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	e1fe      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_I2C_Master_Receive+0x50>
 800405c:	2302      	movs	r3, #2
 800405e:	e1f7      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d007      	beq.n	8004086 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2222      	movs	r2, #34	; 0x22
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2210      	movs	r2, #16
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	893a      	ldrh	r2, [r7, #8]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a5c      	ldr	r2, [pc, #368]	; (8004238 <HAL_I2C_Master_Receive+0x228>)
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa46 	bl	8004560 <I2C_MasterRequestRead>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1b8      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d113      	bne.n	800410e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e18c      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11b      	bne.n	800414e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e16c      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	2b02      	cmp	r3, #2
 8004154:	d11b      	bne.n	800418e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	e14c      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041b4:	e138      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	f200 80f1 	bhi.w	80043a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d123      	bne.n	8004210 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fbed 	bl	80049ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e139      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800420e:	e10b      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b02      	cmp	r3, #2
 8004216:	d14e      	bne.n	80042b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2200      	movs	r2, #0
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <HAL_I2C_Master_Receive+0x22c>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa6a 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e10e      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
 8004232:	bf00      	nop
 8004234:	00100002 	.word	0x00100002
 8004238:	ffff0000 	.word	0xffff0000
 800423c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b4:	e0b8      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	2200      	movs	r2, #0
 80042be:	4966      	ldr	r1, [pc, #408]	; (8004458 <HAL_I2C_Master_Receive+0x448>)
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa1b 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0bf      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	2200      	movs	r2, #0
 800431a:	494f      	ldr	r1, [pc, #316]	; (8004458 <HAL_I2C_Master_Receive+0x448>)
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f9ed 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e091      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a0:	e042      	b.n	8004428 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fb00 	bl	80049ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e04c      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d118      	bne.n	8004428 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f aec2 	bne.w	80041b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	00010004 	.word	0x00010004

0800445c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	460b      	mov	r3, r1
 800446a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d006      	beq.n	8004486 <I2C_MasterRequestWrite+0x2a>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d003      	beq.n	8004486 <I2C_MasterRequestWrite+0x2a>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004484:	d108      	bne.n	8004498 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e00b      	b.n	80044b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b12      	cmp	r3, #18
 800449e:	d107      	bne.n	80044b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f91d 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00d      	beq.n	80044e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d6:	d103      	bne.n	80044e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e035      	b.n	8004550 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ec:	d108      	bne.n	8004500 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	e01b      	b.n	8004538 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004500:	897b      	ldrh	r3, [r7, #10]
 8004502:	11db      	asrs	r3, r3, #7
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0306 	and.w	r3, r3, #6
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f063 030f 	orn	r3, r3, #15
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	490e      	ldr	r1, [pc, #56]	; (8004558 <I2C_MasterRequestWrite+0xfc>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f943 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e010      	b.n	8004550 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4907      	ldr	r1, [pc, #28]	; (800455c <I2C_MasterRequestWrite+0x100>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f933 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	00010008 	.word	0x00010008
 800455c:	00010002 	.word	0x00010002

08004560 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	460b      	mov	r3, r1
 800456e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d006      	beq.n	800459a <I2C_MasterRequestRead+0x3a>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d003      	beq.n	800459a <I2C_MasterRequestRead+0x3a>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004598:	d108      	bne.n	80045ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e00b      	b.n	80045c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b11      	cmp	r3, #17
 80045b2:	d107      	bne.n	80045c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f893 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d103      	bne.n	80045f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e079      	b.n	80046ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004600:	d108      	bne.n	8004614 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]
 8004612:	e05f      	b.n	80046d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004614:	897b      	ldrh	r3, [r7, #10]
 8004616:	11db      	asrs	r3, r3, #7
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0306 	and.w	r3, r3, #6
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f063 030f 	orn	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4930      	ldr	r1, [pc, #192]	; (80046f4 <I2C_MasterRequestRead+0x194>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8b9 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e054      	b.n	80046ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4929      	ldr	r1, [pc, #164]	; (80046f8 <I2C_MasterRequestRead+0x198>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f8a9 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e044      	b.n	80046ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f831 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e017      	b.n	80046ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	11db      	asrs	r3, r3, #7
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0306 	and.w	r3, r3, #6
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f063 030e 	orn	r3, r3, #14
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <I2C_MasterRequestRead+0x198>)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f865 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	00010008 	.word	0x00010008
 80046f8:	00010002 	.word	0x00010002

080046fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470c:	e025      	b.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d021      	beq.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fe fb1b 	bl	8002d50 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d116      	bne.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e023      	b.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10d      	bne.n	8004780 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	43da      	mvns	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	e00c      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	429a      	cmp	r2, r3
 800479e:	d0b6      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b8:	e051      	b.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c8:	d123      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e046      	b.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d021      	beq.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fe fa99 	bl	8002d50 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d116      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e020      	b.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10c      	bne.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e00b      	b.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d18d      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b4:	e02d      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f8ce 	bl	8004a58 <I2C_IsAcknowledgeFailed>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02d      	b.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d021      	beq.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fe fa3f 	bl	8002d50 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e007      	b.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d1ca      	bne.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004936:	e02d      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f88d 	bl	8004a58 <I2C_IsAcknowledgeFailed>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e02d      	b.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d021      	beq.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fe f9fe 	bl	8002d50 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e007      	b.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d1ca      	bne.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049b8:	e042      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d119      	bne.n	80049fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0210 	mvn.w	r2, #16
 80049d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e029      	b.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fc:	f7fe f9a8 	bl	8002d50 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d1b5      	bne.n	80049ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6e:	d11b      	bne.n	8004aa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f043 0204 	orr.w	r2, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e267      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d075      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ad6:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00c      	beq.n	8004afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae2:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d112      	bne.n	8004b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aee:	4b82      	ldr	r3, [pc, #520]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d05b      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x108>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d157      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e242      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCC_OscConfig+0x74>
 8004b1e:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e01d      	b.n	8004b68 <HAL_RCC_OscConfig+0xb0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x98>
 8004b36:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6f      	ldr	r2, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a6c      	ldr	r2, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e00b      	b.n	8004b68 <HAL_RCC_OscConfig+0xb0>
 8004b50:	4b69      	ldr	r3, [pc, #420]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a68      	ldr	r2, [pc, #416]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a65      	ldr	r2, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d013      	beq.n	8004b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b70:	f7fe f8ee 	bl	8002d50 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b78:	f7fe f8ea 	bl	8002d50 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e207      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0xc0>
 8004b96:	e014      	b.n	8004bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fe f8da 	bl	8002d50 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fe f8d6 	bl	8002d50 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e1f3      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0xe8>
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d063      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bce:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d11c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d116      	bne.n	8004c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_RCC_OscConfig+0x152>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e1c7      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4937      	ldr	r1, [pc, #220]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	e03a      	b.n	8004c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c28:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HAL_RCC_OscConfig+0x244>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fe f88f 	bl	8002d50 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c36:	f7fe f88b 	bl	8002d50 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1a8      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4925      	ldr	r1, [pc, #148]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]
 8004c68:	e015      	b.n	8004c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_RCC_OscConfig+0x244>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fe f86e 	bl	8002d50 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c78:	f7fe f86a 	bl	8002d50 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e187      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d036      	beq.n	8004d10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <HAL_RCC_OscConfig+0x248>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fe f84e 	bl	8002d50 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7fe f84a 	bl	8002d50 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e167      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x200>
 8004cd6:	e01b      	b.n	8004d10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_RCC_OscConfig+0x248>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cde:	f7fe f837 	bl	8002d50 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce4:	e00e      	b.n	8004d04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce6:	f7fe f833 	bl	8002d50 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d907      	bls.n	8004d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e150      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470000 	.word	0x42470000
 8004d00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b88      	ldr	r3, [pc, #544]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ea      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8097 	beq.w	8004e4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b7a      	ldr	r3, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <HAL_RCC_OscConfig+0x474>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <HAL_RCC_OscConfig+0x474>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a73      	ldr	r2, [pc, #460]	; (8004f2c <HAL_RCC_OscConfig+0x474>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fd fff3 	bl	8002d50 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fd ffef 	bl	8002d50 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e10c      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_RCC_OscConfig+0x474>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x2ea>
 8004d94:	4b64      	ldr	r3, [pc, #400]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a63      	ldr	r2, [pc, #396]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	e01c      	b.n	8004ddc <HAL_RCC_OscConfig+0x324>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x30c>
 8004daa:	4b5f      	ldr	r3, [pc, #380]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a5e      	ldr	r2, [pc, #376]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004db0:	f043 0304 	orr.w	r3, r3, #4
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a5b      	ldr	r2, [pc, #364]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0x324>
 8004dc4:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a57      	ldr	r2, [pc, #348]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd0:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	4a54      	ldr	r2, [pc, #336]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f023 0304 	bic.w	r3, r3, #4
 8004dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fd ffb4 	bl	8002d50 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fd ffb0 	bl	8002d50 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e0cb      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0ee      	beq.n	8004dec <HAL_RCC_OscConfig+0x334>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e10:	f7fd ff9e 	bl	8002d50 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fd ff9a 	bl	8002d50 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0b5      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ee      	bne.n	8004e18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a1 	beq.w	8004f98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d05c      	beq.n	8004f1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d141      	bne.n	8004eee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCC_OscConfig+0x478>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd ff6e 	bl	8002d50 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fd ff6a 	bl	8002d50 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e087      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	019b      	lsls	r3, r3, #6
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	491b      	ldr	r1, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCC_OscConfig+0x478>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fd ff43 	bl	8002d50 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ece:	f7fd ff3f 	bl	8002d50 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e05c      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x416>
 8004eec:	e054      	b.n	8004f98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_RCC_OscConfig+0x478>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fd ff2c 	bl	8002d50 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd ff28 	bl	8002d50 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e045      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_RCC_OscConfig+0x470>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x444>
 8004f1a:	e03d      	b.n	8004f98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e038      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_RCC_OscConfig+0x4ec>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d028      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d121      	bne.n	8004f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d11a      	bne.n	8004f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d111      	bne.n	8004f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0cc      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b68      	ldr	r3, [pc, #416]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d90c      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b65      	ldr	r3, [pc, #404]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b63      	ldr	r3, [pc, #396]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0b8      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ffc:	4b59      	ldr	r3, [pc, #356]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a58      	ldr	r2, [pc, #352]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005014:	4b53      	ldr	r3, [pc, #332]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a52      	ldr	r2, [pc, #328]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005020:	4b50      	ldr	r3, [pc, #320]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	494d      	ldr	r1, [pc, #308]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d044      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d119      	bne.n	8005086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e07f      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d003      	beq.n	8005066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005062:	2b03      	cmp	r3, #3
 8005064:	d107      	bne.n	8005076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e06f      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005076:	4b3b      	ldr	r3, [pc, #236]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e067      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4934      	ldr	r1, [pc, #208]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005098:	f7fd fe5a 	bl	8002d50 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a0:	f7fd fe56 	bl	8002d50 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e04f      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b6:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 020c 	and.w	r2, r3, #12
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d1eb      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c8:	4b25      	ldr	r3, [pc, #148]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d20c      	bcs.n	80050f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b22      	ldr	r3, [pc, #136]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e032      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4916      	ldr	r1, [pc, #88]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	490e      	ldr	r1, [pc, #56]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800512e:	f000 f821 	bl	8005174 <HAL_RCC_GetSysClockFreq>
 8005132:	4602      	mov	r2, r0
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	490a      	ldr	r1, [pc, #40]	; (8005168 <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	5ccb      	ldrb	r3, [r1, r3]
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 8005148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fd fdba 	bl	8002cc8 <HAL_InitTick>

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023c00 	.word	0x40023c00
 8005164:	40023800 	.word	0x40023800
 8005168:	08008a6c 	.word	0x08008a6c
 800516c:	200002b8 	.word	0x200002b8
 8005170:	200002bc 	.word	0x200002bc

08005174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b094      	sub	sp, #80	; 0x50
 800517a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	647b      	str	r3, [r7, #68]	; 0x44
 8005180:	2300      	movs	r3, #0
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005184:	2300      	movs	r3, #0
 8005186:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 030c 	and.w	r3, r3, #12
 8005194:	2b08      	cmp	r3, #8
 8005196:	d00d      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005198:	2b08      	cmp	r3, #8
 800519a:	f200 80e1 	bhi.w	8005360 <HAL_RCC_GetSysClockFreq+0x1ec>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x34>
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d003      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0x3a>
 80051a6:	e0db      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b73      	ldr	r3, [pc, #460]	; (8005378 <HAL_RCC_GetSysClockFreq+0x204>)
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051ac:	e0db      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ae:	4b73      	ldr	r3, [pc, #460]	; (800537c <HAL_RCC_GetSysClockFreq+0x208>)
 80051b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b2:	e0d8      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b4:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051be:	4b6d      	ldr	r3, [pc, #436]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d063      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ca:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	099b      	lsrs	r3, r3, #6
 80051d0:	2200      	movs	r2, #0
 80051d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30
 80051de:	2300      	movs	r3, #0
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
 80051e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051e6:	4622      	mov	r2, r4
 80051e8:	462b      	mov	r3, r5
 80051ea:	f04f 0000 	mov.w	r0, #0
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	0159      	lsls	r1, r3, #5
 80051f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f8:	0150      	lsls	r0, r2, #5
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4621      	mov	r1, r4
 8005200:	1a51      	subs	r1, r2, r1
 8005202:	6139      	str	r1, [r7, #16]
 8005204:	4629      	mov	r1, r5
 8005206:	eb63 0301 	sbc.w	r3, r3, r1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005218:	4659      	mov	r1, fp
 800521a:	018b      	lsls	r3, r1, #6
 800521c:	4651      	mov	r1, sl
 800521e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005222:	4651      	mov	r1, sl
 8005224:	018a      	lsls	r2, r1, #6
 8005226:	4651      	mov	r1, sl
 8005228:	ebb2 0801 	subs.w	r8, r2, r1
 800522c:	4659      	mov	r1, fp
 800522e:	eb63 0901 	sbc.w	r9, r3, r1
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800523e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005246:	4690      	mov	r8, r2
 8005248:	4699      	mov	r9, r3
 800524a:	4623      	mov	r3, r4
 800524c:	eb18 0303 	adds.w	r3, r8, r3
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	462b      	mov	r3, r5
 8005254:	eb49 0303 	adc.w	r3, r9, r3
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005266:	4629      	mov	r1, r5
 8005268:	024b      	lsls	r3, r1, #9
 800526a:	4621      	mov	r1, r4
 800526c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005270:	4621      	mov	r1, r4
 8005272:	024a      	lsls	r2, r1, #9
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	2200      	movs	r2, #0
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005284:	f7fb fbc6 	bl	8000a14 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	e058      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	2200      	movs	r2, #0
 800529a:	4618      	mov	r0, r3
 800529c:	4611      	mov	r1, r2
 800529e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	2300      	movs	r3, #0
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	f04f 0000 	mov.w	r0, #0
 80052b4:	f04f 0100 	mov.w	r1, #0
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052be:	0150      	lsls	r0, r2, #5
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4641      	mov	r1, r8
 80052c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ca:	4649      	mov	r1, r9
 80052cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052e4:	ebb2 040a 	subs.w	r4, r2, sl
 80052e8:	eb63 050b 	sbc.w	r5, r3, fp
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	00eb      	lsls	r3, r5, #3
 80052f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fa:	00e2      	lsls	r2, r4, #3
 80052fc:	4614      	mov	r4, r2
 80052fe:	461d      	mov	r5, r3
 8005300:	4643      	mov	r3, r8
 8005302:	18e3      	adds	r3, r4, r3
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	464b      	mov	r3, r9
 8005308:	eb45 0303 	adc.w	r3, r5, r3
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800531a:	4629      	mov	r1, r5
 800531c:	028b      	lsls	r3, r1, #10
 800531e:	4621      	mov	r1, r4
 8005320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005324:	4621      	mov	r1, r4
 8005326:	028a      	lsls	r2, r1, #10
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532e:	2200      	movs	r2, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005338:	f7fb fb6c 	bl	8000a14 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4613      	mov	r3, r2
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_GetSysClockFreq+0x200>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	3301      	adds	r3, #1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800535e:	e002      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCC_GetSysClockFreq+0x204>)
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005368:	4618      	mov	r0, r3
 800536a:	3750      	adds	r7, #80	; 0x50
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	00f42400 	.word	0x00f42400
 800537c:	007a1200 	.word	0x007a1200

08005380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <HAL_RCC_GetHCLKFreq+0x14>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200002b8 	.word	0x200002b8

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800539c:	f7ff fff0 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0a9b      	lsrs	r3, r3, #10
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4903      	ldr	r1, [pc, #12]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40023800 	.word	0x40023800
 80053bc:	08008a7c 	.word	0x08008a7c

080053c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053c4:	f7ff ffdc 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0b5b      	lsrs	r3, r3, #13
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40023800 	.word	0x40023800
 80053e4:	08008a7c 	.word	0x08008a7c

080053e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07b      	b.n	80054f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540a:	d009      	beq.n	8005420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	61da      	str	r2, [r3, #28]
 8005412:	e005      	b.n	8005420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fd f964 	bl	8002708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	ea42 0103 	orr.w	r1, r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0104 	and.w	r1, r3, #4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0210 	and.w	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b08c      	sub	sp, #48	; 0x30
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005508:	2301      	movs	r3, #1
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x26>
 800551c:	2302      	movs	r3, #2
 800551e:	e18a      	b.n	8005836 <HAL_SPI_TransmitReceive+0x33c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005528:	f7fd fc12 	bl	8002d50 <HAL_GetTick>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800553e:	887b      	ldrh	r3, [r7, #2]
 8005540:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005546:	2b01      	cmp	r3, #1
 8005548:	d00f      	beq.n	800556a <HAL_SPI_TransmitReceive+0x70>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005550:	d107      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x68>
 800555a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800555e:	2b04      	cmp	r3, #4
 8005560:	d003      	beq.n	800556a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005562:	2302      	movs	r3, #2
 8005564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005568:	e15b      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_SPI_TransmitReceive+0x82>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_TransmitReceive+0x82>
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005582:	e14e      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b04      	cmp	r3, #4
 800558e:	d003      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2205      	movs	r2, #5
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	887a      	ldrh	r2, [r7, #2]
 80055ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d007      	beq.n	80055ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d178      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_TransmitReceive+0x10a>
 80055fe:	8b7b      	ldrh	r3, [r7, #26]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d166      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	881a      	ldrh	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	1c9a      	adds	r2, r3, #2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005628:	e053      	b.n	80056d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11b      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x176>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x176>
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d113      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d119      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x1b8>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d014      	beq.n	80056b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	b292      	uxth	r2, r2
 8005694:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ae:	2301      	movs	r3, #1
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056b2:	f7fd fb4d 	bl	8002d50 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056be:	429a      	cmp	r2, r3
 80056c0:	d807      	bhi.n	80056d2 <HAL_SPI_TransmitReceive+0x1d8>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d003      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056d0:	e0a7      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1a6      	bne.n	800562a <HAL_SPI_TransmitReceive+0x130>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1a1      	bne.n	800562a <HAL_SPI_TransmitReceive+0x130>
 80056e6:	e07c      	b.n	80057e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x1fc>
 80056f0:	8b7b      	ldrh	r3, [r7, #26]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d16b      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571c:	e057      	b.n	80057ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11c      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x26c>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d017      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x26c>
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d114      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d119      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x2ae>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a4:	2301      	movs	r3, #1
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057a8:	f7fd fad2 	bl	8002d50 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d803      	bhi.n	80057c0 <HAL_SPI_TransmitReceive+0x2c6>
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x2cc>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057cc:	e029      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1a2      	bne.n	800571e <HAL_SPI_TransmitReceive+0x224>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d19d      	bne.n	800571e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f8b2 	bl	8005950 <SPI_EndRxTxTransaction>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057fe:	e010      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	e000      	b.n	8005822 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005820:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005836:	4618      	mov	r0, r3
 8005838:	3730      	adds	r7, #48	; 0x30
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005850:	f7fd fa7e 	bl	8002d50 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	4413      	add	r3, r2
 800585e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005860:	f7fd fa76 	bl	8002d50 <HAL_GetTick>
 8005864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	015b      	lsls	r3, r3, #5
 800586c:	0d1b      	lsrs	r3, r3, #20
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005876:	e054      	b.n	8005922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d050      	beq.n	8005922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005880:	f7fd fa66 	bl	8002d50 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	429a      	cmp	r2, r3
 800588e:	d902      	bls.n	8005896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d13d      	bne.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ae:	d111      	bne.n	80058d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b8:	d004      	beq.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c2:	d107      	bne.n	80058d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058dc:	d10f      	bne.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e017      	b.n	8005942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	3b01      	subs	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d19b      	bne.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200002b8 	.word	0x200002b8

08005950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <SPI_EndRxTxTransaction+0x7c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <SPI_EndRxTxTransaction+0x80>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0d5b      	lsrs	r3, r3, #21
 8005968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596c:	fb02 f303 	mul.w	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d112      	bne.n	80059a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff5a 	bl	8005840 <SPI_WaitFlagStateUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e00f      	b.n	80059c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d0f2      	beq.n	80059a2 <SPI_EndRxTxTransaction+0x52>
 80059bc:	e000      	b.n	80059c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80059be:	bf00      	nop
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200002b8 	.word	0x200002b8
 80059d0:	165e9f81 	.word	0x165e9f81

080059d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e04c      	b.n	8005a80 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fc0c 	bl	8007218 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_TIM_Base_Init+0xb4>)
 8005a0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f001 f929 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	08002799 	.word	0x08002799

08005a8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e03c      	b.n	8005b1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_TIM_Base_Start+0xa0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x5c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d013      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x5c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	; (8005b30 <HAL_TIM_Base_Start+0xa4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x5c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <HAL_TIM_Base_Start+0xa8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x5c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <HAL_TIM_Base_Start+0xac>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x5c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_TIM_Base_Start+0xb0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d111      	bne.n	8005b0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b06      	cmp	r3, #6
 8005af8:	d010      	beq.n	8005b1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e007      	b.n	8005b1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40014000 	.word	0x40014000

08005b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e044      	b.n	8005be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x6c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d013      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x6c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x6c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x6c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x6c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d010      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e007      	b.n	8005be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40014000 	.word	0x40014000

08005c04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e04c      	b.n	8005cb0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d111      	bne.n	8005c46 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 faf4 	bl	8007218 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <HAL_TIM_OC_Init+0xb4>)
 8005c3c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f001 f811 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	08005cbd 	.word	0x08005cbd

08005cbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e04c      	b.n	8005d7c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d111      	bne.n	8005d12 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fa8e 	bl	8007218 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <HAL_TIM_PWM_Init+0xb4>)
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 ffab 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08005d89 	.word	0x08005d89

08005d88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <HAL_TIM_PWM_Start+0x24>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	e022      	b.n	8005e06 <HAL_TIM_PWM_Start+0x6a>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d109      	bne.n	8005dda <HAL_TIM_PWM_Start+0x3e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	e015      	b.n	8005e06 <HAL_TIM_PWM_Start+0x6a>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x58>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e008      	b.n	8005e06 <HAL_TIM_PWM_Start+0x6a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e068      	b.n	8005ee0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x82>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1c:	e013      	b.n	8005e46 <HAL_TIM_PWM_Start+0xaa>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0x92>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	e00b      	b.n	8005e46 <HAL_TIM_PWM_Start+0xaa>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0xa2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	e003      	b.n	8005e46 <HAL_TIM_PWM_Start+0xaa>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 f9bc 	bl	80071cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a23      	ldr	r2, [pc, #140]	; (8005ee8 <HAL_TIM_PWM_Start+0x14c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <HAL_TIM_PWM_Start+0x14c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d018      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x10e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d013      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x10e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a19      	ldr	r2, [pc, #100]	; (8005eec <HAL_TIM_PWM_Start+0x150>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x10e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_TIM_PWM_Start+0x154>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x10e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_TIM_PWM_Start+0x158>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x10e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <HAL_TIM_PWM_Start+0x15c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d111      	bne.n	8005ece <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b06      	cmp	r3, #6
 8005eba:	d010      	beq.n	8005ede <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	e007      	b.n	8005ede <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40014000 	.word	0x40014000

08005efc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e04c      	b.n	8005faa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d111      	bne.n	8005f40 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 f977 	bl	8007218 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_TIM_OnePulse_Init+0xb8>)
 8005f36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fe94 	bl	8006c80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0208 	bic.w	r2, r2, #8
 8005f66:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	08005fb9 	.word	0x08005fb9

08005fb8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fe4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ff4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d108      	bne.n	800600e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006002:	7b7b      	ldrb	r3, [r7, #13]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006008:	7b3b      	ldrb	r3, [r7, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e03b      	b.n	800608a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0202 	orr.w	r2, r2, #2
 8006040:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0204 	orr.w	r2, r2, #4
 8006050:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f001 f8b6 	bl	80071cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	2104      	movs	r1, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f001 f8af 	bl	80071cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d107      	bne.n	8006088 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000

08006098 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0a2      	b.n	80061f2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d111      	bne.n	80060dc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f8a9 	bl	8007218 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_TIM_Encoder_Init+0x164>)
 80060d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f000 fdbc 	bl	8006c80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	f023 0303 	bic.w	r3, r3, #3
 8006134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	4313      	orrs	r3, r2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800614e:	f023 030c 	bic.w	r3, r3, #12
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	4313      	orrs	r3, r2
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	011a      	lsls	r2, r3, #4
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	4313      	orrs	r3, r2
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800618c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006194:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4313      	orrs	r3, r2
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	0800289d 	.word	0x0800289d

08006200 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006210:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006218:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006220:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006228:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d110      	bne.n	8006252 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006236:	7b7b      	ldrb	r3, [r7, #13]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d001      	beq.n	8006240 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e069      	b.n	8006314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006250:	e031      	b.n	80062b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d110      	bne.n	800627a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d102      	bne.n	8006264 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800625e:	7b3b      	ldrb	r3, [r7, #12]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e055      	b.n	8006314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006278:	e01d      	b.n	80062b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d108      	bne.n	8006292 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d105      	bne.n	8006292 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d102      	bne.n	8006292 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800628c:	7b3b      	ldrb	r3, [r7, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d001      	beq.n	8006296 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e03e      	b.n	8006314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_TIM_Encoder_Start+0xc4>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d008      	beq.n	80062d4 <HAL_TIM_Encoder_Start+0xd4>
 80062c2:	e00f      	b.n	80062e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ff7d 	bl	80071cc <TIM_CCxChannelCmd>
      break;
 80062d2:	e016      	b.n	8006302 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2201      	movs	r2, #1
 80062da:	2104      	movs	r1, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 ff75 	bl	80071cc <TIM_CCxChannelCmd>
      break;
 80062e2:	e00e      	b.n	8006302 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 ff6d 	bl	80071cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2201      	movs	r2, #1
 80062f8:	2104      	movs	r1, #4
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ff66 	bl	80071cc <TIM_CCxChannelCmd>
      break;
 8006300:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d128      	bne.n	8006384 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d121      	bne.n	8006384 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0202 	mvn.w	r2, #2
 8006348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
 8006368:	e009      	b.n	800637e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d128      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d121      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0204 	mvn.w	r2, #4
 80063a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	e009      	b.n	80063de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d128      	bne.n	8006444 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d121      	bne.n	8006444 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
 8006428:	e009      	b.n	800643e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d128      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b10      	cmp	r3, #16
 800645e:	d121      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0210 	mvn.w	r2, #16
 8006468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2208      	movs	r2, #8
 800646e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
 8006488:	e009      	b.n	800649e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d110      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d109      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0201 	mvn.w	r2, #1
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d110      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d109      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d110      	bne.n	8006534 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d109      	bne.n	8006534 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d110      	bne.n	8006564 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d109      	bne.n	8006564 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0220 	mvn.w	r2, #32
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006586:	2302      	movs	r3, #2
 8006588:	e048      	b.n	800661c <HAL_TIM_OC_ConfigChannel+0xb0>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d839      	bhi.n	800660c <HAL_TIM_OC_ConfigChannel+0xa0>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	080065e3 	.word	0x080065e3
 80065b4:	0800660d 	.word	0x0800660d
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	0800660d 	.word	0x0800660d
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	0800660d 	.word	0x0800660d
 80065cc:	0800660d 	.word	0x0800660d
 80065d0:	080065ff 	.word	0x080065ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fbd0 	bl	8006d80 <TIM_OC1_SetConfig>
      break;
 80065e0:	e017      	b.n	8006612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc2f 	bl	8006e4c <TIM_OC2_SetConfig>
      break;
 80065ee:	e010      	b.n	8006612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fc94 	bl	8006f24 <TIM_OC3_SetConfig>
      break;
 80065fc:	e009      	b.n	8006612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fcf7 	bl	8006ff8 <TIM_OC4_SetConfig>
      break;
 800660a:	e002      	b.n	8006612 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
      break;
 8006610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800663e:	2302      	movs	r3, #2
 8006640:	e0ae      	b.n	80067a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	f200 809f 	bhi.w	8006790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800668d 	.word	0x0800668d
 800665c:	08006791 	.word	0x08006791
 8006660:	08006791 	.word	0x08006791
 8006664:	08006791 	.word	0x08006791
 8006668:	080066cd 	.word	0x080066cd
 800666c:	08006791 	.word	0x08006791
 8006670:	08006791 	.word	0x08006791
 8006674:	08006791 	.word	0x08006791
 8006678:	0800670f 	.word	0x0800670f
 800667c:	08006791 	.word	0x08006791
 8006680:	08006791 	.word	0x08006791
 8006684:	08006791 	.word	0x08006791
 8006688:	0800674f 	.word	0x0800674f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb74 	bl	8006d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0208 	orr.w	r2, r2, #8
 80066a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0204 	bic.w	r2, r2, #4
 80066b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6999      	ldr	r1, [r3, #24]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	619a      	str	r2, [r3, #24]
      break;
 80066ca:	e064      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fbba 	bl	8006e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6999      	ldr	r1, [r3, #24]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	021a      	lsls	r2, r3, #8
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	619a      	str	r2, [r3, #24]
      break;
 800670c:	e043      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fc05 	bl	8006f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0208 	orr.w	r2, r2, #8
 8006728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0204 	bic.w	r2, r2, #4
 8006738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	61da      	str	r2, [r3, #28]
      break;
 800674c:	e023      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fc4f 	bl	8006ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69d9      	ldr	r1, [r3, #28]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	021a      	lsls	r2, r3, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	61da      	str	r2, [r3, #28]
      break;
 800678e:	e002      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
      break;
 8006794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_TIM_ConfigClockSource+0x1c>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0b4      	b.n	800692e <HAL_TIM_ConfigClockSource+0x186>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d03e      	beq.n	800687c <HAL_TIM_ConfigClockSource+0xd4>
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006802:	f200 8087 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	f000 8086 	beq.w	800691a <HAL_TIM_ConfigClockSource+0x172>
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d87f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d01a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xa6>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d87b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b60      	cmp	r3, #96	; 0x60
 800681e:	d050      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d877      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d03c      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d873      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d058      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d86f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d064      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d86b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d060      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d867      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05c      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d05a      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 800684c:	e062      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f000 fc95 	bl	800718c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	609a      	str	r2, [r3, #8]
      break;
 800687a:	e04f      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f000 fc7e 	bl	800718c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689e:	609a      	str	r2, [r3, #8]
      break;
 80068a0:	e03c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 fbf2 	bl	8007098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2150      	movs	r1, #80	; 0x50
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fc4b 	bl	8007156 <TIM_ITRx_SetConfig>
      break;
 80068c0:	e02c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f000 fc11 	bl	80070f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2160      	movs	r1, #96	; 0x60
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fc3b 	bl	8007156 <TIM_ITRx_SetConfig>
      break;
 80068e0:	e01c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6859      	ldr	r1, [r3, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f000 fbd2 	bl	8007098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2140      	movs	r1, #64	; 0x40
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fc2b 	bl	8007156 <TIM_ITRx_SetConfig>
      break;
 8006900:	e00c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 fc22 	bl	8007156 <TIM_ITRx_SetConfig>
      break;
 8006912:	e003      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e000      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800691a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	460b      	mov	r3, r1
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e135      	b.n	8006c74 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_RegisterCallback+0x2a>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e12e      	b.n	8006c74 <HAL_TIM_RegisterCallback+0x288>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f040 80ba 	bne.w	8006ba0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	2b1a      	cmp	r3, #26
 8006a30:	f200 80b3 	bhi.w	8006b9a <HAL_TIM_RegisterCallback+0x1ae>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_TIM_RegisterCallback+0x50>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006aa9 	.word	0x08006aa9
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab9 	.word	0x08006ab9
 8006a48:	08006ac1 	.word	0x08006ac1
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ad1 	.word	0x08006ad1
 8006a54:	08006ad9 	.word	0x08006ad9
 8006a58:	08006ae1 	.word	0x08006ae1
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006af1 	.word	0x08006af1
 8006a64:	08006af9 	.word	0x08006af9
 8006a68:	08006b01 	.word	0x08006b01
 8006a6c:	08006b09 	.word	0x08006b09
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b19 	.word	0x08006b19
 8006a78:	08006b23 	.word	0x08006b23
 8006a7c:	08006b2d 	.word	0x08006b2d
 8006a80:	08006b37 	.word	0x08006b37
 8006a84:	08006b41 	.word	0x08006b41
 8006a88:	08006b4b 	.word	0x08006b4b
 8006a8c:	08006b55 	.word	0x08006b55
 8006a90:	08006b5f 	.word	0x08006b5f
 8006a94:	08006b69 	.word	0x08006b69
 8006a98:	08006b73 	.word	0x08006b73
 8006a9c:	08006b7d 	.word	0x08006b7d
 8006aa0:	08006b87 	.word	0x08006b87
 8006aa4:	08006b91 	.word	0x08006b91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006aae:	e0dc      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006ab6:	e0d8      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006abe:	e0d4      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006ac6:	e0d0      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006ace:	e0cc      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006ad6:	e0c8      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006ade:	e0c4      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006ae6:	e0c0      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006aee:	e0bc      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006af6:	e0b8      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006afe:	e0b4      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006b06:	e0b0      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006b0e:	e0ac      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006b16:	e0a8      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006b20:	e0a3      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006b2a:	e09e      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006b34:	e099      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006b3e:	e094      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006b48:	e08f      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006b52:	e08a      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006b5c:	e085      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006b66:	e080      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006b70:	e07b      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006b7a:	e076      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006b84:	e071      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006b8e:	e06c      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006b98:	e067      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	75fb      	strb	r3, [r7, #23]
        break;
 8006b9e:	e064      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d15c      	bne.n	8006c66 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	2b0d      	cmp	r3, #13
 8006bb0:	d856      	bhi.n	8006c60 <HAL_TIM_RegisterCallback+0x274>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <HAL_TIM_RegisterCallback+0x1cc>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bf1 	.word	0x08006bf1
 8006bbc:	08006bf9 	.word	0x08006bf9
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006c09 	.word	0x08006c09
 8006bc8:	08006c11 	.word	0x08006c11
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006c21 	.word	0x08006c21
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c39 	.word	0x08006c39
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c49 	.word	0x08006c49
 8006be8:	08006c51 	.word	0x08006c51
 8006bec:	08006c59 	.word	0x08006c59
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006bf6:	e038      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006bfe:	e034      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006c06:	e030      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006c0e:	e02c      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006c16:	e028      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006c1e:	e024      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006c26:	e020      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006c2e:	e01c      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006c36:	e018      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c3e:	e014      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c46:	e010      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006c4e:	e00c      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006c56:	e008      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006c5e:	e004      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
        break;
 8006c64:	e001      	b.n	8006c6a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a34      	ldr	r2, [pc, #208]	; (8006d64 <TIM_Base_SetConfig+0xe4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a31      	ldr	r2, [pc, #196]	; (8006d68 <TIM_Base_SetConfig+0xe8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a30      	ldr	r2, [pc, #192]	; (8006d6c <TIM_Base_SetConfig+0xec>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <TIM_Base_SetConfig+0xf0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a25      	ldr	r2, [pc, #148]	; (8006d64 <TIM_Base_SetConfig+0xe4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01b      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d017      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a22      	ldr	r2, [pc, #136]	; (8006d68 <TIM_Base_SetConfig+0xe8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a21      	ldr	r2, [pc, #132]	; (8006d6c <TIM_Base_SetConfig+0xec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <TIM_Base_SetConfig+0xf0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <TIM_Base_SetConfig+0xf4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <TIM_Base_SetConfig+0xf8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <TIM_Base_SetConfig+0xfc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a08      	ldr	r2, [pc, #32]	; (8006d64 <TIM_Base_SetConfig+0xe4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d103      	bne.n	8006d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	615a      	str	r2, [r3, #20]
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800

08006d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0303 	bic.w	r3, r3, #3
 8006db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 0302 	bic.w	r3, r3, #2
 8006dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC1_SetConfig+0xc8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10c      	bne.n	8006df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0308 	bic.w	r3, r3, #8
 8006de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <TIM_OC1_SetConfig+0xc8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d111      	bne.n	8006e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40010000 	.word	0x40010000

08006e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0210 	bic.w	r2, r3, #16
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 0320 	bic.w	r3, r3, #32
 8006e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <TIM_OC2_SetConfig+0xd4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d10d      	bne.n	8006ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC2_SetConfig+0xd4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d113      	bne.n	8006ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40010000 	.word	0x40010000

08006f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <TIM_OC3_SetConfig+0xd0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d10d      	bne.n	8006f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <TIM_OC3_SetConfig+0xd0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d113      	bne.n	8006fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40010000 	.word	0x40010000

08006ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	031b      	lsls	r3, r3, #12
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a10      	ldr	r2, [pc, #64]	; (8007094 <TIM_OC4_SetConfig+0x9c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d109      	bne.n	800706c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	019b      	lsls	r3, r3, #6
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000

08007098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0201 	bic.w	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 030a 	bic.w	r3, r3, #10
 80070d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b087      	sub	sp, #28
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0210 	bic.w	r2, r3, #16
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	031b      	lsls	r3, r3, #12
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	f043 0307 	orr.w	r3, r3, #7
 8007178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	609a      	str	r2, [r3, #8]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	021a      	lsls	r2, r3, #8
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2201      	movs	r2, #1
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	43db      	mvns	r3, r3
 80071ee:	401a      	ands	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1a      	ldr	r2, [r3, #32]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	fa01 f303 	lsl.w	r3, r1, r3
 8007204:	431a      	orrs	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <TIM_ResetCallback+0x7c>)
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <TIM_ResetCallback+0x80>)
 800722c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1a      	ldr	r2, [pc, #104]	; (800729c <TIM_ResetCallback+0x84>)
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <TIM_ResetCallback+0x88>)
 800723c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_ResetCallback+0x8c>)
 8007244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_ResetCallback+0x90>)
 800724c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_ResetCallback+0x94>)
 8007254:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <TIM_ResetCallback+0x98>)
 800725c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <TIM_ResetCallback+0x9c>)
 8007264:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <TIM_ResetCallback+0xa0>)
 800726c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a12      	ldr	r2, [pc, #72]	; (80072bc <TIM_ResetCallback+0xa4>)
 8007274:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a11      	ldr	r2, [pc, #68]	; (80072c0 <TIM_ResetCallback+0xa8>)
 800727c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <TIM_ResetCallback+0xac>)
 8007284:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	080025c5 	.word	0x080025c5
 8007298:	08006937 	.word	0x08006937
 800729c:	080069af 	.word	0x080069af
 80072a0:	080069c3 	.word	0x080069c3
 80072a4:	0800695f 	.word	0x0800695f
 80072a8:	08006973 	.word	0x08006973
 80072ac:	0800694b 	.word	0x0800694b
 80072b0:	08006987 	.word	0x08006987
 80072b4:	0800699b 	.word	0x0800699b
 80072b8:	080069d7 	.word	0x080069d7
 80072bc:	08007449 	.word	0x08007449
 80072c0:	0800745d 	.word	0x0800745d
 80072c4:	08007471 	.word	0x08007471

080072c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072dc:	2302      	movs	r3, #2
 80072de:	e050      	b.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d018      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d013      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a18      	ldr	r2, [pc, #96]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00e      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d009      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a15      	ldr	r2, [pc, #84]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d004      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d10c      	bne.n	8007370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4313      	orrs	r3, r2
 8007366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40010000 	.word	0x40010000
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40014000 	.word	0x40014000

080073a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073bc:	2302      	movs	r3, #2
 80073be:	e03d      	b.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e04a      	b.n	800752c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d111      	bne.n	80074c6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fd2c 	bl	8007f08 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <HAL_UART_Init+0xb0>)
 80074bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2224      	movs	r2, #36	; 0x24
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fff6 	bl	80084d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007502:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007512:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	0800299d 	.word	0x0800299d

08007538 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	460b      	mov	r3, r1
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e08c      	b.n	800767a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_UART_RegisterCallback+0x36>
 800756a:	2302      	movs	r3, #2
 800756c:	e085      	b.n	800767a <HAL_UART_RegisterCallback+0x142>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b20      	cmp	r3, #32
 8007580:	d151      	bne.n	8007626 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	d845      	bhi.n	8007614 <HAL_UART_RegisterCallback+0xdc>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <HAL_UART_RegisterCallback+0x58>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075d5 	.word	0x080075d5
 800759c:	080075dd 	.word	0x080075dd
 80075a0:	080075e5 	.word	0x080075e5
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075f5 	.word	0x080075f5
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	08007615 	.word	0x08007615
 80075b4:	08007615 	.word	0x08007615
 80075b8:	08007615 	.word	0x08007615
 80075bc:	08007605 	.word	0x08007605
 80075c0:	0800760d 	.word	0x0800760d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80075ca:	e051      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80075d2:	e04d      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80075da:	e049      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80075e2:	e045      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80075ea:	e041      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80075f2:	e03d      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80075fa:	e039      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007602:	e035      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800760a:	e031      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007612:	e02d      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
        break;
 8007624:	e024      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d116      	bne.n	8007660 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	2b0b      	cmp	r3, #11
 8007636:	d002      	beq.n	800763e <HAL_UART_RegisterCallback+0x106>
 8007638:	2b0c      	cmp	r3, #12
 800763a:	d004      	beq.n	8007646 <HAL_UART_RegisterCallback+0x10e>
 800763c:	e007      	b.n	800764e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007644:	e014      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800764c:	e010      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]
        break;
 800765e:	e007      	b.n	8007670 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d11d      	bne.n	80076de <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_UART_Receive_IT+0x26>
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e016      	b.n	80076e0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Receive_IT+0x38>
 80076bc:	2302      	movs	r3, #2
 80076be:	e00f      	b.n	80076e0 <HAL_UART_Receive_IT+0x58>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	461a      	mov	r2, r3
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fcf7 	bl	80080c8 <UART_Start_Receive_IT>
 80076da:	4603      	mov	r3, r0
 80076dc:	e000      	b.n	80076e0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076de:	2302      	movs	r3, #2
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08c      	sub	sp, #48	; 0x30
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d165      	bne.n	80077ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_UART_Transmit_DMA+0x26>
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e05e      	b.n	80077d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_UART_Transmit_DMA+0x38>
 800771c:	2302      	movs	r3, #2
 800771e:	e057      	b.n	80077d0 <HAL_UART_Transmit_DMA+0xe8>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2221      	movs	r2, #33	; 0x21
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <HAL_UART_Transmit_DMA+0xf0>)
 800774e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_UART_Transmit_DMA+0xf4>)
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <HAL_UART_Transmit_DMA+0xf8>)
 800775e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007764:	2200      	movs	r2, #0
 8007766:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	6819      	ldr	r1, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	461a      	mov	r2, r3
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	f7fb fcd6 	bl	8003130 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800778c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3314      	adds	r3, #20
 800779c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	617b      	str	r3, [r7, #20]
   return(result);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b6:	627a      	str	r2, [r7, #36]	; 0x24
 80077b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6a39      	ldr	r1, [r7, #32]
 80077bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e000      	b.n	80077d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3730      	adds	r7, #48	; 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	08007f79 	.word	0x08007f79
 80077dc:	08008015 	.word	0x08008015
 80077e0:	08008033 	.word	0x08008033

080077e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b09a      	sub	sp, #104	; 0x68
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007802:	667b      	str	r3, [r7, #100]	; 0x64
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800780c:	657a      	str	r2, [r7, #84]	; 0x54
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800781a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3314      	adds	r3, #20
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	663b      	str	r3, [r7, #96]	; 0x60
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007840:	643a      	str	r2, [r7, #64]	; 0x40
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e5      	bne.n	8007820 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	2b01      	cmp	r3, #1
 800785a:	d119      	bne.n	8007890 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	61fb      	str	r3, [r7, #28]
   return(result);
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f023 0310 	bic.w	r3, r3, #16
 8007872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800787c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e5      	bne.n	800785c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d136      	bne.n	800790c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3314      	adds	r3, #20
 80078bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078be:	61ba      	str	r2, [r7, #24]
 80078c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6979      	ldr	r1, [r7, #20]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	613b      	str	r3, [r7, #16]
   return(result);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	2200      	movs	r2, #0
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fb fc7a 	bl	80031e0 <HAL_DMA_Abort>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fb fe8e 	bl	8003618 <HAL_DMA_GetError>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b20      	cmp	r3, #32
 8007900:	d104      	bne.n	800790c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2210      	movs	r2, #16
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e00a      	b.n	8007922 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3768      	adds	r7, #104	; 0x68
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b0ba      	sub	sp, #232	; 0xe8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800796a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_UART_IRQHandler+0x66>
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fce3 	bl	8008356 <UART_Receive_IT>
      return;
 8007990:	e25b      	b.n	8007e4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80e1 	beq.w	8007b5e <HAL_UART_IRQHandler+0x232>
 800799c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80d4 	beq.w	8007b5e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <HAL_UART_IRQHandler+0xae>
 80079c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_UART_IRQHandler+0xd2>
 80079e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xf6>
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d011      	beq.n	8007a52 <HAL_UART_IRQHandler+0x126>
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 81f2 	beq.w	8007e40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_UART_IRQHandler+0x14e>
 8007a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc6e 	bl	8008356 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x17a>
 8007a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d051      	beq.n	8007b4a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb74 	bl	8008194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d142      	bne.n	8007b40 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3314      	adds	r3, #20
 8007ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1d9      	bne.n	8007aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d013      	beq.n	8007b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	4a7f      	ldr	r2, [pc, #508]	; (8007d10 <HAL_UART_IRQHandler+0x3e4>)
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fb fbd0 	bl	80032c0 <HAL_DMA_Abort_IT>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d019      	beq.n	8007b5a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	e011      	b.n	8007b5a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3e:	e00c      	b.n	8007b5a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	e007      	b.n	8007b5a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b58:	e172      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5a:	bf00      	nop
    return;
 8007b5c:	e170      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	f040 814c 	bne.w	8007e00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8145 	beq.w	8007e00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 813e 	beq.w	8007e00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b84:	2300      	movs	r3, #0
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	f040 80b5 	bne.w	8007d14 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8142 	beq.w	8007e44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	f080 813b 	bcs.w	8007e44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be0:	f000 8088 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	330c      	adds	r3, #12
 8007bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	330c      	adds	r3, #12
 8007c0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c10:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1d9      	bne.n	8007be4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3314      	adds	r3, #20
 8007c36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c42:	f023 0301 	bic.w	r3, r3, #1
 8007c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e1      	bne.n	8007c30 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3314      	adds	r3, #20
 8007c72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e3      	bne.n	8007c6c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc4:	f023 0310 	bic.w	r3, r3, #16
 8007cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cd8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e3      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fb fa76 	bl	80031e0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007d00:	b292      	uxth	r2, r2
 8007d02:	1a8a      	subs	r2, r1, r2
 8007d04:	b292      	uxth	r2, r2
 8007d06:	4611      	mov	r1, r2
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d0c:	e09a      	b.n	8007e44 <HAL_UART_IRQHandler+0x518>
 8007d0e:	bf00      	nop
 8007d10:	0800825b 	.word	0x0800825b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 808c 	beq.w	8007e48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8087 	beq.w	8007e48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e3      	bne.n	8007d3a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3314      	adds	r3, #20
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	623b      	str	r3, [r7, #32]
   return(result);
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3314      	adds	r3, #20
 8007d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d96:	633a      	str	r2, [r7, #48]	; 0x30
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e3      	bne.n	8007d72 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0310 	bic.w	r3, r3, #16
 8007dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ddc:	61fa      	str	r2, [r7, #28]
 8007dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	69b9      	ldr	r1, [r7, #24]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e3      	bne.n	8007db8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007df8:	4611      	mov	r1, r2
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dfe:	e023      	b.n	8007e48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <HAL_UART_IRQHandler+0x4f4>
 8007e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa33 	bl	8008284 <UART_Transmit_IT>
    return;
 8007e1e:	e014      	b.n	8007e4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00e      	beq.n	8007e4a <HAL_UART_IRQHandler+0x51e>
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa73 	bl	8008324 <UART_EndTransmit_IT>
    return;
 8007e3e:	e004      	b.n	8007e4a <HAL_UART_IRQHandler+0x51e>
    return;
 8007e40:	bf00      	nop
 8007e42:	e002      	b.n	8007e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	37e8      	adds	r7, #232	; 0xe8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <UART_InitCallbacksToDefault+0x4c>)
 8007f14:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <UART_InitCallbacksToDefault+0x50>)
 8007f1a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a0f      	ldr	r2, [pc, #60]	; (8007f5c <UART_InitCallbacksToDefault+0x54>)
 8007f20:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <UART_InitCallbacksToDefault+0x58>)
 8007f26:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a0e      	ldr	r2, [pc, #56]	; (8007f64 <UART_InitCallbacksToDefault+0x5c>)
 8007f2c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a0d      	ldr	r2, [pc, #52]	; (8007f68 <UART_InitCallbacksToDefault+0x60>)
 8007f32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a0d      	ldr	r2, [pc, #52]	; (8007f6c <UART_InitCallbacksToDefault+0x64>)
 8007f38:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <UART_InitCallbacksToDefault+0x68>)
 8007f3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <UART_InitCallbacksToDefault+0x6c>)
 8007f44:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	08007e65 	.word	0x08007e65
 8007f58:	08007e51 	.word	0x08007e51
 8007f5c:	08007e8d 	.word	0x08007e8d
 8007f60:	08007e79 	.word	0x08007e79
 8007f64:	08007ea1 	.word	0x08007ea1
 8007f68:	08007eb5 	.word	0x08007eb5
 8007f6c:	08007ec9 	.word	0x08007ec9
 8007f70:	08007edd 	.word	0x08007edd
 8007f74:	08007ef1 	.word	0x08007ef1

08007f78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b090      	sub	sp, #64	; 0x40
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d137      	bne.n	8008004 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	2200      	movs	r2, #0
 8007f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	633a      	str	r2, [r7, #48]	; 0x30
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fee:	61fa      	str	r2, [r7, #28]
 8007ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	69b9      	ldr	r1, [r7, #24]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008002:	e003      	b.n	800800c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008008:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800800a:	4798      	blx	r3
}
 800800c:	bf00      	nop
 800800e:	3740      	adds	r7, #64	; 0x40
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804e:	2b80      	cmp	r3, #128	; 0x80
 8008050:	bf0c      	ite	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	2300      	movne	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b21      	cmp	r3, #33	; 0x21
 8008064:	d108      	bne.n	8008078 <UART_DMAError+0x46>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2200      	movs	r2, #0
 8008070:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008072:	68b8      	ldr	r0, [r7, #8]
 8008074:	f000 f866 	bl	8008144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	d108      	bne.n	80080ac <UART_DMAError+0x7a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2200      	movs	r2, #0
 80080a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f000 f874 	bl	8008194 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	f043 0210 	orr.w	r2, r3, #16
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2222      	movs	r2, #34	; 0x22
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008114:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0220 	orr.w	r2, r2, #32
 8008134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	; 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	330c      	adds	r3, #12
 8008152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	60bb      	str	r3, [r7, #8]
   return(result);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	61ba      	str	r2, [r7, #24]
 800816e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6979      	ldr	r1, [r7, #20]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	613b      	str	r3, [r7, #16]
   return(result);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008188:	bf00      	nop
 800818a:	3724      	adds	r7, #36	; 0x24
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b095      	sub	sp, #84	; 0x54
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081bc:	643a      	str	r2, [r7, #64]	; 0x40
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e5      	bne.n	800819c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3314      	adds	r3, #20
 80081d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3314      	adds	r3, #20
 80081ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e5      	bne.n	80081d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	2b01      	cmp	r3, #1
 800820a:	d119      	bne.n	8008240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	60bb      	str	r3, [r7, #8]
   return(result);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f023 0310 	bic.w	r3, r3, #16
 8008222:	647b      	str	r3, [r7, #68]	; 0x44
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822c:	61ba      	str	r2, [r7, #24]
 800822e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6979      	ldr	r1, [r7, #20]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	613b      	str	r3, [r7, #16]
   return(result);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e5      	bne.n	800820c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800824e:	bf00      	nop
 8008250:	3754      	adds	r7, #84	; 0x54
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b21      	cmp	r3, #33	; 0x21
 8008296:	d13e      	bne.n	8008316 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a0:	d114      	bne.n	80082cc <UART_Transmit_IT+0x48>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d110      	bne.n	80082cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	1c9a      	adds	r2, r3, #2
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	621a      	str	r2, [r3, #32]
 80082ca:	e008      	b.n	80082de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	1c59      	adds	r1, r3, #1
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6211      	str	r1, [r2, #32]
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10f      	bne.n	8008312 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008300:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008310:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	e000      	b.n	8008318 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008316:	2302      	movs	r3, #2
  }
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800833a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b08c      	sub	sp, #48	; 0x30
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b22      	cmp	r3, #34	; 0x22
 8008368:	f040 80ad 	bne.w	80084c6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008374:	d117      	bne.n	80083a6 <UART_Receive_IT+0x50>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d113      	bne.n	80083a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	b29a      	uxth	r2, r3
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28
 80083a4:	e026      	b.n	80083f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b8:	d007      	beq.n	80083ca <UART_Receive_IT+0x74>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <UART_Receive_IT+0x82>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e008      	b.n	80083ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008404:	2b00      	cmp	r3, #0
 8008406:	d15c      	bne.n	80084c2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0220 	bic.w	r2, r2, #32
 8008416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	2b01      	cmp	r3, #1
 8008446:	d136      	bne.n	80084b6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	613b      	str	r3, [r7, #16]
   return(result);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f023 0310 	bic.w	r3, r3, #16
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846e:	623a      	str	r2, [r7, #32]
 8008470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	6a3a      	ldr	r2, [r7, #32]
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	61bb      	str	r3, [r7, #24]
   return(result);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e5      	bne.n	800844e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b10      	cmp	r3, #16
 800848e:	d10a      	bne.n	80084a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084ae:	4611      	mov	r1, r2
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	e003      	b.n	80084be <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e002      	b.n	80084c8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e000      	b.n	80084c8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80084c6:	2302      	movs	r3, #2
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3730      	adds	r7, #48	; 0x30
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d4:	b0c0      	sub	sp, #256	; 0x100
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	68d9      	ldr	r1, [r3, #12]
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	ea40 0301 	orr.w	r3, r0, r1
 80084f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	431a      	orrs	r2, r3
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	431a      	orrs	r2, r3
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008528:	f021 010c 	bic.w	r1, r1, #12
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008536:	430b      	orrs	r3, r1
 8008538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854a:	6999      	ldr	r1, [r3, #24]
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	ea40 0301 	orr.w	r3, r0, r1
 8008556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b8f      	ldr	r3, [pc, #572]	; (800879c <UART_SetConfig+0x2cc>)
 8008560:	429a      	cmp	r2, r3
 8008562:	d005      	beq.n	8008570 <UART_SetConfig+0xa0>
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b8d      	ldr	r3, [pc, #564]	; (80087a0 <UART_SetConfig+0x2d0>)
 800856c:	429a      	cmp	r2, r3
 800856e:	d104      	bne.n	800857a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008570:	f7fc ff26 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8008574:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008578:	e003      	b.n	8008582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800857a:	f7fc ff0d 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 800857e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858c:	f040 810c 	bne.w	80087a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	2200      	movs	r2, #0
 8008596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800859a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800859e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	1891      	adds	r1, r2, r2
 80085a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80085aa:	415b      	adcs	r3, r3
 80085ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085b2:	4621      	mov	r1, r4
 80085b4:	eb12 0801 	adds.w	r8, r2, r1
 80085b8:	4629      	mov	r1, r5
 80085ba:	eb43 0901 	adc.w	r9, r3, r1
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085d2:	4690      	mov	r8, r2
 80085d4:	4699      	mov	r9, r3
 80085d6:	4623      	mov	r3, r4
 80085d8:	eb18 0303 	adds.w	r3, r8, r3
 80085dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085e0:	462b      	mov	r3, r5
 80085e2:	eb49 0303 	adc.w	r3, r9, r3
 80085e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085fe:	460b      	mov	r3, r1
 8008600:	18db      	adds	r3, r3, r3
 8008602:	653b      	str	r3, [r7, #80]	; 0x50
 8008604:	4613      	mov	r3, r2
 8008606:	eb42 0303 	adc.w	r3, r2, r3
 800860a:	657b      	str	r3, [r7, #84]	; 0x54
 800860c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008614:	f7f8 f9fe 	bl	8000a14 <__aeabi_uldivmod>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4b61      	ldr	r3, [pc, #388]	; (80087a4 <UART_SetConfig+0x2d4>)
 800861e:	fba3 2302 	umull	r2, r3, r3, r2
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	011c      	lsls	r4, r3, #4
 8008626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862a:	2200      	movs	r2, #0
 800862c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008630:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	1891      	adds	r1, r2, r2
 800863e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008640:	415b      	adcs	r3, r3
 8008642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008648:	4641      	mov	r1, r8
 800864a:	eb12 0a01 	adds.w	sl, r2, r1
 800864e:	4649      	mov	r1, r9
 8008650:	eb43 0b01 	adc.w	fp, r3, r1
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008668:	4692      	mov	sl, r2
 800866a:	469b      	mov	fp, r3
 800866c:	4643      	mov	r3, r8
 800866e:	eb1a 0303 	adds.w	r3, sl, r3
 8008672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008676:	464b      	mov	r3, r9
 8008678:	eb4b 0303 	adc.w	r3, fp, r3
 800867c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800868c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008694:	460b      	mov	r3, r1
 8008696:	18db      	adds	r3, r3, r3
 8008698:	643b      	str	r3, [r7, #64]	; 0x40
 800869a:	4613      	mov	r3, r2
 800869c:	eb42 0303 	adc.w	r3, r2, r3
 80086a0:	647b      	str	r3, [r7, #68]	; 0x44
 80086a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086aa:	f7f8 f9b3 	bl	8000a14 <__aeabi_uldivmod>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	4b3b      	ldr	r3, [pc, #236]	; (80087a4 <UART_SetConfig+0x2d4>)
 80086b6:	fba3 2301 	umull	r2, r3, r3, r1
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	2264      	movs	r2, #100	; 0x64
 80086be:	fb02 f303 	mul.w	r3, r2, r3
 80086c2:	1acb      	subs	r3, r1, r3
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086ca:	4b36      	ldr	r3, [pc, #216]	; (80087a4 <UART_SetConfig+0x2d4>)
 80086cc:	fba3 2302 	umull	r2, r3, r3, r2
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086d8:	441c      	add	r4, r3
 80086da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	1891      	adds	r1, r2, r2
 80086f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80086f4:	415b      	adcs	r3, r3
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086fc:	4641      	mov	r1, r8
 80086fe:	1851      	adds	r1, r2, r1
 8008700:	6339      	str	r1, [r7, #48]	; 0x30
 8008702:	4649      	mov	r1, r9
 8008704:	414b      	adcs	r3, r1
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008714:	4659      	mov	r1, fp
 8008716:	00cb      	lsls	r3, r1, #3
 8008718:	4651      	mov	r1, sl
 800871a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800871e:	4651      	mov	r1, sl
 8008720:	00ca      	lsls	r2, r1, #3
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
 8008726:	4603      	mov	r3, r0
 8008728:	4642      	mov	r2, r8
 800872a:	189b      	adds	r3, r3, r2
 800872c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008730:	464b      	mov	r3, r9
 8008732:	460a      	mov	r2, r1
 8008734:	eb42 0303 	adc.w	r3, r2, r3
 8008738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008748:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800874c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008750:	460b      	mov	r3, r1
 8008752:	18db      	adds	r3, r3, r3
 8008754:	62bb      	str	r3, [r7, #40]	; 0x28
 8008756:	4613      	mov	r3, r2
 8008758:	eb42 0303 	adc.w	r3, r2, r3
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008766:	f7f8 f955 	bl	8000a14 <__aeabi_uldivmod>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <UART_SetConfig+0x2d4>)
 8008770:	fba3 1302 	umull	r1, r3, r3, r2
 8008774:	095b      	lsrs	r3, r3, #5
 8008776:	2164      	movs	r1, #100	; 0x64
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	3332      	adds	r3, #50	; 0x32
 8008782:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <UART_SetConfig+0x2d4>)
 8008784:	fba2 2303 	umull	r2, r3, r2, r3
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	f003 0207 	and.w	r2, r3, #7
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4422      	add	r2, r4
 8008796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008798:	e105      	b.n	80089a6 <UART_SetConfig+0x4d6>
 800879a:	bf00      	nop
 800879c:	40011000 	.word	0x40011000
 80087a0:	40011400 	.word	0x40011400
 80087a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ac:	2200      	movs	r2, #0
 80087ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087ba:	4642      	mov	r2, r8
 80087bc:	464b      	mov	r3, r9
 80087be:	1891      	adds	r1, r2, r2
 80087c0:	6239      	str	r1, [r7, #32]
 80087c2:	415b      	adcs	r3, r3
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
 80087c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087ca:	4641      	mov	r1, r8
 80087cc:	1854      	adds	r4, r2, r1
 80087ce:	4649      	mov	r1, r9
 80087d0:	eb43 0501 	adc.w	r5, r3, r1
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	f04f 0300 	mov.w	r3, #0
 80087dc:	00eb      	lsls	r3, r5, #3
 80087de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087e2:	00e2      	lsls	r2, r4, #3
 80087e4:	4614      	mov	r4, r2
 80087e6:	461d      	mov	r5, r3
 80087e8:	4643      	mov	r3, r8
 80087ea:	18e3      	adds	r3, r4, r3
 80087ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087f0:	464b      	mov	r3, r9
 80087f2:	eb45 0303 	adc.w	r3, r5, r3
 80087f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800880a:	f04f 0200 	mov.w	r2, #0
 800880e:	f04f 0300 	mov.w	r3, #0
 8008812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008816:	4629      	mov	r1, r5
 8008818:	008b      	lsls	r3, r1, #2
 800881a:	4621      	mov	r1, r4
 800881c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008820:	4621      	mov	r1, r4
 8008822:	008a      	lsls	r2, r1, #2
 8008824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008828:	f7f8 f8f4 	bl	8000a14 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4b60      	ldr	r3, [pc, #384]	; (80089b4 <UART_SetConfig+0x4e4>)
 8008832:	fba3 2302 	umull	r2, r3, r3, r2
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	011c      	lsls	r4, r3, #4
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	2200      	movs	r2, #0
 8008840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008844:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	1891      	adds	r1, r2, r2
 8008852:	61b9      	str	r1, [r7, #24]
 8008854:	415b      	adcs	r3, r3
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800885c:	4641      	mov	r1, r8
 800885e:	1851      	adds	r1, r2, r1
 8008860:	6139      	str	r1, [r7, #16]
 8008862:	4649      	mov	r1, r9
 8008864:	414b      	adcs	r3, r1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008874:	4659      	mov	r1, fp
 8008876:	00cb      	lsls	r3, r1, #3
 8008878:	4651      	mov	r1, sl
 800887a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887e:	4651      	mov	r1, sl
 8008880:	00ca      	lsls	r2, r1, #3
 8008882:	4610      	mov	r0, r2
 8008884:	4619      	mov	r1, r3
 8008886:	4603      	mov	r3, r0
 8008888:	4642      	mov	r2, r8
 800888a:	189b      	adds	r3, r3, r2
 800888c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008890:	464b      	mov	r3, r9
 8008892:	460a      	mov	r2, r1
 8008894:	eb42 0303 	adc.w	r3, r2, r3
 8008898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088b4:	4649      	mov	r1, r9
 80088b6:	008b      	lsls	r3, r1, #2
 80088b8:	4641      	mov	r1, r8
 80088ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088be:	4641      	mov	r1, r8
 80088c0:	008a      	lsls	r2, r1, #2
 80088c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088c6:	f7f8 f8a5 	bl	8000a14 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <UART_SetConfig+0x4e4>)
 80088d0:	fba3 1302 	umull	r1, r3, r3, r2
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	2164      	movs	r1, #100	; 0x64
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	3332      	adds	r3, #50	; 0x32
 80088e2:	4a34      	ldr	r2, [pc, #208]	; (80089b4 <UART_SetConfig+0x4e4>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ee:	441c      	add	r4, r3
 80088f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f4:	2200      	movs	r2, #0
 80088f6:	673b      	str	r3, [r7, #112]	; 0x70
 80088f8:	677a      	str	r2, [r7, #116]	; 0x74
 80088fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088fe:	4642      	mov	r2, r8
 8008900:	464b      	mov	r3, r9
 8008902:	1891      	adds	r1, r2, r2
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	415b      	adcs	r3, r3
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890e:	4641      	mov	r1, r8
 8008910:	1851      	adds	r1, r2, r1
 8008912:	6039      	str	r1, [r7, #0]
 8008914:	4649      	mov	r1, r9
 8008916:	414b      	adcs	r3, r1
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008926:	4659      	mov	r1, fp
 8008928:	00cb      	lsls	r3, r1, #3
 800892a:	4651      	mov	r1, sl
 800892c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008930:	4651      	mov	r1, sl
 8008932:	00ca      	lsls	r2, r1, #3
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	4603      	mov	r3, r0
 800893a:	4642      	mov	r2, r8
 800893c:	189b      	adds	r3, r3, r2
 800893e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008940:	464b      	mov	r3, r9
 8008942:	460a      	mov	r2, r1
 8008944:	eb42 0303 	adc.w	r3, r2, r3
 8008948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800894a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	663b      	str	r3, [r7, #96]	; 0x60
 8008954:	667a      	str	r2, [r7, #100]	; 0x64
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	f04f 0300 	mov.w	r3, #0
 800895e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008962:	4649      	mov	r1, r9
 8008964:	008b      	lsls	r3, r1, #2
 8008966:	4641      	mov	r1, r8
 8008968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800896c:	4641      	mov	r1, r8
 800896e:	008a      	lsls	r2, r1, #2
 8008970:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008974:	f7f8 f84e 	bl	8000a14 <__aeabi_uldivmod>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <UART_SetConfig+0x4e4>)
 800897e:	fba3 1302 	umull	r1, r3, r3, r2
 8008982:	095b      	lsrs	r3, r3, #5
 8008984:	2164      	movs	r1, #100	; 0x64
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	011b      	lsls	r3, r3, #4
 800898e:	3332      	adds	r3, #50	; 0x32
 8008990:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <UART_SetConfig+0x4e4>)
 8008992:	fba2 2303 	umull	r2, r3, r2, r3
 8008996:	095b      	lsrs	r3, r3, #5
 8008998:	f003 020f 	and.w	r2, r3, #15
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4422      	add	r2, r4
 80089a4:	609a      	str	r2, [r3, #8]
}
 80089a6:	bf00      	nop
 80089a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089ac:	46bd      	mov	sp, r7
 80089ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089b2:	bf00      	nop
 80089b4:	51eb851f 	.word	0x51eb851f

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4d0d      	ldr	r5, [pc, #52]	; (80089f0 <__libc_init_array+0x38>)
 80089bc:	4c0d      	ldr	r4, [pc, #52]	; (80089f4 <__libc_init_array+0x3c>)
 80089be:	1b64      	subs	r4, r4, r5
 80089c0:	10a4      	asrs	r4, r4, #2
 80089c2:	2600      	movs	r6, #0
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	4d0b      	ldr	r5, [pc, #44]	; (80089f8 <__libc_init_array+0x40>)
 80089ca:	4c0c      	ldr	r4, [pc, #48]	; (80089fc <__libc_init_array+0x44>)
 80089cc:	f000 f82e 	bl	8008a2c <_init>
 80089d0:	1b64      	subs	r4, r4, r5
 80089d2:	10a4      	asrs	r4, r4, #2
 80089d4:	2600      	movs	r6, #0
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e0:	4798      	blx	r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ea:	4798      	blx	r3
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	08008a94 	.word	0x08008a94
 80089f4:	08008a94 	.word	0x08008a94
 80089f8:	08008a94 	.word	0x08008a94
 80089fc:	08008a98 	.word	0x08008a98

08008a00 <memcpy>:
 8008a00:	440a      	add	r2, r1
 8008a02:	4291      	cmp	r1, r2
 8008a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a08:	d100      	bne.n	8008a0c <memcpy+0xc>
 8008a0a:	4770      	bx	lr
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a16:	4291      	cmp	r1, r2
 8008a18:	d1f9      	bne.n	8008a0e <memcpy+0xe>
 8008a1a:	bd10      	pop	{r4, pc}

08008a1c <memset>:
 8008a1c:	4402      	add	r2, r0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d100      	bne.n	8008a26 <memset+0xa>
 8008a24:	4770      	bx	lr
 8008a26:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2a:	e7f9      	b.n	8008a20 <memset+0x4>

08008a2c <_init>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr

08008a38 <_fini>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr
