
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be8  08009be8  0002033c  2**0
                  CONTENTS
  4 .ARM          00000008  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf0  08009bf0  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf0  08009bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08009bf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d14  20000340  08009f34  00020340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001054  08009f34  00021054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ec  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d56  00000000  00000000  00037d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001896b  00000000  00000000  0003cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ad  00000000  00000000  0005586b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949ed  00000000  00000000  0006dc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f0  00000000  00000000  00102658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000340 	.word	0x20000340
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009bb0 	.word	0x08009bb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000344 	.word	0x20000344
 80001d4:	08009bb0 	.word	0x08009bb0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <read_pos>:

extern enum State_Machine {
	INIT, INIT_HOMING, CALIBRATE, TRAJECT_GEN, PID_STATE, EMERGENCY_LIMIT, IDLE
} State ;

void read_pos() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <read_pos+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <read_pos+0x40>)
 8000e62:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <read_pos+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb07 	bl	800047c <__aeabi_i2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <read_pos+0x44>)
 8000e74:	f7ff fb6c 	bl	8000550 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe16 	bl	8000ab0 <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <read_pos+0x48>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200004e4 	.word	0x200004e4
 8000e94:	20000fa8 	.word	0x20000fa8
 8000e98:	3f8e0000 	.word	0x3f8e0000
 8000e9c:	20000fac 	.word	0x20000fac

08000ea0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d10a      	bne.n	8000ec8 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <motor+0x4c>)
 8000eba:	f003 fe13 	bl	8004ae4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <motor+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 8000ec6:	e00c      	b.n	8000ee2 <motor+0x42>
	} else if (DIR == 1) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <motor+0x4c>)
 8000ed6:	f003 fe05 	bl	8004ae4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <motor+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	20000430 	.word	0x20000430

08000ef4 <Init_Homing>:

void Init_Homing() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <Init_Homing+0xe0>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <Init_Homing+0x12>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d01a      	beq.n	8000f3a <Init_Homing+0x46>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f04:	e064      	b.n	8000fd0 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	4833      	ldr	r0, [pc, #204]	; (8000fd8 <Init_Homing+0xe4>)
 8000f0a:	f003 fdd3 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10b      	bne.n	8000f2c <Init_Homing+0x38>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <Init_Homing+0xe8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ffbe 	bl	8000ea0 <motor>
			state_homing = 1;
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <Init_Homing+0xe0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	801a      	strh	r2, [r3, #0]
		break;
 8000f2a:	e051      	b.n	8000fd0 <Init_Homing+0xdc>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f34:	f7ff ffb4 	bl	8000ea0 <motor>
		break;
 8000f38:	e04a      	b.n	8000fd0 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <Init_Homing+0xec>)
 8000f3e:	f003 fdb9 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d13d      	bne.n	8000fc4 <Init_Homing+0xd0>
			motor(0, 1);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ffa8 	bl	8000ea0 <motor>
			HAL_Delay(200);
 8000f50:	20c8      	movs	r0, #200	; 0xc8
 8000f52:	f002 fee7 	bl	8003d24 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 23893);
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <Init_Homing+0xe8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f645 5255 	movw	r2, #23893	; 0x5d55
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <Init_Homing+0xe8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <Init_Homing+0xf0>)
 8000f6a:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <Init_Homing+0xf0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa83 	bl	800047c <__aeabi_i2d>
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <Init_Homing+0xf4>)
 8000f7c:	f7ff fae8 	bl	8000550 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fd92 	bl	8000ab0 <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <Init_Homing+0xf8>)
 8000f90:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <Init_Homing+0xf8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <Init_Homing+0xfc>)
 8000f98:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <Init_Homing+0x100>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <Init_Homing+0x104>)
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <Init_Homing+0x108>)
 8000fa8:	6013      	str	r3, [r2, #0]
			State_PID = 2;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <Init_Homing+0x10c>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <Init_Homing+0xe0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f000 fb82 	bl	80016c0 <EndEffector_Event>
			State = IDLE;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <Init_Homing+0x110>)
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	701a      	strb	r2, [r3, #0]
		break;
 8000fc2:	e004      	b.n	8000fce <Init_Homing+0xda>
			motor(Max_Counter_PWM * 0.18, 1);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	f642 6014 	movw	r0, #11796	; 0x2e14
 8000fca:	f7ff ff69 	bl	8000ea0 <motor>
		break;
 8000fce:	bf00      	nop
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000035c 	.word	0x2000035c
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	200004e4 	.word	0x200004e4
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	20000fa8 	.word	0x20000fa8
 8000fe8:	3f8e0000 	.word	0x3f8e0000
 8000fec:	20000fac 	.word	0x20000fac
 8000ff0:	200008fc 	.word	0x200008fc
 8000ff4:	20000fb0 	.word	0x20000fb0
 8000ff8:	20000274 	.word	0x20000274
 8000ffc:	20000900 	.word	0x20000900
 8001000:	20000270 	.word	0x20000270
 8001004:	20000fb4 	.word	0x20000fb4

08001008 <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000360 	.word	0x20000360

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000360 	.word	0x20000360

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f007 fad9 	bl	8008644 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000360 	.word	0x20000360

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 fc6a 	bl	80079a8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fc62 	bl	80079a8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 fa00 	bl	80084f4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f007 fa97 	bl	8008644 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f005 fce5 	bl	8006afc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 ff24 	bl	8006f88 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000360 	.word	0x20000360
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9dd 	bl	80015c0 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f007 f9e2 	bl	8008644 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f008 fb2e 	bl	80099c8 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f910 	bl	8001590 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fa06 	bl	80087a0 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000360 	.word	0x20000360

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f008 fac2 	bl	80099c8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000360 	.word	0x20000360

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000360 	.word	0x20000360

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <ModbusErrorReply+0x40>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	7e5a      	ldrb	r2, [r3, #25]
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <ModbusErrorReply+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <ModbusErrorReply+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <ModbusErrorReply+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000360 	.word	0x20000360

08001590 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Modbus_frame_response+0x2c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d004      	beq.n	80015a8 <Modbus_frame_response+0x18>
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d105      	bne.n	80015ae <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80015a2:	f7ff ff17 	bl	80013d4 <modbusWrite1Register>
		break;
 80015a6:	e006      	b.n	80015b6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80015a8:	f7ff ff56 	bl	8001458 <modbusRead1Register>
		break;
 80015ac:	e003      	b.n	80015b6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ffcc 	bl	800154c <ModbusErrorReply>
		break;
 80015b4:	bf00      	nop

	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000360 	.word	0x20000360

080015c0 <Modbus_Emission>:

void Modbus_Emission()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <Modbus_Emission+0xfc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d15e      	bne.n	8001694 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <Modbus_Emission+0xfc>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <Modbus_Emission+0xfc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <Modbus_Emission+0xfc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015ec:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <Modbus_Emission+0xfc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Modbus_Emission+0xfc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015fe:	461a      	mov	r2, r3
 8001600:	f008 f9e2 	bl	80099c8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <Modbus_Emission+0xfc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3203      	adds	r2, #3
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <Modbus_Emission+0xfc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <Modbus_Emission+0xfc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800162a:	3b02      	subs	r3, #2
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fd92 	bl	8001158 <CRC16>
 8001634:	4603      	mov	r3, r0
 8001636:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <Modbus_Emission+0xfc>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <Modbus_Emission+0xfc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001644:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001646:	7939      	ldrb	r1, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <Modbus_Emission+0xfc>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <Modbus_Emission+0xfc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800165c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800165e:	7979      	ldrb	r1, [r7, #5]
 8001660:	4413      	add	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <Modbus_Emission+0xfc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b20      	cmp	r3, #32
 8001676:	d10d      	bne.n	8001694 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <Modbus_Emission+0xfc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <Modbus_Emission+0xfc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <Modbus_Emission+0xfc>)
 8001688:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800168a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800168e:	461a      	mov	r2, r3
 8001690:	f007 f808 	bl	80086a4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <Modbus_Emission+0xfc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <Modbus_Emission+0xfc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <Modbus_Emission+0xfc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <Modbus_Emission+0xfc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000360 	.word	0x20000360

080016c0 <EndEffector_Event>:
	Pick,
	Place,
	Read,
} EndEffector_State;

void EndEffector_Event(char EndEffector_State) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <EndEffector_Event+0x150>)
 80016cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	f040 8094 	bne.w	8001800 <EndEffector_Event+0x140>
		switch (EndEffector_State) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b0a      	cmp	r3, #10
 80016dc:	f200 8093 	bhi.w	8001806 <EndEffector_Event+0x146>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <EndEffector_Event+0x28>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001805 	.word	0x08001805
 80016ec:	08001715 	.word	0x08001715
 80016f0:	0800172d 	.word	0x0800172d
 80016f4:	08001745 	.word	0x08001745
 80016f8:	0800175d 	.word	0x0800175d
 80016fc:	08001775 	.word	0x08001775
 8001700:	0800178d 	.word	0x0800178d
 8001704:	080017a5 	.word	0x080017a5
 8001708:	080017bd 	.word	0x080017bd
 800170c:	080017d5 	.word	0x080017d5
 8001710:	080017ed 	.word	0x080017ed
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2302      	movs	r3, #2
 800171c:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <EndEffector_Event+0x154>)
 800171e:	212a      	movs	r1, #42	; 0x2a
 8001720:	483b      	ldr	r0, [pc, #236]	; (8001810 <EndEffector_Event+0x150>)
 8001722:	f003 fb55 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					2, 1000);
			EndEffector_State = Init;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
			break;
 800172a:	e06c      	b.n	8001806 <EndEffector_Event+0x146>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 800172c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2302      	movs	r3, #2
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <EndEffector_Event+0x158>)
 8001736:	212a      	movs	r1, #42	; 0x2a
 8001738:	4835      	ldr	r0, [pc, #212]	; (8001810 <EndEffector_Event+0x150>)
 800173a:	f003 fb49 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1000);
			EndEffector_State = Init;
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
			break;
 8001742:	e060      	b.n	8001806 <EndEffector_Event+0x146>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 8001744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2304      	movs	r3, #4
 800174c:	4a33      	ldr	r2, [pc, #204]	; (800181c <EndEffector_Event+0x15c>)
 800174e:	212a      	movs	r1, #42	; 0x2a
 8001750:	482f      	ldr	r0, [pc, #188]	; (8001810 <EndEffector_Event+0x150>)
 8001752:	f003 fb3d 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1000);
			EndEffector_State = Init;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
			break;
 800175a:	e054      	b.n	8001806 <EndEffector_Event+0x146>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 800175c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	4a2e      	ldr	r2, [pc, #184]	; (8001820 <EndEffector_Event+0x160>)
 8001766:	212a      	movs	r1, #42	; 0x2a
 8001768:	4829      	ldr	r0, [pc, #164]	; (8001810 <EndEffector_Event+0x150>)
 800176a:	f003 fb31 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1, 1000);
			EndEffector_State = Init;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
			break;
 8001772:	e048      	b.n	8001806 <EndEffector_Event+0x146>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2304      	movs	r3, #4
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <EndEffector_Event+0x164>)
 800177e:	212a      	movs	r1, #42	; 0x2a
 8001780:	4823      	ldr	r0, [pc, #140]	; (8001810 <EndEffector_Event+0x150>)
 8001782:	f003 fb25 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 1000);
			EndEffector_State = Init;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
			break;
 800178a:	e03c      	b.n	8001806 <EndEffector_Event+0x146>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 800178c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2302      	movs	r3, #2
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <EndEffector_Event+0x168>)
 8001796:	212a      	movs	r1, #42	; 0x2a
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <EndEffector_Event+0x150>)
 800179a:	f003 fb19 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1000);
			EndEffector_State = Init;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
			break;
 80017a2:	e030      	b.n	8001806 <EndEffector_Event+0x146>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2302      	movs	r3, #2
 80017ac:	4a1f      	ldr	r2, [pc, #124]	; (800182c <EndEffector_Event+0x16c>)
 80017ae:	212a      	movs	r1, #42	; 0x2a
 80017b0:	4817      	ldr	r0, [pc, #92]	; (8001810 <EndEffector_Event+0x150>)
 80017b2:	f003 fb0d 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 1000);
			EndEffector_State = Init;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
			break;
 80017ba:	e024      	b.n	8001806 <EndEffector_Event+0x146>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 80017bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2302      	movs	r3, #2
 80017c4:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <EndEffector_Event+0x170>)
 80017c6:	212a      	movs	r1, #42	; 0x2a
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <EndEffector_Event+0x150>)
 80017ca:	f003 fb01 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1000);
			EndEffector_State = Init;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]
			break;
 80017d2:	e018      	b.n	8001806 <EndEffector_Event+0x146>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2302      	movs	r3, #2
 80017dc:	4a15      	ldr	r2, [pc, #84]	; (8001834 <EndEffector_Event+0x174>)
 80017de:	212a      	movs	r1, #42	; 0x2a
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <EndEffector_Event+0x150>)
 80017e2:	f003 faf5 	bl	8004dd0 <HAL_I2C_Master_Transmit>
					1000);
			EndEffector_State = Init;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
			break;
 80017ea:	e00c      	b.n	8001806 <EndEffector_Event+0x146>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 80017ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <EndEffector_Event+0x178>)
 80017f6:	212a      	movs	r1, #42	; 0x2a
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <EndEffector_Event+0x150>)
 80017fa:	f003 fbe7 	bl	8004fcc <HAL_I2C_Master_Receive>
					1000);
			break;
 80017fe:	e002      	b.n	8001806 <EndEffector_Event+0x146>
		}

	}
 8001800:	bf00      	nop
 8001802:	e000      	b.n	8001806 <EndEffector_Event+0x146>
			break;
 8001804:	bf00      	nop
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000384 	.word	0x20000384
 8001814:	20000200 	.word	0x20000200
 8001818:	20000204 	.word	0x20000204
 800181c:	20000208 	.word	0x20000208
 8001820:	2000020c 	.word	0x2000020c
 8001824:	20000210 	.word	0x20000210
 8001828:	20000214 	.word	0x20000214
 800182c:	20000218 	.word	0x20000218
 8001830:	2000021c 	.word	0x2000021c
 8001834:	20000220 	.word	0x20000220
 8001838:	20000364 	.word	0x20000364

0800183c <JoyStickControl>:
float y_pre_final[9];
float x_final_joy[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float y_final[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float q;

void JoyStickControl() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af02      	add	r7, sp, #8

	read_pos();
 8001842:	f7ff fb07 	bl	8000e54 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2104      	movs	r1, #4
 800184a:	4857      	ldr	r0, [pc, #348]	; (80019a8 <JoyStickControl+0x16c>)
 800184c:	f003 f94a 	bl	8004ae4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8001850:	231e      	movs	r3, #30
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	230a      	movs	r3, #10
 8001856:	4a55      	ldr	r2, [pc, #340]	; (80019ac <JoyStickControl+0x170>)
 8001858:	4955      	ldr	r1, [pc, #340]	; (80019b0 <JoyStickControl+0x174>)
 800185a:	4856      	ldr	r0, [pc, #344]	; (80019b4 <JoyStickControl+0x178>)
 800185c:	f004 fe2b 	bl	80064b6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	2104      	movs	r1, #4
 8001864:	4850      	ldr	r0, [pc, #320]	; (80019a8 <JoyStickControl+0x16c>)
 8001866:	f003 f93d 	bl	8004ae4 <HAL_GPIO_WritePin>

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <JoyStickControl+0x170>)
 800186c:	791b      	ldrb	r3, [r3, #4]
 800186e:	2bfe      	cmp	r3, #254	; 0xfe
 8001870:	d113      	bne.n	800189a <JoyStickControl+0x5e>
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <JoyStickControl+0x17c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d10f      	bne.n	800189a <JoyStickControl+0x5e>
		if (state_motor == 1) {
 800187a:	4b50      	ldr	r3, [pc, #320]	; (80019bc <JoyStickControl+0x180>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d103      	bne.n	800188a <JoyStickControl+0x4e>
			state_motor = 0;
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <JoyStickControl+0x180>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001888:	e037      	b.n	80018fa <JoyStickControl+0xbe>
		} else if (state_motor == 0) {
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <JoyStickControl+0x180>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d133      	bne.n	80018fa <JoyStickControl+0xbe>
			state_motor = 1;
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <JoyStickControl+0x180>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001898:	e02f      	b.n	80018fa <JoyStickControl+0xbe>
		}
	} else if (RX[4] == 0xBF && button_last == 0xFF) { //X Button
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <JoyStickControl+0x170>)
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	2bbf      	cmp	r3, #191	; 0xbf
 80018a0:	d11c      	bne.n	80018dc <JoyStickControl+0xa0>
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <JoyStickControl+0x184>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d118      	bne.n	80018dc <JoyStickControl+0xa0>

		if (y_count >= 4) {
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <JoyStickControl+0x188>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d904      	bls.n	80018bc <JoyStickControl+0x80>
			motor(0, 0);
 80018b2:	2100      	movs	r1, #0
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff faf3 	bl	8000ea0 <motor>
 80018ba:	e005      	b.n	80018c8 <JoyStickControl+0x8c>
		} else {
			y_count += 1;
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <JoyStickControl+0x188>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <JoyStickControl+0x188>)
 80018c6:	701a      	strb	r2, [r3, #0]
		}
		y_c[y_count] = PosY;
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <JoyStickControl+0x188>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <JoyStickControl+0x18c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	493e      	ldr	r1, [pc, #248]	; (80019cc <JoyStickControl+0x190>)
 80018d4:	0083      	lsls	r3, r0, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <JoyStickControl+0xc0>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 80018dc:	4b33      	ldr	r3, [pc, #204]	; (80019ac <JoyStickControl+0x170>)
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	2bef      	cmp	r3, #239	; 0xef
 80018e2:	d10b      	bne.n	80018fc <JoyStickControl+0xc0>
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <JoyStickControl+0x184>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d107      	bne.n	80018fc <JoyStickControl+0xc0>
		workState = 1;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <JoyStickControl+0x194>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <JoyStickControl+0x198>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e000      	b.n	80018fc <JoyStickControl+0xc0>
		if (state_motor == 1) {
 80018fa:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <JoyStickControl+0x180>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <JoyStickControl+0xce>
 8001904:	2b01      	cmp	r3, #1
 8001906:	d020      	beq.n	800194a <JoyStickControl+0x10e>
 8001908:	e042      	b.n	8001990 <JoyStickControl+0x154>
	case 0:
		if (RX[3] == 0xfe) //Not be push
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <JoyStickControl+0x170>)
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	2bfe      	cmp	r3, #254	; 0xfe
 8001910:	d104      	bne.n	800191c <JoyStickControl+0xe0>
			motor(0, 1);
 8001912:	2101      	movs	r1, #1
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fac3 	bl	8000ea0 <motor>
		else if (RX[3] == 0xee) //UP
			motor(fast, -1);
		else if (RX[3] == 0xbe) //Down
			motor(fast, 1);
		break;
 800191a:	e036      	b.n	800198a <JoyStickControl+0x14e>
		else if (RX[3] == 0xee) //UP
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <JoyStickControl+0x170>)
 800191e:	78db      	ldrb	r3, [r3, #3]
 8001920:	2bee      	cmp	r3, #238	; 0xee
 8001922:	d107      	bne.n	8001934 <JoyStickControl+0xf8>
			motor(fast, -1);
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <JoyStickControl+0x19c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fab7 	bl	8000ea0 <motor>
		break;
 8001932:	e02a      	b.n	800198a <JoyStickControl+0x14e>
		else if (RX[3] == 0xbe) //Down
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <JoyStickControl+0x170>)
 8001936:	78db      	ldrb	r3, [r3, #3]
 8001938:	2bbe      	cmp	r3, #190	; 0xbe
 800193a:	d126      	bne.n	800198a <JoyStickControl+0x14e>
			motor(fast, 1);
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <JoyStickControl+0x19c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff faac 	bl	8000ea0 <motor>
		break;
 8001948:	e01f      	b.n	800198a <JoyStickControl+0x14e>
	case 1:
		if (RX[3] == 0xfe) //Not be push
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <JoyStickControl+0x170>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	2bfe      	cmp	r3, #254	; 0xfe
 8001950:	d104      	bne.n	800195c <JoyStickControl+0x120>
			motor(0, 1);
 8001952:	2101      	movs	r1, #1
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff faa3 	bl	8000ea0 <motor>
		else if (RX[3] == 0xee) //UP
			motor(slow, -1);
		else if (RX[3] == 0xbe) //Down
			motor(slow, 1);
		break;
 800195a:	e018      	b.n	800198e <JoyStickControl+0x152>
		else if (RX[3] == 0xee) //UP
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <JoyStickControl+0x170>)
 800195e:	78db      	ldrb	r3, [r3, #3]
 8001960:	2bee      	cmp	r3, #238	; 0xee
 8001962:	d107      	bne.n	8001974 <JoyStickControl+0x138>
			motor(slow, -1);
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <JoyStickControl+0x1a0>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa97 	bl	8000ea0 <motor>
		break;
 8001972:	e00c      	b.n	800198e <JoyStickControl+0x152>
		else if (RX[3] == 0xbe) //Down
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <JoyStickControl+0x170>)
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2bbe      	cmp	r3, #190	; 0xbe
 800197a:	d108      	bne.n	800198e <JoyStickControl+0x152>
			motor(slow, 1);
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <JoyStickControl+0x1a0>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa8c 	bl	8000ea0 <motor>
		break;
 8001988:	e001      	b.n	800198e <JoyStickControl+0x152>
		break;
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <JoyStickControl+0x154>
		break;
 800198e:	bf00      	nop
//X-axis
//		else if (RX[3] == 0x7F) //Left
//			printf("Left \r\n");
//		else if (RX[3] == 0xDF) //Right
//			printf("Right \r\n");
	RX_last = RX[4];
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <JoyStickControl+0x170>)
 8001992:	791a      	ldrb	r2, [r3, #4]
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <JoyStickControl+0x17c>)
 8001996:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <JoyStickControl+0x170>)
 800199a:	791a      	ldrb	r2, [r3, #4]
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <JoyStickControl+0x184>)
 800199e:	701a      	strb	r2, [r3, #0]

}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	20000368 	.word	0x20000368
 80019b0:	20000224 	.word	0x20000224
 80019b4:	200003d8 	.word	0x200003d8
 80019b8:	20000374 	.word	0x20000374
 80019bc:	20000373 	.word	0x20000373
 80019c0:	20000375 	.word	0x20000375
 80019c4:	20000376 	.word	0x20000376
 80019c8:	20000fac 	.word	0x20000fac
 80019cc:	20000378 	.word	0x20000378
 80019d0:	20000372 	.word	0x20000372
 80019d4:	20000fb4 	.word	0x20000fb4
 80019d8:	2000022e 	.word	0x2000022e
 80019dc:	20000230 	.word	0x20000230

080019e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019e4:	f3bf 8f4f 	dsb	sy
}
 80019e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <__NVIC_SystemReset+0x24>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019f2:	4904      	ldr	r1, [pc, #16]	; (8001a04 <__NVIC_SystemReset+0x24>)
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_SystemReset+0x28>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019fa:	f3bf 8f4f 	dsb	sy
}
 80019fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <__NVIC_SystemReset+0x20>
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	05fa0004 	.word	0x05fa0004
 8001a0c:	00000000 	.word	0x00000000

08001a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	ed2d 8b02 	vpush	{d8}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a1c:	f002 f910 	bl	8003c40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a20:	f000 fa24 	bl	8001e6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a24:	f000 fd4a 	bl	80024bc <MX_GPIO_Init>
	MX_DMA_Init();
 8001a28:	f000 fd28 	bl	800247c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001a2c:	f000 fcce 	bl	80023cc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001a30:	f000 fb88 	bl	8002144 <MX_TIM2_Init>
	MX_TIM1_Init();
 8001a34:	f000 fae6 	bl	8002004 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001a38:	f000 fbd8 	bl	80021ec <MX_TIM3_Init>
	MX_I2C2_Init();
 8001a3c:	f000 fa7e 	bl	8001f3c <MX_I2C2_Init>
	MX_USART6_UART_Init();
 8001a40:	f000 fcf0 	bl	8002424 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8001a44:	f000 fc20 	bl	8002288 <MX_TIM5_Init>
	MX_SPI3_Init();
 8001a48:	f000 faa6 	bl	8001f98 <MX_SPI3_Init>
	MX_TIM11_Init();
 8001a4c:	f000 fc6a 	bl	8002324 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f7ff fe35 	bl	80016c0 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001a56:	2104      	movs	r1, #4
 8001a58:	48bd      	ldr	r0, [pc, #756]	; (8001d50 <main+0x340>)
 8001a5a:	f005 fbaf 	bl	80071bc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001a5e:	48bd      	ldr	r0, [pc, #756]	; (8001d54 <main+0x344>)
 8001a60:	f005 f84c 	bl	8006afc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001a64:	48bc      	ldr	r0, [pc, #752]	; (8001d58 <main+0x348>)
 8001a66:	f004 ffef 	bl	8006a48 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	48ba      	ldr	r0, [pc, #744]	; (8001d58 <main+0x348>)
 8001a6e:	f005 f973 	bl	8006d58 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8001a72:	48ba      	ldr	r0, [pc, #744]	; (8001d5c <main+0x34c>)
 8001a74:	f005 f842 	bl	8006afc <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8001a78:	4bb9      	ldr	r3, [pc, #740]	; (8001d60 <main+0x350>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe fd2f 	bl	80004e4 <__aeabi_ul2d>
 8001a86:	a3ac      	add	r3, pc, #688	; (adr r3, 8001d38 <main+0x328>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fe8a 	bl	80007a4 <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	49b3      	ldr	r1, [pc, #716]	; (8001d64 <main+0x354>)
 8001a96:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 8001a9a:	4bb1      	ldr	r3, [pc, #708]	; (8001d60 <main+0x350>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7fe fd1e 	bl	80004e4 <__aeabi_ul2d>
 8001aa8:	a3a3      	add	r3, pc, #652	; (adr r3, 8001d38 <main+0x328>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fe79 	bl	80007a4 <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	49ac      	ldr	r1, [pc, #688]	; (8001d68 <main+0x358>)
 8001ab8:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 8001abc:	4ba8      	ldr	r3, [pc, #672]	; (8001d60 <main+0x350>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe fd0d 	bl	80004e4 <__aeabi_ul2d>
 8001aca:	a39b      	add	r3, pc, #620	; (adr r3, 8001d38 <main+0x328>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fe68 	bl	80007a4 <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	49a4      	ldr	r1, [pc, #656]	; (8001d6c <main+0x35c>)
 8001ada:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 8001ade:	4ba0      	ldr	r3, [pc, #640]	; (8001d60 <main+0x350>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7fe fcfc 	bl	80004e4 <__aeabi_ul2d>
 8001aec:	a392      	add	r3, pc, #584	; (adr r3, 8001d38 <main+0x328>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fe57 	bl	80007a4 <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	499d      	ldr	r1, [pc, #628]	; (8001d70 <main+0x360>)
 8001afc:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 8001b00:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <main+0x350>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe fceb 	bl	80004e4 <__aeabi_ul2d>
 8001b0e:	a38a      	add	r3, pc, #552	; (adr r3, 8001d38 <main+0x328>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fe46 	bl	80007a4 <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4995      	ldr	r1, [pc, #596]	; (8001d74 <main+0x364>)
 8001b1e:	e9c1 2300 	strd	r2, r3, [r1]

	hmodbus.huart = &huart2;
 8001b22:	4b95      	ldr	r3, [pc, #596]	; (8001d78 <main+0x368>)
 8001b24:	4a95      	ldr	r2, [pc, #596]	; (8001d7c <main+0x36c>)
 8001b26:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8001b28:	4b93      	ldr	r3, [pc, #588]	; (8001d78 <main+0x368>)
 8001b2a:	4a95      	ldr	r2, [pc, #596]	; (8001d80 <main+0x370>)
 8001b2c:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001b2e:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <main+0x368>)
 8001b30:	2215      	movs	r2, #21
 8001b32:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001b34:	4b90      	ldr	r3, [pc, #576]	; (8001d78 <main+0x368>)
 8001b36:	22c8      	movs	r2, #200	; 0xc8
 8001b38:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001b3a:	4992      	ldr	r1, [pc, #584]	; (8001d84 <main+0x374>)
 8001b3c:	488e      	ldr	r0, [pc, #568]	; (8001d78 <main+0x368>)
 8001b3e:	f7ff fab5 	bl	80010ac <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		int64_t GetTicku = micros();
 8001b42:	f000 fde7 	bl	8002714 <micros>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2300 	strd	r2, r3, [r7]

		Modbus_Protocal_Worker();
 8001b4e:	f7ff fb39 	bl	80011c4 <Modbus_Protocal_Worker>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 8001b52:	f002 f8db 	bl	8003d0c <HAL_GetTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	461c      	mov	r4, r3
 8001b5c:	4615      	mov	r5, r2
 8001b5e:	4b8a      	ldr	r3, [pc, #552]	; (8001d88 <main+0x378>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	4294      	cmp	r4, r2
 8001b66:	eb75 0303 	sbcs.w	r3, r5, r3
 8001b6a:	d31b      	bcc.n	8001ba4 <main+0x194>
			timestamp_heartbeat = HAL_GetTick() + 200;
 8001b6c:	f002 f8ce 	bl	8003d0c <HAL_GetTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	33c8      	adds	r3, #200	; 0xc8
 8001b74:	2200      	movs	r2, #0
 8001b76:	469a      	mov	sl, r3
 8001b78:	4693      	mov	fp, r2
 8001b7a:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <main+0x378>)
 8001b7c:	e9c3 ab00 	strd	sl, fp, [r3]

			registerFrame[0x00].U16 = 22881;
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <main+0x374>)
 8001b82:	f645 1261 	movw	r2, #22881	; 0x5961
 8001b86:	801a      	strh	r2, [r3, #0]
			registerFrame[0x11].U16 = PosY * 10;
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <main+0x37c>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <main+0x374>)
 8001ba2:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		switch (state_laser_test) {
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <main+0x380>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d84a      	bhi.n	8001c42 <main+0x232>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <main+0x1a4>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001c43 	.word	0x08001c43
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001bdf 	.word	0x08001bdf
 8001bc0:	08001bed 	.word	0x08001bed
 8001bc4:	08001c0b 	.word	0x08001c0b
 8001bc8:	08001c29 	.word	0x08001c29
 8001bcc:	08001c37 	.word	0x08001c37
		case 0:
			break;
		case 1:
			EndEffector_Event(Test_Start);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff fd75 	bl	80016c0 <EndEffector_Event>
			state_laser_test = 0;
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <main+0x380>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
			break;
 8001bdc:	e031      	b.n	8001c42 <main+0x232>
		case 2:
			EndEffector_Event(Run_Mode);
 8001bde:	2006      	movs	r0, #6
 8001be0:	f7ff fd6e 	bl	80016c0 <EndEffector_Event>
			state_laser_test = 0;
 8001be4:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <main+0x380>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
			break;
 8001bea:	e02a      	b.n	8001c42 <main+0x232>
		case 3:
			EndEffector_Event(Pick);
 8001bec:	2008      	movs	r0, #8
 8001bee:	f7ff fd67 	bl	80016c0 <EndEffector_Event>
			pos_i = PosY;
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <main+0x37c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a67      	ldr	r2, [pc, #412]	; (8001d94 <main+0x384>)
 8001bf8:	6013      	str	r3, [r2, #0]
//			x_axis_Target_Position= 1400;
			state_laser_test = 0;
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <main+0x380>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
			HAL_Delay(2000);
 8001c00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c04:	f002 f88e 	bl	8003d24 <HAL_Delay>
//			x_axis_Moving_Status= 2;
			break;
 8001c08:	e01b      	b.n	8001c42 <main+0x232>
		case 4:
			EndEffector_Event(Place);
 8001c0a:	2009      	movs	r0, #9
 8001c0c:	f7ff fd58 	bl	80016c0 <EndEffector_Event>
			pos_i = PosY;
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <main+0x37c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5f      	ldr	r2, [pc, #380]	; (8001d94 <main+0x384>)
 8001c16:	6013      	str	r3, [r2, #0]
//			x_axis_Target_Position = 0;
			state_laser_test = 0;
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <main+0x380>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
			HAL_Delay(2000);
 8001c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c22:	f002 f87f 	bl	8003d24 <HAL_Delay>
//			x_axis_Moving_Status= 2;
			break;
 8001c26:	e00c      	b.n	8001c42 <main+0x232>
		case 5:
			EndEffector_Event(Reset);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f7ff fd49 	bl	80016c0 <EndEffector_Event>
			state_laser_test = 0;
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <main+0x380>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
			break;
 8001c34:	e005      	b.n	8001c42 <main+0x232>
		case 6:
			EndEffector_Event(Test_Stop);
 8001c36:	2002      	movs	r0, #2
 8001c38:	f7ff fd42 	bl	80016c0 <EndEffector_Event>
			state_laser_test = 0;
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <main+0x380>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		}

		switch (State) {
 8001c42:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <main+0x388>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	f200 80fd 	bhi.w	8001e46 <main+0x436>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <main+0x244>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c71 	.word	0x08001c71
 8001c58:	08001ceb 	.word	0x08001ceb
 8001c5c:	08001cf1 	.word	0x08001cf1
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001dbd 	.word	0x08001dbd
 8001c68:	08001e37 	.word	0x08001e37
 8001c6c:	08001e1f 	.word	0x08001e1f
		case INIT:
			read_pos();
 8001c70:	f7ff f8f0 	bl	8000e54 <read_pos>
			photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	4849      	ldr	r0, [pc, #292]	; (8001d9c <main+0x38c>)
 8001c78:	f002 ff1c 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <main+0x390>)
 8001c82:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_1_Pin);
			photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8001c84:	2104      	movs	r1, #4
 8001c86:	4847      	ldr	r0, [pc, #284]	; (8001da4 <main+0x394>)
 8001c88:	f002 ff14 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <main+0x398>)
 8001c92:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_2_Pin);
			photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c98:	4842      	ldr	r0, [pc, #264]	; (8001da4 <main+0x394>)
 8001c9a:	f002 ff0b 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <main+0x39c>)
 8001ca4:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_3_Pin);
			emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	483c      	ldr	r0, [pc, #240]	; (8001d9c <main+0x38c>)
 8001caa:	f002 ff03 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <main+0x3a0>)
 8001cb4:	601a      	str	r2, [r3, #0]

			if (go_next == 1) {
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <main+0x3a4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 80be 	bne.w	8001e3c <main+0x42c>
				y_axis_Moving_Status= 2;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <main+0x374>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	841a      	strh	r2, [r3, #32]
				x_axis_Target_Position = 1400;
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <main+0x374>)
 8001cc8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001ccc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				x_axis_Target_Speed = 2500;
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <main+0x374>)
 8001cd2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001cd6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				x_axis_Target_Acceleration_Time = 2;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <main+0x374>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				State = INIT_HOMING;
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <main+0x388>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ce8:	e0a8      	b.n	8001e3c <main+0x42c>
			case INIT_HOMING:
			Init_Homing();
 8001cea:	f7ff f903 	bl	8000ef4 <Init_Homing>
			break;
 8001cee:	e0aa      	b.n	8001e46 <main+0x436>
			case CALIBRATE:
			JoyStickControl();
 8001cf0:	f7ff fda4 	bl	800183c <JoyStickControl>
			break;
 8001cf4:	e0a7      	b.n	8001e46 <main+0x436>
			case TRAJECT_GEN:
			read_pos();
 8001cf6:	f7ff f8ad 	bl	8000e54 <read_pos>
			Trajectory_Gen(pos_i, pos_f, 945, 4161);
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <main+0x384>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fbce 	bl	80004a0 <__aeabi_f2d>
 8001d04:	ec41 0b18 	vmov	d8, r0, r1
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <main+0x3a8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fbc7 	bl	80004a0 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 8001d40 <main+0x330>
 8001d1a:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8001d48 <main+0x338>
 8001d1e:	ec43 2b11 	vmov	d1, r2, r3
 8001d22:	eeb0 0a48 	vmov.f32	s0, s16
 8001d26:	eef0 0a68 	vmov.f32	s1, s17
 8001d2a:	f000 ff6d 	bl	8002c08 <Trajectory_Gen>
			State = PID_STATE;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <main+0x388>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	701a      	strb	r2, [r3, #0]
			break;
 8001d34:	e087      	b.n	8001e46 <main+0x436>
 8001d36:	bf00      	nop
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	412e8480 	.word	0x412e8480
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40b04100 	.word	0x40b04100
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	408d8800 	.word	0x408d8800
 8001d50:	200004e4 	.word	0x200004e4
 8001d54:	20000598 	.word	0x20000598
 8001d58:	20000430 	.word	0x20000430
 8001d5c:	2000064c 	.word	0x2000064c
 8001d60:	20000238 	.word	0x20000238
 8001d64:	20000248 	.word	0x20000248
 8001d68:	20000250 	.word	0x20000250
 8001d6c:	20000258 	.word	0x20000258
 8001d70:	20000260 	.word	0x20000260
 8001d74:	20000268 	.word	0x20000268
 8001d78:	20000930 	.word	0x20000930
 8001d7c:	200007b4 	.word	0x200007b4
 8001d80:	20000700 	.word	0x20000700
 8001d84:	20000e08 	.word	0x20000e08
 8001d88:	20000fb8 	.word	0x20000fb8
 8001d8c:	20000fac 	.word	0x20000fac
 8001d90:	20000924 	.word	0x20000924
 8001d94:	200008fc 	.word	0x200008fc
 8001d98:	20000fb4 	.word	0x20000fb4
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	20000f98 	.word	0x20000f98
 8001da4:	40020400 	.word	0x40020400
 8001da8:	20000f9c 	.word	0x20000f9c
 8001dac:	20000fa0 	.word	0x20000fa0
 8001db0:	20000fa4 	.word	0x20000fa4
 8001db4:	20000905 	.word	0x20000905
 8001db8:	20000900 	.word	0x20000900
			case PID_STATE:
			if (GetTicku >= timestamp_traject) {
 8001dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <main+0x444>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	eb71 0303 	sbcs.w	r3, r1, r3
 8001dcc:	d31b      	bcc.n	8001e06 <main+0x3f6>
				timestamp_traject = GetTicku + traject_us;
 8001dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <main+0x448>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	eb10 0802 	adds.w	r8, r0, r2
 8001ddc:	eb41 0903 	adc.w	r9, r1, r3
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <main+0x444>)
 8001de2:	e9c3 8900 	strd	r8, r9, [r3]
				Trajectory_Eva();
 8001de6:	f001 f863 	bl	8002eb0 <Trajectory_Eva>
				read_pos();
 8001dea:	f7ff f833 	bl	8000e54 <read_pos>
				PID(x);
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <main+0x44c>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe5a 	bl	8000ab0 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	ee00 3a10 	vmov	s0, r3
 8001e02:	f000 fcc1 	bl	8002788 <PID>
			}
			if (State_PID == 1) {
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <main+0x450>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d118      	bne.n	8001e40 <main+0x430>
				motor(0, 1);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff f845 	bl	8000ea0 <motor>
				State = IDLE;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <main+0x454>)
 8001e18:	2206      	movs	r2, #6
 8001e1a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e1c:	e010      	b.n	8001e40 <main+0x430>
			case IDLE:
			motor(0, 1);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f83d 	bl	8000ea0 <motor>
			if (State_PID == 0) {
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <main+0x450>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <main+0x434>
				State = TRAJECT_GEN;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <main+0x454>)
 8001e30:	2203      	movs	r2, #3
 8001e32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e34:	e006      	b.n	8001e44 <main+0x434>
			case EMERGENCY_LIMIT:
			Photo_IT();
 8001e36:	f000 fc05 	bl	8002644 <Photo_IT>
			break;
 8001e3a:	e004      	b.n	8001e46 <main+0x436>
			break;
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <main+0x436>
			break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <main+0x436>
			break;
 8001e44:	bf00      	nop
		}

		if (Re == 1) {
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <main+0x458>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f47f ae79 	bne.w	8001b42 <main+0x132>
			NVIC_SystemReset();
 8001e50:	f7ff fdc6 	bl	80019e0 <__NVIC_SystemReset>
 8001e54:	20000fc0 	.word	0x20000fc0
 8001e58:	20000238 	.word	0x20000238
 8001e5c:	20000908 	.word	0x20000908
 8001e60:	20000270 	.word	0x20000270
 8001e64:	20000fb4 	.word	0x20000fb4
 8001e68:	20000906 	.word	0x20000906

08001e6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2230      	movs	r2, #48	; 0x30
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f007 fdb2 	bl	80099e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <SystemClock_Config+0xc8>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <SystemClock_Config+0xc8>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <SystemClock_Config+0xc8>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <SystemClock_Config+0xcc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <SystemClock_Config+0xcc>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <SystemClock_Config+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ecc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001edc:	2304      	movs	r3, #4
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fdbf 	bl	8005a74 <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x94>
		Error_Handler();
 8001efc:	f000 fc3e 	bl	800277c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f10:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 f821 	bl	8005f64 <HAL_RCC_ClockConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0xc0>
		Error_Handler();
 8001f28:	f000 fc28 	bl	800277c <Error_Handler>
	}
}
 8001f2c:	bf00      	nop
 8001f2e:	3750      	adds	r7, #80	; 0x50
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <MX_I2C2_Init+0x54>)
 8001f44:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <MX_I2C2_Init+0x58>)
 8001f4a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <MX_I2C2_Init+0x50>)
 8001f7a:	f002 fde5 	bl	8004b48 <HAL_I2C_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001f84:	f000 fbfa 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000384 	.word	0x20000384
 8001f90:	40005800 	.word	0x40005800
 8001f94:	000186a0 	.word	0x000186a0

08001f98 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <MX_SPI3_Init+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fb8:	2202      	movs	r2, #2
 8001fba:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fcc:	2238      	movs	r2, #56	; 0x38
 8001fce:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fe4:	220a      	movs	r2, #10
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_SPI3_Init+0x64>)
 8001fea:	f004 f9db 	bl	80063a4 <HAL_SPI_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_SPI3_Init+0x60>
		Error_Handler();
 8001ff4:	f000 fbc2 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200003d8 	.word	0x200003d8
 8002000:	40003c00 	.word	0x40003c00

08002004 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b096      	sub	sp, #88	; 0x58
 8002008:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800200a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f007 fcd1 	bl	80099e4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <MX_TIM1_Init+0x138>)
 8002044:	4a3e      	ldr	r2, [pc, #248]	; (8002140 <MX_TIM1_Init+0x13c>)
 8002046:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002048:	4b3c      	ldr	r3, [pc, #240]	; (800213c <MX_TIM1_Init+0x138>)
 800204a:	2200      	movs	r2, #0
 800204c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <MX_TIM1_Init+0x138>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <MX_TIM1_Init+0x138>)
 8002056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800205a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <MX_TIM1_Init+0x138>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002062:	4b36      	ldr	r3, [pc, #216]	; (800213c <MX_TIM1_Init+0x138>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <MX_TIM1_Init+0x138>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800206e:	4833      	ldr	r0, [pc, #204]	; (800213c <MX_TIM1_Init+0x138>)
 8002070:	f004 fc8e 	bl	8006990 <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800207a:	f000 fb7f 	bl	800277c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002088:	4619      	mov	r1, r3
 800208a:	482c      	ldr	r0, [pc, #176]	; (800213c <MX_TIM1_Init+0x138>)
 800208c:	f005 fb6a 	bl	8007764 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x96>
		Error_Handler();
 8002096:	f000 fb71 	bl	800277c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800209a:	4828      	ldr	r0, [pc, #160]	; (800213c <MX_TIM1_Init+0x138>)
 800209c:	f004 fdf6 	bl	8006c8c <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0xa6>
		Error_Handler();
 80020a6:	f000 fb69 	bl	800277c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80020b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b6:	4619      	mov	r1, r3
 80020b8:	4820      	ldr	r0, [pc, #128]	; (800213c <MX_TIM1_Init+0x138>)
 80020ba:	f006 f8e3 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80020c4:	f000 fb5a 	bl	800277c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <MX_TIM1_Init+0x138>)
 80020ee:	f005 fa77 	bl	80075e0 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80020f8:	f000 fb40 	bl	800277c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002114:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <MX_TIM1_Init+0x138>)
 8002120:	f006 f91e 	bl	8008360 <HAL_TIMEx_ConfigBreakDeadTime>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 800212a:	f000 fb27 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <MX_TIM1_Init+0x138>)
 8002130:	f001 fbd8 	bl	80038e4 <HAL_TIM_MspPostInit>

}
 8002134:	bf00      	nop
 8002136:	3758      	adds	r7, #88	; 0x58
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000430 	.word	0x20000430
 8002140:	40010000 	.word	0x40010000

08002144 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f007 fc46 	bl	80099e4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_TIM2_Init+0xa4>)
 8002162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002166:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_TIM2_Init+0xa4>)
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_TIM2_Init+0xa4>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_TIM2_Init+0xa4>)
 8002176:	f04f 32ff 	mov.w	r2, #4294967295
 800217a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_TIM2_Init+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_TIM2_Init+0xa4>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002188:	2303      	movs	r3, #3
 800218a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002190:	2301      	movs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002198:	230f      	movs	r3, #15
 800219a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 80021a8:	230f      	movs	r3, #15
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4619      	mov	r1, r3
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <MX_TIM2_Init+0xa4>)
 80021b4:	f004 ff4e 	bl	8007054 <HAL_TIM_Encoder_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80021be:	f000 fadd 	bl	800277c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <MX_TIM2_Init+0xa4>)
 80021d0:	f006 f858 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80021da:	f000 facf 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3730      	adds	r7, #48	; 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200004e4 	.word	0x200004e4

080021ec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_TIM3_Init+0x94>)
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <MX_TIM3_Init+0x98>)
 800220c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_TIM3_Init+0x94>)
 8002210:	2263      	movs	r2, #99	; 0x63
 8002212:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_TIM3_Init+0x94>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <MX_TIM3_Init+0x94>)
 800221c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002220:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_TIM3_Init+0x94>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM3_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800222e:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_TIM3_Init+0x94>)
 8002230:	f004 fbae 	bl	8006990 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM3_Init+0x52>
		Error_Handler();
 800223a:	f000 fa9f 	bl	800277c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_TIM3_Init+0x94>)
 800224c:	f005 fa8a 	bl	8007764 <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002256:	f000 fa91 	bl	800277c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002262:	463b      	mov	r3, r7
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <MX_TIM3_Init+0x94>)
 8002268:	f006 f80c 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002272:	f000 fa83 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000598 	.word	0x20000598
 8002284:	40000400 	.word	0x40000400

08002288 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM5_Init+0x94>)
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <MX_TIM5_Init+0x98>)
 80022a8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM5_Init+0x94>)
 80022ac:	2263      	movs	r2, #99	; 0x63
 80022ae:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_TIM5_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_TIM5_Init+0x94>)
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_TIM5_Init+0x94>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_TIM5_Init+0x94>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <MX_TIM5_Init+0x94>)
 80022cc:	f004 fb60 	bl	8006990 <HAL_TIM_Base_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM5_Init+0x52>
		Error_Handler();
 80022d6:	f000 fa51 	bl	800277c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	4619      	mov	r1, r3
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_TIM5_Init+0x94>)
 80022e8:	f005 fa3c 	bl	8007764 <HAL_TIM_ConfigClockSource>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM5_Init+0x6e>
		Error_Handler();
 80022f2:	f000 fa43 	bl	800277c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80022fe:	463b      	mov	r3, r7
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_TIM5_Init+0x94>)
 8002304:	f005 ffbe 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800230e:	f000 fa35 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000064c 	.word	0x2000064c
 8002320:	40000c00 	.word	0x40000c00

08002324 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_TIM11_Init+0xa0>)
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <MX_TIM11_Init+0xa4>)
 8002340:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002344:	2263      	movs	r2, #99	; 0x63
 8002346:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_TIM11_Init+0xa0>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002350:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002354:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM11_Init+0xa0>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002362:	4818      	ldr	r0, [pc, #96]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002364:	f004 fb14 	bl	8006990 <HAL_TIM_Base_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM11_Init+0x4e>
		Error_Handler();
 800236e:	f000 fa05 	bl	800277c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8002372:	4814      	ldr	r0, [pc, #80]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002374:	f004 fc24 	bl	8006bc0 <HAL_TIM_OC_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM11_Init+0x5e>
		Error_Handler();
 800237e:	f000 f9fd 	bl	800277c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8002382:	2108      	movs	r1, #8
 8002384:	480f      	ldr	r0, [pc, #60]	; (80023c4 <MX_TIM11_Init+0xa0>)
 8002386:	f004 fd97 	bl	8006eb8 <HAL_TIM_OnePulse_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM11_Init+0x70>
		Error_Handler();
 8002390:	f000 f9f4 	bl	800277c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002394:	2310      	movs	r3, #16
 8002396:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8002398:	f240 5399 	movw	r3, #1433	; 0x599
 800239c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM11_Init+0xa0>)
 80023ae:	f005 f8bb 	bl	8007528 <HAL_TIM_OC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80023b8:	f000 f9e0 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000700 	.word	0x20000700
 80023c8:	40014800 	.word	0x40014800

080023cc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <MX_USART2_UART_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023d8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80023dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART2_UART_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART2_UART_Init+0x50>)
 8002408:	f006 f81a 	bl	8008440 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8002412:	f000 f9b3 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200007b4 	.word	0x200007b4
 8002420:	40004400 	.word	0x40004400

08002424 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_USART6_UART_Init+0x50>)
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <MX_USART6_UART_Init+0x54>)
 800242c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002434:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800243c:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800244a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_USART6_UART_Init+0x50>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_USART6_UART_Init+0x50>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_USART6_UART_Init+0x50>)
 8002460:	f005 ffee 	bl	8008440 <HAL_UART_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 800246a:	f000 f987 	bl	800277c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000828 	.word	0x20000828
 8002478:	40011400 	.word	0x40011400

0800247c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_DMA_Init+0x3c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <MX_DMA_Init+0x3c>)
 800248c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_DMA_Init+0x3c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2011      	movs	r0, #17
 80024a4:	f001 fd3d 	bl	8003f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024a8:	2011      	movs	r0, #17
 80024aa:	f001 fd56 	bl	8003f5a <HAL_NVIC_EnableIRQ>

}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <MX_GPIO_Init+0x174>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <MX_GPIO_Init+0x174>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <MX_GPIO_Init+0x174>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <MX_GPIO_Init+0x174>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <MX_GPIO_Init+0x174>)
 80024f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <MX_GPIO_Init+0x174>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <MX_GPIO_Init+0x174>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <MX_GPIO_Init+0x174>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b45      	ldr	r3, [pc, #276]	; (8002630 <MX_GPIO_Init+0x174>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <MX_GPIO_Init+0x174>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a40      	ldr	r2, [pc, #256]	; (8002630 <MX_GPIO_Init+0x174>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <MX_GPIO_Init+0x174>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <MX_GPIO_Init+0x174>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a39      	ldr	r2, [pc, #228]	; (8002630 <MX_GPIO_Init+0x174>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <MX_GPIO_Init+0x174>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8002564:	4833      	ldr	r0, [pc, #204]	; (8002634 <MX_GPIO_Init+0x178>)
 8002566:	f002 fabd 	bl	8004ae4 <HAL_GPIO_WritePin>
			Switch_Relay_1_Pin | Switch_Relay_2_Pin | Switch_Relay_3_Pin
					| DIR_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 800256a:	2200      	movs	r2, #0
 800256c:	2104      	movs	r1, #4
 800256e:	4832      	ldr	r0, [pc, #200]	; (8002638 <MX_GPIO_Init+0x17c>)
 8002570:	f002 fab8 	bl	8004ae4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_1_Pin;
 8002574:	f242 0348 	movw	r3, #8264	; 0x2048
 8002578:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800257a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800257e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	482c      	ldr	r0, [pc, #176]	; (800263c <MX_GPIO_Init+0x180>)
 800258c:	f002 f90e 	bl	80047ac <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_1_Pin Switch_Relay_2_Pin Switch_Relay_3_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_1_Pin | Switch_Relay_2_Pin
 8002590:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002594:	617b      	str	r3, [r7, #20]
			| Switch_Relay_3_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4822      	ldr	r0, [pc, #136]	; (8002634 <MX_GPIO_Init+0x178>)
 80025aa:	f002 f8ff 	bl	80047ac <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 80025ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80025b2:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	481e      	ldr	r0, [pc, #120]	; (8002640 <MX_GPIO_Init+0x184>)
 80025c6:	f002 f8f1 	bl	80047ac <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 80025ca:	2304      	movs	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4815      	ldr	r0, [pc, #84]	; (8002638 <MX_GPIO_Init+0x17c>)
 80025e2:	f002 f8e3 	bl	80047ac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2008      	movs	r0, #8
 80025ec:	f001 fc99 	bl	8003f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025f0:	2008      	movs	r0, #8
 80025f2:	f001 fcb2 	bl	8003f5a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2009      	movs	r0, #9
 80025fc:	f001 fc91 	bl	8003f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002600:	2009      	movs	r0, #9
 8002602:	f001 fcaa 	bl	8003f5a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2017      	movs	r0, #23
 800260c:	f001 fc89 	bl	8003f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002610:	2017      	movs	r0, #23
 8002612:	f001 fca2 	bl	8003f5a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2028      	movs	r0, #40	; 0x28
 800261c:	f001 fc81 	bl	8003f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002620:	2028      	movs	r0, #40	; 0x28
 8002622:	f001 fc9a 	bl	8003f5a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40020800 	.word	0x40020800
 8002640:	40020400 	.word	0x40020400

08002644 <Photo_IT>:

/* USER CODE BEGIN 4 */
void Photo_IT() {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	switch (state_IT) {
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <Photo_IT+0x4c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <Photo_IT+0x12>
 8002650:	2b01      	cmp	r3, #1
 8002652:	d011      	beq.n	8002678 <Photo_IT+0x34>
	case 1:
		Dutyfeedback = 0;
		motor(0, 1);
		break;
	}
}
 8002654:	e01a      	b.n	800268c <Photo_IT+0x48>
		if (state_IT == 0) {
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <Photo_IT+0x4c>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <Photo_IT+0x46>
		} else if (state_IT == 1) {
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <Photo_IT+0x4c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d111      	bne.n	800268a <Photo_IT+0x46>
			Dutyfeedback = 0;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <Photo_IT+0x50>)
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
			motor(0, 1);
 800266e:	2101      	movs	r1, #1
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe fc15 	bl	8000ea0 <motor>
		break;
 8002676:	e008      	b.n	800268a <Photo_IT+0x46>
		Dutyfeedback = 0;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <Photo_IT+0x50>)
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
		motor(0, 1);
 8002680:	2101      	movs	r1, #1
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fc0c 	bl	8000ea0 <motor>
		break;
 8002688:	e000      	b.n	800268c <Photo_IT+0x48>
		break;
 800268a:	bf00      	nop
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000904 	.word	0x20000904
 8002694:	20000920 	.word	0x20000920

08002698 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Photoelectric_sensor_1_Pin) {
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d111      	bne.n	80026cc <HAL_GPIO_EXTI_Callback+0x34>
		if (State == PID_STATE) {
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_GPIO_EXTI_Callback+0x6c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d10d      	bne.n	80026cc <HAL_GPIO_EXTI_Callback+0x34>
			Dutyfeedback = 0;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_GPIO_EXTI_Callback+0x70>)
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_GPIO_EXTI_Callback+0x74>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_GPIO_EXTI_Callback+0x78>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_GPIO_EXTI_Callback+0x6c>)
 80026c8:	2205      	movs	r2, #5
 80026ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == Photoelectric_sensor_3_Pin) {
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d2:	d111      	bne.n	80026f8 <HAL_GPIO_EXTI_Callback+0x60>
		if (State == PID_STATE) {
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_GPIO_EXTI_Callback+0x6c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d10d      	bne.n	80026f8 <HAL_GPIO_EXTI_Callback+0x60>
			Dutyfeedback = 0;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_GPIO_EXTI_Callback+0x70>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_GPIO_EXTI_Callback+0x74>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_GPIO_EXTI_Callback+0x78>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_GPIO_EXTI_Callback+0x6c>)
 80026f4:	2205      	movs	r2, #5
 80026f6:	701a      	strb	r2, [r3, #0]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20000fb4 	.word	0x20000fb4
 8002708:	20000920 	.word	0x20000920
 800270c:	20000430 	.word	0x20000430
 8002710:	20000904 	.word	0x20000904

08002714 <micros>:

uint64_t micros() {
 8002714:	b4b0      	push	{r4, r5, r7}
 8002716:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <micros+0x2c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2200      	movs	r2, #0
 8002720:	4618      	mov	r0, r3
 8002722:	4611      	mov	r1, r2
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <micros+0x30>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	1884      	adds	r4, r0, r2
 800272c:	eb41 0503 	adc.w	r5, r1, r3
 8002730:	4622      	mov	r2, r4
 8002732:	462b      	mov	r3, r5
}
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bcb0      	pop	{r4, r5, r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000064c 	.word	0x2000064c
 8002744:	20000928 	.word	0x20000928

08002748 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002748:	b4b0      	push	{r4, r5, r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d108      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	1e54      	subs	r4, r2, #1
 8002760:	f143 0500 	adc.w	r5, r3, #0
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002766:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bcb0      	pop	{r4, r5, r7}
 8002772:	4770      	bx	lr
 8002774:	2000064c 	.word	0x2000064c
 8002778:	20000928 	.word	0x20000928

0800277c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>
	...

08002788 <PID>:

extern enum State_Machine {
	INIT, INIT_HOMING, CALIBRATE, TRAJECT_GEN, PID_STATE, EMERGENCY_LIMIT, IDLE
} State;

void PID(float setposition) {
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8002792:	4b9b      	ldr	r3, [pc, #620]	; (8002a00 <PID+0x278>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a9b      	ldr	r2, [pc, #620]	; (8002a04 <PID+0x27c>)
 8002798:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 800279a:	4b9a      	ldr	r3, [pc, #616]	; (8002a04 <PID+0x27c>)
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	4b99      	ldr	r3, [pc, #612]	; (8002a08 <PID+0x280>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	ee17 0a90 	vmov	r0, s15
 80027ae:	f7fd fe77 	bl	80004a0 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <PID+0x284>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fd fe90 	bl	80004e4 <__aeabi_ul2d>
 80027c4:	a388      	add	r3, pc, #544	; (adr r3, 80029e8 <PID+0x260>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ffeb 	bl	80007a4 <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4620      	mov	r0, r4
 80027d4:	4629      	mov	r1, r5
 80027d6:	f7fd ffe5 	bl	80007a4 <__aeabi_ddiv>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe f965 	bl	8000ab0 <__aeabi_d2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4a89      	ldr	r2, [pc, #548]	; (8002a10 <PID+0x288>)
 80027ea:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 80027ec:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <PID+0x27c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a85      	ldr	r2, [pc, #532]	; (8002a08 <PID+0x280>)
 80027f2:	6013      	str	r3, [r2, #0]

	if (pos_f < 0) {
 80027f4:	4b87      	ldr	r3, [pc, #540]	; (8002a14 <PID+0x28c>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d504      	bpl.n	800280e <PID+0x86>
		pos_f = 0;
 8002804:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <PID+0x28c>)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e00c      	b.n	8002828 <PID+0xa0>
	} else if (pos_f > 700) {
 800280e:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <PID+0x28c>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a18 <PID+0x290>
 8002818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	dd02      	ble.n	8002828 <PID+0xa0>
		pos_f = 700;
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <PID+0x28c>)
 8002824:	4a7d      	ldr	r2, [pc, #500]	; (8002a1c <PID+0x294>)
 8002826:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8002828:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <PID+0x278>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <PID+0x298>)
 8002838:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 800283c:	4b79      	ldr	r3, [pc, #484]	; (8002a24 <PID+0x29c>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002a28 <PID+0x2a0>
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	bfac      	ite	ge
 8002850:	2301      	movge	r3, #1
 8002852:	2300      	movlt	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d13f      	bne.n	80028e0 <PID+0x158>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <PID+0x298>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	bfac      	ite	ge
 8002870:	2301      	movge	r3, #1
 8002872:	2300      	movlt	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <PID+0x118>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <PID+0x2a4>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	bfac      	ite	ge
 8002890:	2301      	movge	r3, #1
 8002892:	2300      	movlt	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02a      	beq.n	80028f6 <PID+0x16e>
 80028a0:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <PID+0x298>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	bf4c      	ite	mi
 80028b0:	2301      	movmi	r3, #1
 80028b2:	2300      	movpl	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10f      	bne.n	80028e0 <PID+0x158>
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <PID+0x2a4>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	bf4c      	ite	mi
 80028d0:	2301      	movmi	r3, #1
 80028d2:	2300      	movpl	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <PID+0x16e>
		Intregral = Intregral + Error;
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <PID+0x2a4>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	4b4e      	ldr	r3, [pc, #312]	; (8002a20 <PID+0x298>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <PID+0x2a4>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 80028f6:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <PID+0x2a8>)
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <PID+0x298>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <PID+0x298>)
 8002908:	edd3 6a00 	vldr	s13, [r3]
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <PID+0x2ac>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002916:	4b48      	ldr	r3, [pc, #288]	; (8002a38 <PID+0x2b0>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <PID+0x2b4>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 800292e:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <PID+0x2a4>)
 8002930:	edd3 6a00 	vldr	s13, [r3]
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <PID+0x2b8>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <PID+0x29c>)
 8002944:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <PID+0x29c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fda7 	bl	80004a0 <__aeabi_f2d>
 8002952:	a327      	add	r3, pc, #156	; (adr r3, 80029f0 <PID+0x268>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fe f880 	bl	8000a5c <__aeabi_dcmpge>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <PID+0x1e2>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <PID+0x29c>)
 8002964:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <PID+0x2bc>)
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e00f      	b.n	800298a <PID+0x202>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <PID+0x29c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fd96 	bl	80004a0 <__aeabi_f2d>
 8002974:	a320      	add	r3, pc, #128	; (adr r3, 80029f8 <PID+0x270>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fe f865 	bl	8000a48 <__aeabi_dcmple>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <PID+0x202>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <PID+0x29c>)
 8002986:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <PID+0x2c0>)
 8002988:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <PID+0x29c>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d503      	bpl.n	80029a2 <PID+0x21a>
		dir = -1;
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <PID+0x2c4>)
 800299c:	22ff      	movs	r2, #255	; 0xff
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e00a      	b.n	80029b8 <PID+0x230>
	} else if (Dutyfeedback > 0) {
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <PID+0x29c>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd02      	ble.n	80029b8 <PID+0x230>
		dir = 1;
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <PID+0x2c4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <PID+0x298>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	dd41      	ble.n	8002a50 <PID+0x2c8>
		Dutyfeedback += 1 * Kp; //230
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <PID+0x29c>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <PID+0x2a8>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <PID+0x29c>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
 80029e2:	e04a      	b.n	8002a7a <PID+0x2f2>
 80029e4:	f3af 8000 	nop.w
 80029e8:	00000000 	.word	0x00000000
 80029ec:	412e8480 	.word	0x412e8480
 80029f0:	66666666 	.word	0x66666666
 80029f4:	40e66666 	.word	0x40e66666
 80029f8:	66666666 	.word	0x66666666
 80029fc:	c0e66666 	.word	0xc0e66666
 8002a00:	20000fac 	.word	0x20000fac
 8002a04:	20000fcc 	.word	0x20000fcc
 8002a08:	20000fd0 	.word	0x20000fd0
 8002a0c:	20000240 	.word	0x20000240
 8002a10:	20000fd4 	.word	0x20000fd4
 8002a14:	20000900 	.word	0x20000900
 8002a18:	442f0000 	.word	0x442f0000
 8002a1c:	442f0000 	.word	0x442f0000
 8002a20:	20000fd8 	.word	0x20000fd8
 8002a24:	20000920 	.word	0x20000920
 8002a28:	47800000 	.word	0x47800000
 8002a2c:	20000fe0 	.word	0x20000fe0
 8002a30:	200002bc 	.word	0x200002bc
 8002a34:	20000fdc 	.word	0x20000fdc
 8002a38:	200002c8 	.word	0x200002c8
 8002a3c:	200002c4 	.word	0x200002c4
 8002a40:	200002c0 	.word	0x200002c0
 8002a44:	47333333 	.word	0x47333333
 8002a48:	c7333333 	.word	0xc7333333
 8002a4c:	20000fc8 	.word	0x20000fc8
	} else if (Error < -1.0) {
 8002a50:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <PID+0x440>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	d50a      	bpl.n	8002a7a <PID+0x2f2>
		Dutyfeedback -= 1 * Kp;
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <PID+0x444>)
 8002a66:	ed93 7a00 	vldr	s14, [r3]
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <PID+0x448>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <PID+0x444>)
 8002a76:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8002a7a:	4b54      	ldr	r3, [pc, #336]	; (8002bcc <PID+0x444>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eef0 7ae7 	vabs.f32	s15, s15
 8002a84:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <PID+0x444>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 8002a8a:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <PID+0x444>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <PID+0x44c>)
 8002a96:	f993 3000 	ldrsb.w	r3, [r3]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	ee17 0a90 	vmov	r0, s15
 8002aa0:	f7fe f9fe 	bl	8000ea0 <motor>
	Last_Error = Error;
 8002aa4:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <PID+0x440>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <PID+0x450>)
 8002aaa:	6013      	str	r3, [r2, #0]

	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <PID+0x454>)
 8002aae:	ed93 7a00 	vldr	s14, [r3]
 8002ab2:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <PID+0x458>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fcee 	bl	80004a0 <__aeabi_f2d>
 8002ac4:	a33c      	add	r3, pc, #240	; (adr r3, 8002bb8 <PID+0x430>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd ffbd 	bl	8000a48 <__aeabi_dcmple>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <PID+0x34e>
			State = INIT_HOMING;
		}

	}

}
 8002ad4:	e069      	b.n	8002baa <PID+0x422>
	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <PID+0x454>)
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <PID+0x458>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	ee17 0a90 	vmov	r0, s15
 8002aea:	f7fd fcd9 	bl	80004a0 <__aeabi_f2d>
 8002aee:	a334      	add	r3, pc, #208	; (adr r3, 8002bc0 <PID+0x438>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd ffb2 	bl	8000a5c <__aeabi_dcmpge>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d100      	bne.n	8002b00 <PID+0x378>
}
 8002afe:	e054      	b.n	8002baa <PID+0x422>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <PID+0x45c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	635a      	str	r2, [r3, #52]	; 0x34
		Intregral = 0;
 8002b08:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <PID+0x460>)
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
		Dutyfeedback = 0;
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <PID+0x444>)
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
		v = 0;
 8002b18:	4934      	ldr	r1, [pc, #208]	; (8002bec <PID+0x464>)
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9c1 2300 	strd	r2, r3, [r1]
		a = 0;
 8002b26:	4932      	ldr	r1, [pc, #200]	; (8002bf0 <PID+0x468>)
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9c1 2300 	strd	r2, r3, [r1]
		if ((position_index + 2) % 2 == 0) {
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <PID+0x46c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <PID+0x3c2>
			state_laser_test = 3;
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <PID+0x470>)
 8002b44:	2203      	movs	r2, #3
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e00c      	b.n	8002b64 <PID+0x3dc>
		} else if ((position_index + 2) % 2 == 1) {
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <PID+0x46c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3302      	adds	r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	bfb8      	it	lt
 8002b58:	425b      	neglt	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <PID+0x3dc>
			state_laser_test = 4;
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <PID+0x470>)
 8002b60:	2204      	movs	r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
		if (position_index < 17) {
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <PID+0x46c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	dc15      	bgt.n	8002b98 <PID+0x410>
			position_index++;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <PID+0x46c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <PID+0x46c>)
 8002b74:	6013      	str	r3, [r2, #0]
			read_pos();
 8002b76:	f7fe f96d 	bl	8000e54 <read_pos>
			pos_f = position_test[position_index];
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <PID+0x46c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <PID+0x474>)
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <PID+0x454>)
 8002b88:	6013      	str	r3, [r2, #0]
			State = TRAJECT_GEN;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <PID+0x478>)
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	701a      	strb	r2, [r3, #0]
			State_PID = 0;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <PID+0x47c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	e008      	b.n	8002baa <PID+0x422>
			State_PID = 2;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <PID+0x47c>)
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
			position_index = 0;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <PID+0x46c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
			State = INIT_HOMING;
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <PID+0x478>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fc99999 	.word	0x3fc99999
 8002bc0:	9999999a 	.word	0x9999999a
 8002bc4:	bfc99999 	.word	0xbfc99999
 8002bc8:	20000fd8 	.word	0x20000fd8
 8002bcc:	20000920 	.word	0x20000920
 8002bd0:	200002bc 	.word	0x200002bc
 8002bd4:	20000fc8 	.word	0x20000fc8
 8002bd8:	20000fdc 	.word	0x20000fdc
 8002bdc:	20000900 	.word	0x20000900
 8002be0:	20000fac 	.word	0x20000fac
 8002be4:	20000430 	.word	0x20000430
 8002be8:	20000fe0 	.word	0x20000fe0
 8002bec:	20000910 	.word	0x20000910
 8002bf0:	20000918 	.word	0x20000918
 8002bf4:	20000fb0 	.word	0x20000fb0
 8002bf8:	20000924 	.word	0x20000924
 8002bfc:	20000274 	.word	0x20000274
 8002c00:	20000fb4 	.word	0x20000fb4
 8002c04:	20000270 	.word	0x20000270

08002c08 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8002c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	ed87 0b06 	vstr	d0, [r7, #24]
 8002c14:	ed87 1b04 	vstr	d1, [r7, #16]
 8002c18:	ed87 2b02 	vstr	d2, [r7, #8]
 8002c1c:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8002c20:	4993      	ldr	r1, [pc, #588]	; (8002e70 <Trajectory_Gen+0x268>)
 8002c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c26:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8002c2a:	4992      	ldr	r1, [pc, #584]	; (8002e74 <Trajectory_Gen+0x26c>)
 8002c2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c30:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8002c34:	4990      	ldr	r1, [pc, #576]	; (8002e78 <Trajectory_Gen+0x270>)
 8002c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3a:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 8002c3e:	498f      	ldr	r1, [pc, #572]	; (8002e7c <Trajectory_Gen+0x274>)
 8002c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c44:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8002c48:	4b8d      	ldr	r3, [pc, #564]	; (8002e80 <Trajectory_Gen+0x278>)
 8002c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c4e:	4a8d      	ldr	r2, [pc, #564]	; (8002e84 <Trajectory_Gen+0x27c>)
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f7fd ff7c 	bl	8000b50 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd fc40 	bl	80004e4 <__aeabi_ul2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4987      	ldr	r1, [pc, #540]	; (8002e88 <Trajectory_Gen+0x280>)
 8002c6a:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 8002c6e:	4b84      	ldr	r3, [pc, #528]	; (8002e80 <Trajectory_Gen+0x278>)
 8002c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c74:	4a83      	ldr	r2, [pc, #524]	; (8002e84 <Trajectory_Gen+0x27c>)
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f7fd ff69 	bl	8000b50 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd fc2d 	bl	80004e4 <__aeabi_ul2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	497f      	ldr	r1, [pc, #508]	; (8002e8c <Trajectory_Gen+0x284>)
 8002c90:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8002c94:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <Trajectory_Gen+0x278>)
 8002c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <Trajectory_Gen+0x27c>)
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f7fd ff56 	bl	8000b50 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7fd fc1a 	bl	80004e4 <__aeabi_ul2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4976      	ldr	r1, [pc, #472]	; (8002e90 <Trajectory_Gen+0x288>)
 8002cb6:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <Trajectory_Gen+0x278>)
 8002cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cc0:	4a70      	ldr	r2, [pc, #448]	; (8002e84 <Trajectory_Gen+0x27c>)
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	f7fd ff43 	bl	8000b50 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd fc07 	bl	80004e4 <__aeabi_ul2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	496e      	ldr	r1, [pc, #440]	; (8002e94 <Trajectory_Gen+0x28c>)
 8002cdc:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <Trajectory_Gen+0x26c>)
 8002ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <Trajectory_Gen+0x268>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f7fd fa78 	bl	80001e0 <__aeabi_dsub>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <Trajectory_Gen+0x290>)
 8002cfc:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8002d00:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <Trajectory_Gen+0x26c>)
 8002d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d06:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <Trajectory_Gen+0x268>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fa68 	bl	80001e0 <__aeabi_dsub>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	f7fd fea6 	bl	8000a70 <__aeabi_dcmpgt>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <Trajectory_Gen+0x12a>
		direct = 1;
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <Trajectory_Gen+0x294>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e018      	b.n	8002d64 <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8002d32:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <Trajectory_Gen+0x26c>)
 8002d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <Trajectory_Gen+0x268>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fa4f 	bl	80001e0 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	f7fd fe6f 	bl	8000a34 <__aeabi_dcmplt>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <Trajectory_Gen+0x15c>
		direct = -1;
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <Trajectory_Gen+0x294>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <Trajectory_Gen+0x270>)
 8002d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <Trajectory_Gen+0x274>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fd18 	bl	80007a4 <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4949      	ldr	r1, [pc, #292]	; (8002ea0 <Trajectory_Gen+0x298>)
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8002d7e:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <Trajectory_Gen+0x290>)
 8002d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <Trajectory_Gen+0x274>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fd0b 	bl	80007a4 <__aeabi_ddiv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	ec43 2b17 	vmov	d7, r2, r3
 8002d96:	eeb0 0a47 	vmov.f32	s0, s14
 8002d9a:	eef0 0a67 	vmov.f32	s1, s15
 8002d9e:	f006 fe29 	bl	80099f4 <sqrt>
 8002da2:	eeb0 7a40 	vmov.f32	s14, s0
 8002da6:	eef0 7a60 	vmov.f32	s15, s1
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <Trajectory_Gen+0x29c>)
 8002dac:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8002db0:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <Trajectory_Gen+0x29c>)
 8002db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <Trajectory_Gen+0x298>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fe3a 	bl	8000a34 <__aeabi_dcmplt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00f      	beq.n	8002de6 <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <Trajectory_Gen+0x29c>)
 8002dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	f7fd fa08 	bl	80001e4 <__adddf3>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4933      	ldr	r1, [pc, #204]	; (8002ea8 <Trajectory_Gen+0x2a0>)
 8002dda:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <Trajectory_Gen+0x2a4>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8002de4:	e03e      	b.n	8002e64 <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <Trajectory_Gen+0x29c>)
 8002de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <Trajectory_Gen+0x298>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f7fd fe33 	bl	8000a5c <__aeabi_dcmpge>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d100      	bne.n	8002dfe <Trajectory_Gen+0x1f6>
}
 8002dfc:	e032      	b.n	8002e64 <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <Trajectory_Gen+0x298>)
 8002e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	f7fd f9ec 	bl	80001e4 <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4690      	mov	r8, r2
 8002e12:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <Trajectory_Gen+0x290>)
 8002e16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <Trajectory_Gen+0x298>)
 8002e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <Trajectory_Gen+0x270>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fb93 	bl	8000550 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd f9d5 	bl	80001e0 <__aeabi_dsub>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <Trajectory_Gen+0x270>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd fcae 	bl	80007a4 <__aeabi_ddiv>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	4649      	mov	r1, r9
 8002e50:	f7fd f9c8 	bl	80001e4 <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <Trajectory_Gen+0x2a0>)
 8002e5a:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <Trajectory_Gen+0x2a4>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000ff0 	.word	0x20000ff0
 8002e74:	20000ff8 	.word	0x20000ff8
 8002e78:	20001000 	.word	0x20001000
 8002e7c:	20001008 	.word	0x20001008
 8002e80:	20000238 	.word	0x20000238
 8002e84:	000f4240 	.word	0x000f4240
 8002e88:	20000248 	.word	0x20000248
 8002e8c:	20000250 	.word	0x20000250
 8002e90:	20000258 	.word	0x20000258
 8002e94:	20000260 	.word	0x20000260
 8002e98:	20001010 	.word	0x20001010
 8002e9c:	20000fe8 	.word	0x20000fe8
 8002ea0:	20001038 	.word	0x20001038
 8002ea4:	20001048 	.word	0x20001048
 8002ea8:	20001040 	.word	0x20001040
 8002eac:	20000fe4 	.word	0x20000fe4

08002eb0 <Trajectory_Eva>:

void Trajectory_Eva() {
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 8002eb6:	4ba3      	ldr	r3, [pc, #652]	; (8003144 <Trajectory_Eva+0x294>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	f000 8173 	beq.w	80031a6 <Trajectory_Eva+0x2f6>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	f300 835e 	bgt.w	8003582 <Trajectory_Eva+0x6d2>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 835a 	beq.w	8003580 <Trajectory_Eva+0x6d0>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d000      	beq.n	8002ed2 <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8002ed0:	e357      	b.n	8003582 <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 8002ed2:	4b9d      	ldr	r3, [pc, #628]	; (8003148 <Trajectory_Eva+0x298>)
 8002ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	; (800314c <Trajectory_Eva+0x29c>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd fdb3 	bl	8000a48 <__aeabi_dcmple>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8085 	beq.w	8002ff4 <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8002eea:	4b99      	ldr	r3, [pc, #612]	; (8003150 <Trajectory_Eva+0x2a0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fac4 	bl	800047c <__aeabi_i2d>
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	4b96      	ldr	r3, [pc, #600]	; (8003154 <Trajectory_Eva+0x2a4>)
 8002efa:	f7fd fb29 	bl	8000550 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4b94      	ldr	r3, [pc, #592]	; (8003158 <Trajectory_Eva+0x2a8>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd fb20 	bl	8000550 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
 8002f18:	4b90      	ldr	r3, [pc, #576]	; (800315c <Trajectory_Eva+0x2ac>)
 8002f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1e:	4b8f      	ldr	r3, [pc, #572]	; (800315c <Trajectory_Eva+0x2ac>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb14 	bl	8000550 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	f7fd fb0e 	bl	8000550 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <Trajectory_Eva+0x2b0>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd f94f 	bl	80001e4 <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
			x = x_initial
 8002f4a:	4986      	ldr	r1, [pc, #536]	; (8003164 <Trajectory_Eva+0x2b4>)
 8002f4c:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8002f50:	4b81      	ldr	r3, [pc, #516]	; (8003158 <Trajectory_Eva+0x2a8>)
 8002f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f56:	4b81      	ldr	r3, [pc, #516]	; (800315c <Trajectory_Eva+0x2ac>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd faf8 	bl	8000550 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <Trajectory_Eva+0x2a0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fa85 	bl	800047c <__aeabi_i2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4620      	mov	r0, r4
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7fd fae9 	bl	8000550 <__aeabi_dmul>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4979      	ldr	r1, [pc, #484]	; (8003168 <Trajectory_Eva+0x2b8>)
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8002f88:	4b71      	ldr	r3, [pc, #452]	; (8003150 <Trajectory_Eva+0x2a0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fa75 	bl	800047c <__aeabi_i2d>
 8002f92:	4b71      	ldr	r3, [pc, #452]	; (8003158 <Trajectory_Eva+0x2a8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fada 	bl	8000550 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4972      	ldr	r1, [pc, #456]	; (800316c <Trajectory_Eva+0x2bc>)
 8002fa2:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <Trajectory_Eva+0x2b4>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	4970      	ldr	r1, [pc, #448]	; (8003170 <Trajectory_Eva+0x2c0>)
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <Trajectory_Eva+0x2b8>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	496e      	ldr	r1, [pc, #440]	; (8003174 <Trajectory_Eva+0x2c4>)
 8002fba:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8002fbe:	4b67      	ldr	r3, [pc, #412]	; (800315c <Trajectory_Eva+0x2ac>)
 8002fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <Trajectory_Eva+0x2c8>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd f90b 	bl	80001e4 <__adddf3>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4962      	ldr	r1, [pc, #392]	; (800315c <Trajectory_Eva+0x2ac>)
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <Trajectory_Eva+0x298>)
 8002fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <Trajectory_Eva+0x2c8>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd f8fe 	bl	80001e4 <__adddf3>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4956      	ldr	r1, [pc, #344]	; (8003148 <Trajectory_Eva+0x298>)
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002ff2:	e2c6      	b.n	8003582 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 8002ff4:	4b54      	ldr	r3, [pc, #336]	; (8003148 <Trajectory_Eva+0x298>)
 8002ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ffa:	4b60      	ldr	r3, [pc, #384]	; (800317c <Trajectory_Eva+0x2cc>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fd22 	bl	8000a48 <__aeabi_dcmple>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80bc 	beq.w	8003184 <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <Trajectory_Eva+0x2c4>)
 800300e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003012:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <Trajectory_Eva+0x2d0>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f7fd fa9a 	bl	8000550 <__aeabi_dmul>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	4b52      	ldr	r3, [pc, #328]	; (8003170 <Trajectory_Eva+0x2c0>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd f8db 	bl	80001e4 <__adddf3>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4614      	mov	r4, r2
 8003034:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <Trajectory_Eva+0x2a0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa1e 	bl	800047c <__aeabi_i2d>
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <Trajectory_Eva+0x2a4>)
 8003046:	f7fd fa83 	bl	8000550 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <Trajectory_Eva+0x2a8>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd fa7a 	bl	8000550 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <Trajectory_Eva+0x2d0>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f7fd fa71 	bl	8000550 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	4b42      	ldr	r3, [pc, #264]	; (8003180 <Trajectory_Eva+0x2d0>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fa68 	bl	8000550 <__aeabi_dmul>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd f8aa 	bl	80001e0 <__aeabi_dsub>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8003090:	4934      	ldr	r1, [pc, #208]	; (8003164 <Trajectory_Eva+0x2b4>)
 8003092:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <Trajectory_Eva+0x2c4>)
 8003098:	e9d3 4500 	ldrd	r4, r5, [r3]
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <Trajectory_Eva+0x2a8>)
 800309e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <Trajectory_Eva+0x2d0>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f7fd fa52 	bl	8000550 <__aeabi_dmul>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4692      	mov	sl, r2
 80030b2:	469b      	mov	fp, r3
 80030b4:	4b26      	ldr	r3, [pc, #152]	; (8003150 <Trajectory_Eva+0x2a0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd f9df 	bl	800047c <__aeabi_i2d>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4650      	mov	r0, sl
 80030c4:	4659      	mov	r1, fp
 80030c6:	f7fd fa43 	bl	8000550 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd f885 	bl	80001e0 <__aeabi_dsub>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4923      	ldr	r1, [pc, #140]	; (8003168 <Trajectory_Eva+0x2b8>)
 80030dc:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <Trajectory_Eva+0x2a8>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	4690      	mov	r8, r2
 80030e8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <Trajectory_Eva+0x2a0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f9c3 	bl	800047c <__aeabi_i2d>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4640      	mov	r0, r8
 80030fc:	4649      	mov	r1, r9
 80030fe:	f7fd fa27 	bl	8000550 <__aeabi_dmul>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4919      	ldr	r1, [pc, #100]	; (800316c <Trajectory_Eva+0x2bc>)
 8003108:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <Trajectory_Eva+0x2d0>)
 800310e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <Trajectory_Eva+0x2c8>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd f864 	bl	80001e4 <__adddf3>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4917      	ldr	r1, [pc, #92]	; (8003180 <Trajectory_Eva+0x2d0>)
 8003122:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <Trajectory_Eva+0x298>)
 8003128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <Trajectory_Eva+0x2c8>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd f857 	bl	80001e4 <__adddf3>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4903      	ldr	r1, [pc, #12]	; (8003148 <Trajectory_Eva+0x298>)
 800313c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003140:	e21f      	b.n	8003582 <Trajectory_Eva+0x6d2>
 8003142:	bf00      	nop
 8003144:	20000fe4 	.word	0x20000fe4
 8003148:	20000260 	.word	0x20000260
 800314c:	20001048 	.word	0x20001048
 8003150:	20000fe8 	.word	0x20000fe8
 8003154:	3fe00000 	.word	0x3fe00000
 8003158:	20001008 	.word	0x20001008
 800315c:	20000248 	.word	0x20000248
 8003160:	20000ff0 	.word	0x20000ff0
 8003164:	20000908 	.word	0x20000908
 8003168:	20000910 	.word	0x20000910
 800316c:	20000918 	.word	0x20000918
 8003170:	20001018 	.word	0x20001018
 8003174:	20001028 	.word	0x20001028
 8003178:	20000268 	.word	0x20000268
 800317c:	20001040 	.word	0x20001040
 8003180:	20000250 	.word	0x20000250
			x = x_final;
 8003184:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <Trajectory_Eva+0x510>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	498e      	ldr	r1, [pc, #568]	; (80033c4 <Trajectory_Eva+0x514>)
 800318c:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8003190:	498d      	ldr	r1, [pc, #564]	; (80033c8 <Trajectory_Eva+0x518>)
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <Trajectory_Eva+0x51c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
		break;
 80031a4:	e1ed      	b.n	8003582 <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 80031a6:	4b8a      	ldr	r3, [pc, #552]	; (80033d0 <Trajectory_Eva+0x520>)
 80031a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ac:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <Trajectory_Eva+0x524>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fc49 	bl	8000a48 <__aeabi_dcmple>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8089 	beq.w	80032d0 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 80031be:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <Trajectory_Eva+0x528>)
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b84      	ldr	r3, [pc, #528]	; (80033dc <Trajectory_Eva+0x52c>)
 80031ca:	f7fd f9c1 	bl	8000550 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	461d      	mov	r5, r3
 80031d6:	4b82      	ldr	r3, [pc, #520]	; (80033e0 <Trajectory_Eva+0x530>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f94e 	bl	800047c <__aeabi_i2d>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4620      	mov	r0, r4
 80031e6:	4629      	mov	r1, r5
 80031e8:	f7fd f9b2 	bl	8000550 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <Trajectory_Eva+0x534>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd f9a9 	bl	8000550 <__aeabi_dmul>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <Trajectory_Eva+0x534>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f7fd f9a0 	bl	8000550 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <Trajectory_Eva+0x538>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fc ffe1 	bl	80001e4 <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4967      	ldr	r1, [pc, #412]	; (80033c4 <Trajectory_Eva+0x514>)
 8003228:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <Trajectory_Eva+0x528>)
 800322e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <Trajectory_Eva+0x534>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd f98a 	bl	8000550 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <Trajectory_Eva+0x530>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f917 	bl	800047c <__aeabi_i2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd f97b 	bl	8000550 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	495a      	ldr	r1, [pc, #360]	; (80033c8 <Trajectory_Eva+0x518>)
 8003260:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <Trajectory_Eva+0x530>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f907 	bl	800047c <__aeabi_i2d>
 800326e:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <Trajectory_Eva+0x528>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f96c 	bl	8000550 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	495b      	ldr	r1, [pc, #364]	; (80033ec <Trajectory_Eva+0x53c>)
 800327e:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <Trajectory_Eva+0x514>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	4959      	ldr	r1, [pc, #356]	; (80033f0 <Trajectory_Eva+0x540>)
 800328a:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 800328e:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <Trajectory_Eva+0x518>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	4957      	ldr	r1, [pc, #348]	; (80033f4 <Trajectory_Eva+0x544>)
 8003296:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 800329a:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <Trajectory_Eva+0x534>)
 800329c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a0:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <Trajectory_Eva+0x548>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fc ff9d 	bl	80001e4 <__adddf3>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	494d      	ldr	r1, [pc, #308]	; (80033e4 <Trajectory_Eva+0x534>)
 80032b0:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <Trajectory_Eva+0x520>)
 80032b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ba:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <Trajectory_Eva+0x548>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fc ff90 	bl	80001e4 <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4941      	ldr	r1, [pc, #260]	; (80033d0 <Trajectory_Eva+0x520>)
 80032ca:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80032ce:	e158      	b.n	8003582 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <Trajectory_Eva+0x54c>)
 80032d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <Trajectory_Eva+0x524>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fc ff80 	bl	80001e0 <__aeabi_dsub>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <Trajectory_Eva+0x520>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd fbb5 	bl	8000a5c <__aeabi_dcmpge>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 808b 	beq.w	8003410 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <Trajectory_Eva+0x550>)
 80032fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <Trajectory_Eva+0x554>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f7fd f923 	bl	8000550 <__aeabi_dmul>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4614      	mov	r4, r2
 8003310:	461d      	mov	r5, r3
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <Trajectory_Eva+0x530>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f8b0 	bl	800047c <__aeabi_i2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fd f914 	bl	8000550 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <Trajectory_Eva+0x540>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fc ff55 	bl	80001e4 <__adddf3>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <Trajectory_Eva+0x514>)
 8003340:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <Trajectory_Eva+0x530>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f897 	bl	800047c <__aeabi_i2d>
 800334e:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <Trajectory_Eva+0x550>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd f8fc 	bl	8000550 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	491a      	ldr	r1, [pc, #104]	; (80033c8 <Trajectory_Eva+0x518>)
 800335e:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 8003362:	4922      	ldr	r1, [pc, #136]	; (80033ec <Trajectory_Eva+0x53c>)
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <Trajectory_Eva+0x514>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	4924      	ldr	r1, [pc, #144]	; (8003408 <Trajectory_Eva+0x558>)
 8003378:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <Trajectory_Eva+0x518>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	4922      	ldr	r1, [pc, #136]	; (800340c <Trajectory_Eva+0x55c>)
 8003384:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <Trajectory_Eva+0x554>)
 800338a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <Trajectory_Eva+0x548>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fc ff26 	bl	80001e4 <__adddf3>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4919      	ldr	r1, [pc, #100]	; (8003404 <Trajectory_Eva+0x554>)
 800339e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <Trajectory_Eva+0x520>)
 80033a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <Trajectory_Eva+0x548>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fc ff19 	bl	80001e4 <__adddf3>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4906      	ldr	r1, [pc, #24]	; (80033d0 <Trajectory_Eva+0x520>)
 80033b8:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80033bc:	e0e1      	b.n	8003582 <Trajectory_Eva+0x6d2>
 80033be:	bf00      	nop
 80033c0:	20000ff8 	.word	0x20000ff8
 80033c4:	20000908 	.word	0x20000908
 80033c8:	20000910 	.word	0x20000910
 80033cc:	20000fe4 	.word	0x20000fe4
 80033d0:	20000260 	.word	0x20000260
 80033d4:	20001038 	.word	0x20001038
 80033d8:	20001008 	.word	0x20001008
 80033dc:	3fe00000 	.word	0x3fe00000
 80033e0:	20000fe8 	.word	0x20000fe8
 80033e4:	20000248 	.word	0x20000248
 80033e8:	20000ff0 	.word	0x20000ff0
 80033ec:	20000918 	.word	0x20000918
 80033f0:	20001018 	.word	0x20001018
 80033f4:	20001028 	.word	0x20001028
 80033f8:	20000268 	.word	0x20000268
 80033fc:	20001040 	.word	0x20001040
 8003400:	20001000 	.word	0x20001000
 8003404:	20000258 	.word	0x20000258
 8003408:	20001020 	.word	0x20001020
 800340c:	20001030 	.word	0x20001030
		} else if (t_count <= t_final) {
 8003410:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <Trajectory_Eva+0x6d8>)
 8003412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <Trajectory_Eva+0x6dc>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd fb14 	bl	8000a48 <__aeabi_dcmple>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 809b 	beq.w	800355e <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 8003428:	4b59      	ldr	r3, [pc, #356]	; (8003590 <Trajectory_Eva+0x6e0>)
 800342a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342e:	4b59      	ldr	r3, [pc, #356]	; (8003594 <Trajectory_Eva+0x6e4>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd f88c 	bl	8000550 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	4b55      	ldr	r3, [pc, #340]	; (8003598 <Trajectory_Eva+0x6e8>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fc fecd 	bl	80001e4 <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4690      	mov	r8, r2
 8003450:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 8003452:	4b52      	ldr	r3, [pc, #328]	; (800359c <Trajectory_Eva+0x6ec>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f810 	bl	800047c <__aeabi_i2d>
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <Trajectory_Eva+0x6f0>)
 8003462:	f7fd f875 	bl	8000550 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <Trajectory_Eva+0x6f4>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f86c 	bl	8000550 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4692      	mov	sl, r2
 800347e:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8003480:	4b44      	ldr	r3, [pc, #272]	; (8003594 <Trajectory_Eva+0x6e4>)
 8003482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <Trajectory_Eva+0x6e4>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f860 	bl	8000550 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4650      	mov	r0, sl
 8003496:	4659      	mov	r1, fp
 8003498:	f7fd f85a 	bl	8000550 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 80034a0:	4640      	mov	r0, r8
 80034a2:	4649      	mov	r1, r9
 80034a4:	f7fc fe9c 	bl	80001e0 <__aeabi_dsub>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
			x =
 80034ac:	493e      	ldr	r1, [pc, #248]	; (80035a8 <Trajectory_Eva+0x6f8>)
 80034ae:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 80034b2:	4b37      	ldr	r3, [pc, #220]	; (8003590 <Trajectory_Eva+0x6e0>)
 80034b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034b8:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <Trajectory_Eva+0x6f4>)
 80034ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034be:	4b35      	ldr	r3, [pc, #212]	; (8003594 <Trajectory_Eva+0x6e4>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f844 	bl	8000550 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4692      	mov	sl, r2
 80034ce:	469b      	mov	fp, r3
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <Trajectory_Eva+0x6ec>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fc ffd1 	bl	800047c <__aeabi_i2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4650      	mov	r0, sl
 80034e0:	4659      	mov	r1, fp
 80034e2:	f7fd f835 	bl	8000550 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4640      	mov	r0, r8
 80034ec:	4649      	mov	r1, r9
 80034ee:	f7fc fe77 	bl	80001e0 <__aeabi_dsub>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	492d      	ldr	r1, [pc, #180]	; (80035ac <Trajectory_Eva+0x6fc>)
 80034f8:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <Trajectory_Eva+0x6f4>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	4614      	mov	r4, r2
 8003504:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <Trajectory_Eva+0x6ec>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fc ffb5 	bl	800047c <__aeabi_i2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4620      	mov	r0, r4
 8003518:	4629      	mov	r1, r5
 800351a:	f7fd f819 	bl	8000550 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4923      	ldr	r1, [pc, #140]	; (80035b0 <Trajectory_Eva+0x700>)
 8003524:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <Trajectory_Eva+0x6e4>)
 800352a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <Trajectory_Eva+0x704>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fc fe56 	bl	80001e4 <__adddf3>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4915      	ldr	r1, [pc, #84]	; (8003594 <Trajectory_Eva+0x6e4>)
 800353e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <Trajectory_Eva+0x6d8>)
 8003544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <Trajectory_Eva+0x704>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fc fe49 	bl	80001e4 <__adddf3>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	490c      	ldr	r1, [pc, #48]	; (8003588 <Trajectory_Eva+0x6d8>)
 8003558:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800355c:	e011      	b.n	8003582 <Trajectory_Eva+0x6d2>
			x = x_final;
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <Trajectory_Eva+0x708>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	4910      	ldr	r1, [pc, #64]	; (80035a8 <Trajectory_Eva+0x6f8>)
 8003566:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <Trajectory_Eva+0x6fc>)
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <Trajectory_Eva+0x70c>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
		break;
 800357e:	e000      	b.n	8003582 <Trajectory_Eva+0x6d2>
		break;
 8003580:	bf00      	nop
}
 8003582:	bf00      	nop
 8003584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003588:	20000260 	.word	0x20000260
 800358c:	20001040 	.word	0x20001040
 8003590:	20001030 	.word	0x20001030
 8003594:	20000250 	.word	0x20000250
 8003598:	20001020 	.word	0x20001020
 800359c:	20000fe8 	.word	0x20000fe8
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	20001008 	.word	0x20001008
 80035a8:	20000908 	.word	0x20000908
 80035ac:	20000910 	.word	0x20000910
 80035b0:	20000918 	.word	0x20000918
 80035b4:	20000268 	.word	0x20000268
 80035b8:	20000ff8 	.word	0x20000ff8
 80035bc:	20000fe4 	.word	0x20000fe4

080035c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_MspInit+0x4c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_MspInit+0x4c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035fe:	2007      	movs	r0, #7
 8003600:	f000 fc84 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_I2C_MspInit+0xa8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d13d      	bne.n	80036ae <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_I2C_MspInit+0xac>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a20      	ldr	r2, [pc, #128]	; (80036bc <HAL_I2C_MspInit+0xac>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_I2C_MspInit+0xac>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800364e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003654:	2312      	movs	r3, #18
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003660:	2304      	movs	r3, #4
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4619      	mov	r1, r3
 800366a:	4815      	ldr	r0, [pc, #84]	; (80036c0 <HAL_I2C_MspInit+0xb0>)
 800366c:	f001 f89e 	bl	80047ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003676:	2312      	movs	r3, #18
 8003678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800367a:	2301      	movs	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367e:	2303      	movs	r3, #3
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003682:	2309      	movs	r3, #9
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	480c      	ldr	r0, [pc, #48]	; (80036c0 <HAL_I2C_MspInit+0xb0>)
 800368e:	f001 f88d 	bl	80047ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_I2C_MspInit+0xac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <HAL_I2C_MspInit+0xac>)
 800369c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_I2C_MspInit+0xac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40005800 	.word	0x40005800
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020400 	.word	0x40020400

080036c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_SPI_MspInit+0x84>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12c      	bne.n	8003740 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <HAL_SPI_MspInit+0x88>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_SPI_MspInit+0x88>)
 80036f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_SPI_MspInit+0x88>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_SPI_MspInit+0x88>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_SPI_MspInit+0x88>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_SPI_MspInit+0x88>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800371e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003730:	2306      	movs	r3, #6
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4619      	mov	r1, r3
 800373a:	4805      	ldr	r0, [pc, #20]	; (8003750 <HAL_SPI_MspInit+0x8c>)
 800373c:	f001 f836 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003740:	bf00      	nop
 8003742:	3728      	adds	r7, #40	; 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40003c00 	.word	0x40003c00
 800374c:	40023800 	.word	0x40023800
 8003750:	40020800 	.word	0x40020800

08003754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_TIM_Base_MspInit+0xf0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d116      	bne.n	8003794 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a36      	ldr	r2, [pc, #216]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	201a      	movs	r0, #26
 8003788:	f000 fbcb 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800378c:	201a      	movs	r0, #26
 800378e:	f000 fbe4 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003792:	e052      	b.n	800383a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2c      	ldr	r2, [pc, #176]	; (800384c <HAL_TIM_Base_MspInit+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d116      	bne.n	80037cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	201d      	movs	r0, #29
 80037c0:	f000 fbaf 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037c4:	201d      	movs	r0, #29
 80037c6:	f000 fbc8 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 80037ca:	e036      	b.n	800383a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_TIM_Base_MspInit+0xfc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d116      	bne.n	8003804 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	2032      	movs	r0, #50	; 0x32
 80037f8:	f000 fb93 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037fc:	2032      	movs	r0, #50	; 0x32
 80037fe:	f000 fbac 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 8003802:	e01a      	b.n	800383a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_TIM_Base_MspInit+0x100>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d115      	bne.n	800383a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_TIM_Base_MspInit+0xf4>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	201a      	movs	r0, #26
 8003830:	f000 fb77 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003834:	201a      	movs	r0, #26
 8003836:	f000 fb90 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40023800 	.word	0x40023800
 800384c:	40000400 	.word	0x40000400
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014800 	.word	0x40014800

08003858 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d12b      	bne.n	80038d2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a0f      	ldr	r2, [pc, #60]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_TIM_Encoder_MspInit+0x84>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038b2:	2303      	movs	r3, #3
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038c2:	2301      	movs	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	4619      	mov	r1, r3
 80038cc:	4804      	ldr	r0, [pc, #16]	; (80038e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80038ce:	f000 ff6d 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40020000 	.word	0x40020000

080038e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a12      	ldr	r2, [pc, #72]	; (800394c <HAL_TIM_MspPostInit+0x68>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d11e      	bne.n	8003944 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_TIM_MspPostInit+0x6c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <HAL_TIM_MspPostInit+0x6c>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_TIM_MspPostInit+0x6c>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003934:	2301      	movs	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4619      	mov	r1, r3
 800393e:	4805      	ldr	r0, [pc, #20]	; (8003954 <HAL_TIM_MspPostInit+0x70>)
 8003940:	f000 ff34 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010000 	.word	0x40010000
 8003950:	40023800 	.word	0x40023800
 8003954:	40020000 	.word	0x40020000

08003958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <HAL_UART_MspInit+0x154>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d162      	bne.n	8003a40 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a4b      	ldr	r2, [pc, #300]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039b2:	230c      	movs	r3, #12
 80039b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039be:	2303      	movs	r3, #3
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039c2:	2307      	movs	r3, #7
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	4619      	mov	r1, r3
 80039cc:	4839      	ldr	r0, [pc, #228]	; (8003ab4 <HAL_UART_MspInit+0x15c>)
 80039ce:	f000 feed 	bl	80047ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039d4:	4a39      	ldr	r2, [pc, #228]	; (8003abc <HAL_UART_MspInit+0x164>)
 80039d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80039d8:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039e6:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a12:	4829      	ldr	r0, [pc, #164]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a14:	f000 fabc 	bl	8003f90 <HAL_DMA_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003a1e:	f7fe fead 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <HAL_UART_MspInit+0x160>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	2026      	movs	r0, #38	; 0x26
 8003a34:	f000 fa75 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a38:	2026      	movs	r0, #38	; 0x26
 8003a3a:	f000 fa8e 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a3e:	e031      	b.n	8003aa4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <HAL_UART_MspInit+0x168>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d12c      	bne.n	8003aa4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_UART_MspInit+0x158>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a90:	2303      	movs	r3, #3
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a94:	2308      	movs	r3, #8
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4805      	ldr	r0, [pc, #20]	; (8003ab4 <HAL_UART_MspInit+0x15c>)
 8003aa0:	f000 fe84 	bl	80047ac <HAL_GPIO_Init>
}
 8003aa4:	bf00      	nop
 8003aa6:	3730      	adds	r7, #48	; 0x30
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	2000089c 	.word	0x2000089c
 8003abc:	400260a0 	.word	0x400260a0
 8003ac0:	40011400 	.word	0x40011400

08003ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <NMI_Handler+0x4>

08003aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <HardFault_Handler+0x4>

08003ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <MemManage_Handler+0x4>

08003ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <BusFault_Handler+0x4>

08003adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <UsageFault_Handler+0x4>

08003ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b10:	f000 f8e8 	bl	8003ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8003b1c:	2004      	movs	r0, #4
 8003b1e:	f000 fffb 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003b2a:	2008      	movs	r0, #8
 8003b2c:	f000 fff4 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA1_Stream6_IRQHandler+0x10>)
 8003b3a:	f000 fbc1 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2000089c 	.word	0x2000089c

08003b48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8003b4c:	2040      	movs	r0, #64	; 0x40
 8003b4e:	f000 ffe3 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8003b52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b56:	f000 ffdf 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003b66:	f003 fbb7 	bl	80072d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003b6c:	f003 fbb4 	bl	80072d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000430 	.word	0x20000430
 8003b78:	20000700 	.word	0x20000700

08003b7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <TIM3_IRQHandler+0x10>)
 8003b82:	f003 fba9 	bl	80072d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000598 	.word	0x20000598

08003b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <USART2_IRQHandler+0x10>)
 8003b96:	f004 fea7 	bl	80088e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200007b4 	.word	0x200007b4

08003ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003bac:	f000 ffb4 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <TIM5_IRQHandler+0x10>)
 8003bba:	f003 fb8d 	bl	80072d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000064c 	.word	0x2000064c

08003bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <SystemInit+0x20>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <SystemInit+0x20>)
 8003bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c08:	4c0b      	ldr	r4, [pc, #44]	; (8003c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c16:	f7ff ffd7 	bl	8003bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f005 feb1 	bl	8009980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fd fef7 	bl	8001a10 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c2c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003c30:	08009bf8 	.word	0x08009bf8
  ldr r2, =_sbss
 8003c34:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8003c38:	20001054 	.word	0x20001054

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 f94f 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 f808 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7ff fca4 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x54>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x58>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f967 	bl	8003f76 <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00e      	b.n	8003cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d80a      	bhi.n	8003cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f000 f92f 	bl	8003f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <HAL_InitTick+0x5c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200002cc 	.word	0x200002cc
 8003cdc:	200002d4 	.word	0x200002d4
 8003ce0:	200002d0 	.word	0x200002d0

08003ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	200002d4 	.word	0x200002d4
 8003d08:	20001050 	.word	0x20001050

08003d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_GetTick+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20001050 	.word	0x20001050

08003d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff ffee 	bl	8003d0c <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d005      	beq.n	8003d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_Delay+0x44>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d4a:	bf00      	nop
 8003d4c:	f7ff ffde 	bl	8003d0c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d8f7      	bhi.n	8003d4c <HAL_Delay+0x28>
  {
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200002d4 	.word	0x200002d4

08003d6c <__NVIC_SetPriorityGrouping>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d301      	bcc.n	8003ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <SysTick_Config+0x40>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ff8e 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <SysTick_Config+0x40>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <SysTick_Config+0x40>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e010 	.word	0xe000e010

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff29 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff3e 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff8e 	bl	8003e60 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5d 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff31 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffa2 	bl	8003ec8 <SysTick_Config>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f9c:	f7ff feb6 	bl	8003d0c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e099      	b.n	80040e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fcc:	e00f      	b.n	8003fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fce:	f7ff fe9d 	bl	8003d0c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d908      	bls.n	8003fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e078      	b.n	80040e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e8      	bne.n	8003fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_DMA_Init+0x158>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4313      	orrs	r3, r2
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b04      	cmp	r3, #4
 8004080:	d117      	bne.n	80040b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb0d 	bl	80046b4 <DMA_CheckFifoParam>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ae:	2301      	movs	r3, #1
 80040b0:	e016      	b.n	80040e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fac4 	bl	8004648 <DMA_CalcBaseAndBitshift>
 80040c0:	4603      	mov	r3, r0
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	223f      	movs	r2, #63	; 0x3f
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f010803f 	.word	0xf010803f

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Start_IT+0x26>
 800410e:	2302      	movs	r3, #2
 8004110:	e040      	b.n	8004194 <HAL_DMA_Start_IT+0xa8>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d12f      	bne.n	8004186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa56 	bl	80045ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	223f      	movs	r2, #63	; 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0216 	orr.w	r2, r2, #22
 800415a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7ff fdaf 	bl	8003d0c <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e052      	b.n	8004274 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_Abort+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421e:	e013      	b.n	8004248 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004220:	f7ff fd74 	bl	8003d0c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b05      	cmp	r3, #5
 800422c:	d90c      	bls.n	8004248 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e015      	b.n	8004274 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e4      	bne.n	8004220 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	223f      	movs	r2, #63	; 0x3f
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00c      	b.n	80042b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2205      	movs	r2, #5
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042cc:	4b8e      	ldr	r3, [pc, #568]	; (8004508 <HAL_DMA_IRQHandler+0x248>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a8e      	ldr	r2, [pc, #568]	; (800450c <HAL_DMA_IRQHandler+0x24c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2208      	movs	r2, #8
 80042ec:	409a      	lsls	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2208      	movs	r2, #8
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2201      	movs	r2, #1
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0202 	orr.w	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	2204      	movs	r2, #4
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	2204      	movs	r2, #4
 8004386:	409a      	lsls	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2210      	movs	r2, #16
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d043      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03c      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	2210      	movs	r2, #16
 80043bc:	409a      	lsls	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d024      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e01f      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e016      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0208 	bic.w	r2, r2, #8
 800441e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	2220      	movs	r2, #32
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 808f 	beq.w	8004560 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8087 	beq.w	8004560 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2220      	movs	r2, #32
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b05      	cmp	r3, #5
 8004468:	d136      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0216 	bic.w	r2, r2, #22
 8004478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_DMA_IRQHandler+0x1da>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0208 	bic.w	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	223f      	movs	r2, #63	; 0x3f
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d07e      	beq.n	80045cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
        }
        return;
 80044d6:	e079      	b.n	80045cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e02c      	b.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
 8004506:	bf00      	nop
 8004508:	200002cc 	.word	0x200002cc
 800450c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d023      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e01e      	b.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0210 	bic.w	r2, r2, #16
 800453e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d032      	beq.n	80045ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d022      	beq.n	80045ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2205      	movs	r2, #5
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	3301      	adds	r3, #1
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d307      	bcc.n	80045a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f2      	bne.n	800458c <HAL_DMA_IRQHandler+0x2cc>
 80045a6:	e000      	b.n	80045aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
 80045ca:	e000      	b.n	80045ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80045cc:	bf00      	nop
    }
  }
}
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d108      	bne.n	800462c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800462a:	e007      	b.n	800463c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3b10      	subs	r3, #16
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <DMA_CalcBaseAndBitshift+0x64>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d909      	bls.n	800468a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	1d1a      	adds	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	; 0x58
 8004688:	e007      	b.n	800469a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	aaaaaaab 	.word	0xaaaaaaab
 80046b0:	08009be0 	.word	0x08009be0

080046b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11f      	bne.n	800470e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d856      	bhi.n	8004782 <DMA_CheckFifoParam+0xce>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <DMA_CheckFifoParam+0x28>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046ff 	.word	0x080046ff
 80046e4:	080046ed 	.word	0x080046ed
 80046e8:	08004783 	.word	0x08004783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d046      	beq.n	8004786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fc:	e043      	b.n	8004786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004706:	d140      	bne.n	800478a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e03d      	b.n	800478a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d121      	bne.n	800475c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d837      	bhi.n	800478e <DMA_CheckFifoParam+0xda>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <DMA_CheckFifoParam+0x70>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004735 	.word	0x08004735
 8004728:	0800473b 	.word	0x0800473b
 800472c:	08004735 	.word	0x08004735
 8004730:	0800474d 	.word	0x0800474d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      break;
 8004738:	e030      	b.n	800479c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d025      	beq.n	8004792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e022      	b.n	8004792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004754:	d11f      	bne.n	8004796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800475a:	e01c      	b.n	8004796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d903      	bls.n	800476a <DMA_CheckFifoParam+0xb6>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d003      	beq.n	8004770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004768:	e018      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      break;
 800476e:	e015      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e00b      	b.n	800479a <DMA_CheckFifoParam+0xe6>
      break;
 8004782:	bf00      	nop
 8004784:	e00a      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 8004786:	bf00      	nop
 8004788:	e008      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800478a:	bf00      	nop
 800478c:	e006      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
 8004790:	e004      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e002      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;   
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
    }
  } 
  
  return status; 
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e159      	b.n	8004a7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c8:	2201      	movs	r2, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f040 8148 	bne.w	8004a76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d005      	beq.n	80047fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d130      	bne.n	8004860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004834:	2201      	movs	r2, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0201 	and.w	r2, r3, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d017      	beq.n	800489c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d123      	bne.n	80048f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3208      	adds	r2, #8
 80048b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	220f      	movs	r2, #15
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	08da      	lsrs	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3208      	adds	r2, #8
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80a2 	beq.w	8004a76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b57      	ldr	r3, [pc, #348]	; (8004a94 <HAL_GPIO_Init+0x2e8>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <HAL_GPIO_Init+0x2e8>)
 800493c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b54      	ldr	r3, [pc, #336]	; (8004a94 <HAL_GPIO_Init+0x2e8>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494e:	4a52      	ldr	r2, [pc, #328]	; (8004a98 <HAL_GPIO_Init+0x2ec>)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3302      	adds	r3, #2
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a49      	ldr	r2, [pc, #292]	; (8004a9c <HAL_GPIO_Init+0x2f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d019      	beq.n	80049ae <HAL_GPIO_Init+0x202>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a48      	ldr	r2, [pc, #288]	; (8004aa0 <HAL_GPIO_Init+0x2f4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_GPIO_Init+0x1fe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a47      	ldr	r2, [pc, #284]	; (8004aa4 <HAL_GPIO_Init+0x2f8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00d      	beq.n	80049a6 <HAL_GPIO_Init+0x1fa>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a46      	ldr	r2, [pc, #280]	; (8004aa8 <HAL_GPIO_Init+0x2fc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_Init+0x1f6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a45      	ldr	r2, [pc, #276]	; (8004aac <HAL_GPIO_Init+0x300>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_GPIO_Init+0x1f2>
 800499a:	2304      	movs	r3, #4
 800499c:	e008      	b.n	80049b0 <HAL_GPIO_Init+0x204>
 800499e:	2307      	movs	r3, #7
 80049a0:	e006      	b.n	80049b0 <HAL_GPIO_Init+0x204>
 80049a2:	2303      	movs	r3, #3
 80049a4:	e004      	b.n	80049b0 <HAL_GPIO_Init+0x204>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e002      	b.n	80049b0 <HAL_GPIO_Init+0x204>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_GPIO_Init+0x204>
 80049ae:	2300      	movs	r3, #0
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	f002 0203 	and.w	r2, r2, #3
 80049b6:	0092      	lsls	r2, r2, #2
 80049b8:	4093      	lsls	r3, r2
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049c0:	4935      	ldr	r1, [pc, #212]	; (8004a98 <HAL_GPIO_Init+0x2ec>)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	3302      	adds	r3, #2
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ce:	4b38      	ldr	r3, [pc, #224]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049f2:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f8:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a1c:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a22:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a70:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <HAL_GPIO_Init+0x304>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	f67f aea2 	bls.w	80047c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	3724      	adds	r7, #36	; 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40013800 	.word	0x40013800
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	40020800 	.word	0x40020800
 8004aa8:	40020c00 	.word	0x40020c00
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40013c00 	.word	0x40013c00

08004ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e001      	b.n	8004ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af4:	787b      	ldrb	r3, [r7, #1]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b00:	e003      	b.n	8004b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	041a      	lsls	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fdae 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e12b      	b.n	8004db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fd4e 	bl	8003610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bac:	f001 fbd2 	bl	8006354 <HAL_RCC_GetPCLK1Freq>
 8004bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4a81      	ldr	r2, [pc, #516]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d807      	bhi.n	8004bcc <HAL_I2C_Init+0x84>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a80      	ldr	r2, [pc, #512]	; (8004dc0 <HAL_I2C_Init+0x278>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bf94      	ite	ls
 8004bc4:	2301      	movls	r3, #1
 8004bc6:	2300      	movhi	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e006      	b.n	8004bda <HAL_I2C_Init+0x92>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a7d      	ldr	r2, [pc, #500]	; (8004dc4 <HAL_I2C_Init+0x27c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bf94      	ite	ls
 8004bd4:	2301      	movls	r3, #1
 8004bd6:	2300      	movhi	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0e7      	b.n	8004db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a78      	ldr	r2, [pc, #480]	; (8004dc8 <HAL_I2C_Init+0x280>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	0c9b      	lsrs	r3, r3, #18
 8004bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a6a      	ldr	r2, [pc, #424]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d802      	bhi.n	8004c1c <HAL_I2C_Init+0xd4>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	e009      	b.n	8004c30 <HAL_I2C_Init+0xe8>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4a69      	ldr	r2, [pc, #420]	; (8004dcc <HAL_I2C_Init+0x284>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	3301      	adds	r3, #1
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	495c      	ldr	r1, [pc, #368]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	d819      	bhi.n	8004c84 <HAL_I2C_Init+0x13c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1e59      	subs	r1, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c64:	400b      	ands	r3, r1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_I2C_Init+0x138>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e59      	subs	r1, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7e:	e051      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004c80:	2304      	movs	r3, #4
 8004c82:	e04f      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_I2C_Init+0x168>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	440b      	add	r3, r1
 8004c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e012      	b.n	8004cd6 <HAL_I2C_Init+0x18e>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	0099      	lsls	r1, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Init+0x196>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e022      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <HAL_I2C_Init+0x1bc>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1e58      	subs	r0, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d02:	e00f      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1e58      	subs	r0, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	0099      	lsls	r1, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6809      	ldr	r1, [r1, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6911      	ldr	r1, [r2, #16]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	000186a0 	.word	0x000186a0
 8004dc0:	001e847f 	.word	0x001e847f
 8004dc4:	003d08ff 	.word	0x003d08ff
 8004dc8:	431bde83 	.word	0x431bde83
 8004dcc:	10624dd3 	.word	0x10624dd3

08004dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
 8004de0:	4613      	mov	r3, r2
 8004de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7fe ff92 	bl	8003d0c <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80e0 	bne.w	8004fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2319      	movs	r3, #25
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4970      	ldr	r1, [pc, #448]	; (8004fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fc58 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0d3      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2C_Master_Transmit+0x50>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0cc      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d007      	beq.n	8004e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2221      	movs	r2, #33	; 0x21
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	893a      	ldrh	r2, [r7, #8]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fac2 	bl	8005418 <I2C_MasterRequestWrite>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e08d      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004eb4:	e066      	b.n	8004f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	6a39      	ldr	r1, [r7, #32]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fcd2 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d107      	bne.n	8004ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e06b      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_I2C_Master_Transmit+0x188>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d017      	beq.n	8004f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6a39      	ldr	r1, [r7, #32]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fcc2 	bl	80058e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d107      	bne.n	8004f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e01a      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d194      	bne.n	8004eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	00100002 	.word	0x00100002
 8004fc8:	ffff0000 	.word	0xffff0000

08004fcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	; 0x30
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	460b      	mov	r3, r1
 8004fda:	817b      	strh	r3, [r7, #10]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fe0:	f7fe fe94 	bl	8003d0c <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	f040 820b 	bne.w	800540a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2319      	movs	r3, #25
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	497c      	ldr	r1, [pc, #496]	; (80051f0 <HAL_I2C_Master_Receive+0x224>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fb5a 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
 800500c:	e1fe      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_I2C_Master_Receive+0x50>
 8005018:	2302      	movs	r3, #2
 800501a:	e1f7      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d007      	beq.n	8005042 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2222      	movs	r2, #34	; 0x22
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2210      	movs	r2, #16
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	893a      	ldrh	r2, [r7, #8]
 8005072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a5c      	ldr	r2, [pc, #368]	; (80051f4 <HAL_I2C_Master_Receive+0x228>)
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005084:	8979      	ldrh	r1, [r7, #10]
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa46 	bl	800551c <I2C_MasterRequestRead>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e1b8      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d113      	bne.n	80050ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a2:	2300      	movs	r3, #0
 80050a4:	623b      	str	r3, [r7, #32]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e18c      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d11b      	bne.n	800510a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e16c      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	2b02      	cmp	r3, #2
 8005110:	d11b      	bne.n	800514a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005120:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	e14c      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005170:	e138      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	2b03      	cmp	r3, #3
 8005178:	f200 80f1 	bhi.w	800535e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	2b01      	cmp	r3, #1
 8005182:	d123      	bne.n	80051cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fbed 	bl	8005968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e139      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ca:	e10b      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d14e      	bne.n	8005272 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	4906      	ldr	r1, [pc, #24]	; (80051f8 <HAL_I2C_Master_Receive+0x22c>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fa6a 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e10e      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
 80051ee:	bf00      	nop
 80051f0:	00100002 	.word	0x00100002
 80051f4:	ffff0000 	.word	0xffff0000
 80051f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005270:	e0b8      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2200      	movs	r2, #0
 800527a:	4966      	ldr	r1, [pc, #408]	; (8005414 <HAL_I2C_Master_Receive+0x448>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fa1b 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0bf      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2200      	movs	r2, #0
 80052d6:	494f      	ldr	r1, [pc, #316]	; (8005414 <HAL_I2C_Master_Receive+0x448>)
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f9ed 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e091      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800535c:	e042      	b.n	80053e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fb00 	bl	8005968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e04c      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d118      	bne.n	80053e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f47f aec2 	bne.w	8005172 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	e000      	b.n	800540c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800540a:	2302      	movs	r3, #2
  }
}
 800540c:	4618      	mov	r0, r3
 800540e:	3728      	adds	r7, #40	; 0x28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	00010004 	.word	0x00010004

08005418 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	460b      	mov	r3, r1
 8005426:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d006      	beq.n	8005442 <I2C_MasterRequestWrite+0x2a>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d003      	beq.n	8005442 <I2C_MasterRequestWrite+0x2a>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005440:	d108      	bne.n	8005454 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e00b      	b.n	800546c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	2b12      	cmp	r3, #18
 800545a:	d107      	bne.n	800546c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f91d 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d103      	bne.n	800549c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e035      	b.n	800550c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a8:	d108      	bne.n	80054bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054b8:	611a      	str	r2, [r3, #16]
 80054ba:	e01b      	b.n	80054f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	11db      	asrs	r3, r3, #7
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0306 	and.w	r3, r3, #6
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f063 030f 	orn	r3, r3, #15
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <I2C_MasterRequestWrite+0xfc>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f943 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e010      	b.n	800550c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4907      	ldr	r1, [pc, #28]	; (8005518 <I2C_MasterRequestWrite+0x100>)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f933 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	00010008 	.word	0x00010008
 8005518:	00010002 	.word	0x00010002

0800551c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	460b      	mov	r3, r1
 800552a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005540:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d006      	beq.n	8005556 <I2C_MasterRequestRead+0x3a>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d003      	beq.n	8005556 <I2C_MasterRequestRead+0x3a>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005554:	d108      	bne.n	8005568 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e00b      	b.n	8005580 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	2b11      	cmp	r3, #17
 800556e:	d107      	bne.n	8005580 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f893 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00d      	beq.n	80055b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d103      	bne.n	80055b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e079      	b.n	80056a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055bc:	d108      	bne.n	80055d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	e05f      	b.n	8005690 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055d0:	897b      	ldrh	r3, [r7, #10]
 80055d2:	11db      	asrs	r3, r3, #7
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0306 	and.w	r3, r3, #6
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f063 030f 	orn	r3, r3, #15
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4930      	ldr	r1, [pc, #192]	; (80056b0 <I2C_MasterRequestRead+0x194>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f8b9 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e054      	b.n	80056a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055fe:	897b      	ldrh	r3, [r7, #10]
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4929      	ldr	r1, [pc, #164]	; (80056b4 <I2C_MasterRequestRead+0x198>)
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f8a9 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e044      	b.n	80056a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005642:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f831 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00d      	beq.n	8005678 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800566a:	d103      	bne.n	8005674 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005672:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e017      	b.n	80056a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	11db      	asrs	r3, r3, #7
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0306 	and.w	r3, r3, #6
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f063 030e 	orn	r3, r3, #14
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4907      	ldr	r1, [pc, #28]	; (80056b4 <I2C_MasterRequestRead+0x198>)
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f865 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	00010008 	.word	0x00010008
 80056b4:	00010002 	.word	0x00010002

080056b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c8:	e025      	b.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d021      	beq.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fe fb1b 	bl	8003d0c <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e023      	b.n	800575e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d10d      	bne.n	800573c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	43da      	mvns	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4013      	ands	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	e00c      	b.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	43da      	mvns	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d0b6      	beq.n	80056ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005774:	e051      	b.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d123      	bne.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800579e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0204 	orr.w	r2, r3, #4
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e046      	b.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d021      	beq.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d6:	f7fe fa99 	bl	8003d0c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d116      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e020      	b.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10c      	bne.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	43da      	mvns	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e00b      	b.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	43da      	mvns	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d18d      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005870:	e02d      	b.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f8ce 	bl	8005a14 <I2C_IsAcknowledgeFailed>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e02d      	b.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d021      	beq.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fe fa3f 	bl	8003d0c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d116      	bne.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d1ca      	bne.n	8005872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f2:	e02d      	b.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f88d 	bl	8005a14 <I2C_IsAcknowledgeFailed>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e02d      	b.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d021      	beq.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fe f9fe 	bl	8003d0c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e007      	b.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d1ca      	bne.n	80058f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005974:	e042      	b.n	80059fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d119      	bne.n	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0210 	mvn.w	r2, #16
 800598c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e029      	b.n	8005a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b8:	f7fe f9a8 	bl	8003d0c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d302      	bcc.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e007      	b.n	8005a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d1b5      	bne.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2a:	d11b      	bne.n	8005a64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e267      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d075      	beq.n	8005b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a92:	4b88      	ldr	r3, [pc, #544]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a9e:	4b85      	ldr	r3, [pc, #532]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d112      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aaa:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab8:	4b7e      	ldr	r3, [pc, #504]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05b      	beq.n	8005b7c <HAL_RCC_OscConfig+0x108>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d157      	bne.n	8005b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e242      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x74>
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a75      	ldr	r2, [pc, #468]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e01d      	b.n	8005b24 <HAL_RCC_OscConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x98>
 8005af2:	4b70      	ldr	r3, [pc, #448]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6f      	ldr	r2, [pc, #444]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b6d      	ldr	r3, [pc, #436]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6c      	ldr	r2, [pc, #432]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0xb0>
 8005b0c:	4b69      	ldr	r3, [pc, #420]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a68      	ldr	r2, [pc, #416]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b66      	ldr	r3, [pc, #408]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a65      	ldr	r2, [pc, #404]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d013      	beq.n	8005b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fe f8ee 	bl	8003d0c <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fe f8ea 	bl	8003d0c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e207      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	4b5b      	ldr	r3, [pc, #364]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0xc0>
 8005b52:	e014      	b.n	8005b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fe f8da 	bl	8003d0c <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b5c:	f7fe f8d6 	bl	8003d0c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1f3      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6e:	4b51      	ldr	r3, [pc, #324]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0xe8>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d063      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b8a:	4b4a      	ldr	r3, [pc, #296]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d11c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ba2:	4b44      	ldr	r3, [pc, #272]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x152>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e1c7      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc6:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4937      	ldr	r1, [pc, #220]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bda:	e03a      	b.n	8005c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be4:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fe f88f 	bl	8003d0c <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf2:	f7fe f88b 	bl	8003d0c <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e1a8      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c04:	4b2b      	ldr	r3, [pc, #172]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4925      	ldr	r1, [pc, #148]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]
 8005c24:	e015      	b.n	8005c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c26:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fe f86e 	bl	8003d0c <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fe f86a 	bl	8003d0c <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e187      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d036      	beq.n	8005ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <HAL_RCC_OscConfig+0x248>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fe f84e 	bl	8003d0c <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c74:	f7fe f84a 	bl	8003d0c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e167      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_OscConfig+0x240>)
 8005c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x200>
 8005c92:	e01b      	b.n	8005ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <HAL_RCC_OscConfig+0x248>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9a:	f7fe f837 	bl	8003d0c <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca0:	e00e      	b.n	8005cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca2:	f7fe f833 	bl	8003d0c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d907      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e150      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	42470000 	.word	0x42470000
 8005cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc0:	4b88      	ldr	r3, [pc, #544]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1ea      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8097 	beq.w	8005e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cde:	4b81      	ldr	r3, [pc, #516]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	4b7d      	ldr	r3, [pc, #500]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	4a7c      	ldr	r2, [pc, #496]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfa:	4b7a      	ldr	r3, [pc, #488]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	4b77      	ldr	r3, [pc, #476]	; (8005ee8 <HAL_RCC_OscConfig+0x474>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d118      	bne.n	8005d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d16:	4b74      	ldr	r3, [pc, #464]	; (8005ee8 <HAL_RCC_OscConfig+0x474>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a73      	ldr	r2, [pc, #460]	; (8005ee8 <HAL_RCC_OscConfig+0x474>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d22:	f7fd fff3 	bl	8003d0c <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fd ffef 	bl	8003d0c <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e10c      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCC_OscConfig+0x474>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x2ea>
 8005d50:	4b64      	ldr	r3, [pc, #400]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	4a63      	ldr	r2, [pc, #396]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5c:	e01c      	b.n	8005d98 <HAL_RCC_OscConfig+0x324>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x30c>
 8005d66:	4b5f      	ldr	r3, [pc, #380]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4a5e      	ldr	r2, [pc, #376]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	f043 0304 	orr.w	r3, r3, #4
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
 8005d72:	4b5c      	ldr	r3, [pc, #368]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	4a5b      	ldr	r2, [pc, #364]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d7e:	e00b      	b.n	8005d98 <HAL_RCC_OscConfig+0x324>
 8005d80:	4b58      	ldr	r3, [pc, #352]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a57      	ldr	r2, [pc, #348]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	4a54      	ldr	r2, [pc, #336]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005d92:	f023 0304 	bic.w	r3, r3, #4
 8005d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d015      	beq.n	8005dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da0:	f7fd ffb4 	bl	8003d0c <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fd ffb0 	bl	8003d0c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e0cb      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbe:	4b49      	ldr	r3, [pc, #292]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0ee      	beq.n	8005da8 <HAL_RCC_OscConfig+0x334>
 8005dca:	e014      	b.n	8005df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dcc:	f7fd ff9e 	bl	8003d0c <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd4:	f7fd ff9a 	bl	8003d0c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0b5      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dea:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ee      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfc:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	4a38      	ldr	r2, [pc, #224]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80a1 	beq.w	8005f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e12:	4b34      	ldr	r3, [pc, #208]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d05c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d141      	bne.n	8005eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e26:	4b31      	ldr	r3, [pc, #196]	; (8005eec <HAL_RCC_OscConfig+0x478>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fd ff6e 	bl	8003d0c <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fd ff6a 	bl	8003d0c <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e087      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69da      	ldr	r2, [r3, #28]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	491b      	ldr	r1, [pc, #108]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <HAL_RCC_OscConfig+0x478>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e82:	f7fd ff43 	bl	8003d0c <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8a:	f7fd ff3f 	bl	8003d0c <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e05c      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9c:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x416>
 8005ea8:	e054      	b.n	8005f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_RCC_OscConfig+0x478>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fd ff2c 	bl	8003d0c <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb8:	f7fd ff28 	bl	8003d0c <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e045      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x444>
 8005ed6:	e03d      	b.n	8005f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d107      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e038      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ef0:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <HAL_RCC_OscConfig+0x4ec>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d028      	beq.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d121      	bne.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d11a      	bne.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d111      	bne.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800

08005f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0cc      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f78:	4b68      	ldr	r3, [pc, #416]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d90c      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b63      	ldr	r3, [pc, #396]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0b8      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d020      	beq.n	8005fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb8:	4b59      	ldr	r3, [pc, #356]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4a58      	ldr	r2, [pc, #352]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd0:	4b53      	ldr	r3, [pc, #332]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a52      	ldr	r2, [pc, #328]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4b50      	ldr	r3, [pc, #320]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	494d      	ldr	r1, [pc, #308]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d044      	beq.n	8006084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	4b47      	ldr	r3, [pc, #284]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e07f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d003      	beq.n	8006022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800601e:	2b03      	cmp	r3, #3
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e06f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e067      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4934      	ldr	r1, [pc, #208]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006054:	f7fd fe5a 	bl	8003d0c <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fd fe56 	bl	8003d0c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e04f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 020c 	and.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	429a      	cmp	r2, r3
 8006082:	d1eb      	bne.n	800605c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d20c      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e032      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4916      	ldr	r1, [pc, #88]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	490e      	ldr	r1, [pc, #56]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ea:	f000 f821 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	490a      	ldr	r1, [pc, #40]	; (8006124 <HAL_RCC_ClockConfig+0x1c0>)
 80060fc:	5ccb      	ldrb	r3, [r1, r3]
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x1c4>)
 8006104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_ClockConfig+0x1c8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fd fdba 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00
 8006120:	40023800 	.word	0x40023800
 8006124:	08009bc8 	.word	0x08009bc8
 8006128:	200002cc 	.word	0x200002cc
 800612c:	200002d0 	.word	0x200002d0

08006130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006134:	b094      	sub	sp, #80	; 0x50
 8006136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
 800613c:	2300      	movs	r3, #0
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	2300      	movs	r3, #0
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006148:	4b79      	ldr	r3, [pc, #484]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 030c 	and.w	r3, r3, #12
 8006150:	2b08      	cmp	r3, #8
 8006152:	d00d      	beq.n	8006170 <HAL_RCC_GetSysClockFreq+0x40>
 8006154:	2b08      	cmp	r3, #8
 8006156:	f200 80e1 	bhi.w	800631c <HAL_RCC_GetSysClockFreq+0x1ec>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x34>
 800615e:	2b04      	cmp	r3, #4
 8006160:	d003      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x3a>
 8006162:	e0db      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006164:	4b73      	ldr	r3, [pc, #460]	; (8006334 <HAL_RCC_GetSysClockFreq+0x204>)
 8006166:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006168:	e0db      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800616a:	4b73      	ldr	r3, [pc, #460]	; (8006338 <HAL_RCC_GetSysClockFreq+0x208>)
 800616c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800616e:	e0d8      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006170:	4b6f      	ldr	r3, [pc, #444]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800617a:	4b6d      	ldr	r3, [pc, #436]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d063      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006186:	4b6a      	ldr	r3, [pc, #424]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	2200      	movs	r2, #0
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	633b      	str	r3, [r7, #48]	; 0x30
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061a2:	4622      	mov	r2, r4
 80061a4:	462b      	mov	r3, r5
 80061a6:	f04f 0000 	mov.w	r0, #0
 80061aa:	f04f 0100 	mov.w	r1, #0
 80061ae:	0159      	lsls	r1, r3, #5
 80061b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b4:	0150      	lsls	r0, r2, #5
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4621      	mov	r1, r4
 80061bc:	1a51      	subs	r1, r2, r1
 80061be:	6139      	str	r1, [r7, #16]
 80061c0:	4629      	mov	r1, r5
 80061c2:	eb63 0301 	sbc.w	r3, r3, r1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061d4:	4659      	mov	r1, fp
 80061d6:	018b      	lsls	r3, r1, #6
 80061d8:	4651      	mov	r1, sl
 80061da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061de:	4651      	mov	r1, sl
 80061e0:	018a      	lsls	r2, r1, #6
 80061e2:	4651      	mov	r1, sl
 80061e4:	ebb2 0801 	subs.w	r8, r2, r1
 80061e8:	4659      	mov	r1, fp
 80061ea:	eb63 0901 	sbc.w	r9, r3, r1
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006202:	4690      	mov	r8, r2
 8006204:	4699      	mov	r9, r3
 8006206:	4623      	mov	r3, r4
 8006208:	eb18 0303 	adds.w	r3, r8, r3
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	462b      	mov	r3, r5
 8006210:	eb49 0303 	adc.w	r3, r9, r3
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006222:	4629      	mov	r1, r5
 8006224:	024b      	lsls	r3, r1, #9
 8006226:	4621      	mov	r1, r4
 8006228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800622c:	4621      	mov	r1, r4
 800622e:	024a      	lsls	r2, r1, #9
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	2200      	movs	r2, #0
 8006238:	62bb      	str	r3, [r7, #40]	; 0x28
 800623a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006240:	f7fa fc86 	bl	8000b50 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4613      	mov	r3, r2
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	e058      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	4b38      	ldr	r3, [pc, #224]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	099b      	lsrs	r3, r3, #6
 8006254:	2200      	movs	r2, #0
 8006256:	4618      	mov	r0, r3
 8006258:	4611      	mov	r1, r2
 800625a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
 8006264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	f04f 0000 	mov.w	r0, #0
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	0159      	lsls	r1, r3, #5
 8006276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800627a:	0150      	lsls	r0, r2, #5
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4641      	mov	r1, r8
 8006282:	ebb2 0a01 	subs.w	sl, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb63 0b01 	sbc.w	fp, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800629c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062a0:	ebb2 040a 	subs.w	r4, r2, sl
 80062a4:	eb63 050b 	sbc.w	r5, r3, fp
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	00eb      	lsls	r3, r5, #3
 80062b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b6:	00e2      	lsls	r2, r4, #3
 80062b8:	4614      	mov	r4, r2
 80062ba:	461d      	mov	r5, r3
 80062bc:	4643      	mov	r3, r8
 80062be:	18e3      	adds	r3, r4, r3
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	464b      	mov	r3, r9
 80062c4:	eb45 0303 	adc.w	r3, r5, r3
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062d6:	4629      	mov	r1, r5
 80062d8:	028b      	lsls	r3, r1, #10
 80062da:	4621      	mov	r1, r4
 80062dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062e0:	4621      	mov	r1, r4
 80062e2:	028a      	lsls	r2, r1, #10
 80062e4:	4610      	mov	r0, r2
 80062e6:	4619      	mov	r1, r3
 80062e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ea:	2200      	movs	r2, #0
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	61fa      	str	r2, [r7, #28]
 80062f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f4:	f7fa fc2c 	bl	8000b50 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4613      	mov	r3, r2
 80062fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	3301      	adds	r3, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800631a:	e002      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_RCC_GetSysClockFreq+0x204>)
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006324:	4618      	mov	r0, r3
 8006326:	3750      	adds	r7, #80	; 0x50
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	00f42400 	.word	0x00f42400
 8006338:	007a1200 	.word	0x007a1200

0800633c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006340:	4b03      	ldr	r3, [pc, #12]	; (8006350 <HAL_RCC_GetHCLKFreq+0x14>)
 8006342:	681b      	ldr	r3, [r3, #0]
}
 8006344:	4618      	mov	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	200002cc 	.word	0x200002cc

08006354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006358:	f7ff fff0 	bl	800633c <HAL_RCC_GetHCLKFreq>
 800635c:	4602      	mov	r2, r0
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	0a9b      	lsrs	r3, r3, #10
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	4903      	ldr	r1, [pc, #12]	; (8006378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800636a:	5ccb      	ldrb	r3, [r1, r3]
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40023800 	.word	0x40023800
 8006378:	08009bd8 	.word	0x08009bd8

0800637c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006380:	f7ff ffdc 	bl	800633c <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	0b5b      	lsrs	r3, r3, #13
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4903      	ldr	r1, [pc, #12]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	08009bd8 	.word	0x08009bd8

080063a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e07b      	b.n	80064ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c6:	d009      	beq.n	80063dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	61da      	str	r2, [r3, #28]
 80063ce:	e005      	b.n	80063dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fd f964 	bl	80036c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	ea42 0103 	orr.w	r1, r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	f003 0104 	and.w	r1, r3, #4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f003 0210 	and.w	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08c      	sub	sp, #48	; 0x30
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064c4:	2301      	movs	r3, #1
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26>
 80064d8:	2302      	movs	r3, #2
 80064da:	e18a      	b.n	80067f2 <HAL_SPI_TransmitReceive+0x33c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e4:	f7fd fc12 	bl	8003d0c <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064fa:	887b      	ldrh	r3, [r7, #2]
 80064fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006502:	2b01      	cmp	r3, #1
 8006504:	d00f      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x70>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650c:	d107      	bne.n	800651e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_SPI_TransmitReceive+0x68>
 8006516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800651e:	2302      	movs	r3, #2
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006524:	e15b      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x82>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x82>
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800653e:	e14e      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b04      	cmp	r3, #4
 800654a:	d003      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2205      	movs	r2, #5
 8006550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	887a      	ldrh	r2, [r7, #2]
 800656a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	887a      	ldrh	r2, [r7, #2]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	887a      	ldrh	r2, [r7, #2]
 800657c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d178      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_TransmitReceive+0x10a>
 80065ba:	8b7b      	ldrh	r3, [r7, #26]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d166      	bne.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	881a      	ldrh	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065e4:	e053      	b.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d11b      	bne.n	800662c <HAL_SPI_TransmitReceive+0x176>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <HAL_SPI_TransmitReceive+0x176>
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d113      	bne.n	800662c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d119      	bne.n	800666e <HAL_SPI_TransmitReceive+0x1b8>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d014      	beq.n	800666e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	b292      	uxth	r2, r2
 8006650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800666a:	2301      	movs	r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800666e:	f7fd fb4d 	bl	8003d0c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667a:	429a      	cmp	r2, r3
 800667c:	d807      	bhi.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d003      	beq.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800668c:	e0a7      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1a6      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x130>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1a1      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x130>
 80066a2:	e07c      	b.n	800679e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x1fc>
 80066ac:	8b7b      	ldrh	r3, [r7, #26]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d16b      	bne.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d8:	e057      	b.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11c      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d017      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d114      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d119      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x2ae>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006764:	f7fd fad2 	bl	8003d0c <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006770:	429a      	cmp	r2, r3
 8006772:	d803      	bhi.n	800677c <HAL_SPI_TransmitReceive+0x2c6>
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d102      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x2cc>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006788:	e029      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1a2      	bne.n	80066da <HAL_SPI_TransmitReceive+0x224>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d19d      	bne.n	80066da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f8b2 	bl	800690c <SPI_EndRxTxTransaction>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067ba:	e010      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	e000      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800680c:	f7fd fa7e 	bl	8003d0c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	4413      	add	r3, r2
 800681a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800681c:	f7fd fa76 	bl	8003d0c <HAL_GetTick>
 8006820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006822:	4b39      	ldr	r3, [pc, #228]	; (8006908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	015b      	lsls	r3, r3, #5
 8006828:	0d1b      	lsrs	r3, r3, #20
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	fb02 f303 	mul.w	r3, r2, r3
 8006830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006832:	e054      	b.n	80068de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d050      	beq.n	80068de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800683c:	f7fd fa66 	bl	8003d0c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	429a      	cmp	r2, r3
 800684a:	d902      	bls.n	8006852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d13d      	bne.n	80068ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686a:	d111      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006874:	d004      	beq.n	8006880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d107      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d10f      	bne.n	80068ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e017      	b.n	80068fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3b01      	subs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d19b      	bne.n	8006834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200002cc 	.word	0x200002cc

0800690c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <SPI_EndRxTxTransaction+0x7c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1b      	ldr	r2, [pc, #108]	; (800698c <SPI_EndRxTxTransaction+0x80>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	0d5b      	lsrs	r3, r3, #21
 8006924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006928:	fb02 f303 	mul.w	r3, r2, r3
 800692c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006936:	d112      	bne.n	800695e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	2180      	movs	r1, #128	; 0x80
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff5a 	bl	80067fc <SPI_WaitFlagStateUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e00f      	b.n	800697e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3b01      	subs	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d0f2      	beq.n	800695e <SPI_EndRxTxTransaction+0x52>
 8006978:	e000      	b.n	800697c <SPI_EndRxTxTransaction+0x70>
        break;
 800697a:	bf00      	nop
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200002cc 	.word	0x200002cc
 800698c:	165e9f81 	.word	0x165e9f81

08006990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e04c      	b.n	8006a3c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d111      	bne.n	80069d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fc0c 	bl	80081d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <HAL_TIM_Base_Init+0xb4>)
 80069c8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f001 f929 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08003755 	.word	0x08003755

08006a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d001      	beq.n	8006a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e03c      	b.n	8006ada <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIM_Base_Start+0xa0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x5c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x5c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <HAL_TIM_Base_Start+0xa4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x5c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a19      	ldr	r2, [pc, #100]	; (8006af0 <HAL_TIM_Base_Start+0xa8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x5c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <HAL_TIM_Base_Start+0xac>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIM_Base_Start+0x5c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <HAL_TIM_Base_Start+0xb0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d111      	bne.n	8006ac8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d010      	beq.n	8006ad8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	e007      	b.n	8006ad8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40014000 	.word	0x40014000

08006afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d001      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e044      	b.n	8006b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start_IT+0xb0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d018      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d013      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a16      	ldr	r2, [pc, #88]	; (8006bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d111      	bne.n	8006b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b06      	cmp	r3, #6
 8006b78:	d010      	beq.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	e007      	b.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000

08006bc0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e04c      	b.n	8006c6c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d111      	bne.n	8006c02 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 faf4 	bl	80081d4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <HAL_TIM_OC_Init+0xb4>)
 8006bf8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f001 f811 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	08006c79 	.word	0x08006c79

08006c78 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e04c      	b.n	8006d38 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d111      	bne.n	8006cce <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fa8e 	bl	80081d4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <HAL_TIM_PWM_Init+0xb4>)
 8006cc4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f000 ffab 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	08006d45 	.word	0x08006d45

08006d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_TIM_PWM_Start+0x24>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	bf14      	ite	ne
 8006d74:	2301      	movne	r3, #1
 8006d76:	2300      	moveq	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e022      	b.n	8006dc2 <HAL_TIM_PWM_Start+0x6a>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d109      	bne.n	8006d96 <HAL_TIM_PWM_Start+0x3e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	bf14      	ite	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	2300      	moveq	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	e015      	b.n	8006dc2 <HAL_TIM_PWM_Start+0x6a>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d109      	bne.n	8006db0 <HAL_TIM_PWM_Start+0x58>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e008      	b.n	8006dc2 <HAL_TIM_PWM_Start+0x6a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e068      	b.n	8006e9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <HAL_TIM_PWM_Start+0x82>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd8:	e013      	b.n	8006e02 <HAL_TIM_PWM_Start+0xaa>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d104      	bne.n	8006dea <HAL_TIM_PWM_Start+0x92>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de8:	e00b      	b.n	8006e02 <HAL_TIM_PWM_Start+0xaa>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_PWM_Start+0xa2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df8:	e003      	b.n	8006e02 <HAL_TIM_PWM_Start+0xaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2201      	movs	r2, #1
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 f9bc 	bl	8008188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <HAL_TIM_PWM_Start+0x14c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d107      	bne.n	8006e2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <HAL_TIM_PWM_Start+0x14c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x10e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d013      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x10e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <HAL_TIM_PWM_Start+0x150>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x10e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a17      	ldr	r2, [pc, #92]	; (8006eac <HAL_TIM_PWM_Start+0x154>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x10e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <HAL_TIM_PWM_Start+0x158>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x10e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a14      	ldr	r2, [pc, #80]	; (8006eb4 <HAL_TIM_PWM_Start+0x15c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d111      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b06      	cmp	r3, #6
 8006e76:	d010      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	e007      	b.n	8006e9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40010000 	.word	0x40010000
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800
 8006eb0:	40000c00 	.word	0x40000c00
 8006eb4:	40014000 	.word	0x40014000

08006eb8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e04c      	b.n	8006f66 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d111      	bne.n	8006efc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f977 	bl	80081d4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <HAL_TIM_OnePulse_Init+0xb8>)
 8006ef2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f000 fe94 	bl	8007c3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0208 	bic.w	r2, r2, #8
 8006f22:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6819      	ldr	r1, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	08006f75 	.word	0x08006f75

08006f74 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fb0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d108      	bne.n	8006fca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d105      	bne.n	8006fca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fbe:	7b7b      	ldrb	r3, [r7, #13]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d102      	bne.n	8006fca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fc4:	7b3b      	ldrb	r3, [r7, #12]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d001      	beq.n	8006fce <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e03b      	b.n	8007046 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0202 	orr.w	r2, r2, #2
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0204 	orr.w	r2, r2, #4
 800700c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2201      	movs	r2, #1
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f8b6 	bl	8008188 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	2104      	movs	r1, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f001 f8af 	bl	8008188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a08      	ldr	r2, [pc, #32]	; (8007050 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d107      	bne.n	8007044 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000

08007054 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0a2      	b.n	80071ae <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d111      	bne.n	8007098 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f8a9 	bl	80081d4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a4a      	ldr	r2, [pc, #296]	; (80071b8 <HAL_TIM_Encoder_Init+0x164>)
 800708e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ae:	f023 0307 	bic.w	r3, r3, #7
 80070b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f000 fdbc 	bl	8007c3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ec:	f023 0303 	bic.w	r3, r3, #3
 80070f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	4313      	orrs	r3, r2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800710a:	f023 030c 	bic.w	r3, r3, #12
 800710e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800711a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	4313      	orrs	r3, r2
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	011a      	lsls	r2, r3, #4
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	031b      	lsls	r3, r3, #12
 800713a:	4313      	orrs	r3, r2
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007148:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007150:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	4313      	orrs	r3, r2
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	08003859 	.word	0x08003859

080071bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d110      	bne.n	800720e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d102      	bne.n	80071f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071f2:	7b7b      	ldrb	r3, [r7, #13]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d001      	beq.n	80071fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e069      	b.n	80072d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800720c:	e031      	b.n	8007272 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d110      	bne.n	8007236 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d102      	bne.n	8007220 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800721a:	7b3b      	ldrb	r3, [r7, #12]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d001      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e055      	b.n	80072d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007234:	e01d      	b.n	8007272 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d108      	bne.n	800724e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d105      	bne.n	800724e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007242:	7b7b      	ldrb	r3, [r7, #13]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d102      	bne.n	800724e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007248:	7b3b      	ldrb	r3, [r7, #12]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e03e      	b.n	80072d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_TIM_Encoder_Start+0xc4>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d008      	beq.n	8007290 <HAL_TIM_Encoder_Start+0xd4>
 800727e:	e00f      	b.n	80072a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2201      	movs	r2, #1
 8007286:	2100      	movs	r1, #0
 8007288:	4618      	mov	r0, r3
 800728a:	f000 ff7d 	bl	8008188 <TIM_CCxChannelCmd>
      break;
 800728e:	e016      	b.n	80072be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2201      	movs	r2, #1
 8007296:	2104      	movs	r1, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f000 ff75 	bl	8008188 <TIM_CCxChannelCmd>
      break;
 800729e:	e00e      	b.n	80072be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2201      	movs	r2, #1
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 ff6d 	bl	8008188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	2104      	movs	r1, #4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 ff66 	bl	8008188 <TIM_CCxChannelCmd>
      break;
 80072bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d128      	bne.n	8007340 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d121      	bne.n	8007340 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0202 	mvn.w	r2, #2
 8007304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	e009      	b.n	800733a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b04      	cmp	r3, #4
 800734c:	d128      	bne.n	80073a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b04      	cmp	r3, #4
 800735a:	d121      	bne.n	80073a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0204 	mvn.w	r2, #4
 8007364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
 8007384:	e009      	b.n	800739a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d128      	bne.n	8007400 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d121      	bne.n	8007400 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0208 	mvn.w	r2, #8
 80073c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2204      	movs	r2, #4
 80073ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e009      	b.n	80073fa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b10      	cmp	r3, #16
 800740c:	d128      	bne.n	8007460 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b10      	cmp	r3, #16
 800741a:	d121      	bne.n	8007460 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0210 	mvn.w	r2, #16
 8007424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2208      	movs	r2, #8
 800742a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
 8007444:	e009      	b.n	800745a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	d110      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d109      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0201 	mvn.w	r2, #1
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d110      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a8:	2b80      	cmp	r3, #128	; 0x80
 80074aa:	d109      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d110      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d109      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d110      	bne.n	8007520 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b20      	cmp	r3, #32
 800750a:	d109      	bne.n	8007520 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0220 	mvn.w	r2, #32
 8007514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007542:	2302      	movs	r3, #2
 8007544:	e048      	b.n	80075d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b0c      	cmp	r3, #12
 8007552:	d839      	bhi.n	80075c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007591 	.word	0x08007591
 8007560:	080075c9 	.word	0x080075c9
 8007564:	080075c9 	.word	0x080075c9
 8007568:	080075c9 	.word	0x080075c9
 800756c:	0800759f 	.word	0x0800759f
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075c9 	.word	0x080075c9
 8007578:	080075c9 	.word	0x080075c9
 800757c:	080075ad 	.word	0x080075ad
 8007580:	080075c9 	.word	0x080075c9
 8007584:	080075c9 	.word	0x080075c9
 8007588:	080075c9 	.word	0x080075c9
 800758c:	080075bb 	.word	0x080075bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fbd0 	bl	8007d3c <TIM_OC1_SetConfig>
      break;
 800759c:	e017      	b.n	80075ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fc2f 	bl	8007e08 <TIM_OC2_SetConfig>
      break;
 80075aa:	e010      	b.n	80075ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fc94 	bl	8007ee0 <TIM_OC3_SetConfig>
      break;
 80075b8:	e009      	b.n	80075ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fcf7 	bl	8007fb4 <TIM_OC4_SetConfig>
      break;
 80075c6:	e002      	b.n	80075ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e0ae      	b.n	800775c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	f200 809f 	bhi.w	800774c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007649 	.word	0x08007649
 8007618:	0800774d 	.word	0x0800774d
 800761c:	0800774d 	.word	0x0800774d
 8007620:	0800774d 	.word	0x0800774d
 8007624:	08007689 	.word	0x08007689
 8007628:	0800774d 	.word	0x0800774d
 800762c:	0800774d 	.word	0x0800774d
 8007630:	0800774d 	.word	0x0800774d
 8007634:	080076cb 	.word	0x080076cb
 8007638:	0800774d 	.word	0x0800774d
 800763c:	0800774d 	.word	0x0800774d
 8007640:	0800774d 	.word	0x0800774d
 8007644:	0800770b 	.word	0x0800770b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fb74 	bl	8007d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0208 	orr.w	r2, r2, #8
 8007662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0204 	bic.w	r2, r2, #4
 8007672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6999      	ldr	r1, [r3, #24]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	619a      	str	r2, [r3, #24]
      break;
 8007686:	e064      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fbba 	bl	8007e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6999      	ldr	r1, [r3, #24]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	021a      	lsls	r2, r3, #8
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	619a      	str	r2, [r3, #24]
      break;
 80076c8:	e043      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fc05 	bl	8007ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0208 	orr.w	r2, r2, #8
 80076e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0204 	bic.w	r2, r2, #4
 80076f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69d9      	ldr	r1, [r3, #28]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	61da      	str	r2, [r3, #28]
      break;
 8007708:	e023      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fc4f 	bl	8007fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69d9      	ldr	r1, [r3, #28]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	021a      	lsls	r2, r3, #8
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	61da      	str	r2, [r3, #28]
      break;
 800774a:	e002      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	75fb      	strb	r3, [r7, #23]
      break;
 8007750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_TIM_ConfigClockSource+0x1c>
 800777c:	2302      	movs	r3, #2
 800777e:	e0b4      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x186>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800779e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d03e      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0xd4>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077be:	f200 8087 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	f000 8086 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x172>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d87f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077d0:	2b70      	cmp	r3, #112	; 0x70
 80077d2:	d01a      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xa6>
 80077d4:	2b70      	cmp	r3, #112	; 0x70
 80077d6:	d87b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077d8:	2b60      	cmp	r3, #96	; 0x60
 80077da:	d050      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x11a>
 80077dc:	2b60      	cmp	r3, #96	; 0x60
 80077de:	d877      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e0:	2b50      	cmp	r3, #80	; 0x50
 80077e2:	d03c      	beq.n	800785e <HAL_TIM_ConfigClockSource+0xfa>
 80077e4:	2b50      	cmp	r3, #80	; 0x50
 80077e6:	d873      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d058      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x13a>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d86f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	d064      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15a>
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d86b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d060      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15a>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d867      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d05c      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15a>
 8007804:	2b10      	cmp	r3, #16
 8007806:	d05a      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15a>
 8007808:	e062      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f000 fc95 	bl	8008148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800782c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	609a      	str	r2, [r3, #8]
      break;
 8007836:	e04f      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6899      	ldr	r1, [r3, #8]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f000 fc7e 	bl	8008148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785a:	609a      	str	r2, [r3, #8]
      break;
 800785c:	e03c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	f000 fbf2 	bl	8008054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2150      	movs	r1, #80	; 0x50
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fc4b 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 800787c:	e02c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6859      	ldr	r1, [r3, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	f000 fc11 	bl	80080b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2160      	movs	r1, #96	; 0x60
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fc3b 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 800789c:	e01c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f000 fbd2 	bl	8008054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2140      	movs	r1, #64	; 0x40
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fc2b 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 80078bc:	e00c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fc22 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 80078ce:	e003      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e000      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	460b      	mov	r3, r1
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e135      	b.n	8007c30 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_TIM_RegisterCallback+0x2a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e12e      	b.n	8007c30 <HAL_TIM_RegisterCallback+0x288>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	f040 80ba 	bne.w	8007b5c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b1a      	cmp	r3, #26
 80079ec:	f200 80b3 	bhi.w	8007b56 <HAL_TIM_RegisterCallback+0x1ae>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <HAL_TIM_RegisterCallback+0x50>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a65 	.word	0x08007a65
 80079fc:	08007a6d 	.word	0x08007a6d
 8007a00:	08007a75 	.word	0x08007a75
 8007a04:	08007a7d 	.word	0x08007a7d
 8007a08:	08007a85 	.word	0x08007a85
 8007a0c:	08007a8d 	.word	0x08007a8d
 8007a10:	08007a95 	.word	0x08007a95
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007aa5 	.word	0x08007aa5
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007ab5 	.word	0x08007ab5
 8007a24:	08007abd 	.word	0x08007abd
 8007a28:	08007ac5 	.word	0x08007ac5
 8007a2c:	08007acd 	.word	0x08007acd
 8007a30:	08007ad5 	.word	0x08007ad5
 8007a34:	08007adf 	.word	0x08007adf
 8007a38:	08007ae9 	.word	0x08007ae9
 8007a3c:	08007af3 	.word	0x08007af3
 8007a40:	08007afd 	.word	0x08007afd
 8007a44:	08007b07 	.word	0x08007b07
 8007a48:	08007b11 	.word	0x08007b11
 8007a4c:	08007b1b 	.word	0x08007b1b
 8007a50:	08007b25 	.word	0x08007b25
 8007a54:	08007b2f 	.word	0x08007b2f
 8007a58:	08007b39 	.word	0x08007b39
 8007a5c:	08007b43 	.word	0x08007b43
 8007a60:	08007b4d 	.word	0x08007b4d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007a6a:	e0dc      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007a72:	e0d8      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007a7a:	e0d4      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007a82:	e0d0      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007a8a:	e0cc      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007a92:	e0c8      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007a9a:	e0c4      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007aa2:	e0c0      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007aaa:	e0bc      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007ab2:	e0b8      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007aba:	e0b4      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007ac2:	e0b0      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007aca:	e0ac      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007ad2:	e0a8      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007adc:	e0a3      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007ae6:	e09e      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007af0:	e099      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007afa:	e094      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007b04:	e08f      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007b0e:	e08a      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007b18:	e085      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007b22:	e080      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007b2c:	e07b      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007b36:	e076      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007b40:	e071      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007b4a:	e06c      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007b54:	e067      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
        break;
 8007b5a:	e064      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d15c      	bne.n	8007c22 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	2b0d      	cmp	r3, #13
 8007b6c:	d856      	bhi.n	8007c1c <HAL_TIM_RegisterCallback+0x274>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_TIM_RegisterCallback+0x1cc>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007bad 	.word	0x08007bad
 8007b78:	08007bb5 	.word	0x08007bb5
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007bd5 	.word	0x08007bd5
 8007b8c:	08007bdd 	.word	0x08007bdd
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007bed 	.word	0x08007bed
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007bfd 	.word	0x08007bfd
 8007ba0:	08007c05 	.word	0x08007c05
 8007ba4:	08007c0d 	.word	0x08007c0d
 8007ba8:	08007c15 	.word	0x08007c15
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007bb2:	e038      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007bba:	e034      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007bc2:	e030      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007bca:	e02c      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007bd2:	e028      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007bda:	e024      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007be2:	e020      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007bea:	e01c      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007bf2:	e018      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007bfa:	e014      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007c02:	e010      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007c0a:	e00c      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007c12:	e008      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007c1a:	e004      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
        break;
 8007c20:	e001      	b.n	8007c26 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a34      	ldr	r2, [pc, #208]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00f      	beq.n	8007c74 <TIM_Base_SetConfig+0x38>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d00b      	beq.n	8007c74 <TIM_Base_SetConfig+0x38>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a31      	ldr	r2, [pc, #196]	; (8007d24 <TIM_Base_SetConfig+0xe8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d007      	beq.n	8007c74 <TIM_Base_SetConfig+0x38>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a30      	ldr	r2, [pc, #192]	; (8007d28 <TIM_Base_SetConfig+0xec>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_Base_SetConfig+0x38>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a2f      	ldr	r2, [pc, #188]	; (8007d2c <TIM_Base_SetConfig+0xf0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d108      	bne.n	8007c86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a25      	ldr	r2, [pc, #148]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d01b      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c94:	d017      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a22      	ldr	r2, [pc, #136]	; (8007d24 <TIM_Base_SetConfig+0xe8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <TIM_Base_SetConfig+0xec>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00f      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <TIM_Base_SetConfig+0xf0>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <TIM_Base_SetConfig+0xf4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d007      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <TIM_Base_SetConfig+0xf8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d003      	beq.n	8007cc6 <TIM_Base_SetConfig+0x8a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <TIM_Base_SetConfig+0xfc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d108      	bne.n	8007cd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d103      	bne.n	8007d0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	615a      	str	r2, [r3, #20]
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800
 8007d2c:	40000c00 	.word	0x40000c00
 8007d30:	40014000 	.word	0x40014000
 8007d34:	40014400 	.word	0x40014400
 8007d38:	40014800 	.word	0x40014800

08007d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f023 0302 	bic.w	r3, r3, #2
 8007d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a1c      	ldr	r2, [pc, #112]	; (8007e04 <TIM_OC1_SetConfig+0xc8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d10c      	bne.n	8007db2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f023 0308 	bic.w	r3, r3, #8
 8007d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f023 0304 	bic.w	r3, r3, #4
 8007db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <TIM_OC1_SetConfig+0xc8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d111      	bne.n	8007dde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	621a      	str	r2, [r3, #32]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40010000 	.word	0x40010000

08007e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f023 0210 	bic.w	r2, r3, #16
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0320 	bic.w	r3, r3, #32
 8007e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <TIM_OC2_SetConfig+0xd4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d10d      	bne.n	8007e84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <TIM_OC2_SetConfig+0xd4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d113      	bne.n	8007eb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40010000 	.word	0x40010000

08007ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0303 	bic.w	r3, r3, #3
 8007f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1d      	ldr	r2, [pc, #116]	; (8007fb0 <TIM_OC3_SetConfig+0xd0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10d      	bne.n	8007f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <TIM_OC3_SetConfig+0xd0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d113      	bne.n	8007f8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	621a      	str	r2, [r3, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	40010000 	.word	0x40010000

08007fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a10      	ldr	r2, [pc, #64]	; (8008050 <TIM_OC4_SetConfig+0x9c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d109      	bne.n	8008028 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	019b      	lsls	r3, r3, #6
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40010000 	.word	0x40010000

08008054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800807e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f023 030a 	bic.w	r3, r3, #10
 8008090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	621a      	str	r2, [r3, #32]
}
 80080a6:	bf00      	nop
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0210 	bic.w	r2, r3, #16
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	031b      	lsls	r3, r3, #12
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	f043 0307 	orr.w	r3, r3, #7
 8008134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	609a      	str	r2, [r3, #8]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2201      	movs	r2, #1
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a1a      	ldr	r2, [r3, #32]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	43db      	mvns	r3, r3
 80081aa:	401a      	ands	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	fa01 f303 	lsl.w	r3, r1, r3
 80081c0:	431a      	orrs	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	621a      	str	r2, [r3, #32]
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1c      	ldr	r2, [pc, #112]	; (8008250 <TIM_ResetCallback+0x7c>)
 80081e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1b      	ldr	r2, [pc, #108]	; (8008254 <TIM_ResetCallback+0x80>)
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a1a      	ldr	r2, [pc, #104]	; (8008258 <TIM_ResetCallback+0x84>)
 80081f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a19      	ldr	r2, [pc, #100]	; (800825c <TIM_ResetCallback+0x88>)
 80081f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a18      	ldr	r2, [pc, #96]	; (8008260 <TIM_ResetCallback+0x8c>)
 8008200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <TIM_ResetCallback+0x90>)
 8008208:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a16      	ldr	r2, [pc, #88]	; (8008268 <TIM_ResetCallback+0x94>)
 8008210:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a15      	ldr	r2, [pc, #84]	; (800826c <TIM_ResetCallback+0x98>)
 8008218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a14      	ldr	r2, [pc, #80]	; (8008270 <TIM_ResetCallback+0x9c>)
 8008220:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <TIM_ResetCallback+0xa0>)
 8008228:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a12      	ldr	r2, [pc, #72]	; (8008278 <TIM_ResetCallback+0xa4>)
 8008230:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a11      	ldr	r2, [pc, #68]	; (800827c <TIM_ResetCallback+0xa8>)
 8008238:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a10      	ldr	r2, [pc, #64]	; (8008280 <TIM_ResetCallback+0xac>)
 8008240:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	08002749 	.word	0x08002749
 8008254:	080078f3 	.word	0x080078f3
 8008258:	0800796b 	.word	0x0800796b
 800825c:	0800797f 	.word	0x0800797f
 8008260:	0800791b 	.word	0x0800791b
 8008264:	0800792f 	.word	0x0800792f
 8008268:	08007907 	.word	0x08007907
 800826c:	08007943 	.word	0x08007943
 8008270:	08007957 	.word	0x08007957
 8008274:	08007993 	.word	0x08007993
 8008278:	08008405 	.word	0x08008405
 800827c:	08008419 	.word	0x08008419
 8008280:	0800842d 	.word	0x0800842d

08008284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e050      	b.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d013      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a18      	ldr	r2, [pc, #96]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a16      	ldr	r2, [pc, #88]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a13      	ldr	r2, [pc, #76]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10c      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4313      	orrs	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40014000 	.word	0x40014000

08008360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008378:	2302      	movs	r3, #2
 800837a:	e03d      	b.n	80083f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e04a      	b.n	80084e8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d111      	bne.n	8008482 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fd2c 	bl	8008ec4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1e      	ldr	r2, [pc, #120]	; (80084f0 <HAL_UART_Init+0xb0>)
 8008478:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2224      	movs	r2, #36	; 0x24
 8008486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008498:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fff6 	bl	800948c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	08003959 	.word	0x08003959

080084f4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	460b      	mov	r3, r1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	f043 0220 	orr.w	r2, r3, #32
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e08c      	b.n	8008636 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_UART_RegisterCallback+0x36>
 8008526:	2302      	movs	r3, #2
 8008528:	e085      	b.n	8008636 <HAL_UART_RegisterCallback+0x142>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b20      	cmp	r3, #32
 800853c:	d151      	bne.n	80085e2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b0c      	cmp	r3, #12
 8008542:	d845      	bhi.n	80085d0 <HAL_UART_RegisterCallback+0xdc>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <HAL_UART_RegisterCallback+0x58>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008581 	.word	0x08008581
 8008550:	08008589 	.word	0x08008589
 8008554:	08008591 	.word	0x08008591
 8008558:	08008599 	.word	0x08008599
 800855c:	080085a1 	.word	0x080085a1
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085b1 	.word	0x080085b1
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085d1 	.word	0x080085d1
 8008570:	080085d1 	.word	0x080085d1
 8008574:	080085d1 	.word	0x080085d1
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c9 	.word	0x080085c9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008586:	e051      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800858e:	e04d      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008596:	e049      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800859e:	e045      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80085a6:	e041      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80085ae:	e03d      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80085b6:	e039      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80085be:	e035      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80085c6:	e031      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80085ce:	e02d      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
        break;
 80085e0:	e024      	b.n	800862c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80085ee:	7afb      	ldrb	r3, [r7, #11]
 80085f0:	2b0b      	cmp	r3, #11
 80085f2:	d002      	beq.n	80085fa <HAL_UART_RegisterCallback+0x106>
 80085f4:	2b0c      	cmp	r3, #12
 80085f6:	d004      	beq.n	8008602 <HAL_UART_RegisterCallback+0x10e>
 80085f8:	e007      	b.n	800860a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008600:	e014      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008608:	e010      	b.n	800862c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
        break;
 800861a:	e007      	b.n	800862c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
}
 8008636:	4618      	mov	r0, r3
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b20      	cmp	r3, #32
 800865c:	d11d      	bne.n	800869a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <HAL_UART_Receive_IT+0x26>
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e016      	b.n	800869c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_UART_Receive_IT+0x38>
 8008678:	2302      	movs	r3, #2
 800867a:	e00f      	b.n	800869c <HAL_UART_Receive_IT+0x58>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	461a      	mov	r2, r3
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 fcf7 	bl	8009084 <UART_Start_Receive_IT>
 8008696:	4603      	mov	r3, r0
 8008698:	e000      	b.n	800869c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800869a:	2302      	movs	r3, #2
  }
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d165      	bne.n	800878a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_UART_Transmit_DMA+0x26>
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e05e      	b.n	800878c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_UART_Transmit_DMA+0x38>
 80086d8:	2302      	movs	r3, #2
 80086da:	e057      	b.n	800878c <HAL_UART_Transmit_DMA+0xe8>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	88fa      	ldrh	r2, [r7, #6]
 80086f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2221      	movs	r2, #33	; 0x21
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	4a22      	ldr	r2, [pc, #136]	; (8008794 <HAL_UART_Transmit_DMA+0xf0>)
 800870a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	4a21      	ldr	r2, [pc, #132]	; (8008798 <HAL_UART_Transmit_DMA+0xf4>)
 8008712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008718:	4a20      	ldr	r2, [pc, #128]	; (800879c <HAL_UART_Transmit_DMA+0xf8>)
 800871a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008720:	2200      	movs	r2, #0
 8008722:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	6819      	ldr	r1, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3304      	adds	r3, #4
 8008738:	461a      	mov	r2, r3
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	f7fb fcd6 	bl	80040ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008748:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	617b      	str	r3, [r7, #20]
   return(result);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3314      	adds	r3, #20
 8008770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008772:	627a      	str	r2, [r7, #36]	; 0x24
 8008774:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6a39      	ldr	r1, [r7, #32]
 8008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e5      	bne.n	8008752 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e000      	b.n	800878c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3730      	adds	r7, #48	; 0x30
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	08008f35 	.word	0x08008f35
 8008798:	08008fd1 	.word	0x08008fd1
 800879c:	08008fef 	.word	0x08008fef

080087a0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b09a      	sub	sp, #104	; 0x68
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80087b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087be:	667b      	str	r3, [r7, #100]	; 0x64
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087c8:	657a      	str	r2, [r7, #84]	; 0x54
 80087ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3314      	adds	r3, #20
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	663b      	str	r3, [r7, #96]	; 0x60
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3314      	adds	r3, #20
 80087fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087fc:	643a      	str	r2, [r7, #64]	; 0x40
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e5      	bne.n	80087dc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	2b01      	cmp	r3, #1
 8008816:	d119      	bne.n	800884c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	61fb      	str	r3, [r7, #28]
   return(result);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f023 0310 	bic.w	r3, r3, #16
 800882e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e5      	bne.n	8008818 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008856:	2b40      	cmp	r3, #64	; 0x40
 8008858:	d136      	bne.n	80088c8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3314      	adds	r3, #20
 8008860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	60bb      	str	r3, [r7, #8]
   return(result);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008870:	65bb      	str	r3, [r7, #88]	; 0x58
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3314      	adds	r3, #20
 8008878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800887a:	61ba      	str	r2, [r7, #24]
 800887c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6979      	ldr	r1, [r7, #20]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	613b      	str	r3, [r7, #16]
   return(result);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e5      	bne.n	800885a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	2200      	movs	r2, #0
 800889c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fb fc7a 	bl	800419c <HAL_DMA_Abort>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fb fe8e 	bl	80045d4 <HAL_DMA_GetError>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d104      	bne.n	80088c8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2210      	movs	r2, #16
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e00a      	b.n	80088de <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3768      	adds	r7, #104	; 0x68
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b0ba      	sub	sp, #232	; 0xe8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800890e:	2300      	movs	r3, #0
 8008910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008914:	2300      	movs	r3, #0
 8008916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10f      	bne.n	800894e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <HAL_UART_IRQHandler+0x66>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fce3 	bl	8009312 <UART_Receive_IT>
      return;
 800894c:	e25b      	b.n	8008e06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800894e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80e1 	beq.w	8008b1a <HAL_UART_IRQHandler+0x232>
 8008958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d106      	bne.n	8008972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008968:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80d4 	beq.w	8008b1a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <HAL_UART_IRQHandler+0xae>
 800897e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	f043 0201 	orr.w	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <HAL_UART_IRQHandler+0xd2>
 80089a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	f043 0202 	orr.w	r2, r3, #2
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <HAL_UART_IRQHandler+0xf6>
 80089c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f043 0204 	orr.w	r2, r3, #4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d011      	beq.n	8008a0e <HAL_UART_IRQHandler+0x126>
 80089ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	f043 0208 	orr.w	r2, r3, #8
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 81f2 	beq.w	8008dfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <HAL_UART_IRQHandler+0x14e>
 8008a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a28:	f003 0320 	and.w	r3, r3, #32
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc6e 	bl	8009312 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	bf0c      	ite	eq
 8008a44:	2301      	moveq	r3, #1
 8008a46:	2300      	movne	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d103      	bne.n	8008a62 <HAL_UART_IRQHandler+0x17a>
 8008a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d051      	beq.n	8008b06 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb74 	bl	8009150 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a72:	2b40      	cmp	r3, #64	; 0x40
 8008a74:	d142      	bne.n	8008afc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1d9      	bne.n	8008a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d013      	beq.n	8008af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	4a7f      	ldr	r2, [pc, #508]	; (8008ccc <HAL_UART_IRQHandler+0x3e4>)
 8008ad0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fb fbd0 	bl	800427c <HAL_DMA_Abort_IT>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d019      	beq.n	8008b16 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008aec:	4610      	mov	r0, r2
 8008aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af0:	e011      	b.n	8008b16 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afa:	e00c      	b.n	8008b16 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	e007      	b.n	8008b16 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b14:	e172      	b.n	8008dfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b16:	bf00      	nop
    return;
 8008b18:	e170      	b.n	8008dfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	f040 814c 	bne.w	8008dbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8145 	beq.w	8008dbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b36:	f003 0310 	and.w	r3, r3, #16
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 813e 	beq.w	8008dbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b40:	2300      	movs	r3, #0
 8008b42:	60bb      	str	r3, [r7, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	f040 80b5 	bne.w	8008cd0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 8142 	beq.w	8008e00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b84:	429a      	cmp	r2, r3
 8008b86:	f080 813b 	bcs.w	8008e00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b9c:	f000 8088 	beq.w	8008cb0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bcc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1d9      	bne.n	8008ba0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3314      	adds	r3, #20
 8008c0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e1      	bne.n	8008bec <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e3      	bne.n	8008c28 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c80:	f023 0310 	bic.w	r3, r3, #16
 8008c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c92:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e3      	bne.n	8008c6e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fb fa76 	bl	800419c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008cbc:	b292      	uxth	r2, r2
 8008cbe:	1a8a      	subs	r2, r1, r2
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cc8:	e09a      	b.n	8008e00 <HAL_UART_IRQHandler+0x518>
 8008cca:	bf00      	nop
 8008ccc:	08009217 	.word	0x08009217
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 808c 	beq.w	8008e04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8087 	beq.w	8008e04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e3      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d52:	633a      	str	r2, [r7, #48]	; 0x30
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e3      	bne.n	8008d2e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0310 	bic.w	r3, r3, #16
 8008d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d98:	61fa      	str	r2, [r7, #28]
 8008d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	69b9      	ldr	r1, [r7, #24]
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	617b      	str	r3, [r7, #20]
   return(result);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e3      	bne.n	8008d74 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008db4:	4611      	mov	r1, r2
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dba:	e023      	b.n	8008e04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d009      	beq.n	8008ddc <HAL_UART_IRQHandler+0x4f4>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa33 	bl	8009240 <UART_Transmit_IT>
    return;
 8008dda:	e014      	b.n	8008e06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00e      	beq.n	8008e06 <HAL_UART_IRQHandler+0x51e>
 8008de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d008      	beq.n	8008e06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa73 	bl	80092e0 <UART_EndTransmit_IT>
    return;
 8008dfa:	e004      	b.n	8008e06 <HAL_UART_IRQHandler+0x51e>
    return;
 8008dfc:	bf00      	nop
 8008dfe:	e002      	b.n	8008e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8008e00:	bf00      	nop
 8008e02:	e000      	b.n	8008e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8008e04:	bf00      	nop
  }
}
 8008e06:	37e8      	adds	r7, #232	; 0xe8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a10      	ldr	r2, [pc, #64]	; (8008f10 <UART_InitCallbacksToDefault+0x4c>)
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a0f      	ldr	r2, [pc, #60]	; (8008f14 <UART_InitCallbacksToDefault+0x50>)
 8008ed6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a0f      	ldr	r2, [pc, #60]	; (8008f18 <UART_InitCallbacksToDefault+0x54>)
 8008edc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a0e      	ldr	r2, [pc, #56]	; (8008f1c <UART_InitCallbacksToDefault+0x58>)
 8008ee2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a0e      	ldr	r2, [pc, #56]	; (8008f20 <UART_InitCallbacksToDefault+0x5c>)
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <UART_InitCallbacksToDefault+0x60>)
 8008eee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a0d      	ldr	r2, [pc, #52]	; (8008f28 <UART_InitCallbacksToDefault+0x64>)
 8008ef4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a0c      	ldr	r2, [pc, #48]	; (8008f2c <UART_InitCallbacksToDefault+0x68>)
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a0c      	ldr	r2, [pc, #48]	; (8008f30 <UART_InitCallbacksToDefault+0x6c>)
 8008f00:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	08008e21 	.word	0x08008e21
 8008f14:	08008e0d 	.word	0x08008e0d
 8008f18:	08008e49 	.word	0x08008e49
 8008f1c:	08008e35 	.word	0x08008e35
 8008f20:	08008e5d 	.word	0x08008e5d
 8008f24:	08008e71 	.word	0x08008e71
 8008f28:	08008e85 	.word	0x08008e85
 8008f2c:	08008e99 	.word	0x08008e99
 8008f30:	08008ead 	.word	0x08008ead

08008f34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b090      	sub	sp, #64	; 0x40
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d137      	bne.n	8008fc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f52:	2200      	movs	r2, #0
 8008f54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	623b      	str	r3, [r7, #32]
   return(result);
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f76:	633a      	str	r2, [r7, #48]	; 0x30
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	330c      	adds	r3, #12
 8008f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008faa:	61fa      	str	r2, [r7, #28]
 8008fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	69b9      	ldr	r1, [r7, #24]
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fbe:	e003      	b.n	8008fc8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fc6:	4798      	blx	r3
}
 8008fc8:	bf00      	nop
 8008fca:	3740      	adds	r7, #64	; 0x40
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800900a:	2b80      	cmp	r3, #128	; 0x80
 800900c:	bf0c      	ite	eq
 800900e:	2301      	moveq	r3, #1
 8009010:	2300      	movne	r3, #0
 8009012:	b2db      	uxtb	r3, r3
 8009014:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b21      	cmp	r3, #33	; 0x21
 8009020:	d108      	bne.n	8009034 <UART_DMAError+0x46>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800902e:	68b8      	ldr	r0, [r7, #8]
 8009030:	f000 f866 	bl	8009100 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903e:	2b40      	cmp	r3, #64	; 0x40
 8009040:	bf0c      	ite	eq
 8009042:	2301      	moveq	r3, #1
 8009044:	2300      	movne	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b22      	cmp	r3, #34	; 0x22
 8009054:	d108      	bne.n	8009068 <UART_DMAError+0x7a>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f000 f874 	bl	8009150 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	f043 0210 	orr.w	r2, r3, #16
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	88fa      	ldrh	r2, [r7, #6]
 80090a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2222      	movs	r2, #34	; 0x22
 80090ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695a      	ldr	r2, [r3, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0201 	orr.w	r2, r2, #1
 80090e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0220 	orr.w	r2, r2, #32
 80090f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b089      	sub	sp, #36	; 0x24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	330c      	adds	r3, #12
 800910e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	60bb      	str	r3, [r7, #8]
   return(result);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	330c      	adds	r3, #12
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	61ba      	str	r2, [r7, #24]
 800912a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6979      	ldr	r1, [r7, #20]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	613b      	str	r3, [r7, #16]
   return(result);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e5      	bne.n	8009108 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009144:	bf00      	nop
 8009146:	3724      	adds	r7, #36	; 0x24
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b095      	sub	sp, #84	; 0x54
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800916e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009178:	643a      	str	r2, [r7, #64]	; 0x40
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800917e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e5      	bne.n	8009158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3314      	adds	r3, #20
 8009192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	61fb      	str	r3, [r7, #28]
   return(result);
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d119      	bne.n	80091fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	330c      	adds	r3, #12
 80091ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f023 0310 	bic.w	r3, r3, #16
 80091de:	647b      	str	r3, [r7, #68]	; 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e8:	61ba      	str	r2, [r7, #24]
 80091ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6979      	ldr	r1, [r7, #20]
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	613b      	str	r3, [r7, #16]
   return(result);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	631a      	str	r2, [r3, #48]	; 0x30
}
 800920a:	bf00      	nop
 800920c:	3754      	adds	r7, #84	; 0x54
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b21      	cmp	r3, #33	; 0x21
 8009252:	d13e      	bne.n	80092d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d114      	bne.n	8009288 <UART_Transmit_IT+0x48>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d110      	bne.n	8009288 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800927a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	1c9a      	adds	r2, r3, #2
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	621a      	str	r2, [r3, #32]
 8009286:	e008      	b.n	800929a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	1c59      	adds	r1, r3, #1
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6211      	str	r1, [r2, #32]
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	4619      	mov	r1, r3
 80092a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10f      	bne.n	80092ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e000      	b.n	80092d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
  }
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08c      	sub	sp, #48	; 0x30
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b22      	cmp	r3, #34	; 0x22
 8009324:	f040 80ad 	bne.w	8009482 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009330:	d117      	bne.n	8009362 <UART_Receive_IT+0x50>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d113      	bne.n	8009362 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	b29a      	uxth	r2, r3
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	1c9a      	adds	r2, r3, #2
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	629a      	str	r2, [r3, #40]	; 0x28
 8009360:	e026      	b.n	80093b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009368:	2300      	movs	r3, #0
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009374:	d007      	beq.n	8009386 <UART_Receive_IT+0x74>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <UART_Receive_IT+0x82>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	b2da      	uxtb	r2, r3
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e008      	b.n	80093a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4619      	mov	r1, r3
 80093be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d15c      	bne.n	800947e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0220 	bic.w	r2, r2, #32
 80093d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695a      	ldr	r2, [r3, #20]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	2b01      	cmp	r3, #1
 8009402:	d136      	bne.n	8009472 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	330c      	adds	r3, #12
 8009410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	613b      	str	r3, [r7, #16]
   return(result);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f023 0310 	bic.w	r3, r3, #16
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	330c      	adds	r3, #12
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	623a      	str	r2, [r7, #32]
 800942c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	69f9      	ldr	r1, [r7, #28]
 8009430:	6a3a      	ldr	r2, [r7, #32]
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	61bb      	str	r3, [r7, #24]
   return(result);
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e5      	bne.n	800940a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b10      	cmp	r3, #16
 800944a:	d10a      	bne.n	8009462 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800946a:	4611      	mov	r1, r2
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	4798      	blx	r3
 8009470:	e003      	b.n	800947a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e002      	b.n	8009484 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e000      	b.n	8009484 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009482:	2302      	movs	r3, #2
  }
}
 8009484:	4618      	mov	r0, r3
 8009486:	3730      	adds	r7, #48	; 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b0c0      	sub	sp, #256	; 0x100
 8009492:	af00      	add	r7, sp, #0
 8009494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	68d9      	ldr	r1, [r3, #12]
 80094aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	ea40 0301 	orr.w	r3, r0, r1
 80094b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	431a      	orrs	r2, r3
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80094e4:	f021 010c 	bic.w	r1, r1, #12
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094f2:	430b      	orrs	r3, r1
 80094f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009506:	6999      	ldr	r1, [r3, #24]
 8009508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	ea40 0301 	orr.w	r3, r0, r1
 8009512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b8f      	ldr	r3, [pc, #572]	; (8009758 <UART_SetConfig+0x2cc>)
 800951c:	429a      	cmp	r2, r3
 800951e:	d005      	beq.n	800952c <UART_SetConfig+0xa0>
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b8d      	ldr	r3, [pc, #564]	; (800975c <UART_SetConfig+0x2d0>)
 8009528:	429a      	cmp	r2, r3
 800952a:	d104      	bne.n	8009536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800952c:	f7fc ff26 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 8009530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009534:	e003      	b.n	800953e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009536:	f7fc ff0d 	bl	8006354 <HAL_RCC_GetPCLK1Freq>
 800953a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009548:	f040 810c 	bne.w	8009764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800954c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009550:	2200      	movs	r2, #0
 8009552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800955a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800955e:	4622      	mov	r2, r4
 8009560:	462b      	mov	r3, r5
 8009562:	1891      	adds	r1, r2, r2
 8009564:	65b9      	str	r1, [r7, #88]	; 0x58
 8009566:	415b      	adcs	r3, r3
 8009568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800956a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800956e:	4621      	mov	r1, r4
 8009570:	eb12 0801 	adds.w	r8, r2, r1
 8009574:	4629      	mov	r1, r5
 8009576:	eb43 0901 	adc.w	r9, r3, r1
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	f04f 0300 	mov.w	r3, #0
 8009582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800958a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800958e:	4690      	mov	r8, r2
 8009590:	4699      	mov	r9, r3
 8009592:	4623      	mov	r3, r4
 8009594:	eb18 0303 	adds.w	r3, r8, r3
 8009598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800959c:	462b      	mov	r3, r5
 800959e:	eb49 0303 	adc.w	r3, r9, r3
 80095a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095ba:	460b      	mov	r3, r1
 80095bc:	18db      	adds	r3, r3, r3
 80095be:	653b      	str	r3, [r7, #80]	; 0x50
 80095c0:	4613      	mov	r3, r2
 80095c2:	eb42 0303 	adc.w	r3, r2, r3
 80095c6:	657b      	str	r3, [r7, #84]	; 0x54
 80095c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80095d0:	f7f7 fabe 	bl	8000b50 <__aeabi_uldivmod>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4b61      	ldr	r3, [pc, #388]	; (8009760 <UART_SetConfig+0x2d4>)
 80095da:	fba3 2302 	umull	r2, r3, r3, r2
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	011c      	lsls	r4, r3, #4
 80095e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80095f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80095f4:	4642      	mov	r2, r8
 80095f6:	464b      	mov	r3, r9
 80095f8:	1891      	adds	r1, r2, r2
 80095fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80095fc:	415b      	adcs	r3, r3
 80095fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009604:	4641      	mov	r1, r8
 8009606:	eb12 0a01 	adds.w	sl, r2, r1
 800960a:	4649      	mov	r1, r9
 800960c:	eb43 0b01 	adc.w	fp, r3, r1
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	f04f 0300 	mov.w	r3, #0
 8009618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800961c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009624:	4692      	mov	sl, r2
 8009626:	469b      	mov	fp, r3
 8009628:	4643      	mov	r3, r8
 800962a:	eb1a 0303 	adds.w	r3, sl, r3
 800962e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009632:	464b      	mov	r3, r9
 8009634:	eb4b 0303 	adc.w	r3, fp, r3
 8009638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800964c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009650:	460b      	mov	r3, r1
 8009652:	18db      	adds	r3, r3, r3
 8009654:	643b      	str	r3, [r7, #64]	; 0x40
 8009656:	4613      	mov	r3, r2
 8009658:	eb42 0303 	adc.w	r3, r2, r3
 800965c:	647b      	str	r3, [r7, #68]	; 0x44
 800965e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009666:	f7f7 fa73 	bl	8000b50 <__aeabi_uldivmod>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4611      	mov	r1, r2
 8009670:	4b3b      	ldr	r3, [pc, #236]	; (8009760 <UART_SetConfig+0x2d4>)
 8009672:	fba3 2301 	umull	r2, r3, r3, r1
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	2264      	movs	r2, #100	; 0x64
 800967a:	fb02 f303 	mul.w	r3, r2, r3
 800967e:	1acb      	subs	r3, r1, r3
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009686:	4b36      	ldr	r3, [pc, #216]	; (8009760 <UART_SetConfig+0x2d4>)
 8009688:	fba3 2302 	umull	r2, r3, r3, r2
 800968c:	095b      	lsrs	r3, r3, #5
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009694:	441c      	add	r4, r3
 8009696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800969a:	2200      	movs	r2, #0
 800969c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80096a8:	4642      	mov	r2, r8
 80096aa:	464b      	mov	r3, r9
 80096ac:	1891      	adds	r1, r2, r2
 80096ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80096b0:	415b      	adcs	r3, r3
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096b8:	4641      	mov	r1, r8
 80096ba:	1851      	adds	r1, r2, r1
 80096bc:	6339      	str	r1, [r7, #48]	; 0x30
 80096be:	4649      	mov	r1, r9
 80096c0:	414b      	adcs	r3, r1
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80096d0:	4659      	mov	r1, fp
 80096d2:	00cb      	lsls	r3, r1, #3
 80096d4:	4651      	mov	r1, sl
 80096d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096da:	4651      	mov	r1, sl
 80096dc:	00ca      	lsls	r2, r1, #3
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	4603      	mov	r3, r0
 80096e4:	4642      	mov	r2, r8
 80096e6:	189b      	adds	r3, r3, r2
 80096e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096ec:	464b      	mov	r3, r9
 80096ee:	460a      	mov	r2, r1
 80096f0:	eb42 0303 	adc.w	r3, r2, r3
 80096f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800970c:	460b      	mov	r3, r1
 800970e:	18db      	adds	r3, r3, r3
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
 8009712:	4613      	mov	r3, r2
 8009714:	eb42 0303 	adc.w	r3, r2, r3
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800971a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800971e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009722:	f7f7 fa15 	bl	8000b50 <__aeabi_uldivmod>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4b0d      	ldr	r3, [pc, #52]	; (8009760 <UART_SetConfig+0x2d4>)
 800972c:	fba3 1302 	umull	r1, r3, r3, r2
 8009730:	095b      	lsrs	r3, r3, #5
 8009732:	2164      	movs	r1, #100	; 0x64
 8009734:	fb01 f303 	mul.w	r3, r1, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	3332      	adds	r3, #50	; 0x32
 800973e:	4a08      	ldr	r2, [pc, #32]	; (8009760 <UART_SetConfig+0x2d4>)
 8009740:	fba2 2303 	umull	r2, r3, r2, r3
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	f003 0207 	and.w	r2, r3, #7
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4422      	add	r2, r4
 8009752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009754:	e105      	b.n	8009962 <UART_SetConfig+0x4d6>
 8009756:	bf00      	nop
 8009758:	40011000 	.word	0x40011000
 800975c:	40011400 	.word	0x40011400
 8009760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009768:	2200      	movs	r2, #0
 800976a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800976e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009776:	4642      	mov	r2, r8
 8009778:	464b      	mov	r3, r9
 800977a:	1891      	adds	r1, r2, r2
 800977c:	6239      	str	r1, [r7, #32]
 800977e:	415b      	adcs	r3, r3
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
 8009782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009786:	4641      	mov	r1, r8
 8009788:	1854      	adds	r4, r2, r1
 800978a:	4649      	mov	r1, r9
 800978c:	eb43 0501 	adc.w	r5, r3, r1
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	00eb      	lsls	r3, r5, #3
 800979a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800979e:	00e2      	lsls	r2, r4, #3
 80097a0:	4614      	mov	r4, r2
 80097a2:	461d      	mov	r5, r3
 80097a4:	4643      	mov	r3, r8
 80097a6:	18e3      	adds	r3, r4, r3
 80097a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097ac:	464b      	mov	r3, r9
 80097ae:	eb45 0303 	adc.w	r3, r5, r3
 80097b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	f04f 0300 	mov.w	r3, #0
 80097ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80097d2:	4629      	mov	r1, r5
 80097d4:	008b      	lsls	r3, r1, #2
 80097d6:	4621      	mov	r1, r4
 80097d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097dc:	4621      	mov	r1, r4
 80097de:	008a      	lsls	r2, r1, #2
 80097e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097e4:	f7f7 f9b4 	bl	8000b50 <__aeabi_uldivmod>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4b60      	ldr	r3, [pc, #384]	; (8009970 <UART_SetConfig+0x4e4>)
 80097ee:	fba3 2302 	umull	r2, r3, r3, r2
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	011c      	lsls	r4, r3, #4
 80097f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009808:	4642      	mov	r2, r8
 800980a:	464b      	mov	r3, r9
 800980c:	1891      	adds	r1, r2, r2
 800980e:	61b9      	str	r1, [r7, #24]
 8009810:	415b      	adcs	r3, r3
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009818:	4641      	mov	r1, r8
 800981a:	1851      	adds	r1, r2, r1
 800981c:	6139      	str	r1, [r7, #16]
 800981e:	4649      	mov	r1, r9
 8009820:	414b      	adcs	r3, r1
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	f04f 0300 	mov.w	r3, #0
 800982c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009830:	4659      	mov	r1, fp
 8009832:	00cb      	lsls	r3, r1, #3
 8009834:	4651      	mov	r1, sl
 8009836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800983a:	4651      	mov	r1, sl
 800983c:	00ca      	lsls	r2, r1, #3
 800983e:	4610      	mov	r0, r2
 8009840:	4619      	mov	r1, r3
 8009842:	4603      	mov	r3, r0
 8009844:	4642      	mov	r2, r8
 8009846:	189b      	adds	r3, r3, r2
 8009848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800984c:	464b      	mov	r3, r9
 800984e:	460a      	mov	r2, r1
 8009850:	eb42 0303 	adc.w	r3, r2, r3
 8009854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	67bb      	str	r3, [r7, #120]	; 0x78
 8009862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	f04f 0300 	mov.w	r3, #0
 800986c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009870:	4649      	mov	r1, r9
 8009872:	008b      	lsls	r3, r1, #2
 8009874:	4641      	mov	r1, r8
 8009876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800987a:	4641      	mov	r1, r8
 800987c:	008a      	lsls	r2, r1, #2
 800987e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009882:	f7f7 f965 	bl	8000b50 <__aeabi_uldivmod>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4b39      	ldr	r3, [pc, #228]	; (8009970 <UART_SetConfig+0x4e4>)
 800988c:	fba3 1302 	umull	r1, r3, r3, r2
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	2164      	movs	r1, #100	; 0x64
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	3332      	adds	r3, #50	; 0x32
 800989e:	4a34      	ldr	r2, [pc, #208]	; (8009970 <UART_SetConfig+0x4e4>)
 80098a0:	fba2 2303 	umull	r2, r3, r2, r3
 80098a4:	095b      	lsrs	r3, r3, #5
 80098a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098aa:	441c      	add	r4, r3
 80098ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098b0:	2200      	movs	r2, #0
 80098b2:	673b      	str	r3, [r7, #112]	; 0x70
 80098b4:	677a      	str	r2, [r7, #116]	; 0x74
 80098b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098ba:	4642      	mov	r2, r8
 80098bc:	464b      	mov	r3, r9
 80098be:	1891      	adds	r1, r2, r2
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	415b      	adcs	r3, r3
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098ca:	4641      	mov	r1, r8
 80098cc:	1851      	adds	r1, r2, r1
 80098ce:	6039      	str	r1, [r7, #0]
 80098d0:	4649      	mov	r1, r9
 80098d2:	414b      	adcs	r3, r1
 80098d4:	607b      	str	r3, [r7, #4]
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098e2:	4659      	mov	r1, fp
 80098e4:	00cb      	lsls	r3, r1, #3
 80098e6:	4651      	mov	r1, sl
 80098e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ec:	4651      	mov	r1, sl
 80098ee:	00ca      	lsls	r2, r1, #3
 80098f0:	4610      	mov	r0, r2
 80098f2:	4619      	mov	r1, r3
 80098f4:	4603      	mov	r3, r0
 80098f6:	4642      	mov	r2, r8
 80098f8:	189b      	adds	r3, r3, r2
 80098fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80098fc:	464b      	mov	r3, r9
 80098fe:	460a      	mov	r2, r1
 8009900:	eb42 0303 	adc.w	r3, r2, r3
 8009904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	663b      	str	r3, [r7, #96]	; 0x60
 8009910:	667a      	str	r2, [r7, #100]	; 0x64
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800991e:	4649      	mov	r1, r9
 8009920:	008b      	lsls	r3, r1, #2
 8009922:	4641      	mov	r1, r8
 8009924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009928:	4641      	mov	r1, r8
 800992a:	008a      	lsls	r2, r1, #2
 800992c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009930:	f7f7 f90e 	bl	8000b50 <__aeabi_uldivmod>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <UART_SetConfig+0x4e4>)
 800993a:	fba3 1302 	umull	r1, r3, r3, r2
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	2164      	movs	r1, #100	; 0x64
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	3332      	adds	r3, #50	; 0x32
 800994c:	4a08      	ldr	r2, [pc, #32]	; (8009970 <UART_SetConfig+0x4e4>)
 800994e:	fba2 2303 	umull	r2, r3, r2, r3
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	f003 020f 	and.w	r2, r3, #15
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4422      	add	r2, r4
 8009960:	609a      	str	r2, [r3, #8]
}
 8009962:	bf00      	nop
 8009964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009968:	46bd      	mov	sp, r7
 800996a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800996e:	bf00      	nop
 8009970:	51eb851f 	.word	0x51eb851f

08009974 <__errno>:
 8009974:	4b01      	ldr	r3, [pc, #4]	; (800997c <__errno+0x8>)
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	200002d8 	.word	0x200002d8

08009980 <__libc_init_array>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	4d0d      	ldr	r5, [pc, #52]	; (80099b8 <__libc_init_array+0x38>)
 8009984:	4c0d      	ldr	r4, [pc, #52]	; (80099bc <__libc_init_array+0x3c>)
 8009986:	1b64      	subs	r4, r4, r5
 8009988:	10a4      	asrs	r4, r4, #2
 800998a:	2600      	movs	r6, #0
 800998c:	42a6      	cmp	r6, r4
 800998e:	d109      	bne.n	80099a4 <__libc_init_array+0x24>
 8009990:	4d0b      	ldr	r5, [pc, #44]	; (80099c0 <__libc_init_array+0x40>)
 8009992:	4c0c      	ldr	r4, [pc, #48]	; (80099c4 <__libc_init_array+0x44>)
 8009994:	f000 f90c 	bl	8009bb0 <_init>
 8009998:	1b64      	subs	r4, r4, r5
 800999a:	10a4      	asrs	r4, r4, #2
 800999c:	2600      	movs	r6, #0
 800999e:	42a6      	cmp	r6, r4
 80099a0:	d105      	bne.n	80099ae <__libc_init_array+0x2e>
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a8:	4798      	blx	r3
 80099aa:	3601      	adds	r6, #1
 80099ac:	e7ee      	b.n	800998c <__libc_init_array+0xc>
 80099ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b2:	4798      	blx	r3
 80099b4:	3601      	adds	r6, #1
 80099b6:	e7f2      	b.n	800999e <__libc_init_array+0x1e>
 80099b8:	08009bf0 	.word	0x08009bf0
 80099bc:	08009bf0 	.word	0x08009bf0
 80099c0:	08009bf0 	.word	0x08009bf0
 80099c4:	08009bf4 	.word	0x08009bf4

080099c8 <memcpy>:
 80099c8:	440a      	add	r2, r1
 80099ca:	4291      	cmp	r1, r2
 80099cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d0:	d100      	bne.n	80099d4 <memcpy+0xc>
 80099d2:	4770      	bx	lr
 80099d4:	b510      	push	{r4, lr}
 80099d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099de:	4291      	cmp	r1, r2
 80099e0:	d1f9      	bne.n	80099d6 <memcpy+0xe>
 80099e2:	bd10      	pop	{r4, pc}

080099e4 <memset>:
 80099e4:	4402      	add	r2, r0
 80099e6:	4603      	mov	r3, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <sqrt>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	ed2d 8b02 	vpush	{d8}
 80099fa:	ec55 4b10 	vmov	r4, r5, d0
 80099fe:	f000 f825 	bl	8009a4c <__ieee754_sqrt>
 8009a02:	4622      	mov	r2, r4
 8009a04:	462b      	mov	r3, r5
 8009a06:	4620      	mov	r0, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a0e:	eef0 8a60 	vmov.f32	s17, s1
 8009a12:	f7f7 f837 	bl	8000a84 <__aeabi_dcmpun>
 8009a16:	b990      	cbnz	r0, 8009a3e <sqrt+0x4a>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7f7 f808 	bl	8000a34 <__aeabi_dcmplt>
 8009a24:	b158      	cbz	r0, 8009a3e <sqrt+0x4a>
 8009a26:	f7ff ffa5 	bl	8009974 <__errno>
 8009a2a:	2321      	movs	r3, #33	; 0x21
 8009a2c:	6003      	str	r3, [r0, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2300      	movs	r3, #0
 8009a32:	4610      	mov	r0, r2
 8009a34:	4619      	mov	r1, r3
 8009a36:	f7f6 feb5 	bl	80007a4 <__aeabi_ddiv>
 8009a3a:	ec41 0b18 	vmov	d8, r0, r1
 8009a3e:	eeb0 0a48 	vmov.f32	s0, s16
 8009a42:	eef0 0a68 	vmov.f32	s1, s17
 8009a46:	ecbd 8b02 	vpop	{d8}
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}

08009a4c <__ieee754_sqrt>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	ec55 4b10 	vmov	r4, r5, d0
 8009a54:	4e55      	ldr	r6, [pc, #340]	; (8009bac <__ieee754_sqrt+0x160>)
 8009a56:	43ae      	bics	r6, r5
 8009a58:	ee10 0a10 	vmov	r0, s0
 8009a5c:	ee10 3a10 	vmov	r3, s0
 8009a60:	462a      	mov	r2, r5
 8009a62:	4629      	mov	r1, r5
 8009a64:	d110      	bne.n	8009a88 <__ieee754_sqrt+0x3c>
 8009a66:	ee10 2a10 	vmov	r2, s0
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	f7f6 fd70 	bl	8000550 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4620      	mov	r0, r4
 8009a76:	4629      	mov	r1, r5
 8009a78:	f7f6 fbb4 	bl	80001e4 <__adddf3>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	ec45 4b10 	vmov	d0, r4, r5
 8009a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	dc10      	bgt.n	8009aae <__ieee754_sqrt+0x62>
 8009a8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a90:	4330      	orrs	r0, r6
 8009a92:	d0f5      	beq.n	8009a80 <__ieee754_sqrt+0x34>
 8009a94:	b15d      	cbz	r5, 8009aae <__ieee754_sqrt+0x62>
 8009a96:	ee10 2a10 	vmov	r2, s0
 8009a9a:	462b      	mov	r3, r5
 8009a9c:	ee10 0a10 	vmov	r0, s0
 8009aa0:	f7f6 fb9e 	bl	80001e0 <__aeabi_dsub>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	f7f6 fe7c 	bl	80007a4 <__aeabi_ddiv>
 8009aac:	e7e6      	b.n	8009a7c <__ieee754_sqrt+0x30>
 8009aae:	1512      	asrs	r2, r2, #20
 8009ab0:	d074      	beq.n	8009b9c <__ieee754_sqrt+0x150>
 8009ab2:	07d4      	lsls	r4, r2, #31
 8009ab4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ab8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ac0:	bf5e      	ittt	pl
 8009ac2:	0fda      	lsrpl	r2, r3, #31
 8009ac4:	005b      	lslpl	r3, r3, #1
 8009ac6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009aca:	2400      	movs	r4, #0
 8009acc:	0fda      	lsrs	r2, r3, #31
 8009ace:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ad2:	107f      	asrs	r7, r7, #1
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	2516      	movs	r5, #22
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ade:	1886      	adds	r6, r0, r2
 8009ae0:	428e      	cmp	r6, r1
 8009ae2:	bfde      	ittt	le
 8009ae4:	1b89      	suble	r1, r1, r6
 8009ae6:	18b0      	addle	r0, r6, r2
 8009ae8:	18a4      	addle	r4, r4, r2
 8009aea:	0049      	lsls	r1, r1, #1
 8009aec:	3d01      	subs	r5, #1
 8009aee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009af2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009af6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009afa:	d1f0      	bne.n	8009ade <__ieee754_sqrt+0x92>
 8009afc:	462a      	mov	r2, r5
 8009afe:	f04f 0e20 	mov.w	lr, #32
 8009b02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009b06:	4281      	cmp	r1, r0
 8009b08:	eb06 0c05 	add.w	ip, r6, r5
 8009b0c:	dc02      	bgt.n	8009b14 <__ieee754_sqrt+0xc8>
 8009b0e:	d113      	bne.n	8009b38 <__ieee754_sqrt+0xec>
 8009b10:	459c      	cmp	ip, r3
 8009b12:	d811      	bhi.n	8009b38 <__ieee754_sqrt+0xec>
 8009b14:	f1bc 0f00 	cmp.w	ip, #0
 8009b18:	eb0c 0506 	add.w	r5, ip, r6
 8009b1c:	da43      	bge.n	8009ba6 <__ieee754_sqrt+0x15a>
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	db41      	blt.n	8009ba6 <__ieee754_sqrt+0x15a>
 8009b22:	f100 0801 	add.w	r8, r0, #1
 8009b26:	1a09      	subs	r1, r1, r0
 8009b28:	459c      	cmp	ip, r3
 8009b2a:	bf88      	it	hi
 8009b2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009b30:	eba3 030c 	sub.w	r3, r3, ip
 8009b34:	4432      	add	r2, r6
 8009b36:	4640      	mov	r0, r8
 8009b38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009b3c:	f1be 0e01 	subs.w	lr, lr, #1
 8009b40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b4c:	d1db      	bne.n	8009b06 <__ieee754_sqrt+0xba>
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	d006      	beq.n	8009b60 <__ieee754_sqrt+0x114>
 8009b52:	1c50      	adds	r0, r2, #1
 8009b54:	bf13      	iteet	ne
 8009b56:	3201      	addne	r2, #1
 8009b58:	3401      	addeq	r4, #1
 8009b5a:	4672      	moveq	r2, lr
 8009b5c:	f022 0201 	bicne.w	r2, r2, #1
 8009b60:	1063      	asrs	r3, r4, #1
 8009b62:	0852      	lsrs	r2, r2, #1
 8009b64:	07e1      	lsls	r1, r4, #31
 8009b66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009b6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009b6e:	bf48      	it	mi
 8009b70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009b74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009b78:	4614      	mov	r4, r2
 8009b7a:	e781      	b.n	8009a80 <__ieee754_sqrt+0x34>
 8009b7c:	0ad9      	lsrs	r1, r3, #11
 8009b7e:	3815      	subs	r0, #21
 8009b80:	055b      	lsls	r3, r3, #21
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d0fa      	beq.n	8009b7c <__ieee754_sqrt+0x130>
 8009b86:	02cd      	lsls	r5, r1, #11
 8009b88:	d50a      	bpl.n	8009ba0 <__ieee754_sqrt+0x154>
 8009b8a:	f1c2 0420 	rsb	r4, r2, #32
 8009b8e:	fa23 f404 	lsr.w	r4, r3, r4
 8009b92:	1e55      	subs	r5, r2, #1
 8009b94:	4093      	lsls	r3, r2
 8009b96:	4321      	orrs	r1, r4
 8009b98:	1b42      	subs	r2, r0, r5
 8009b9a:	e78a      	b.n	8009ab2 <__ieee754_sqrt+0x66>
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	e7f0      	b.n	8009b82 <__ieee754_sqrt+0x136>
 8009ba0:	0049      	lsls	r1, r1, #1
 8009ba2:	3201      	adds	r2, #1
 8009ba4:	e7ef      	b.n	8009b86 <__ieee754_sqrt+0x13a>
 8009ba6:	4680      	mov	r8, r0
 8009ba8:	e7bd      	b.n	8009b26 <__ieee754_sqrt+0xda>
 8009baa:	bf00      	nop
 8009bac:	7ff00000 	.word	0x7ff00000

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr
