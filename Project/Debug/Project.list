
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af2c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b138  0800b138  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b140  0800b140  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800b148  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  200002f0  0800b434  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001144  0800b434  00021144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001784a  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca5  00000000  00000000  00037b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a37  00000000  00000000  0003cc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001895a  00000000  00000000  000556b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fe1  00000000  00000000  0006e011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  00103044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f0 	.word	0x200002f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b0ac 	.word	0x0800b0ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002f4 	.word	0x200002f4
 80001d4:	0800b0ac 	.word	0x0800b0ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <read_pos>:
	SENSOR_CHECK,
} State;

extern int homing;

void read_pos() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <read_pos+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <read_pos+0x40>)
 8000ea2:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <read_pos+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fae7 	bl	800047c <__aeabi_i2d>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <read_pos+0x44>)
 8000eb4:	f7ff fb4c 	bl	8000550 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fe16 	bl	8000af0 <__aeabi_d2f>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <read_pos+0x48>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200004f8 	.word	0x200004f8
 8000ed4:	20000fd4 	.word	0x20000fd4
 8000ed8:	3f8e0000 	.word	0x3f8e0000
 8000edc:	20000fd8 	.word	0x20000fd8

08000ee0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d10a      	bne.n	8000f08 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <motor+0x4c>)
 8000efa:	f004 ff4f 	bl	8005d9c <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <motor+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	}
}
 8000f06:	e00c      	b.n	8000f22 <motor+0x42>
	} else if (DIR == 1) {
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d109      	bne.n	8000f22 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <motor+0x4c>)
 8000f16:	f004 ff41 	bl	8005d9c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <motor+0x50>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	20000444 	.word	0x20000444

08000f34 <Init_Homing>:

void Init_Homing() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	483f      	ldr	r0, [pc, #252]	; (800103c <Init_Homing+0x108>)
 8000f3e:	f004 ff2d 	bl	8005d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	483d      	ldr	r0, [pc, #244]	; (800103c <Init_Homing+0x108>)
 8000f48:	f004 ff28 	bl	8005d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2120      	movs	r1, #32
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <Init_Homing+0x108>)
 8000f52:	f004 ff23 	bl	8005d9c <HAL_GPIO_WritePin>
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <Init_Homing+0x10c>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <Init_Homing+0x30>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d01b      	beq.n	8000f9a <Init_Homing+0x66>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f62:	e068      	b.n	8001036 <Init_Homing+0x102>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	4836      	ldr	r0, [pc, #216]	; (8001044 <Init_Homing+0x110>)
 8000f6a:	f004 feff 	bl	8005d6c <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <Init_Homing+0x58>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <Init_Homing+0x114>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ffae 	bl	8000ee0 <motor>
			state_homing = 1;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <Init_Homing+0x10c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	801a      	strh	r2, [r3, #0]
		break;
 8000f8a:	e054      	b.n	8001036 <Init_Homing+0x102>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f94:	f7ff ffa4 	bl	8000ee0 <motor>
		break;
 8000f98:	e04d      	b.n	8001036 <Init_Homing+0x102>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <Init_Homing+0x118>)
 8000f9e:	f004 fee5 	bl	8005d6c <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d140      	bne.n	800102a <Init_Homing+0xf6>
			motor(0, 1);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff98 	bl	8000ee0 <motor>
			HAL_Delay(400);
 8000fb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fb4:	f004 f812 	bl	8004fdc <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <Init_Homing+0x114>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <Init_Homing+0x114>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <Init_Homing+0x11c>)
 8000fca:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <Init_Homing+0x11c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa53 	bl	800047c <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <Init_Homing+0x120>)
 8000fdc:	f7ff fab8 	bl	8000550 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd82 	bl	8000af0 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <Init_Homing+0x124>)
 8000ff0:	6013      	str	r3, [r2, #0]
			y_axis_Moving_Status= 0;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <Init_Homing+0x128>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	841a      	strh	r2, [r3, #32]
			state_homing = 0;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <Init_Homing+0x10c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000ffe:	2006      	movs	r0, #6
 8001000:	f000 fbf8 	bl	80017f4 <EndEffector_Event>
			HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <Init_Homing+0x108>)
 800100a:	f004 fec7 	bl	8005d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <Init_Homing+0x108>)
 8001014:	f004 fec2 	bl	8005d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8001018:	2200      	movs	r2, #0
 800101a:	2120      	movs	r1, #32
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <Init_Homing+0x108>)
 800101e:	f004 febd 	bl	8005d9c <HAL_GPIO_WritePin>
			State = IDLE;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <Init_Homing+0x12c>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
		break;
 8001028:	e004      	b.n	8001034 <Init_Homing+0x100>
			motor(Max_Counter_PWM * 0.18, 1);
 800102a:	2101      	movs	r1, #1
 800102c:	f642 6014 	movw	r0, #11796	; 0x2e14
 8001030:	f7ff ff56 	bl	8000ee0 <motor>
		break;
 8001034:	bf00      	nop
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020000 	.word	0x40020000
 8001040:	2000030c 	.word	0x2000030c
 8001044:	40020400 	.word	0x40020400
 8001048:	200004f8 	.word	0x200004f8
 800104c:	40020800 	.word	0x40020800
 8001050:	20000fd4 	.word	0x20000fd4
 8001054:	3f8e0000 	.word	0x3f8e0000
 8001058:	20000fd8 	.word	0x20000fd8
 800105c:	20000e30 	.word	0x20000e30
 8001060:	20000268 	.word	0x20000268

08001064 <Joy_Homing>:

void Joy_Homing() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <Joy_Homing+0xb8>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <Joy_Homing+0x12>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d017      	beq.n	80010a4 <Joy_Homing+0x40>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8001074:	e04f      	b.n	8001116 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	4829      	ldr	r0, [pc, #164]	; (8001120 <Joy_Homing+0xbc>)
 800107c:	f004 fe76 	bl	8005d6c <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <Joy_Homing+0x32>
			motor(0, 1);
 8001086:	2101      	movs	r1, #1
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff29 	bl	8000ee0 <motor>
			state_homing = 1;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <Joy_Homing+0xb8>)
 8001090:	2201      	movs	r2, #1
 8001092:	801a      	strh	r2, [r3, #0]
		break;
 8001094:	e03f      	b.n	8001116 <Joy_Homing+0xb2>
			motor(Max_Counter_PWM * 0.25, -1);
 8001096:	f04f 31ff 	mov.w	r1, #4294967295
 800109a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800109e:	f7ff ff1f 	bl	8000ee0 <motor>
		break;
 80010a2:	e038      	b.n	8001116 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	481f      	ldr	r0, [pc, #124]	; (8001124 <Joy_Homing+0xc0>)
 80010a8:	f004 fe60 	bl	8005d6c <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d12b      	bne.n	800110a <Joy_Homing+0xa6>
			motor(0, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff13 	bl	8000ee0 <motor>
			HAL_Delay(400);
 80010ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010be:	f003 ff8d 	bl	8004fdc <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <Joy_Homing+0xc4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <Joy_Homing+0xc4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <Joy_Homing+0xc8>)
 80010d4:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <Joy_Homing+0xc8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9ce 	bl	800047c <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <Joy_Homing+0xcc>)
 80010e6:	f7ff fa33 	bl	8000550 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fcfd 	bl	8000af0 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <Joy_Homing+0xd0>)
 80010fa:	6013      	str	r3, [r2, #0]
			homing = 0;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <Joy_Homing+0xd4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			state_homing = 0;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <Joy_Homing+0xb8>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
		break;
 8001108:	e004      	b.n	8001114 <Joy_Homing+0xb0>
			motor(Max_Counter_PWM * 0.18, 1);
 800110a:	2101      	movs	r1, #1
 800110c:	f642 6014 	movw	r0, #11796	; 0x2e14
 8001110:	f7ff fee6 	bl	8000ee0 <motor>
		break;
 8001114:	bf00      	nop
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000030e 	.word	0x2000030e
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	200004f8 	.word	0x200004f8
 800112c:	20000fd4 	.word	0x20000fd4
 8001130:	3f8e0000 	.word	0x3f8e0000
 8001134:	20000fd8 	.word	0x20000fd8
 8001138:	20000390 	.word	0x20000390

0800113c <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <modbus_1t5_Timeout+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	751a      	strb	r2, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000310 	.word	0x20000310

0800115c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <modbus_3t5_Timeout+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	755a      	strb	r2, [r3, #21]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000310 	.word	0x20000310

0800117c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <modbus_UART_Recived+0x60>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <modbus_UART_Recived+0x60>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	b289      	uxth	r1, r1
 800119a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800119e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011a2:	d210      	bcs.n	80011c6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <modbus_UART_Recived+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68d8      	ldr	r0, [r3, #12]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <modbus_UART_Recived+0x60>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <modbus_UART_Recived+0x60>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011b6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80011ba:	4413      	add	r3, r2
 80011bc:	3302      	adds	r3, #2
 80011be:	2201      	movs	r2, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	f008 fb9b 	bl	80098fc <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <modbus_UART_Recived+0x60>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000310 	.word	0x20000310

080011e0 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <Modbus_init+0x9c>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <Modbus_init+0x9c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <Modbus_init+0x9c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <Modbus_init+0xa0>)
 8001200:	2114      	movs	r1, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f007 fd2c 	bl	8008c60 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <Modbus_init+0x9c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <Modbus_init+0xa4>)
 8001210:	210e      	movs	r1, #14
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fd24 	bl	8008c60 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <Modbus_init+0x9c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <Modbus_init+0xa8>)
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fac2 	bl	80097ac <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <Modbus_init+0x9c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68d8      	ldr	r0, [r3, #12]
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <Modbus_init+0x9c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <Modbus_init+0x9c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800123a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800123e:	4413      	add	r3, r2
 8001240:	3302      	adds	r3, #2
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	f008 fb59 	bl	80098fc <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <Modbus_init+0x9c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10c      	bne.n	8001274 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <Modbus_init+0x9c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fda7 	bl	8007db4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <Modbus_init+0x9c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f006 ffe6 	bl	8008240 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000310 	.word	0x20000310
 8001280:	0800113d 	.word	0x0800113d
 8001284:	0800115d 	.word	0x0800115d
 8001288:	0800117d 	.word	0x0800117d

0800128c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001298:	23ff      	movs	r3, #255	; 0xff
 800129a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800129c:	23ff      	movs	r3, #255	; 0xff
 800129e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80012a0:	e013      	b.n	80012ca <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	4053      	eors	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <CRC16+0x64>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4053      	eors	r3, r2
 80012be:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <CRC16+0x68>)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80012ca:	883b      	ldrh	r3, [r7, #0]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	803a      	strh	r2, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e6      	bne.n	80012a2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	b29b      	uxth	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000100 	.word	0x20000100
 80012f4:	20000000 	.word	0x20000000

080012f8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	switch(hModbus->Mstatus)
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7e1b      	ldrb	r3, [r3, #24]
 8001304:	3b01      	subs	r3, #1
 8001306:	2b03      	cmp	r3, #3
 8001308:	d80a      	bhi.n	8001320 <Modbus_Protocal_Worker+0x28>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <Modbus_Protocal_Worker+0x18>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800132b 	.word	0x0800132b
 8001314:	080014cb 	.word	0x080014cb
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013dd 	.word	0x080013dd
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001320:	4b78      	ldr	r3, [pc, #480]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	761a      	strb	r2, [r3, #24]
		break;
 8001328:	e0e8      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001336:	f000 f9dd 	bl	80016f4 <Modbus_Emission>
 800133a:	e01c      	b.n	8001376 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800133c:	4b71      	ldr	r3, [pc, #452]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	7d9b      	ldrb	r3, [r3, #22]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d017      	beq.n	8001376 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2203      	movs	r2, #3
 8001374:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	f040 80b3 	bne.w	80014ee <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001388:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68d8      	ldr	r0, [r3, #12]
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013a4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80013a8:	4413      	add	r3, r2
 80013aa:	3302      	adds	r3, #2
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f008 faa4 	bl	80098fc <HAL_UART_Receive_IT>

		}
		break;
 80013b4:	e09b      	b.n	80014ee <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8098 	beq.w	80014f2 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80013c2:	4b50      	ldr	r3, [pc, #320]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80013ca:	4b4e      	ldr	r3, [pc, #312]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	22fe      	movs	r2, #254	; 0xfe
 80013d0:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2204      	movs	r2, #4
 80013d8:	761a      	strb	r2, [r3, #24]
		}
		break;
 80013da:	e08a      	b.n	80014f2 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80013dc:	4b49      	ldr	r3, [pc, #292]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7d9b      	ldrb	r3, [r3, #22]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013fa:	4b42      	ldr	r3, [pc, #264]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001402:	f113 0f02 	cmn.w	r3, #2
 8001406:	d150      	bne.n	80014aa <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001420:	3b02      	subs	r3, #2
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff ff31 	bl	800128c <CRC16>
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800142e:	793a      	ldrb	r2, [r7, #4]
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800143c:	3b02      	subs	r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001444:	429a      	cmp	r2, r3
 8001446:	d10c      	bne.n	8001462 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001448:	797a      	ldrb	r2, [r7, #5]
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001456:	3b01      	subs	r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800145e:	429a      	cmp	r2, r3
 8001460:	d004      	beq.n	800146c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	75da      	strb	r2, [r3, #23]
				break;
 800146a:	e047      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d113      	bne.n	80014a6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800148e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001498:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800149a:	461a      	mov	r2, r3
 800149c:	f009 fbf0 	bl	800ac80 <memcpy>

			//execute command
			Modbus_frame_response();
 80014a0:	f000 f910 	bl	80016c4 <Modbus_frame_response>
 80014a4:	e001      	b.n	80014aa <Modbus_Protocal_Worker+0x1b2>
				break;
 80014a6:	bf00      	nop
					}
		break;


	}
}
 80014a8:	e028      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	7d5b      	ldrb	r3, [r3, #21]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fac8 	bl	8009a58 <HAL_UART_AbortReceive>
		break;
 80014c8:	e015      	b.n	80014f6 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d10f      	bne.n	80014fa <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Modbus_Protocal_Worker+0x20c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	761a      	strb	r2, [r3, #24]
		break;
 80014ec:	e005      	b.n	80014fa <Modbus_Protocal_Worker+0x202>
		break;
 80014ee:	bf00      	nop
 80014f0:	e004      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014f2:	bf00      	nop
 80014f4:	e002      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <Modbus_Protocal_Worker+0x204>
		break;
 80014fa:	bf00      	nop
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000310 	.word	0x20000310

08001508 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <modbusWrite1Register+0x80>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	7e9b      	ldrb	r3, [r3, #26]
 8001514:	b29b      	uxth	r3, r3
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <modbusWrite1Register+0x80>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	7edb      	ldrb	r3, [r3, #27]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <modbusWrite1Register+0x80>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	d903      	bls.n	800153a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001532:	2002      	movs	r0, #2
 8001534:	f000 f8a4 	bl	8001680 <ModbusErrorReply>
			 return;
 8001538:	e023      	b.n	8001582 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <modbusWrite1Register+0x80>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <modbusWrite1Register+0x80>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	440b      	add	r3, r1
 800154a:	7f12      	ldrb	r2, [r2, #28]
 800154c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <modbusWrite1Register+0x80>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <modbusWrite1Register+0x80>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	7f52      	ldrb	r2, [r2, #29]
 8001560:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <modbusWrite1Register+0x80>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <modbusWrite1Register+0x80>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001570:	2208      	movs	r2, #8
 8001572:	4619      	mov	r1, r3
 8001574:	f009 fb84 	bl	800ac80 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <modbusWrite1Register+0x80>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000310 	.word	0x20000310

0800158c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <modbusRead1Register+0xf0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	7f1b      	ldrb	r3, [r3, #28]
 8001598:	b29b      	uxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <modbusRead1Register+0xf0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	7f5b      	ldrb	r3, [r3, #29]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <modbusRead1Register+0xf0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	7e9b      	ldrb	r3, [r3, #26]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <modbusRead1Register+0xf0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	7edb      	ldrb	r3, [r3, #27]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <modbusRead1Register+0x42>
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2b7d      	cmp	r3, #125	; 0x7d
 80015cc:	d903      	bls.n	80015d6 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f856 	bl	8001680 <ModbusErrorReply>
		 return;
 80015d4:	e04e      	b.n	8001674 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <modbusRead1Register+0xf0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d808      	bhi.n	80015f4 <modbusRead1Register+0x68>
 80015e2:	88ba      	ldrh	r2, [r7, #4]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4413      	add	r3, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <modbusRead1Register+0xf0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d903      	bls.n	80015fc <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f000 f843 	bl	8001680 <ModbusErrorReply>
		 return;
 80015fa:	e03b      	b.n	8001674 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <modbusRead1Register+0xf0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2203      	movs	r2, #3
 8001602:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <modbusRead1Register+0xf0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001616:	2400      	movs	r4, #0
 8001618:	e020      	b.n	800165c <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <modbusRead1Register+0xf0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	4423      	add	r3, r4
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	18d1      	adds	r1, r2, r3
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <modbusRead1Register+0xf0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	1c63      	adds	r3, r4, #1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	7849      	ldrb	r1, [r1, #1]
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <modbusRead1Register+0xf0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	88bb      	ldrh	r3, [r7, #4]
 8001642:	4423      	add	r3, r4
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	18d1      	adds	r1, r2, r3
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <modbusRead1Register+0xf0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	0063      	lsls	r3, r4, #1
 800164e:	3303      	adds	r3, #3
 8001650:	7809      	ldrb	r1, [r1, #0]
 8001652:	4413      	add	r3, r2
 8001654:	460a      	mov	r2, r1
 8001656:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800165a:	3401      	adds	r4, #1
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	429c      	cmp	r4, r3
 8001660:	dbdb      	blt.n	800161a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <modbusRead1Register+0xf0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0052      	lsls	r2, r2, #1
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	bf00      	nop
 800167c:	20000310 	.word	0x20000310

08001680 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <ModbusErrorReply+0x40>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	7e5a      	ldrb	r2, [r3, #25]
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <ModbusErrorReply+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <ModbusErrorReply+0x40>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	79fa      	ldrb	r2, [r7, #7]
 80016a4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <ModbusErrorReply+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000310 	.word	0x20000310

080016c4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <Modbus_frame_response+0x2c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	7e5b      	ldrb	r3, [r3, #25]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d004      	beq.n	80016dc <Modbus_frame_response+0x18>
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d105      	bne.n	80016e2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80016d6:	f7ff ff17 	bl	8001508 <modbusWrite1Register>
		break;
 80016da:	e006      	b.n	80016ea <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80016dc:	f7ff ff56 	bl	800158c <modbusRead1Register>
		break;
 80016e0:	e003      	b.n	80016ea <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff ffcc 	bl	8001680 <ModbusErrorReply>
		break;
 80016e8:	bf00      	nop

	}
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000310 	.word	0x20000310

080016f4 <Modbus_Emission>:

void Modbus_Emission()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <Modbus_Emission+0xfc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	d15e      	bne.n	80017c8 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <Modbus_Emission+0xfc>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <Modbus_Emission+0xfc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <Modbus_Emission+0xfc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001720:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <Modbus_Emission+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <Modbus_Emission+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001732:	461a      	mov	r2, r3
 8001734:	f009 faa4 	bl	800ac80 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <Modbus_Emission+0xfc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <Modbus_Emission+0xfc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3203      	adds	r2, #3
 8001748:	b292      	uxth	r2, r2
 800174a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <Modbus_Emission+0xfc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <Modbus_Emission+0xfc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800175e:	3b02      	subs	r3, #2
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff fd92 	bl	800128c <CRC16>
 8001768:	4603      	mov	r3, r0
 800176a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <Modbus_Emission+0xfc>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <Modbus_Emission+0xfc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001778:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800177a:	7939      	ldrb	r1, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <Modbus_Emission+0xfc>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <Modbus_Emission+0xfc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001790:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001792:	7979      	ldrb	r1, [r7, #5]
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <Modbus_Emission+0xfc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d10d      	bne.n	80017c8 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <Modbus_Emission+0xfc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <Modbus_Emission+0xfc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <Modbus_Emission+0xfc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80017be:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80017c2:	461a      	mov	r2, r3
 80017c4:	f008 f8ca 	bl	800995c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <Modbus_Emission+0xfc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <Modbus_Emission+0xfc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <Modbus_Emission+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <Modbus_Emission+0xfc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2202      	movs	r2, #2
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000310 	.word	0x20000310

080017f4 <EndEffector_Event>:
	TRAJECTGEN, TRAJECTEVA_PID, TRAJECTGENNEXT
} State_Control;

int Count_Time = 0;

void EndEffector_Event(char EndEffector_State) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 80017fe:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <EndEffector_Event+0x204>)
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	f040 80ea 	bne.w	80019e0 <EndEffector_Event+0x1ec>
		switch (EndEffector_State) {
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	f200 80ed 	bhi.w	80019ee <EndEffector_Event+0x1fa>
 8001814:	a201      	add	r2, pc, #4	; (adr r2, 800181c <EndEffector_Event+0x28>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	080019e5 	.word	0x080019e5
 8001820:	08001851 	.word	0x08001851
 8001824:	08001867 	.word	0x08001867
 8001828:	0800187d 	.word	0x0800187d
 800182c:	08001893 	.word	0x08001893
 8001830:	080018a9 	.word	0x080018a9
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018eb 	.word	0x080018eb
 8001840:	08001901 	.word	0x08001901
 8001844:	0800195d 	.word	0x0800195d
 8001848:	08001973 	.word	0x08001973
 800184c:	080019cf 	.word	0x080019cf
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8001850:	2364      	movs	r3, #100	; 0x64
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2302      	movs	r3, #2
 8001856:	4a69      	ldr	r2, [pc, #420]	; (80019fc <EndEffector_Event+0x208>)
 8001858:	212a      	movs	r1, #42	; 0x2a
 800185a:	4867      	ldr	r0, [pc, #412]	; (80019f8 <EndEffector_Event+0x204>)
 800185c:	f004 fc14 	bl	8006088 <HAL_I2C_Master_Transmit>
					2, 100);
			EndEffector_State = Init;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
			break;
 8001864:	e0c3      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	4a64      	ldr	r2, [pc, #400]	; (8001a00 <EndEffector_Event+0x20c>)
 800186e:	212a      	movs	r1, #42	; 0x2a
 8001870:	4861      	ldr	r0, [pc, #388]	; (80019f8 <EndEffector_Event+0x204>)
 8001872:	f004 fc09 	bl	8006088 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
			break;
 800187a:	e0b8      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2304      	movs	r3, #4
 8001882:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <EndEffector_Event+0x210>)
 8001884:	212a      	movs	r1, #42	; 0x2a
 8001886:	485c      	ldr	r0, [pc, #368]	; (80019f8 <EndEffector_Event+0x204>)
 8001888:	f004 fbfe 	bl	8006088 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 800188c:	2300      	movs	r3, #0
 800188e:	71fb      	strb	r3, [r7, #7]
			break;
 8001890:	e0ad      	b.n	80019ee <EndEffector_Event+0x1fa>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	4a5b      	ldr	r2, [pc, #364]	; (8001a08 <EndEffector_Event+0x214>)
 800189a:	212a      	movs	r1, #42	; 0x2a
 800189c:	4856      	ldr	r0, [pc, #344]	; (80019f8 <EndEffector_Event+0x204>)
 800189e:	f004 fbf3 	bl	8006088 <HAL_I2C_Master_Transmit>
					1, 100);
			EndEffector_State = Init;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
			break;
 80018a6:	e0a2      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2304      	movs	r3, #4
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <EndEffector_Event+0x218>)
 80018b0:	212a      	movs	r1, #42	; 0x2a
 80018b2:	4851      	ldr	r0, [pc, #324]	; (80019f8 <EndEffector_Event+0x204>)
 80018b4:	f004 fbe8 	bl	8006088 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 100);
			EndEffector_State = Init;
 80018b8:	2300      	movs	r3, #0
 80018ba:	71fb      	strb	r3, [r7, #7]
			break;
 80018bc:	e097      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2302      	movs	r3, #2
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <EndEffector_Event+0x21c>)
 80018c6:	212a      	movs	r1, #42	; 0x2a
 80018c8:	484b      	ldr	r0, [pc, #300]	; (80019f8 <EndEffector_Event+0x204>)
 80018ca:	f004 fbdd 	bl	8006088 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
			break;
 80018d2:	e08c      	b.n	80019ee <EndEffector_Event+0x1fa>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80018d4:	2364      	movs	r3, #100	; 0x64
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2302      	movs	r3, #2
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <EndEffector_Event+0x220>)
 80018dc:	212a      	movs	r1, #42	; 0x2a
 80018de:	4846      	ldr	r0, [pc, #280]	; (80019f8 <EndEffector_Event+0x204>)
 80018e0:	f004 fbd2 	bl	8006088 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 100);
			EndEffector_State = Init;
 80018e4:	2300      	movs	r3, #0
 80018e6:	71fb      	strb	r3, [r7, #7]
			break;
 80018e8:	e081      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	4a49      	ldr	r2, [pc, #292]	; (8001a18 <EndEffector_Event+0x224>)
 80018f2:	212a      	movs	r1, #42	; 0x2a
 80018f4:	4840      	ldr	r0, [pc, #256]	; (80019f8 <EndEffector_Event+0x204>)
 80018f6:	f004 fbc7 	bl	8006088 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Pick_Check;
 80018fa:	2309      	movs	r3, #9
 80018fc:	71fb      	strb	r3, [r7, #7]
			break;
 80018fe:	e076      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Pick_Check:
			if (Count_Time == 0) {
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <EndEffector_Event+0x228>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <EndEffector_Event+0x128>
				timestamp_End = HAL_GetTick() + 550;
 8001908:	f003 fb5c 	bl	8004fc4 <HAL_GetTick>
 800190c:	4603      	mov	r3, r0
 800190e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001912:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <EndEffector_Event+0x22c>)
 8001914:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <EndEffector_Event+0x228>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <EndEffector_Event+0x228>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d161      	bne.n	80019e8 <EndEffector_Event+0x1f4>
				if (Read_data[0] == 0b0111) {
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <EndEffector_Event+0x230>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d104      	bne.n	8001936 <EndEffector_Event+0x142>
//					Read_data[0] = 0;

					Count_Time = 0;
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <EndEffector_Event+0x228>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
					EndEffector_State = Init;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
//					State_Control = TRAJECTGENNEXT;

				}
				if (HAL_GetTick() >= timestamp_End) {
 8001936:	f003 fb45 	bl	8004fc4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <EndEffector_Event+0x22c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d351      	bcc.n	80019e8 <EndEffector_Event+0x1f4>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <EndEffector_Event+0x230>)
 800194c:	212a      	movs	r1, #42	; 0x2a
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <EndEffector_Event+0x204>)
 8001950:	f004 fc98 	bl	8006284 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <EndEffector_Event+0x228>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800195a:	e045      	b.n	80019e8 <EndEffector_Event+0x1f4>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2302      	movs	r3, #2
 8001962:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <EndEffector_Event+0x234>)
 8001964:	212a      	movs	r1, #42	; 0x2a
 8001966:	4824      	ldr	r0, [pc, #144]	; (80019f8 <EndEffector_Event+0x204>)
 8001968:	f004 fb8e 	bl	8006088 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Place_Check;
 800196c:	230b      	movs	r3, #11
 800196e:	71fb      	strb	r3, [r7, #7]
			break;
 8001970:	e03d      	b.n	80019ee <EndEffector_Event+0x1fa>

		case Place_Check:
			if (Count_Time == 0) {
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <EndEffector_Event+0x228>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <EndEffector_Event+0x19a>
				timestamp_End = HAL_GetTick() + 550;
 800197a:	f003 fb23 	bl	8004fc4 <HAL_GetTick>
 800197e:	4603      	mov	r3, r0
 8001980:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <EndEffector_Event+0x22c>)
 8001986:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <EndEffector_Event+0x228>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <EndEffector_Event+0x228>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d12a      	bne.n	80019ec <EndEffector_Event+0x1f8>
				if (Read_data[0] == 0b0100) {
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <EndEffector_Event+0x230>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d104      	bne.n	80019a8 <EndEffector_Event+0x1b4>
//					Read_data[0] = 0;
//					State_Control = TRAJECTGENNEXT;
					EndEffector_State = Init;
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]
					Count_Time = 0;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <EndEffector_Event+0x228>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

				}
				if (HAL_GetTick() >= timestamp_End) {
 80019a8:	f003 fb0c 	bl	8004fc4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <EndEffector_Event+0x22c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d31a      	bcc.n	80019ec <EndEffector_Event+0x1f8>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <EndEffector_Event+0x230>)
 80019be:	212a      	movs	r1, #42	; 0x2a
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <EndEffector_Event+0x204>)
 80019c2:	f004 fc5f 	bl	8006284 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <EndEffector_Event+0x228>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80019cc:	e00e      	b.n	80019ec <EndEffector_Event+0x1f8>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1, 100);
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <EndEffector_Event+0x230>)
 80019d6:	212a      	movs	r1, #42	; 0x2a
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <EndEffector_Event+0x204>)
 80019da:	f004 fc53 	bl	8006284 <HAL_I2C_Master_Receive>
			break;
 80019de:	e006      	b.n	80019ee <EndEffector_Event+0x1fa>
		}

	}
 80019e0:	bf00      	nop
 80019e2:	e004      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019e4:	bf00      	nop
 80019e6:	e002      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <EndEffector_Event+0x1fa>
			break;
 80019ec:	bf00      	nop
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000398 	.word	0x20000398
 80019fc:	20000200 	.word	0x20000200
 8001a00:	20000204 	.word	0x20000204
 8001a04:	20000208 	.word	0x20000208
 8001a08:	2000020c 	.word	0x2000020c
 8001a0c:	20000210 	.word	0x20000210
 8001a10:	20000214 	.word	0x20000214
 8001a14:	20000218 	.word	0x20000218
 8001a18:	2000021c 	.word	0x2000021c
 8001a1c:	2000031c 	.word	0x2000031c
 8001a20:	20000318 	.word	0x20000318
 8001a24:	20000314 	.word	0x20000314
 8001a28:	20000220 	.word	0x20000220

08001a2c <JoyStickControl>:

int homing = 0;

uint32_t time_joy_offset = 0;

void JoyStickControl() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af02      	add	r7, sp, #8

	read_pos();
 8001a32:	f7ff fa2f 	bl	8000e94 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2104      	movs	r1, #4
 8001a3a:	488f      	ldr	r0, [pc, #572]	; (8001c78 <JoyStickControl+0x24c>)
 8001a3c:	f004 f9ae 	bl	8005d9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8001a40:	231e      	movs	r3, #30
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	230a      	movs	r3, #10
 8001a46:	4a8d      	ldr	r2, [pc, #564]	; (8001c7c <JoyStickControl+0x250>)
 8001a48:	498d      	ldr	r1, [pc, #564]	; (8001c80 <JoyStickControl+0x254>)
 8001a4a:	488e      	ldr	r0, [pc, #568]	; (8001c84 <JoyStickControl+0x258>)
 8001a4c:	f005 fe8f 	bl	800776e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2104      	movs	r1, #4
 8001a54:	4888      	ldr	r0, [pc, #544]	; (8001c78 <JoyStickControl+0x24c>)
 8001a56:	f004 f9a1 	bl	8005d9c <HAL_GPIO_WritePin>
	// O 0xdf   0x7f

//	static uint32_t timestamp_joy = 0;

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <JoyStickControl+0x250>)
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a60:	d114      	bne.n	8001a8c <JoyStickControl+0x60>
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <JoyStickControl+0x25c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d110      	bne.n	8001a8c <JoyStickControl+0x60>
		if (state_motor == 1) {
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <JoyStickControl+0x260>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d103      	bne.n	8001a7a <JoyStickControl+0x4e>
			state_motor = 0;
 8001a72:	4b86      	ldr	r3, [pc, #536]	; (8001c8c <JoyStickControl+0x260>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001a78:	e195      	b.n	8001da6 <JoyStickControl+0x37a>
		} else if (state_motor == 0) {
 8001a7a:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <JoyStickControl+0x260>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8191 	bne.w	8001da6 <JoyStickControl+0x37a>
			state_motor = 1;
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <JoyStickControl+0x260>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001a8a:	e18c      	b.n	8001da6 <JoyStickControl+0x37a>
		}
	} else if (RX[4] == 0xbf && button_last == 0xFF
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <JoyStickControl+0x250>)
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	2bbf      	cmp	r3, #191	; 0xbf
 8001a92:	d16d      	bne.n	8001b70 <JoyStickControl+0x144>
 8001a94:	4b7e      	ldr	r3, [pc, #504]	; (8001c90 <JoyStickControl+0x264>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d169      	bne.n	8001b70 <JoyStickControl+0x144>
			&& HAL_GetTick() - time_joy_offset >= 1000) { //X Button
 8001a9c:	f003 fa92 	bl	8004fc4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <JoyStickControl+0x268>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aac:	d360      	bcc.n	8001b70 <JoyStickControl+0x144>
		time_joy_offset = HAL_GetTick();
 8001aae:	f003 fa89 	bl	8004fc4 <HAL_GetTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <JoyStickControl+0x268>)
 8001ab6:	6013      	str	r3, [r2, #0]
		y_c[count] = PosY;
 8001ab8:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <JoyStickControl+0x26c>)
 8001aba:	f993 3000 	ldrsb.w	r3, [r3]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <JoyStickControl+0x270>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4976      	ldr	r1, [pc, #472]	; (8001ca0 <JoyStickControl+0x274>)
 8001ac6:	0083      	lsls	r3, r0, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	601a      	str	r2, [r3, #0]

		if (x_axis_Actual_Position>= 0 && x_axis_Actual_Position <= 3500) {
 8001acc:	4b75      	ldr	r3, [pc, #468]	; (8001ca4 <JoyStickControl+0x278>)
 8001ace:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001ad2:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d813      	bhi.n	8001b02 <JoyStickControl+0xd6>
			x_c[count] = (float)x_axis_Actual_Position/10.0;
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <JoyStickControl+0x278>)
 8001adc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <JoyStickControl+0x26c>)
 8001aea:	f993 3000 	ldrsb.w	r3, [r3]
 8001aee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	4a6c      	ldr	r2, [pc, #432]	; (8001ca8 <JoyStickControl+0x27c>)
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	edc3 7a00 	vstr	s15, [r3]
 8001b00:	e023      	b.n	8001b4a <JoyStickControl+0x11e>
		} else if(x_axis_Actual_Position >= 65535-3500 && x_axis_Actual_Position <= 65535) {
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <JoyStickControl+0x278>)
 8001b04:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001b08:	f24f 2252 	movw	r2, #62034	; 0xf252
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d91c      	bls.n	8001b4a <JoyStickControl+0x11e>
			x_c[count] = -((float)(65536%x_axis_Actual_Position))/10.0;
 8001b10:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <JoyStickControl+0x278>)
 8001b12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001b16:	461a      	mov	r2, r3
 8001b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	eeb1 7a67 	vneg.f32	s14, s15
 8001b32:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <JoyStickControl+0x26c>)
 8001b34:	f993 3000 	ldrsb.w	r3, [r3]
 8001b38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <JoyStickControl+0x27c>)
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	edc3 7a00 	vstr	s15, [r3]
		}

		count += 1;
 8001b4a:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <JoyStickControl+0x26c>)
 8001b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	b25a      	sxtb	r2, r3
 8001b58:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <JoyStickControl+0x26c>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <JoyStickControl+0x26c>)
 8001b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f340 8120 	ble.w	8001da8 <JoyStickControl+0x37c>
			count = 2;
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <JoyStickControl+0x26c>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001b6e:	e11b      	b.n	8001da8 <JoyStickControl+0x37c>
//		count -= 1;
//		if (count <= 0) {
//			count = 0;
//		}
//	}
	else if (RX[4] == 0xdf && button_last == 0xFF
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <JoyStickControl+0x250>)
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	2bdf      	cmp	r3, #223	; 0xdf
 8001b76:	f040 8117 	bne.w	8001da8 <JoyStickControl+0x37c>
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <JoyStickControl+0x264>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	f040 8112 	bne.w	8001da8 <JoyStickControl+0x37c>
			&& HAL_GetTick() - time_joy_offset >= 1000 && count >= 2) { // Delete Button
 8001b84:	f003 fa1e 	bl	8004fc4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <JoyStickControl+0x268>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b94:	f0c0 8108 	bcc.w	8001da8 <JoyStickControl+0x37c>
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <JoyStickControl+0x26c>)
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	f340 8102 	ble.w	8001da8 <JoyStickControl+0x37c>
		Calculate_Position(x_c[0], x_c[1], x_c[2], y_c[0], y_c[1], y_c[2]);
 8001ba4:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <JoyStickControl+0x27c>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <JoyStickControl+0x27c>)
 8001bac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <JoyStickControl+0x27c>)
 8001bb2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <JoyStickControl+0x274>)
 8001bb8:	ed93 6a00 	vldr	s12, [r3]
 8001bbc:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <JoyStickControl+0x274>)
 8001bbe:	edd3 5a01 	vldr	s11, [r3, #4]
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <JoyStickControl+0x274>)
 8001bc4:	ed93 5a02 	vldr	s10, [r3, #8]
 8001bc8:	eef0 2a45 	vmov.f32	s5, s10
 8001bcc:	eeb0 2a65 	vmov.f32	s4, s11
 8001bd0:	eef0 1a46 	vmov.f32	s3, s12
 8001bd4:	eeb0 1a66 	vmov.f32	s2, s13
 8001bd8:	eef0 0a47 	vmov.f32	s1, s14
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f000 f9b4 	bl	8001f4c <Calculate_Position>

		if (TRAY_STATUS == PICK) {
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <JoyStickControl+0x280>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d16d      	bne.n	8001cc8 <JoyStickControl+0x29c>
//			Calculate_Position(104, 114.5, 63.7, 221.5, 281.9, 281.7);
			Pick_Tray_Origin_x= (int16_t)(x_c[0] * 10);
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <JoyStickControl+0x27c>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <JoyStickControl+0x278>)
 8001c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Pick_Tray_Origin_y = (int16_t)(y_c[0] * 10);
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <JoyStickControl+0x274>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <JoyStickControl+0x278>)
 8001c28:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Pick_Tray_Origin_Orientation = asinf(fabsf(sin_zeta))  * 100;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <JoyStickControl+0x284>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eef0 7ae7 	vabs.f32	s15, s15
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	f009 f863 	bl	800ad04 <asinf>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001cb4 <JoyStickControl+0x288>
 8001c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 3a90 	vmov	r3, s15
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <JoyStickControl+0x278>)
 8001c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			memcpy(Pick_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001c5a:	2225      	movs	r2, #37	; 0x25
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <JoyStickControl+0x28c>)
 8001c5e:	4817      	ldr	r0, [pc, #92]	; (8001cbc <JoyStickControl+0x290>)
 8001c60:	f009 f80e 	bl	800ac80 <memcpy>
			memcpy(Pick_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001c64:	2225      	movs	r2, #37	; 0x25
 8001c66:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <JoyStickControl+0x294>)
 8001c68:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <JoyStickControl+0x298>)
 8001c6a:	f009 f809 	bl	800ac80 <memcpy>

			count = 0;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <JoyStickControl+0x26c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e070      	b.n	8001d58 <JoyStickControl+0x32c>
 8001c76:	bf00      	nop
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	20000320 	.word	0x20000320
 8001c80:	20000224 	.word	0x20000224
 8001c84:	200003ec 	.word	0x200003ec
 8001c88:	2000032b 	.word	0x2000032b
 8001c8c:	2000032a 	.word	0x2000032a
 8001c90:	2000032c 	.word	0x2000032c
 8001c94:	20000394 	.word	0x20000394
 8001c98:	2000032d 	.word	0x2000032d
 8001c9c:	20000fd8 	.word	0x20000fd8
 8001ca0:	20000330 	.word	0x20000330
 8001ca4:	20000e30 	.word	0x20000e30
 8001ca8:	2000033c 	.word	0x2000033c
 8001cac:	20001076 	.word	0x20001076
 8001cb0:	20001088 	.word	0x20001088
 8001cb4:	42c80000 	.word	0x42c80000
 8001cb8:	20000348 	.word	0x20000348
 8001cbc:	20001000 	.word	0x20001000
 8001cc0:	2000036c 	.word	0x2000036c
 8001cc4:	20000fdc 	.word	0x20000fdc
		} else if (TRAY_STATUS == PLACE) {
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <JoyStickControl+0x4d0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d143      	bne.n	8001d58 <JoyStickControl+0x32c>
//			Calculate_Position(70.4, 128.2, 130.3, -267.1, -269.1, -218.4);
			Place_Tray_Origin_x = (int16_t)(x_c[0] * 10);
 8001cd0:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <JoyStickControl+0x4d4>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b86      	ldr	r3, [pc, #536]	; (8001f04 <JoyStickControl+0x4d8>)
 8001cec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Place_Tray_Origin_y = (int16_t)(y_c[0] * 10);
 8001cf0:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <JoyStickControl+0x4dc>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d02:	ee17 3a90 	vmov	r3, s15
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <JoyStickControl+0x4d8>)
 8001d0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Place_Tray_Origin_Orientation = asinf(fabsf(sin_zeta))  * 100;
 8001d10:	4b7e      	ldr	r3, [pc, #504]	; (8001f0c <JoyStickControl+0x4e0>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eef0 7ae7 	vabs.f32	s15, s15
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	f008 fff1 	bl	800ad04 <asinf>
 8001d22:	eef0 7a40 	vmov.f32	s15, s0
 8001d26:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001f10 <JoyStickControl+0x4e4>
 8001d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <JoyStickControl+0x4d8>)
 8001d3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			memcpy(Place_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001d3e:	2225      	movs	r2, #37	; 0x25
 8001d40:	4974      	ldr	r1, [pc, #464]	; (8001f14 <JoyStickControl+0x4e8>)
 8001d42:	4875      	ldr	r0, [pc, #468]	; (8001f18 <JoyStickControl+0x4ec>)
 8001d44:	f008 ff9c 	bl	800ac80 <memcpy>
			memcpy(Place_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001d48:	2225      	movs	r2, #37	; 0x25
 8001d4a:	4974      	ldr	r1, [pc, #464]	; (8001f1c <JoyStickControl+0x4f0>)
 8001d4c:	4874      	ldr	r0, [pc, #464]	; (8001f20 <JoyStickControl+0x4f4>)
 8001d4e:	f008 ff97 	bl	800ac80 <memcpy>
			count = 0;
 8001d52:	4b74      	ldr	r3, [pc, #464]	; (8001f24 <JoyStickControl+0x4f8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
//
//			Place_Tray_Origin_x= -500;
//			Place_Tray_Origin_y= -2000;
//			Place_Tray_Origin_Orientation= 9000;;

		HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2140      	movs	r1, #64	; 0x40
 8001d5c:	4872      	ldr	r0, [pc, #456]	; (8001f28 <JoyStickControl+0x4fc>)
 8001d5e:	f004 f81d 	bl	8005d9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	4870      	ldr	r0, [pc, #448]	; (8001f28 <JoyStickControl+0x4fc>)
 8001d68:	f004 f818 	bl	8005d9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2120      	movs	r1, #32
 8001d70:	486d      	ldr	r0, [pc, #436]	; (8001f28 <JoyStickControl+0x4fc>)
 8001d72:	f004 f813 	bl	8005d9c <HAL_GPIO_WritePin>
		memset(x_c, 0, sizeof(x_c));
 8001d76:	220c      	movs	r2, #12
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4861      	ldr	r0, [pc, #388]	; (8001f00 <JoyStickControl+0x4d4>)
 8001d7c:	f008 ff8e 	bl	800ac9c <memset>
		memset(y_c, 0, sizeof(y_c));
 8001d80:	220c      	movs	r2, #12
 8001d82:	2100      	movs	r1, #0
 8001d84:	4860      	ldr	r0, [pc, #384]	; (8001f08 <JoyStickControl+0x4dc>)
 8001d86:	f008 ff89 	bl	800ac9c <memset>

		y_axis_Moving_Status= 0;
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <JoyStickControl+0x4d8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	841a      	strh	r2, [r3, #32]
//		End_Effector_Status = 0;

		count = 0;
 8001d90:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <JoyStickControl+0x4f8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]

		motor(0, 0);
 8001d96:	2100      	movs	r1, #0
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff f8a1 	bl	8000ee0 <motor>
		State = IDLE;
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <JoyStickControl+0x500>)
 8001da0:	2202      	movs	r2, #2
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e000      	b.n	8001da8 <JoyStickControl+0x37c>
		if (state_motor == 1) {
 8001da6:	bf00      	nop
//	else if (RX[4] == 0xEF && button_last == 0xFF) {
//		homing = 1;
//	}

//motor speed Select
	switch (state_motor) {
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <JoyStickControl+0x504>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <JoyStickControl+0x38a>
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d046      	beq.n	8001e42 <JoyStickControl+0x416>
 8001db4:	e08c      	b.n	8001ed0 <JoyStickControl+0x4a4>
	case 0:
		if (RX[3] == 0xfe) { //Not be push
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <JoyStickControl+0x508>)
 8001db8:	78db      	ldrb	r3, [r3, #3]
 8001dba:	2bfe      	cmp	r3, #254	; 0xfe
 8001dbc:	d108      	bne.n	8001dd0 <JoyStickControl+0x3a4>
			motor(0, 1);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff f88d 	bl	8000ee0 <motor>
			x_axis_Moving_Status= 0;
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <JoyStickControl+0x4d8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		else if (RX[3] == 0xde) { //right
			x_axis_Moving_Status = 4;
			motor(0, 1);
		}

		break;
 8001dce:	e07e      	b.n	8001ece <JoyStickControl+0x4a2>
		else if (RX[3] == 0xee) { //UP
 8001dd0:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <JoyStickControl+0x508>)
 8001dd2:	78db      	ldrb	r3, [r3, #3]
 8001dd4:	2bee      	cmp	r3, #238	; 0xee
 8001dd6:	d10a      	bne.n	8001dee <JoyStickControl+0x3c2>
			x_axis_Moving_Status= 0;
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <JoyStickControl+0x4d8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, 1);
 8001de0:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <JoyStickControl+0x50c>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f87a 	bl	8000ee0 <motor>
		break;
 8001dec:	e06f      	b.n	8001ece <JoyStickControl+0x4a2>
		else if (RX[3] == 0xbe) { //Down
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <JoyStickControl+0x508>)
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	2bbe      	cmp	r3, #190	; 0xbe
 8001df4:	d10b      	bne.n	8001e0e <JoyStickControl+0x3e2>
			x_axis_Moving_Status= 0;
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <JoyStickControl+0x4d8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, -1);
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <JoyStickControl+0x50c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	f04f 31ff 	mov.w	r1, #4294967295
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f86a 	bl	8000ee0 <motor>
		break;
 8001e0c:	e05f      	b.n	8001ece <JoyStickControl+0x4a2>
		else if (RX[3] == 0x7e) { //left
 8001e0e:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <JoyStickControl+0x508>)
 8001e10:	78db      	ldrb	r3, [r3, #3]
 8001e12:	2b7e      	cmp	r3, #126	; 0x7e
 8001e14:	d108      	bne.n	8001e28 <JoyStickControl+0x3fc>
			x_axis_Moving_Status = 8;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <JoyStickControl+0x4d8>)
 8001e18:	2208      	movs	r2, #8
 8001e1a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f85d 	bl	8000ee0 <motor>
		break;
 8001e26:	e052      	b.n	8001ece <JoyStickControl+0x4a2>
		else if (RX[3] == 0xde) { //right
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <JoyStickControl+0x508>)
 8001e2a:	78db      	ldrb	r3, [r3, #3]
 8001e2c:	2bde      	cmp	r3, #222	; 0xde
 8001e2e:	d14e      	bne.n	8001ece <JoyStickControl+0x4a2>
			x_axis_Moving_Status = 4;
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <JoyStickControl+0x4d8>)
 8001e32:	2204      	movs	r2, #4
 8001e34:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff f850 	bl	8000ee0 <motor>
		break;
 8001e40:	e045      	b.n	8001ece <JoyStickControl+0x4a2>

		case 1:
		if (RX[3] == 0xfe) { //Not be push
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <JoyStickControl+0x508>)
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	2bfe      	cmp	r3, #254	; 0xfe
 8001e48:	d108      	bne.n	8001e5c <JoyStickControl+0x430>
			motor(0, 1);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff f847 	bl	8000ee0 <motor>
			x_axis_Moving_Status= 0;
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <JoyStickControl+0x4d8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001e5a:	e039      	b.n	8001ed0 <JoyStickControl+0x4a4>
		}
		else if (RX[3] == 0xee) { //UP
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <JoyStickControl+0x508>)
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	2bee      	cmp	r3, #238	; 0xee
 8001e62:	d10a      	bne.n	8001e7a <JoyStickControl+0x44e>
			x_axis_Moving_Status= 0;
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <JoyStickControl+0x4d8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, 1);
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <JoyStickControl+0x510>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f834 	bl	8000ee0 <motor>
 8001e78:	e02a      	b.n	8001ed0 <JoyStickControl+0x4a4>
		}
		else if (RX[3] == 0xbe) { //Down
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <JoyStickControl+0x508>)
 8001e7c:	78db      	ldrb	r3, [r3, #3]
 8001e7e:	2bbe      	cmp	r3, #190	; 0xbe
 8001e80:	d10b      	bne.n	8001e9a <JoyStickControl+0x46e>
			x_axis_Moving_Status= 0;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <JoyStickControl+0x4d8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, -1);
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <JoyStickControl+0x510>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f824 	bl	8000ee0 <motor>
 8001e98:	e01a      	b.n	8001ed0 <JoyStickControl+0x4a4>
		}
		else if (RX[3] == 0x7e) { //left
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <JoyStickControl+0x508>)
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	2b7e      	cmp	r3, #126	; 0x7e
 8001ea0:	d108      	bne.n	8001eb4 <JoyStickControl+0x488>
			x_axis_Moving_Status = 8;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <JoyStickControl+0x4d8>)
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f817 	bl	8000ee0 <motor>
 8001eb2:	e00d      	b.n	8001ed0 <JoyStickControl+0x4a4>
		}
		else if (RX[3] == 0xde) { //right
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <JoyStickControl+0x508>)
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	2bde      	cmp	r3, #222	; 0xde
 8001eba:	d109      	bne.n	8001ed0 <JoyStickControl+0x4a4>
			x_axis_Moving_Status = 4;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <JoyStickControl+0x4d8>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff f80a 	bl	8000ee0 <motor>
 8001ecc:	e000      	b.n	8001ed0 <JoyStickControl+0x4a4>
		break;
 8001ece:	bf00      	nop
		}

	}

	switch (homing) {
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <JoyStickControl+0x514>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <JoyStickControl+0x4b6>
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d103      	bne.n	8001ee4 <JoyStickControl+0x4b8>
	case 0:
		break;
	case 1:
		Joy_Homing();
 8001edc:	f7ff f8c2 	bl	8001064 <Joy_Homing>
		break;
 8001ee0:	e000      	b.n	8001ee4 <JoyStickControl+0x4b8>
		break;
 8001ee2:	bf00      	nop
	}

	RX_last = RX[4];
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <JoyStickControl+0x508>)
 8001ee6:	791a      	ldrb	r2, [r3, #4]
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <JoyStickControl+0x518>)
 8001eea:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <JoyStickControl+0x508>)
 8001eee:	791a      	ldrb	r2, [r3, #4]
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <JoyStickControl+0x51c>)
 8001ef2:	701a      	strb	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001076 	.word	0x20001076
 8001f00:	2000033c 	.word	0x2000033c
 8001f04:	20000e30 	.word	0x20000e30
 8001f08:	20000330 	.word	0x20000330
 8001f0c:	20001088 	.word	0x20001088
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	20000348 	.word	0x20000348
 8001f18:	20001048 	.word	0x20001048
 8001f1c:	2000036c 	.word	0x2000036c
 8001f20:	20001024 	.word	0x20001024
 8001f24:	2000032d 	.word	0x2000032d
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	20000268 	.word	0x20000268
 8001f30:	2000032a 	.word	0x2000032a
 8001f34:	20000320 	.word	0x20000320
 8001f38:	2000022e 	.word	0x2000022e
 8001f3c:	20000230 	.word	0x20000230
 8001f40:	20000390 	.word	0x20000390
 8001f44:	2000032b 	.word	0x2000032b
 8001f48:	2000032c 	.word	0x2000032c

08001f4c <Calculate_Position>:

void Calculate_Position(float x_c1, float x_c2, float x_c3, float y_c1,
		float y_c2, float y_c3) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f56:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f5a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f5e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f62:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f66:	edc7 2a00 	vstr	s5, [r7]

//Parameter use in Equation
//Trigonometry
	a1 = x_c2 - x_c1;
 8001f6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f76:	4be1      	ldr	r3, [pc, #900]	; (80022fc <Calculate_Position+0x3b0>)
 8001f78:	edc3 7a00 	vstr	s15, [r3]
	b = y_c2 - y_c1;
 8001f7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	4bdd      	ldr	r3, [pc, #884]	; (8002300 <Calculate_Position+0x3b4>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
	c = sqrt((a1 * a1) + (b * b));
 8001f8e:	4bdb      	ldr	r3, [pc, #876]	; (80022fc <Calculate_Position+0x3b0>)
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	4bd9      	ldr	r3, [pc, #868]	; (80022fc <Calculate_Position+0x3b0>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9e:	4bd8      	ldr	r3, [pc, #864]	; (8002300 <Calculate_Position+0x3b4>)
 8001fa0:	edd3 6a00 	vldr	s13, [r3]
 8001fa4:	4bd6      	ldr	r3, [pc, #856]	; (8002300 <Calculate_Position+0x3b4>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	ee17 0a90 	vmov	r0, s15
 8001fb6:	f7fe fa73 	bl	80004a0 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	ec43 2b10 	vmov	d0, r2, r3
 8001fc2:	f008 fe73 	bl	800acac <sqrt>
 8001fc6:	ec53 2b10 	vmov	r2, r3, d0
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fd8f 	bl	8000af0 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4acb      	ldr	r2, [pc, #812]	; (8002304 <Calculate_Position+0x3b8>)
 8001fd6:	6013      	str	r3, [r2, #0]

//float cos_zeta1= a1/ c;
	cos_zeta = a1 / c;
 8001fd8:	4bc8      	ldr	r3, [pc, #800]	; (80022fc <Calculate_Position+0x3b0>)
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	4bc9      	ldr	r3, [pc, #804]	; (8002304 <Calculate_Position+0x3b8>)
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe8:	4bc7      	ldr	r3, [pc, #796]	; (8002308 <Calculate_Position+0x3bc>)
 8001fea:	edc3 7a00 	vstr	s15, [r3]
	sin_zeta = b / c;
 8001fee:	4bc4      	ldr	r3, [pc, #784]	; (8002300 <Calculate_Position+0x3b4>)
 8001ff0:	edd3 6a00 	vldr	s13, [r3]
 8001ff4:	4bc3      	ldr	r3, [pc, #780]	; (8002304 <Calculate_Position+0x3b8>)
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffe:	4bc3      	ldr	r3, [pc, #780]	; (800230c <Calculate_Position+0x3c0>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
//	float tan_zeta1= b / a;

	x_final_joy[0] = (((10 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8002004:	4bc0      	ldr	r3, [pc, #768]	; (8002308 <Calculate_Position+0x3bc>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800200e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002012:	4bbe      	ldr	r3, [pc, #760]	; (800230c <Calculate_Position+0x3c0>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eddf 6abd 	vldr	s13, [pc, #756]	; 8002310 <Calculate_Position+0x3c4>
 800201c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002024:	edd7 7a05 	vldr	s15, [r7, #20]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002034:	4bb7      	ldr	r3, [pc, #732]	; (8002314 <Calculate_Position+0x3c8>)
 8002036:	edc3 7a00 	vstr	s15, [r3]
	x_final_joy[1] = (((30 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 800203a:	4bb3      	ldr	r3, [pc, #716]	; (8002308 <Calculate_Position+0x3bc>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002048:	4bb0      	ldr	r3, [pc, #704]	; (800230c <Calculate_Position+0x3c0>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002310 <Calculate_Position+0x3c4>
 8002052:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002056:	ee37 7a67 	vsub.f32	s14, s14, s15
 800205a:	edd7 7a05 	vldr	s15, [r7, #20]
 800205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002062:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206a:	4baa      	ldr	r3, [pc, #680]	; (8002314 <Calculate_Position+0x3c8>)
 800206c:	edc3 7a01 	vstr	s15, [r3, #4]
	x_final_joy[2] = (((50 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8002070:	4ba5      	ldr	r3, [pc, #660]	; (8002308 <Calculate_Position+0x3bc>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002318 <Calculate_Position+0x3cc>
 800207a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207e:	4ba3      	ldr	r3, [pc, #652]	; (800230c <Calculate_Position+0x3c0>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8002310 <Calculate_Position+0x3c4>
 8002088:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800208c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002090:	edd7 7a05 	vldr	s15, [r7, #20]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800209c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a0:	4b9c      	ldr	r3, [pc, #624]	; (8002314 <Calculate_Position+0x3c8>)
 80020a2:	edc3 7a02 	vstr	s15, [r3, #8]
	x_final_joy[3] = (((10 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 80020a6:	4b98      	ldr	r3, [pc, #608]	; (8002308 <Calculate_Position+0x3bc>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020b4:	4b95      	ldr	r3, [pc, #596]	; (800230c <Calculate_Position+0x3c0>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80020be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <Calculate_Position+0x3c8>)
 80020d8:	edc3 7a03 	vstr	s15, [r3, #12]
	x_final_joy[4] = (((30 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 80020dc:	4b8a      	ldr	r3, [pc, #552]	; (8002308 <Calculate_Position+0x3bc>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <Calculate_Position+0x3c0>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80020f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210c:	4b81      	ldr	r3, [pc, #516]	; (8002314 <Calculate_Position+0x3c8>)
 800210e:	edc3 7a04 	vstr	s15, [r3, #16]
	x_final_joy[5] = (((50 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 8002112:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <Calculate_Position+0x3bc>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002318 <Calculate_Position+0x3cc>
 800211c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002120:	4b7a      	ldr	r3, [pc, #488]	; (800230c <Calculate_Position+0x3c0>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800212a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800212e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002132:	edd7 7a05 	vldr	s15, [r7, #20]
 8002136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	4b74      	ldr	r3, [pc, #464]	; (8002314 <Calculate_Position+0x3c8>)
 8002144:	edc3 7a05 	vstr	s15, [r3, #20]
	x_final_joy[6] = (((10 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <Calculate_Position+0x3bc>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002152:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <Calculate_Position+0x3c0>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002164:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002168:	edd7 7a05 	vldr	s15, [r7, #20]
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	4b66      	ldr	r3, [pc, #408]	; (8002314 <Calculate_Position+0x3c8>)
 800217a:	edc3 7a06 	vstr	s15, [r3, #24]
	x_final_joy[7] = (((30 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <Calculate_Position+0x3bc>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <Calculate_Position+0x3c0>)
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002196:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800219a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800219e:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <Calculate_Position+0x3c8>)
 80021b0:	edc3 7a07 	vstr	s15, [r3, #28]
	x_final_joy[8] = (((50 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 80021b4:	4b54      	ldr	r3, [pc, #336]	; (8002308 <Calculate_Position+0x3bc>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002318 <Calculate_Position+0x3cc>
 80021be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021c2:	4b52      	ldr	r3, [pc, #328]	; (800230c <Calculate_Position+0x3c0>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <Calculate_Position+0x3c8>)
 80021e6:	edc3 7a08 	vstr	s15, [r3, #32]

	y_final_joy[0] = ((40 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <Calculate_Position+0x3bc>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002310 <Calculate_Position+0x3c4>
 80021f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f8:	4b44      	ldr	r3, [pc, #272]	; (800230c <Calculate_Position+0x3c0>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220a:	edd7 7a02 	vldr	s15, [r7, #8]
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <Calculate_Position+0x3d0>)
 8002214:	edc3 7a00 	vstr	s15, [r3]
	y_final_joy[1] = ((40 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <Calculate_Position+0x3bc>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002310 <Calculate_Position+0x3c4>
 8002222:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <Calculate_Position+0x3c0>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	edd7 7a02 	vldr	s15, [r7, #8]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <Calculate_Position+0x3d0>)
 8002242:	edc3 7a01 	vstr	s15, [r3, #4]
	y_final_joy[2] = ((40 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <Calculate_Position+0x3bc>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002310 <Calculate_Position+0x3c4>
 8002250:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <Calculate_Position+0x3c0>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002318 <Calculate_Position+0x3cc>
 800225e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002266:	edd7 7a02 	vldr	s15, [r7, #8]
 800226a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <Calculate_Position+0x3d0>)
 8002270:	edc3 7a02 	vstr	s15, [r3, #8]
	y_final_joy[3] = ((25 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <Calculate_Position+0x3bc>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800227e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <Calculate_Position+0x3c0>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800228c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <Calculate_Position+0x3d0>)
 800229e:	edc3 7a03 	vstr	s15, [r3, #12]
	y_final_joy[4] = ((25 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <Calculate_Position+0x3bc>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <Calculate_Position+0x3c0>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80022ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <Calculate_Position+0x3d0>)
 80022cc:	edc3 7a04 	vstr	s15, [r3, #16]
	y_final_joy[5] = ((25 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <Calculate_Position+0x3bc>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <Calculate_Position+0x3c0>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002318 <Calculate_Position+0x3cc>
 80022e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	e012      	b.n	8002320 <Calculate_Position+0x3d4>
 80022fa:	bf00      	nop
 80022fc:	20001078 	.word	0x20001078
 8002300:	2000107c 	.word	0x2000107c
 8002304:	20001080 	.word	0x20001080
 8002308:	20001084 	.word	0x20001084
 800230c:	20001088 	.word	0x20001088
 8002310:	42200000 	.word	0x42200000
 8002314:	20000348 	.word	0x20000348
 8002318:	42480000 	.word	0x42480000
 800231c:	2000036c 	.word	0x2000036c
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <Calculate_Position+0x46c>)
 8002322:	edc3 7a05 	vstr	s15, [r3, #20]
	y_final_joy[6] = ((10 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <Calculate_Position+0x470>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002334:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <Calculate_Position+0x474>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800233e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002346:	edd7 7a02 	vldr	s15, [r7, #8]
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <Calculate_Position+0x46c>)
 8002350:	edc3 7a06 	vstr	s15, [r3, #24]
	y_final_joy[7] = ((10 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <Calculate_Position+0x470>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800235e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <Calculate_Position+0x474>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800236c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	edd7 7a02 	vldr	s15, [r7, #8]
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <Calculate_Position+0x46c>)
 800237e:	edc3 7a07 	vstr	s15, [r3, #28]
	y_final_joy[8] = ((10 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <Calculate_Position+0x470>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800238c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <Calculate_Position+0x474>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80023c4 <Calculate_Position+0x478>
 800239a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800239e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023aa:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <Calculate_Position+0x46c>)
 80023ac:	edc3 7a08 	vstr	s15, [r3, #32]

}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000036c 	.word	0x2000036c
 80023bc:	20001084 	.word	0x20001084
 80023c0:	20001088 	.word	0x20001088
 80023c4:	42480000 	.word	0x42480000

080023c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023cc:	f3bf 8f4f 	dsb	sy
}
 80023d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <__NVIC_SystemReset+0x24>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <__NVIC_SystemReset+0x24>)
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_SystemReset+0x28>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023e2:	f3bf 8f4f 	dsb	sy
}
 80023e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <__NVIC_SystemReset+0x20>
 80023ec:	e000ed00 	.word	0xe000ed00
 80023f0:	05fa0004 	.word	0x05fa0004
 80023f4:	00000000 	.word	0x00000000

080023f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023fc:	b0a4      	sub	sp, #144	; 0x90
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002400:	f002 fd7a 	bl	8004ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002404:	f000 ff4a 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002408:	f001 fa70 	bl	80038ec <MX_GPIO_Init>
  MX_DMA_Init();
 800240c:	f001 fa4e 	bl	80038ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002410:	f001 f9f4 	bl	80037fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002414:	f001 f8ae 	bl	8003574 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002418:	f001 f80c 	bl	8003434 <MX_TIM1_Init>
  MX_TIM3_Init();
 800241c:	f001 f8fe 	bl	800361c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002420:	f001 fa18 	bl	8003854 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002424:	f001 f948 	bl	80036b8 <MX_TIM5_Init>
  MX_SPI3_Init();
 8002428:	f000 ffce 	bl	80033c8 <MX_SPI3_Init>
  MX_TIM11_Init();
 800242c:	f001 f992 	bl	8003754 <MX_TIM11_Init>
  MX_I2C2_Init();
 8002430:	f000 ff9c 	bl	800336c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8002434:	2003      	movs	r0, #3
 8002436:	f7ff f9dd 	bl	80017f4 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800243a:	2104      	movs	r1, #4
 800243c:	48b2      	ldr	r0, [pc, #712]	; (8002708 <main+0x310>)
 800243e:	f006 f819 	bl	8008474 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002442:	48b2      	ldr	r0, [pc, #712]	; (800270c <main+0x314>)
 8002444:	f005 fcb6 	bl	8007db4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002448:	48b1      	ldr	r0, [pc, #708]	; (8002710 <main+0x318>)
 800244a:	f005 fc59 	bl	8007d00 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800244e:	2100      	movs	r1, #0
 8002450:	48af      	ldr	r0, [pc, #700]	; (8002710 <main+0x318>)
 8002452:	f005 fddd 	bl	8008010 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8002456:	48af      	ldr	r0, [pc, #700]	; (8002714 <main+0x31c>)
 8002458:	f005 fcac 	bl	8007db4 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 800245c:	4bae      	ldr	r3, [pc, #696]	; (8002718 <main+0x320>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe f83d 	bl	80004e4 <__aeabi_ul2d>
 800246a:	a3a5      	add	r3, pc, #660	; (adr r3, 8002700 <main+0x308>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f998 	bl	80007a4 <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	4ba7      	ldr	r3, [pc, #668]	; (800271c <main+0x324>)
 800247e:	e9c3 0100 	strd	r0, r1, [r3]
	t_DeAcce = traject_us / 1000000.00;
 8002482:	4ba5      	ldr	r3, [pc, #660]	; (8002718 <main+0x320>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe f82a 	bl	80004e4 <__aeabi_ul2d>
 8002490:	a39b      	add	r3, pc, #620	; (adr r3, 8002700 <main+0x308>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f985 	bl	80007a4 <__aeabi_ddiv>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4b9f      	ldr	r3, [pc, #636]	; (8002720 <main+0x328>)
 80024a4:	e9c3 0100 	strd	r0, r1, [r3]
	t_Cons = traject_us / 1000000.00;
 80024a8:	4b9b      	ldr	r3, [pc, #620]	; (8002718 <main+0x320>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe f817 	bl	80004e4 <__aeabi_ul2d>
 80024b6:	a392      	add	r3, pc, #584	; (adr r3, 8002700 <main+0x308>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f972 	bl	80007a4 <__aeabi_ddiv>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <main+0x32c>)
 80024ca:	e9c3 0100 	strd	r0, r1, [r3]
	t_count = traject_us / 1000000.00;
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <main+0x320>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7fe f804 	bl	80004e4 <__aeabi_ul2d>
 80024dc:	a388      	add	r3, pc, #544	; (adr r3, 8002700 <main+0x308>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f95f 	bl	80007a4 <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <main+0x330>)
 80024f0:	e9c3 0100 	strd	r0, r1, [r3]
	t_diff = traject_us / 1000000.00;
 80024f4:	4b88      	ldr	r3, [pc, #544]	; (8002718 <main+0x320>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fd fff1 	bl	80004e4 <__aeabi_ul2d>
 8002502:	a37f      	add	r3, pc, #508	; (adr r3, 8002700 <main+0x308>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f94c 	bl	80007a4 <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	4b85      	ldr	r3, [pc, #532]	; (800272c <main+0x334>)
 8002516:	e9c3 0100 	strd	r0, r1, [r3]

	hmodbus.huart = &huart2;
 800251a:	4a85      	ldr	r2, [pc, #532]	; (8002730 <main+0x338>)
 800251c:	4b85      	ldr	r3, [pc, #532]	; (8002734 <main+0x33c>)
 800251e:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim11;
 8002520:	4a83      	ldr	r2, [pc, #524]	; (8002730 <main+0x338>)
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <main+0x340>)
 8002524:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8002526:	4a82      	ldr	r2, [pc, #520]	; (8002730 <main+0x338>)
 8002528:	2315      	movs	r3, #21
 800252a:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 800252c:	4a80      	ldr	r2, [pc, #512]	; (8002730 <main+0x338>)
 800252e:	23c8      	movs	r3, #200	; 0xc8
 8002530:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8002532:	4982      	ldr	r1, [pc, #520]	; (800273c <main+0x344>)
 8002534:	487e      	ldr	r0, [pc, #504]	; (8002730 <main+0x338>)
 8002536:	f7fe fe53 	bl	80011e0 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 800253a:	4b81      	ldr	r3, [pc, #516]	; (8002740 <main+0x348>)
 800253c:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8002540:	461c      	mov	r4, r3
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	602b      	str	r3, [r5, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 800254a:	4b7e      	ldr	r3, [pc, #504]	; (8002744 <main+0x34c>)
 800254c:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8002550:	461c      	mov	r4, r3
 8002552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	602b      	str	r3, [r5, #0]
			.LaserOn = 1, .GripperPower = 2, .GripperPicking = 6,
			.GripperPlacing = 10 };

	struct yaxisMovingStatusBit yaxisMovingStatusData =
 800255a:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <main+0x350>)
 800255c:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8002560:	461c      	mov	r4, r3
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800256a:	e885 0003 	stmia.w	r5, {r0, r1}
			{ .JogPick = 1, .JogPlease = 2, .Home = 4, .GoPick = 8, .GoPlace =
					16, .Gopoint = 32 };

	struct xaxisMovingStatusBit xaxisMovingStatusData = { .Home = 1, .Run = 2,
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <main+0x354>)
 8002570:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.JogLeft = 4, .JogRight = 8 };

	x_axis_Actual_Position= 0;
 800257a:	4a70      	ldr	r2, [pc, #448]	; (800273c <main+0x344>)
 800257c:	2300      	movs	r3, #0
 800257e:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	x_axis_Target_Speed= 3000;
 8002582:	4a6e      	ldr	r2, [pc, #440]	; (800273c <main+0x344>)
 8002584:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002588:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	x_axis_Target_Acceleration_Time= 1;
 800258c:	4a6b      	ldr	r2, [pc, #428]	; (800273c <main+0x344>)
 800258e:	2301      	movs	r3, #1
 8002590:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
//		static uint64_t timestamp_Endeffecter = 0;

		int64_t GetTicku = micros();
 8002594:	f001 fa86 	bl	8003aa4 <micros>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

		Modbus_Protocal_Worker();
 80025a0:	f7fe feaa 	bl	80012f8 <Modbus_Protocal_Worker>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 80025a4:	2108      	movs	r1, #8
 80025a6:	486a      	ldr	r0, [pc, #424]	; (8002750 <main+0x358>)
 80025a8:	f003 fbe0 	bl	8005d6c <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <main+0x35c>)
 80025b2:	60da      	str	r2, [r3, #12]

		if (HAL_GetTick() >= timestamp_heartbeat) {
 80025b4:	f002 fd06 	bl	8004fc4 <HAL_GetTick>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2200      	movs	r2, #0
 80025bc:	4698      	mov	r8, r3
 80025be:	4691      	mov	r9, r2
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <main+0x360>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4590      	cmp	r8, r2
 80025c8:	eb79 0303 	sbcs.w	r3, r9, r3
 80025cc:	d34d      	bcc.n	800266a <main+0x272>
			timestamp_heartbeat = HAL_GetTick() + 200;
 80025ce:	f002 fcf9 	bl	8004fc4 <HAL_GetTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	33c8      	adds	r3, #200	; 0xc8
 80025d6:	2200      	movs	r2, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 80025da:	637a      	str	r2, [r7, #52]	; 0x34
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <main+0x360>)
 80025de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80025e2:	e9c3 1200 	strd	r1, r2, [r3]

			Heartbeat_Protocol= 22881;
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <main+0x344>)
 80025e8:	f645 1361 	movw	r3, #22881	; 0x5961
 80025ec:	8013      	strh	r3, [r2, #0]

			y_axis_Actual_Position= (int32_t)(PosY*10);
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <main+0x364>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002600:	ee17 3a90 	vmov	r3, s15
 8002604:	b29b      	uxth	r3, r3
 8002606:	4a4d      	ldr	r2, [pc, #308]	; (800273c <main+0x344>)
 8002608:	8453      	strh	r3, [r2, #34]	; 0x22
			y_axis_Actual_Speed= fabs(current_velocity)*10;
 800260a:	4b55      	ldr	r3, [pc, #340]	; (8002760 <main+0x368>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eef0 7ae7 	vabs.f32	s15, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ff42 	bl	80004a0 <__aeabi_f2d>
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <main+0x36c>)
 8002622:	f7fd ff95 	bl	8000550 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fa3f 	bl	8000ab0 <__aeabi_d2uiz>
 8002632:	4603      	mov	r3, r0
 8002634:	b29b      	uxth	r3, r3
 8002636:	4a41      	ldr	r2, [pc, #260]	; (800273c <main+0x344>)
 8002638:	8493      	strh	r3, [r2, #36]	; 0x24
			y_axis_Actual_Acceleration= fabs(acc)*10;
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <main+0x370>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eef0 7ae7 	vabs.f32	s15, s15
 8002644:	ee17 0a90 	vmov	r0, s15
 8002648:	f7fd ff2a 	bl	80004a0 <__aeabi_f2d>
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b44      	ldr	r3, [pc, #272]	; (8002764 <main+0x36c>)
 8002652:	f7fd ff7d 	bl	8000550 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa27 	bl	8000ab0 <__aeabi_d2uiz>
 8002662:	4603      	mov	r3, r0
 8002664:	b29b      	uxth	r3, r3
 8002666:	4a35      	ldr	r2, [pc, #212]	; (800273c <main+0x344>)
 8002668:	84d3      	strh	r3, [r2, #38]	; 0x26

		}

		switch (State) {
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <main+0x374>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b09      	cmp	r3, #9
 8002670:	f200 85be 	bhi.w	80031f0 <main+0xdf8>
 8002674:	a201      	add	r2, pc, #4	; (adr r2, 800267c <main+0x284>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	080026a5 	.word	0x080026a5
 8002680:	080026af 	.word	0x080026af
 8002684:	080026c9 	.word	0x080026c9
 8002688:	080029bf 	.word	0x080029bf
 800268c:	080029c7 	.word	0x080029c7
 8002690:	08002b07 	.word	0x08002b07
 8002694:	080029cf 	.word	0x080029cf
 8002698:	08003041 	.word	0x08003041
 800269c:	08003081 	.word	0x08003081
 80026a0:	080030f7 	.word	0x080030f7

		case INIT:
			State = INIT_HOMING;
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <main+0x374>)
 80026a6:	2301      	movs	r3, #1
 80026a8:	7013      	strb	r3, [r2, #0]
			break;
 80026aa:	f000 bda1 	b.w	80031f0 <main+0xdf8>

		case INIT_HOMING:
			y_axis_Moving_Status= yaxisMovingStatusData.Home;
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <main+0x344>)
 80026b4:	8413      	strh	r3, [r2, #32]
			x_axis_Moving_Status = xaxisMovingStatusData.Home;
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4a20      	ldr	r2, [pc, #128]	; (800273c <main+0x344>)
 80026bc:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
			Init_Homing();
 80026c0:	f7fe fc38 	bl	8000f34 <Init_Homing>

			break;
 80026c4:	f000 bd94 	b.w	80031f0 <main+0xdf8>

			case IDLE: //HOME

			if(End_Effector_Status != last_endeffecter_status) {
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <main+0x344>)
 80026ca:	889b      	ldrh	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <main+0x378>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d072      	beq.n	80027bc <main+0x3c4>
				if (End_Effector_Status == EndEffectorStatusData.LaserOn) {
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <main+0x344>)
 80026d8:	889b      	ldrh	r3, [r3, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026de:	429a      	cmp	r2, r3
 80026e0:	d103      	bne.n	80026ea <main+0x2f2>
					EndEffector_Event(Test_Start);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff f886 	bl	80017f4 <EndEffector_Event>
 80026e8:	e04d      	b.n	8002786 <main+0x38e>
				} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <main+0x344>)
 80026ec:	889b      	ldrh	r3, [r3, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d13e      	bne.n	8002774 <main+0x37c>
					EndEffector_Event(Test_Stop);
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7ff f87c 	bl	80017f4 <EndEffector_Event>
 80026fc:	e043      	b.n	8002786 <main+0x38e>
 80026fe:	bf00      	nop
 8002700:	00000000 	.word	0x00000000
 8002704:	412e8480 	.word	0x412e8480
 8002708:	200004f8 	.word	0x200004f8
 800270c:	200005ac 	.word	0x200005ac
 8002710:	20000444 	.word	0x20000444
 8002714:	20000660 	.word	0x20000660
 8002718:	20000238 	.word	0x20000238
 800271c:	20000240 	.word	0x20000240
 8002720:	20000248 	.word	0x20000248
 8002724:	20000250 	.word	0x20000250
 8002728:	20000258 	.word	0x20000258
 800272c:	20000260 	.word	0x20000260
 8002730:	20000958 	.word	0x20000958
 8002734:	200007c8 	.word	0x200007c8
 8002738:	20000714 	.word	0x20000714
 800273c:	20000e30 	.word	0x20000e30
 8002740:	0800b0c4 	.word	0x0800b0c4
 8002744:	0800b0d8 	.word	0x0800b0d8
 8002748:	0800b0ec 	.word	0x0800b0ec
 800274c:	0800b104 	.word	0x0800b104
 8002750:	40020800 	.word	0x40020800
 8002754:	20000fc0 	.word	0x20000fc0
 8002758:	200010b0 	.word	0x200010b0
 800275c:	20000fd8 	.word	0x20000fd8
 8002760:	20000944 	.word	0x20000944
 8002764:	40240000 	.word	0x40240000
 8002768:	20000948 	.word	0x20000948
 800276c:	20000268 	.word	0x20000268
 8002770:	2000108c 	.word	0x2000108c
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 8002774:	4bae      	ldr	r3, [pc, #696]	; (8002a30 <main+0x638>)
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277c:	429a      	cmp	r2, r3
 800277e:	d102      	bne.n	8002786 <main+0x38e>
					EndEffector_Event(Run_Mode);
 8002780:	2006      	movs	r0, #6
 8002782:	f7ff f837 	bl	80017f4 <EndEffector_Event>
				}

				if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 8002786:	4baa      	ldr	r3, [pc, #680]	; (8002a30 <main+0x638>)
 8002788:	889b      	ldrh	r3, [r3, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	429a      	cmp	r2, r3
 8002790:	d107      	bne.n	80027a2 <main+0x3aa>
					//				EndEffector_Event(Run_Mode);
					//				HAL_Delay(300);
					EndEffector_Event(Pick);
 8002792:	2008      	movs	r0, #8
 8002794:	f7ff f82e 	bl	80017f4 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 8002798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800279a:	b29b      	uxth	r3, r3
 800279c:	4aa4      	ldr	r2, [pc, #656]	; (8002a30 <main+0x638>)
 800279e:	8093      	strh	r3, [r2, #4]
 80027a0:	e00c      	b.n	80027bc <main+0x3c4>
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 80027a2:	4ba3      	ldr	r3, [pc, #652]	; (8002a30 <main+0x638>)
 80027a4:	889b      	ldrh	r3, [r3, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d106      	bne.n	80027bc <main+0x3c4>
					//				EndEffector_Event(Run_Mode);
					//				HAL_Delay(300);
					EndEffector_Event(Place);
 80027ae:	200a      	movs	r0, #10
 80027b0:	f7ff f820 	bl	80017f4 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 80027b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4a9d      	ldr	r2, [pc, #628]	; (8002a30 <main+0x638>)
 80027ba:	8093      	strh	r3, [r2, #4]
				}
			}

			last_endeffecter_status = End_Effector_Status;
 80027bc:	4b9c      	ldr	r3, [pc, #624]	; (8002a30 <main+0x638>)
 80027be:	889b      	ldrh	r3, [r3, #4]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <main+0x63c>)
 80027c4:	601a      	str	r2, [r3, #0]

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 80027c6:	4b9a      	ldr	r3, [pc, #616]	; (8002a30 <main+0x638>)
 80027c8:	885b      	ldrh	r3, [r3, #2]
 80027ca:	461a      	mov	r2, r3
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d123      	bne.n	800281a <main+0x422>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80027d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4a96      	ldr	r2, [pc, #600]	; (8002a30 <main+0x638>)
 80027d8:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80027da:	2001      	movs	r0, #1
 80027dc:	f7ff f80a 	bl	80017f4 <EndEffector_Event>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	; 0x40
 80027e4:	4894      	ldr	r0, [pc, #592]	; (8002a38 <main+0x640>)
 80027e6:	f003 fad9 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80027ea:	2201      	movs	r2, #1
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	4892      	ldr	r0, [pc, #584]	; (8002a38 <main+0x640>)
 80027f0:	f003 fad4 	bl	8005d9c <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80027f4:	2200      	movs	r2, #0
 80027f6:	2120      	movs	r1, #32
 80027f8:	488f      	ldr	r0, [pc, #572]	; (8002a38 <main+0x640>)
 80027fa:	f003 facf 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				Base_System_Status = 0;
 80027fe:	4a8c      	ldr	r2, [pc, #560]	; (8002a30 <main+0x638>)
 8002800:	2300      	movs	r3, #0
 8002802:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPick;
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002806:	b29b      	uxth	r3, r3
 8002808:	4a89      	ldr	r2, [pc, #548]	; (8002a30 <main+0x638>)
 800280a:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PICK;
 800280c:	4a8b      	ldr	r2, [pc, #556]	; (8002a3c <main+0x644>)
 800280e:	2300      	movs	r3, #0
 8002810:	7013      	strb	r3, [r2, #0]
				State = SETPICKTRAY;
 8002812:	4a8b      	ldr	r2, [pc, #556]	; (8002a40 <main+0x648>)
 8002814:	2303      	movs	r3, #3
 8002816:	7013      	strb	r3, [r2, #0]
 8002818:	e028      	b.n	800286c <main+0x474>
			} else if(Base_System_Status == BaseSystemStatusData.SetPlaceTray) {
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <main+0x638>)
 800281c:	885b      	ldrh	r3, [r3, #2]
 800281e:	461a      	mov	r2, r3
 8002820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002822:	429a      	cmp	r2, r3
 8002824:	d122      	bne.n	800286c <main+0x474>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 8002826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002828:	b29b      	uxth	r3, r3
 800282a:	4a81      	ldr	r2, [pc, #516]	; (8002a30 <main+0x638>)
 800282c:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 800282e:	2001      	movs	r0, #1
 8002830:	f7fe ffe0 	bl	80017f4 <EndEffector_Event>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002834:	2200      	movs	r2, #0
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	487f      	ldr	r0, [pc, #508]	; (8002a38 <main+0x640>)
 800283a:	f003 faaf 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800283e:	2201      	movs	r2, #1
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	487d      	ldr	r0, [pc, #500]	; (8002a38 <main+0x640>)
 8002844:	f003 faaa 	bl	8005d9c <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002848:	2200      	movs	r2, #0
 800284a:	2120      	movs	r1, #32
 800284c:	487a      	ldr	r0, [pc, #488]	; (8002a38 <main+0x640>)
 800284e:	f003 faa5 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				Base_System_Status = 0;
 8002852:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <main+0x638>)
 8002854:	2300      	movs	r3, #0
 8002856:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPlease;
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	b29b      	uxth	r3, r3
 800285c:	4a74      	ldr	r2, [pc, #464]	; (8002a30 <main+0x638>)
 800285e:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PLACE;
 8002860:	4a76      	ldr	r2, [pc, #472]	; (8002a3c <main+0x644>)
 8002862:	2301      	movs	r3, #1
 8002864:	7013      	strb	r3, [r2, #0]
				State = SETPLACETRAY;
 8002866:	4a76      	ldr	r2, [pc, #472]	; (8002a40 <main+0x648>)
 8002868:	2304      	movs	r3, #4
 800286a:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.RunPointMode) {
 800286c:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <main+0x638>)
 800286e:	885b      	ldrh	r3, [r3, #2]
 8002870:	461a      	mov	r2, r3
 8002872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002876:	429a      	cmp	r2, r3
 8002878:	d166      	bne.n	8002948 <main+0x550>
				Base_System_Status = 0;
 800287a:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <main+0x638>)
 800287c:	2300      	movs	r3, #0
 800287e:	8053      	strh	r3, [r2, #2]
//				EndEffector_Event(Run_Mode);
				x_axis_Target_Position = Goal_Point_x;
 8002880:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <main+0x638>)
 8002882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002886:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <main+0x638>)
 8002888:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 800288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288e:	b29b      	uxth	r3, r3
 8002890:	4a67      	ldr	r2, [pc, #412]	; (8002a30 <main+0x638>)
 8002892:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80

				pos_i = PosY;
 8002896:	4b6b      	ldr	r3, [pc, #428]	; (8002a44 <main+0x64c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <main+0x650>)
 800289c:	601a      	str	r2, [r3, #0]

				if(Goal_Point_y >= 0 && Goal_Point_y <= 3500) {
 800289e:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <main+0x638>)
 80028a0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80028a4:	f640 53ac 	movw	r3, #3500	; 0xdac
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d80e      	bhi.n	80028ca <main+0x4d2>
					pos_f = (float)Goal_Point_y/10;
 80028ac:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <main+0x638>)
 80028ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c2:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <main+0x654>)
 80028c4:	edc3 7a00 	vstr	s15, [r3]
 80028c8:	e01e      	b.n	8002908 <main+0x510>
				} else if(Goal_Point_y >= 65535-3500 && Goal_Point_y <= 65535) {
 80028ca:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <main+0x638>)
 80028cc:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80028d0:	f24f 2352 	movw	r3, #62034	; 0xf252
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d917      	bls.n	8002908 <main+0x510>
					pos_f = -(float)(65536%Goal_Point_y)/10;
 80028d8:	4b55      	ldr	r3, [pc, #340]	; (8002a30 <main+0x638>)
 80028da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80028de:	4619      	mov	r1, r3
 80028e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e4:	fb92 f3f1 	sdiv	r3, r2, r1
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f6:	eeb1 7a67 	vneg.f32	s14, s15
 80028fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	4b52      	ldr	r3, [pc, #328]	; (8002a4c <main+0x654>)
 8002904:	edc3 7a00 	vstr	s15, [r3]
				}

				Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <main+0x650>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fdc7 	bl	80004a0 <__aeabi_f2d>
 8002912:	4604      	mov	r4, r0
 8002914:	460d      	mov	r5, r1
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <main+0x654>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fdc0 	bl	80004a0 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ed9f 3b3e 	vldr	d3, [pc, #248]	; 8002a20 <main+0x628>
 8002928:	ed9f 2b3f 	vldr	d2, [pc, #252]	; 8002a28 <main+0x630>
 800292c:	ec43 2b11 	vmov	d1, r2, r3
 8002930:	ec45 4b10 	vmov	d0, r4, r5
 8002934:	f001 fac4 	bl	8003ec0 <Trajectory_Gen>

				y_axis_Moving_Status = yaxisMovingStatusData.Gopoint;
 8002938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293a:	b29b      	uxth	r3, r3
 800293c:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <main+0x638>)
 800293e:	8413      	strh	r3, [r2, #32]
				State = RUNPOINTMODE;
 8002940:	4a3f      	ldr	r2, [pc, #252]	; (8002a40 <main+0x648>)
 8002942:	2306      	movs	r3, #6
 8002944:	7013      	strb	r3, [r2, #0]
 8002946:	e02b      	b.n	80029a0 <main+0x5a8>

			} else if(Base_System_Status == BaseSystemStatusData.RunTrayMode) {
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <main+0x638>)
 800294a:	885b      	ldrh	r3, [r3, #2]
 800294c:	461a      	mov	r2, r3
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002952:	429a      	cmp	r2, r3
 8002954:	d124      	bne.n	80029a0 <main+0x5a8>

				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	4837      	ldr	r0, [pc, #220]	; (8002a38 <main+0x640>)
 800295c:	f003 fa1e 	bl	8005d9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
 8002960:	2200      	movs	r2, #0
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	4834      	ldr	r0, [pc, #208]	; (8002a38 <main+0x640>)
 8002966:	f003 fa19 	bl	8005d9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2120      	movs	r1, #32
 800296e:	4832      	ldr	r0, [pc, #200]	; (8002a38 <main+0x640>)
 8002970:	f003 fa14 	bl	8005d9c <HAL_GPIO_WritePin>

				Base_System_Status = 0;
 8002974:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <main+0x638>)
 8002976:	2300      	movs	r3, #0
 8002978:	8053      	strh	r3, [r2, #2]
				position_index = 0;
 800297a:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <main+0x658>)
 800297c:	2300      	movs	r3, #0
 800297e:	6013      	str	r3, [r2, #0]
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	b29b      	uxth	r3, r3
 8002984:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <main+0x638>)
 8002986:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Run_Mode);
 8002988:	2006      	movs	r0, #6
 800298a:	f7fe ff33 	bl	80017f4 <EndEffector_Event>
				State = RUNTRAYMODE;
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <main+0x648>)
 8002990:	2305      	movs	r3, #5
 8002992:	7013      	strb	r3, [r2, #0]
				State_Control = TRAJECTGEN;
 8002994:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <main+0x65c>)
 8002996:	2300      	movs	r3, #0
 8002998:	7013      	strb	r3, [r2, #0]
				State_RUNTRAYMODE = GOPICK;
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <main+0x660>)
 800299c:	2300      	movs	r3, #0
 800299e:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.Home) {
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <main+0x638>)
 80029a2:	885b      	ldrh	r3, [r3, #2]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 841a 	bne.w	80031e2 <main+0xdea>
				Base_System_Status = 0;
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <main+0x638>)
 80029b0:	2300      	movs	r3, #0
 80029b2:	8053      	strh	r3, [r2, #2]
				State = INIT_HOMING;
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <main+0x648>)
 80029b6:	2301      	movs	r3, #1
 80029b8:	7013      	strb	r3, [r2, #0]
			}
			break;
 80029ba:	f000 bc12 	b.w	80031e2 <main+0xdea>

			case SETPICKTRAY:
			JoyStickControl();
 80029be:	f7ff f835 	bl	8001a2c <JoyStickControl>
			break;
 80029c2:	f000 bc15 	b.w	80031f0 <main+0xdf8>

			case SETPLACETRAY:
			JoyStickControl();
 80029c6:	f7ff f831 	bl	8001a2c <JoyStickControl>
			break;
 80029ca:	f000 bc11 	b.w	80031f0 <main+0xdf8>

			case RUNPOINTMODE:
			if (GetTicku >= timestamp_traject) {
 80029ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <main+0x664>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	4290      	cmp	r0, r2
 80029da:	eb71 0303 	sbcs.w	r3, r1, r3
 80029de:	d343      	bcc.n	8002a68 <main+0x670>
				timestamp_traject = GetTicku + traject_us;
 80029e0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <main+0x668>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	1884      	adds	r4, r0, r2
 80029ec:	62bc      	str	r4, [r7, #40]	; 0x28
 80029ee:	eb41 0303 	adc.w	r3, r1, r3
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <main+0x664>)
 80029f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80029fa:	e9c3 1200 	strd	r1, r2, [r3]
				Trajectory_Eva();
 80029fe:	f001 fbb3 	bl	8004168 <Trajectory_Eva>
				read_pos();
 8002a02:	f7fe fa47 	bl	8000e94 <read_pos>
				PID(x);
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <main+0x66c>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fe f86e 	bl	8000af0 <__aeabi_d2f>
 8002a14:	4603      	mov	r3, r0
 8002a16:	ee00 3a10 	vmov	s0, r3
 8002a1a:	f001 f87d 	bl	8003b18 <PID>
				pos_i = PosY;
				y_axis_Moving_Status = 0;

				State = IDLE;
			}
			break;
 8002a1e:	e3e7      	b.n	80031f0 <main+0xdf8>
 8002a20:	00000000 	.word	0x00000000
 8002a24:	40b04100 	.word	0x40b04100
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	408d8800 	.word	0x408d8800
 8002a30:	20000e30 	.word	0x20000e30
 8002a34:	2000108c 	.word	0x2000108c
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	20001076 	.word	0x20001076
 8002a40:	20000268 	.word	0x20000268
 8002a44:	20000fd8 	.word	0x20000fd8
 8002a48:	20000910 	.word	0x20000910
 8002a4c:	20000914 	.word	0x20000914
 8002a50:	2000106c 	.word	0x2000106c
 8002a54:	20001075 	.word	0x20001075
 8002a58:	20001074 	.word	0x20001074
 8002a5c:	200010b8 	.word	0x200010b8
 8002a60:	20000238 	.word	0x20000238
 8002a64:	20000920 	.word	0x20000920
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002a68:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <main+0x908>)
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	4ba5      	ldr	r3, [pc, #660]	; (8002d04 <main+0x90c>)
 8002a70:	edd3 7a00 	vldr	s15, [r3]
 8002a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a78:	ee17 0a90 	vmov	r0, s15
 8002a7c:	f7fd fd10 	bl	80004a0 <__aeabi_f2d>
 8002a80:	a397      	add	r3, pc, #604	; (adr r3, 8002ce0 <main+0x8e8>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fd ffdf 	bl	8000a48 <__aeabi_dcmple>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <main+0x69a>
			break;
 8002a90:	e3ae      	b.n	80031f0 <main+0xdf8>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002a92:	4b9b      	ldr	r3, [pc, #620]	; (8002d00 <main+0x908>)
 8002a94:	ed93 7a00 	vldr	s14, [r3]
 8002a98:	4b9a      	ldr	r3, [pc, #616]	; (8002d04 <main+0x90c>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fcfb 	bl	80004a0 <__aeabi_f2d>
 8002aaa:	a38f      	add	r3, pc, #572	; (adr r3, 8002ce8 <main+0x8f0>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd ffd4 	bl	8000a5c <__aeabi_dcmpge>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d100      	bne.n	8002abc <main+0x6c4>
			break;
 8002aba:	e399      	b.n	80031f0 <main+0xdf8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <main+0x910>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6353      	str	r3, [r2, #52]	; 0x34
				Intregral = 0;
 8002ac4:	4a91      	ldr	r2, [pc, #580]	; (8002d0c <main+0x914>)
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	6013      	str	r3, [r2, #0]
				Dutyfeedback = 0;
 8002acc:	4a90      	ldr	r2, [pc, #576]	; (8002d10 <main+0x918>)
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	6013      	str	r3, [r2, #0]
				v = 0;
 8002ad4:	498f      	ldr	r1, [pc, #572]	; (8002d14 <main+0x91c>)
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9c1 2300 	strd	r2, r3, [r1]
				a = 0;
 8002ae2:	498d      	ldr	r1, [pc, #564]	; (8002d18 <main+0x920>)
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9c1 2300 	strd	r2, r3, [r1]
				pos_i = PosY;
 8002af0:	4b84      	ldr	r3, [pc, #528]	; (8002d04 <main+0x90c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <main+0x924>)
 8002af6:	601a      	str	r2, [r3, #0]
				y_axis_Moving_Status = 0;
 8002af8:	4a89      	ldr	r2, [pc, #548]	; (8002d20 <main+0x928>)
 8002afa:	2300      	movs	r3, #0
 8002afc:	8413      	strh	r3, [r2, #32]
				State = IDLE;
 8002afe:	4a89      	ldr	r2, [pc, #548]	; (8002d24 <main+0x92c>)
 8002b00:	2302      	movs	r3, #2
 8002b02:	7013      	strb	r3, [r2, #0]
			break;
 8002b04:	e374      	b.n	80031f0 <main+0xdf8>

			case RUNTRAYMODE:
			switch (State_RUNTRAYMODE) {
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <main+0x930>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <main+0x71e>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f000 8149 	beq.w	8002da6 <main+0x9ae>
					break;
				}
				break;
			}

			break;
 8002b14:	e36c      	b.n	80031f0 <main+0xdf8>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPick;
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4a81      	ldr	r2, [pc, #516]	; (8002d20 <main+0x928>)
 8002b1c:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <main+0x934>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f000 80bc 	beq.w	8002ca0 <main+0x8a8>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	f300 824d 	bgt.w	8002fc8 <main+0xbd0>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <main+0x740>
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d043      	beq.n	8002bbe <main+0x7c6>
				break;
 8002b36:	e247      	b.n	8002fc8 <main+0xbd0>
					pos_i = PosY;
 8002b38:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <main+0x90c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <main+0x924>)
 8002b3e:	601a      	str	r2, [r3, #0]
					pos_f = Pick_Point_Y[position_index];
 8002b40:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <main+0x938>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a7b      	ldr	r2, [pc, #492]	; (8002d34 <main+0x93c>)
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <main+0x908>)
 8002b4e:	601a      	str	r2, [r3, #0]
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002b50:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <main+0x924>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fca3 	bl	80004a0 <__aeabi_f2d>
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	460d      	mov	r5, r1
 8002b5e:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <main+0x908>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc9c 	bl	80004a0 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	ed9f 3b60 	vldr	d3, [pc, #384]	; 8002cf0 <main+0x8f8>
 8002b70:	ed9f 2b61 	vldr	d2, [pc, #388]	; 8002cf8 <main+0x900>
 8002b74:	ec43 2b11 	vmov	d1, r2, r3
 8002b78:	ec45 4b10 	vmov	d0, r4, r5
 8002b7c:	f001 f9a0 	bl	8003ec0 <Trajectory_Gen>
					if(x_axis_Moving_Status == 0) {
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <main+0x928>)
 8002b82:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 8109 	bne.w	8002d9e <main+0x9a6>
						x_axis_Target_Position= (int16_t)Pick_Point_X[position_index];
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <main+0x938>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a69      	ldr	r2, [pc, #420]	; (8002d38 <main+0x940>)
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9e:	ee17 3a90 	vmov	r3, s15
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	; (8002d20 <main+0x928>)
 8002ba8:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
						x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <main+0x928>)
 8002bb2:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
						State_Control = TRAJECTEVA_PID;
 8002bb6:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <main+0x934>)
 8002bb8:	2301      	movs	r3, #1
 8002bba:	7013      	strb	r3, [r2, #0]
					break;
 8002bbc:	e0ef      	b.n	8002d9e <main+0x9a6>
					if (GetTicku >= timestamp_traject) {
 8002bbe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002bc2:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <main+0x944>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	4290      	cmp	r0, r2
 8002bca:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bce:	d31f      	bcc.n	8002c10 <main+0x818>
						timestamp_traject = GetTicku + traject_us;
 8002bd0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002bd4:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <main+0x948>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	1884      	adds	r4, r0, r2
 8002bdc:	623c      	str	r4, [r7, #32]
 8002bde:	eb41 0303 	adc.w	r3, r1, r3
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <main+0x944>)
 8002be6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002bea:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002bee:	f001 fabb 	bl	8004168 <Trajectory_Eva>
						read_pos();
 8002bf2:	f7fe f94f 	bl	8000e94 <read_pos>
						PID(x);
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <main+0x94c>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fd ff76 	bl	8000af0 <__aeabi_d2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	ee00 3a10 	vmov	s0, r3
 8002c0a:	f000 ff85 	bl	8003b18 <PID>
					break;
 8002c0e:	e0c9      	b.n	8002da4 <main+0x9ac>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <main+0x908>)
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <main+0x90c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	ee17 0a90 	vmov	r0, s15
 8002c24:	f7fd fc3c 	bl	80004a0 <__aeabi_f2d>
 8002c28:	a32d      	add	r3, pc, #180	; (adr r3, 8002ce0 <main+0x8e8>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd ff0b 	bl	8000a48 <__aeabi_dcmple>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d100      	bne.n	8002c3a <main+0x842>
					break;
 8002c38:	e0b4      	b.n	8002da4 <main+0x9ac>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <main+0x908>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <main+0x90c>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4a:	ee17 0a90 	vmov	r0, s15
 8002c4e:	f7fd fc27 	bl	80004a0 <__aeabi_f2d>
 8002c52:	a325      	add	r3, pc, #148	; (adr r3, 8002ce8 <main+0x8f0>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd ff00 	bl	8000a5c <__aeabi_dcmpge>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d100      	bne.n	8002c64 <main+0x86c>
					break;
 8002c62:	e09f      	b.n	8002da4 <main+0x9ac>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <main+0x910>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <main+0x914>)
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <main+0x918>)
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	6013      	str	r3, [r2, #0]
						v = 0;
 8002c7c:	4925      	ldr	r1, [pc, #148]	; (8002d14 <main+0x91c>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 8002c8a:	4923      	ldr	r1, [pc, #140]	; (8002d18 <main+0x920>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c1 2300 	strd	r2, r3, [r1]
						State_Control = TRAJECTGENNEXT;
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <main+0x934>)
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	7013      	strb	r3, [r2, #0]
					break;
 8002c9e:	e081      	b.n	8002da4 <main+0x9ac>
					if(flag == 0 && x_axis_Moving_Status == 0) {
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <main+0x950>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d153      	bne.n	8002d50 <main+0x958>
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <main+0x928>)
 8002caa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14e      	bne.n	8002d50 <main+0x958>
						EndEffector_Event(Pick);
 8002cb2:	2008      	movs	r0, #8
 8002cb4:	f7fe fd9e 	bl	80017f4 <EndEffector_Event>
						timestamp_wait = HAL_GetTick()+2200;
 8002cb8:	f002 f984 	bl	8004fc4 <HAL_GetTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <main+0x954>)
 8002cca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cce:	e9c3 1200 	strd	r1, r2, [r3]
						flag = 1;
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <main+0x950>)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6013      	str	r3, [r2, #0]
					break;
 8002cd8:	e063      	b.n	8002da2 <main+0x9aa>
 8002cda:	bf00      	nop
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	9999999a 	.word	0x9999999a
 8002ce4:	3fc99999 	.word	0x3fc99999
 8002ce8:	9999999a 	.word	0x9999999a
 8002cec:	bfc99999 	.word	0xbfc99999
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	40b04100 	.word	0x40b04100
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	408d8800 	.word	0x408d8800
 8002d00:	20000914 	.word	0x20000914
 8002d04:	20000fd8 	.word	0x20000fd8
 8002d08:	20000444 	.word	0x20000444
 8002d0c:	2000093c 	.word	0x2000093c
 8002d10:	20000938 	.word	0x20000938
 8002d14:	20000928 	.word	0x20000928
 8002d18:	20000930 	.word	0x20000930
 8002d1c:	20000910 	.word	0x20000910
 8002d20:	20000e30 	.word	0x20000e30
 8002d24:	20000268 	.word	0x20000268
 8002d28:	20001074 	.word	0x20001074
 8002d2c:	20001075 	.word	0x20001075
 8002d30:	2000106c 	.word	0x2000106c
 8002d34:	20000fdc 	.word	0x20000fdc
 8002d38:	20001000 	.word	0x20001000
 8002d3c:	200010b8 	.word	0x200010b8
 8002d40:	20000238 	.word	0x20000238
 8002d44:	20000920 	.word	0x20000920
 8002d48:	20001090 	.word	0x20001090
 8002d4c:	200010a0 	.word	0x200010a0
					} else if(flag == 1) {
 8002d50:	4ba7      	ldr	r3, [pc, #668]	; (8002ff0 <main+0xbf8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d124      	bne.n	8002da2 <main+0x9aa>
						if(HAL_GetTick() >= timestamp_wait) {
 8002d58:	f002 f934 	bl	8004fc4 <HAL_GetTick>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	469a      	mov	sl, r3
 8002d62:	4693      	mov	fp, r2
 8002d64:	4ba3      	ldr	r3, [pc, #652]	; (8002ff4 <main+0xbfc>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	4592      	cmp	sl, r2
 8002d6c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8002d70:	d317      	bcc.n	8002da2 <main+0x9aa>
							flag = 0;
 8002d72:	4a9f      	ldr	r2, [pc, #636]	; (8002ff0 <main+0xbf8>)
 8002d74:	2300      	movs	r3, #0
 8002d76:	6013      	str	r3, [r2, #0]
							pos_i = PosY;
 8002d78:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <main+0xc00>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b9f      	ldr	r3, [pc, #636]	; (8002ffc <main+0xc04>)
 8002d7e:	601a      	str	r2, [r3, #0]
							pos_f = Place_Point_Y[position_index];
 8002d80:	4b9f      	ldr	r3, [pc, #636]	; (8003000 <main+0xc08>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a9f      	ldr	r2, [pc, #636]	; (8003004 <main+0xc0c>)
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b9e      	ldr	r3, [pc, #632]	; (8003008 <main+0xc10>)
 8002d8e:	601a      	str	r2, [r3, #0]
							State_Control = TRAJECTGEN;
 8002d90:	4a9e      	ldr	r2, [pc, #632]	; (800300c <main+0xc14>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	7013      	strb	r3, [r2, #0]
							State_RUNTRAYMODE = GOPLACE;
 8002d96:	4a9e      	ldr	r2, [pc, #632]	; (8003010 <main+0xc18>)
 8002d98:	2301      	movs	r3, #1
 8002d9a:	7013      	strb	r3, [r2, #0]
					break;
 8002d9c:	e001      	b.n	8002da2 <main+0x9aa>
					break;
 8002d9e:	bf00      	nop
 8002da0:	e112      	b.n	8002fc8 <main+0xbd0>
					break;
 8002da2:	bf00      	nop
				break;
 8002da4:	e110      	b.n	8002fc8 <main+0xbd0>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPlace;
 8002da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4a9a      	ldr	r2, [pc, #616]	; (8003014 <main+0xc1c>)
 8002dac:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 8002dae:	4b97      	ldr	r3, [pc, #604]	; (800300c <main+0xc14>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	f000 80b4 	beq.w	8002f20 <main+0xb28>
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f300 8107 	bgt.w	8002fcc <main+0xbd4>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <main+0x9d0>
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d037      	beq.n	8002e36 <main+0xa3e>
				break;
 8002dc6:	e101      	b.n	8002fcc <main+0xbd4>
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <main+0xc04>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb67 	bl	80004a0 <__aeabi_f2d>
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	460d      	mov	r5, r1
 8002dd6:	4b8c      	ldr	r3, [pc, #560]	; (8003008 <main+0xc10>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb60 	bl	80004a0 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	ed9f 3b7a 	vldr	d3, [pc, #488]	; 8002fd0 <main+0xbd8>
 8002de8:	ed9f 2b7b 	vldr	d2, [pc, #492]	; 8002fd8 <main+0xbe0>
 8002dec:	ec43 2b11 	vmov	d1, r2, r3
 8002df0:	ec45 4b10 	vmov	d0, r4, r5
 8002df4:	f001 f864 	bl	8003ec0 <Trajectory_Gen>
					if(x_axis_Moving_Status == 0) {
 8002df8:	4b86      	ldr	r3, [pc, #536]	; (8003014 <main+0xc1c>)
 8002dfa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80de 	bne.w	8002fc0 <main+0xbc8>
						x_axis_Target_Position= (int16_t)Place_Point_X[position_index];
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <main+0xc08>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a83      	ldr	r2, [pc, #524]	; (8003018 <main+0xc20>)
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4a7d      	ldr	r2, [pc, #500]	; (8003014 <main+0xc1c>)
 8002e20:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
						x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <main+0xc1c>)
 8002e2a:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
						State_Control = TRAJECTEVA_PID;
 8002e2e:	4a77      	ldr	r2, [pc, #476]	; (800300c <main+0xc14>)
 8002e30:	2301      	movs	r3, #1
 8002e32:	7013      	strb	r3, [r2, #0]
					break;
 8002e34:	e0c4      	b.n	8002fc0 <main+0xbc8>
					if (GetTicku >= timestamp_traject) {
 8002e36:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002e3a:	4b78      	ldr	r3, [pc, #480]	; (800301c <main+0xc24>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	4290      	cmp	r0, r2
 8002e42:	eb71 0303 	sbcs.w	r3, r1, r3
 8002e46:	d31f      	bcc.n	8002e88 <main+0xa90>
						timestamp_traject = GetTicku + traject_us;
 8002e48:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <main+0xc28>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	1884      	adds	r4, r0, r2
 8002e54:	613c      	str	r4, [r7, #16]
 8002e56:	eb41 0303 	adc.w	r3, r1, r3
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <main+0xc24>)
 8002e5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e62:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002e66:	f001 f97f 	bl	8004168 <Trajectory_Eva>
						read_pos();
 8002e6a:	f7fe f813 	bl	8000e94 <read_pos>
						PID(x);
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <main+0xc2c>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fd fe3a 	bl	8000af0 <__aeabi_d2f>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	ee00 3a10 	vmov	s0, r3
 8002e82:	f000 fe49 	bl	8003b18 <PID>
					break;
 8002e86:	e09e      	b.n	8002fc6 <main+0xbce>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary) {
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <main+0xc10>)
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <main+0xc00>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e98:	ee17 0a90 	vmov	r0, s15
 8002e9c:	f7fd fb00 	bl	80004a0 <__aeabi_f2d>
 8002ea0:	a34f      	add	r3, pc, #316	; (adr r3, 8002fe0 <main+0xbe8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fdcf 	bl	8000a48 <__aeabi_dcmple>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <main+0xaba>
					break;
 8002eb0:	e089      	b.n	8002fc6 <main+0xbce>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary) {
 8002eb2:	4b55      	ldr	r3, [pc, #340]	; (8003008 <main+0xc10>)
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <main+0xc00>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	ee17 0a90 	vmov	r0, s15
 8002ec6:	f7fd faeb 	bl	80004a0 <__aeabi_f2d>
 8002eca:	a347      	add	r3, pc, #284	; (adr r3, 8002fe8 <main+0xbf0>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fdc4 	bl	8000a5c <__aeabi_dcmpge>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d100      	bne.n	8002edc <main+0xae4>
					break;
 8002eda:	e074      	b.n	8002fc6 <main+0xbce>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002edc:	4b52      	ldr	r3, [pc, #328]	; (8003028 <main+0xc30>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 8002ee4:	4a51      	ldr	r2, [pc, #324]	; (800302c <main+0xc34>)
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 8002eec:	4a50      	ldr	r2, [pc, #320]	; (8003030 <main+0xc38>)
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	6013      	str	r3, [r2, #0]
						v = 0;
 8002ef4:	494f      	ldr	r1, [pc, #316]	; (8003034 <main+0xc3c>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 8002f02:	494d      	ldr	r1, [pc, #308]	; (8003038 <main+0xc40>)
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9c1 2300 	strd	r2, r3, [r1]
						pos_i = PosY;
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <main+0xc00>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <main+0xc04>)
 8002f16:	601a      	str	r2, [r3, #0]
						State_Control = TRAJECTGENNEXT;
 8002f18:	4a3c      	ldr	r2, [pc, #240]	; (800300c <main+0xc14>)
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	7013      	strb	r3, [r2, #0]
					break;
 8002f1e:	e052      	b.n	8002fc6 <main+0xbce>
					if(flag == 0 && x_axis_Moving_Status == 0) {
 8002f20:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <main+0xbf8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d118      	bne.n	8002f5a <main+0xb62>
 8002f28:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <main+0xc1c>)
 8002f2a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <main+0xb62>
						EndEffector_Event(Place);
 8002f32:	200a      	movs	r0, #10
 8002f34:	f7fe fc5e 	bl	80017f4 <EndEffector_Event>
						timestamp_wait = HAL_GetTick()+2200;
 8002f38:	f002 f844 	bl	8004fc4 <HAL_GetTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8002f42:	2200      	movs	r2, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	60fa      	str	r2, [r7, #12]
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <main+0xbfc>)
 8002f4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f4e:	e9c3 1200 	strd	r1, r2, [r3]
						flag = 1;
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <main+0xbf8>)
 8002f54:	2301      	movs	r3, #1
 8002f56:	6013      	str	r3, [r2, #0]
					break;
 8002f58:	e034      	b.n	8002fc4 <main+0xbcc>
					} else if(flag == 1) {
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <main+0xbf8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d130      	bne.n	8002fc4 <main+0xbcc>
						if(HAL_GetTick() >= timestamp_wait) {
 8002f62:	f002 f82f 	bl	8004fc4 <HAL_GetTick>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2200      	movs	r2, #0
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <main+0xbfc>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4291      	cmp	r1, r2
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002f82:	d31f      	bcc.n	8002fc4 <main+0xbcc>
							flag = 0;
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <main+0xbf8>)
 8002f86:	2300      	movs	r3, #0
 8002f88:	6013      	str	r3, [r2, #0]
							if(position_index < 8) {
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <main+0xc08>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b07      	cmp	r3, #7
 8002f90:	dc0f      	bgt.n	8002fb2 <main+0xbba>
								pos_i = PosY;
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <main+0xc00>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <main+0xc04>)
 8002f98:	601a      	str	r2, [r3, #0]
								position_index++;
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <main+0xc08>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <main+0xc08>)
 8002fa2:	601a      	str	r2, [r3, #0]
								State_Control = TRAJECTGEN;
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <main+0xc14>)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7013      	strb	r3, [r2, #0]
								State_RUNTRAYMODE = GOPICK;
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <main+0xc18>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	7013      	strb	r3, [r2, #0]
					break;
 8002fb0:	e008      	b.n	8002fc4 <main+0xbcc>
								y_axis_Moving_Status = 0;
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <main+0xc1c>)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	8413      	strh	r3, [r2, #32]
								State = INIT_HOMING;
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <main+0xc44>)
 8002fba:	2301      	movs	r3, #1
 8002fbc:	7013      	strb	r3, [r2, #0]
					break;
 8002fbe:	e001      	b.n	8002fc4 <main+0xbcc>
					break;
 8002fc0:	bf00      	nop
 8002fc2:	e003      	b.n	8002fcc <main+0xbd4>
					break;
 8002fc4:	bf00      	nop
				break;
 8002fc6:	e001      	b.n	8002fcc <main+0xbd4>
				break;
 8002fc8:	bf00      	nop
 8002fca:	e111      	b.n	80031f0 <main+0xdf8>
				break;
 8002fcc:	bf00      	nop
			break;
 8002fce:	e10f      	b.n	80031f0 <main+0xdf8>
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40b04100 	.word	0x40b04100
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	408d8800 	.word	0x408d8800
 8002fe0:	9999999a 	.word	0x9999999a
 8002fe4:	3fc99999 	.word	0x3fc99999
 8002fe8:	9999999a 	.word	0x9999999a
 8002fec:	bfc99999 	.word	0xbfc99999
 8002ff0:	20001090 	.word	0x20001090
 8002ff4:	200010a0 	.word	0x200010a0
 8002ff8:	20000fd8 	.word	0x20000fd8
 8002ffc:	20000910 	.word	0x20000910
 8003000:	2000106c 	.word	0x2000106c
 8003004:	20001024 	.word	0x20001024
 8003008:	20000914 	.word	0x20000914
 800300c:	20001075 	.word	0x20001075
 8003010:	20001074 	.word	0x20001074
 8003014:	20000e30 	.word	0x20000e30
 8003018:	20001048 	.word	0x20001048
 800301c:	200010b8 	.word	0x200010b8
 8003020:	20000238 	.word	0x20000238
 8003024:	20000920 	.word	0x20000920
 8003028:	20000444 	.word	0x20000444
 800302c:	2000093c 	.word	0x2000093c
 8003030:	20000938 	.word	0x20000938
 8003034:	20000928 	.word	0x20000928
 8003038:	20000930 	.word	0x20000930
 800303c:	20000268 	.word	0x20000268

			case EMERGENCY:
			if(HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == 0 && last_emer == 1 && HAL_GetTick() >= timestamp_emer) {
 8003040:	2108      	movs	r1, #8
 8003042:	4889      	ldr	r0, [pc, #548]	; (8003268 <main+0xe70>)
 8003044:	f002 fe92 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80cb 	bne.w	80031e6 <main+0xdee>
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <main+0xe74>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 80c6 	bne.w	80031e6 <main+0xdee>
 800305a:	f001 ffb3 	bl	8004fc4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	4b83      	ldr	r3, [pc, #524]	; (8003270 <main+0xe78>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	f0c0 80be 	bcc.w	80031e6 <main+0xdee>
				timestamp_emer = HAL_GetTick() + 1500;
 800306a:	f001 ffab 	bl	8004fc4 <HAL_GetTick>
 800306e:	4603      	mov	r3, r0
 8003070:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <main+0xe78>)
 8003076:	601a      	str	r2, [r3, #0]

				State = OUT_EMBERGENCY;
 8003078:	4a7e      	ldr	r2, [pc, #504]	; (8003274 <main+0xe7c>)
 800307a:	2308      	movs	r3, #8
 800307c:	7013      	strb	r3, [r2, #0]

			}
			break;
 800307e:	e0b2      	b.n	80031e6 <main+0xdee>

			case OUT_EMBERGENCY:
			if(flag == 0) {
 8003080:	4b7d      	ldr	r3, [pc, #500]	; (8003278 <main+0xe80>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <main+0xcac>
				EndEffector_Event(Out_Emergency);
 8003088:	2005      	movs	r0, #5
 800308a:	f7fe fbb3 	bl	80017f4 <EndEffector_Event>
				timestamp_emer_laser = HAL_GetTick()+1000;
 800308e:	f001 ff99 	bl	8004fc4 <HAL_GetTick>
 8003092:	4603      	mov	r3, r0
 8003094:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003098:	4b78      	ldr	r3, [pc, #480]	; (800327c <main+0xe84>)
 800309a:	601a      	str	r2, [r3, #0]
				flag = 1;
 800309c:	4a76      	ldr	r2, [pc, #472]	; (8003278 <main+0xe80>)
 800309e:	2301      	movs	r3, #1
 80030a0:	6013      	str	r3, [r2, #0]
					flag = 0;
					State = LAST_STATE;

				}
			}
			break;
 80030a2:	e0a2      	b.n	80031ea <main+0xdf2>
			} else if(flag == 1) {
 80030a4:	4b74      	ldr	r3, [pc, #464]	; (8003278 <main+0xe80>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 809e 	bne.w	80031ea <main+0xdf2>
				if(HAL_GetTick() >= timestamp_emer_laser) {
 80030ae:	f001 ff89 	bl	8004fc4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b71      	ldr	r3, [pc, #452]	; (800327c <main+0xe84>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f0c0 8096 	bcc.w	80031ea <main+0xdf2>
					if(End_Effector_Status == EndEffectorStatusData.LaserOn) {
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <main+0xe88>)
 80030c0:	889b      	ldrh	r3, [r3, #4]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d103      	bne.n	80030d2 <main+0xcda>
						EndEffector_Event(Test_Start);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7fe fb92 	bl	80017f4 <EndEffector_Event>
 80030d0:	e008      	b.n	80030e4 <main+0xcec>
					} else if(End_Effector_Status == EndEffectorStatusData.GripperPower) {
 80030d2:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <main+0xe88>)
 80030d4:	889b      	ldrh	r3, [r3, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	429a      	cmp	r2, r3
 80030dc:	d102      	bne.n	80030e4 <main+0xcec>
						EndEffector_Event(Run_Mode);
 80030de:	2006      	movs	r0, #6
 80030e0:	f7fe fb88 	bl	80017f4 <EndEffector_Event>
					flag = 0;
 80030e4:	4a64      	ldr	r2, [pc, #400]	; (8003278 <main+0xe80>)
 80030e6:	2300      	movs	r3, #0
 80030e8:	6013      	str	r3, [r2, #0]
					State = LAST_STATE;
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <main+0xe8c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	4a60      	ldr	r2, [pc, #384]	; (8003274 <main+0xe7c>)
 80030f2:	7013      	strb	r3, [r2, #0]
			break;
 80030f4:	e079      	b.n	80031ea <main+0xdf2>

			case SENSOR_CHECK:
			read_pos();
 80030f6:	f7fd fecd 	bl	8000e94 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	485a      	ldr	r0, [pc, #360]	; (8003268 <main+0xe70>)
 80030fe:	f002 fe35 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <main+0xe90>)
 8003108:	601a      	str	r2, [r3, #0]
					Photoelectric_sensor_1_Pin);
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 800310a:	2104      	movs	r1, #4
 800310c:	485f      	ldr	r0, [pc, #380]	; (800328c <main+0xe94>)
 800310e:	f002 fe2d 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <main+0xe90>)
 8003118:	605a      	str	r2, [r3, #4]
					Photoelectric_sensor_2_Pin);
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 800311a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800311e:	485b      	ldr	r0, [pc, #364]	; (800328c <main+0xe94>)
 8003120:	f002 fe24 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b57      	ldr	r3, [pc, #348]	; (8003288 <main+0xe90>)
 800312a:	609a      	str	r2, [r3, #8]
					Photoelectric_sensor_3_Pin);
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 800312c:	2108      	movs	r1, #8
 800312e:	484e      	ldr	r0, [pc, #312]	; (8003268 <main+0xe70>)
 8003130:	f002 fe1c 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <main+0xe90>)
 800313a:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 800313c:	4b52      	ldr	r3, [pc, #328]	; (8003288 <main+0xe90>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10f      	bne.n	8003164 <main+0xd6c>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8003144:	2201      	movs	r2, #1
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	4851      	ldr	r0, [pc, #324]	; (8003290 <main+0xe98>)
 800314a:	f002 fe27 	bl	8005d9c <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	484f      	ldr	r0, [pc, #316]	; (8003290 <main+0xe98>)
 8003154:	f002 fe22 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8003158:	2200      	movs	r2, #0
 800315a:	2120      	movs	r1, #32
 800315c:	484c      	ldr	r0, [pc, #304]	; (8003290 <main+0xe98>)
 800315e:	f002 fe1d 	bl	8005d9c <HAL_GPIO_WritePin>
 8003162:	e036      	b.n	80031d2 <main+0xdda>
						RESET);
			} else if (GPIO_test.ramp == 2) {
 8003164:	4b48      	ldr	r3, [pc, #288]	; (8003288 <main+0xe90>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d10f      	bne.n	800318c <main+0xd94>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	4847      	ldr	r0, [pc, #284]	; (8003290 <main+0xe98>)
 8003172:	f002 fe13 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8003176:	2201      	movs	r2, #1
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	4845      	ldr	r0, [pc, #276]	; (8003290 <main+0xe98>)
 800317c:	f002 fe0e 	bl	8005d9c <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8003180:	2200      	movs	r2, #0
 8003182:	2120      	movs	r1, #32
 8003184:	4842      	ldr	r0, [pc, #264]	; (8003290 <main+0xe98>)
 8003186:	f002 fe09 	bl	8005d9c <HAL_GPIO_WritePin>
 800318a:	e022      	b.n	80031d2 <main+0xdda>
						RESET);
			} else if (GPIO_test.ramp == 3) {
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <main+0xe90>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10f      	bne.n	80031b4 <main+0xdbc>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	483d      	ldr	r0, [pc, #244]	; (8003290 <main+0xe98>)
 800319a:	f002 fdff 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800319e:	2200      	movs	r2, #0
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	483b      	ldr	r0, [pc, #236]	; (8003290 <main+0xe98>)
 80031a4:	f002 fdfa 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80031a8:	2201      	movs	r2, #1
 80031aa:	2120      	movs	r1, #32
 80031ac:	4838      	ldr	r0, [pc, #224]	; (8003290 <main+0xe98>)
 80031ae:	f002 fdf5 	bl	8005d9c <HAL_GPIO_WritePin>
 80031b2:	e00e      	b.n	80031d2 <main+0xdda>
						SET);
			} else {
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80031b4:	2200      	movs	r2, #0
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	4835      	ldr	r0, [pc, #212]	; (8003290 <main+0xe98>)
 80031ba:	f002 fdef 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80031be:	2200      	movs	r2, #0
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	4833      	ldr	r0, [pc, #204]	; (8003290 <main+0xe98>)
 80031c4:	f002 fdea 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80031c8:	2200      	movs	r2, #0
 80031ca:	2120      	movs	r1, #32
 80031cc:	4830      	ldr	r0, [pc, #192]	; (8003290 <main+0xe98>)
 80031ce:	f002 fde5 	bl	8005d9c <HAL_GPIO_WritePin>
						RESET);
			}

			if (go_next == 1) {
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <main+0xe9c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d109      	bne.n	80031ee <main+0xdf6>
				State = INIT;
 80031da:	4a26      	ldr	r2, [pc, #152]	; (8003274 <main+0xe7c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	7013      	strb	r3, [r2, #0]
			}

			break;
 80031e0:	e005      	b.n	80031ee <main+0xdf6>
			break;
 80031e2:	bf00      	nop
 80031e4:	e004      	b.n	80031f0 <main+0xdf8>
			break;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <main+0xdf8>
			break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <main+0xdf8>
			break;
 80031ee:	bf00      	nop
		}

		if (State != SENSOR_CHECK && State != EMERGENCY) {
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <main+0xe7c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	d027      	beq.n	8003248 <main+0xe50>
 80031f8:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <main+0xe7c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d023      	beq.n	8003248 <main+0xe50>
			if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == 1
 8003200:	2108      	movs	r1, #8
 8003202:	4819      	ldr	r0, [pc, #100]	; (8003268 <main+0xe70>)
 8003204:	f002 fdb2 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d11c      	bne.n	8003248 <main+0xe50>
					&& last_emer == 0 && HAL_GetTick() >= timestamp_emer) {
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <main+0xe74>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <main+0xe50>
 8003216:	f001 fed5 	bl	8004fc4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <main+0xe78>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d311      	bcc.n	8003248 <main+0xe50>
				EndEffector_Event(In_Emergency);
 8003224:	2004      	movs	r0, #4
 8003226:	f7fe fae5 	bl	80017f4 <EndEffector_Event>
				timestamp_emer = HAL_GetTick() + 1500;
 800322a:	f001 fecb 	bl	8004fc4 <HAL_GetTick>
 800322e:	4603      	mov	r3, r0
 8003230:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <main+0xe78>)
 8003236:	601a      	str	r2, [r3, #0]
				LAST_STATE = State;
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <main+0xe7c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <main+0xe8c>)
 8003240:	601a      	str	r2, [r3, #0]

				//			EndEffector_Event(Read);

				State = EMERGENCY;
 8003242:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <main+0xe7c>)
 8003244:	2307      	movs	r3, #7
 8003246:	7013      	strb	r3, [r2, #0]
			}
		}

		last_emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8003248:	2108      	movs	r1, #8
 800324a:	4807      	ldr	r0, [pc, #28]	; (8003268 <main+0xe70>)
 800324c:	f002 fd8e 	bl	8005d6c <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <main+0xe74>)
 8003256:	601a      	str	r2, [r3, #0]
		if (Re == 1) {
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <main+0xea0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f47f a999 	bne.w	8002594 <main+0x19c>
			NVIC_SystemReset();
 8003262:	f7ff f8b1 	bl	80023c8 <__NVIC_SystemReset>
 8003266:	bf00      	nop
 8003268:	40020800 	.word	0x40020800
 800326c:	200010a8 	.word	0x200010a8
 8003270:	20001094 	.word	0x20001094
 8003274:	20000268 	.word	0x20000268
 8003278:	20001090 	.word	0x20001090
 800327c:	20001098 	.word	0x20001098
 8003280:	20000e30 	.word	0x20000e30
 8003284:	20001070 	.word	0x20001070
 8003288:	20000fc0 	.word	0x20000fc0
 800328c:	40020400 	.word	0x40020400
 8003290:	40020000 	.word	0x40020000
 8003294:	20000918 	.word	0x20000918
 8003298:	20000919 	.word	0x20000919

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b094      	sub	sp, #80	; 0x50
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0320 	add.w	r3, r7, #32
 80032a6:	2230      	movs	r2, #48	; 0x30
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f007 fcf6 	bl	800ac9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <SystemClock_Config+0xc8>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <SystemClock_Config+0xc8>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <SystemClock_Config+0xc8>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <SystemClock_Config+0xcc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a20      	ldr	r2, [pc, #128]	; (8003368 <SystemClock_Config+0xcc>)
 80032e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <SystemClock_Config+0xcc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003302:	2302      	movs	r3, #2
 8003304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800330c:	2304      	movs	r3, #4
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003310:	2364      	movs	r3, #100	; 0x64
 8003312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003314:	2302      	movs	r3, #2
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003318:	2304      	movs	r3, #4
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331c:	f107 0320 	add.w	r3, r7, #32
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fd03 	bl	8006d2c <HAL_RCC_OscConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800332c:	f000 fbee 	bl	8003b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003330:	230f      	movs	r3, #15
 8003332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003334:	2302      	movs	r3, #2
 8003336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800333c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	2103      	movs	r1, #3
 800334c:	4618      	mov	r0, r3
 800334e:	f003 ff65 	bl	800721c <HAL_RCC_ClockConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003358:	f000 fbd8 	bl	8003b0c <Error_Handler>
  }
}
 800335c:	bf00      	nop
 800335e:	3750      	adds	r7, #80	; 0x50
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	40007000 	.word	0x40007000

0800336c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <MX_I2C2_Init+0x50>)
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <MX_I2C2_Init+0x54>)
 8003374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_I2C2_Init+0x50>)
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <MX_I2C2_Init+0x58>)
 800337a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <MX_I2C2_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_I2C2_Init+0x50>)
 8003384:	2200      	movs	r2, #0
 8003386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_I2C2_Init+0x50>)
 800338a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <MX_I2C2_Init+0x50>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_I2C2_Init+0x50>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <MX_I2C2_Init+0x50>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_I2C2_Init+0x50>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <MX_I2C2_Init+0x50>)
 80033aa:	f002 fd29 	bl	8005e00 <HAL_I2C_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80033b4:	f000 fbaa 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000398 	.word	0x20000398
 80033c0:	40005800 	.word	0x40005800
 80033c4:	000186a0 	.word	0x000186a0

080033c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <MX_SPI3_Init+0x64>)
 80033ce:	4a18      	ldr	r2, [pc, #96]	; (8003430 <MX_SPI3_Init+0x68>)
 80033d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <MX_SPI3_Init+0x64>)
 80033d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <MX_SPI3_Init+0x64>)
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <MX_SPI3_Init+0x64>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_SPI3_Init+0x64>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_SPI3_Init+0x64>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MX_SPI3_Init+0x64>)
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <MX_SPI3_Init+0x64>)
 80033fc:	2238      	movs	r2, #56	; 0x38
 80033fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MX_SPI3_Init+0x64>)
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <MX_SPI3_Init+0x64>)
 8003408:	2200      	movs	r2, #0
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <MX_SPI3_Init+0x64>)
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <MX_SPI3_Init+0x64>)
 8003414:	220a      	movs	r2, #10
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003418:	4804      	ldr	r0, [pc, #16]	; (800342c <MX_SPI3_Init+0x64>)
 800341a:	f004 f91f 	bl	800765c <HAL_SPI_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003424:	f000 fb72 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200003ec 	.word	0x200003ec
 8003430:	40003c00 	.word	0x40003c00

08003434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b096      	sub	sp, #88	; 0x58
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	2220      	movs	r2, #32
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f007 fc15 	bl	800ac9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <MX_TIM1_Init+0x138>)
 8003474:	4a3e      	ldr	r2, [pc, #248]	; (8003570 <MX_TIM1_Init+0x13c>)
 8003476:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003478:	4b3c      	ldr	r3, [pc, #240]	; (800356c <MX_TIM1_Init+0x138>)
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <MX_TIM1_Init+0x138>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <MX_TIM1_Init+0x138>)
 8003486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800348a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348c:	4b37      	ldr	r3, [pc, #220]	; (800356c <MX_TIM1_Init+0x138>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <MX_TIM1_Init+0x138>)
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <MX_TIM1_Init+0x138>)
 800349a:	2200      	movs	r2, #0
 800349c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800349e:	4833      	ldr	r0, [pc, #204]	; (800356c <MX_TIM1_Init+0x138>)
 80034a0:	f004 fbd2 	bl	8007c48 <HAL_TIM_Base_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80034aa:	f000 fb2f 	bl	8003b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034b8:	4619      	mov	r1, r3
 80034ba:	482c      	ldr	r0, [pc, #176]	; (800356c <MX_TIM1_Init+0x138>)
 80034bc:	f005 faae 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80034c6:	f000 fb21 	bl	8003b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034ca:	4828      	ldr	r0, [pc, #160]	; (800356c <MX_TIM1_Init+0x138>)
 80034cc:	f004 fd3a 	bl	8007f44 <HAL_TIM_PWM_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80034d6:	f000 fb19 	bl	8003b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e6:	4619      	mov	r1, r3
 80034e8:	4820      	ldr	r0, [pc, #128]	; (800356c <MX_TIM1_Init+0x138>)
 80034ea:	f006 f827 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80034f4:	f000 fb0a 	bl	8003b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f8:	2360      	movs	r3, #96	; 0x60
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003500:	2300      	movs	r3, #0
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	2200      	movs	r2, #0
 800351a:	4619      	mov	r1, r3
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <MX_TIM1_Init+0x138>)
 800351e:	f005 f9bb 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003528:	f000 faf0 	bl	8003b0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4807      	ldr	r0, [pc, #28]	; (800356c <MX_TIM1_Init+0x138>)
 8003550:	f006 f862 	bl	8009618 <HAL_TIMEx_ConfigBreakDeadTime>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800355a:	f000 fad7 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800355e:	4803      	ldr	r0, [pc, #12]	; (800356c <MX_TIM1_Init+0x138>)
 8003560:	f001 fb1c 	bl	8004b9c <HAL_TIM_MspPostInit>

}
 8003564:	bf00      	nop
 8003566:	3758      	adds	r7, #88	; 0x58
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000444 	.word	0x20000444
 8003570:	40010000 	.word	0x40010000

08003574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	; 0x30
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	2224      	movs	r2, #36	; 0x24
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f007 fb8a 	bl	800ac9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <MX_TIM2_Init+0xa4>)
 8003592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <MX_TIM2_Init+0xa4>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <MX_TIM2_Init+0xa4>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <MX_TIM2_Init+0xa4>)
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <MX_TIM2_Init+0xa4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b2:	4b19      	ldr	r3, [pc, #100]	; (8003618 <MX_TIM2_Init+0xa4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035b8:	2303      	movs	r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035c0:	2301      	movs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80035c8:	230f      	movs	r3, #15
 80035ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035cc:	2300      	movs	r3, #0
 80035ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80035d8:	230f      	movs	r3, #15
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	4619      	mov	r1, r3
 80035e2:	480d      	ldr	r0, [pc, #52]	; (8003618 <MX_TIM2_Init+0xa4>)
 80035e4:	f004 fe92 	bl	800830c <HAL_TIM_Encoder_Init>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80035ee:	f000 fa8d 	bl	8003b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <MX_TIM2_Init+0xa4>)
 8003600:	f005 ff9c 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800360a:	f000 fa7f 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800360e:	bf00      	nop
 8003610:	3730      	adds	r7, #48	; 0x30
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200004f8 	.word	0x200004f8

0800361c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003630:	463b      	mov	r3, r7
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <MX_TIM3_Init+0x94>)
 800363a:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <MX_TIM3_Init+0x98>)
 800363c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <MX_TIM3_Init+0x94>)
 8003640:	2263      	movs	r2, #99	; 0x63
 8003642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <MX_TIM3_Init+0x94>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <MX_TIM3_Init+0x94>)
 800364c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <MX_TIM3_Init+0x94>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <MX_TIM3_Init+0x94>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800365e:	4814      	ldr	r0, [pc, #80]	; (80036b0 <MX_TIM3_Init+0x94>)
 8003660:	f004 faf2 	bl	8007c48 <HAL_TIM_Base_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800366a:	f000 fa4f 	bl	8003b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	4619      	mov	r1, r3
 800367a:	480d      	ldr	r0, [pc, #52]	; (80036b0 <MX_TIM3_Init+0x94>)
 800367c:	f005 f9ce 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003686:	f000 fa41 	bl	8003b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003692:	463b      	mov	r3, r7
 8003694:	4619      	mov	r1, r3
 8003696:	4806      	ldr	r0, [pc, #24]	; (80036b0 <MX_TIM3_Init+0x94>)
 8003698:	f005 ff50 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80036a2:	f000 fa33 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200005ac 	.word	0x200005ac
 80036b4:	40000400 	.word	0x40000400

080036b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	463b      	mov	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_TIM5_Init+0x94>)
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <MX_TIM5_Init+0x98>)
 80036d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_TIM5_Init+0x94>)
 80036dc:	2263      	movs	r2, #99	; 0x63
 80036de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_TIM5_Init+0x94>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <MX_TIM5_Init+0x94>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <MX_TIM5_Init+0x94>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f4:	4b15      	ldr	r3, [pc, #84]	; (800374c <MX_TIM5_Init+0x94>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <MX_TIM5_Init+0x94>)
 80036fc:	f004 faa4 	bl	8007c48 <HAL_TIM_Base_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003706:	f000 fa01 	bl	8003b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	4619      	mov	r1, r3
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <MX_TIM5_Init+0x94>)
 8003718:	f005 f980 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003722:	f000 f9f3 	bl	8003b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800372e:	463b      	mov	r3, r7
 8003730:	4619      	mov	r1, r3
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <MX_TIM5_Init+0x94>)
 8003734:	f005 ff02 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800373e:	f000 f9e5 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000660 	.word	0x20000660
 8003750:	40000c00 	.word	0x40000c00

08003754 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
 8003768:	615a      	str	r2, [r3, #20]
 800376a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <MX_TIM11_Init+0xa0>)
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <MX_TIM11_Init+0xa4>)
 8003770:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <MX_TIM11_Init+0xa0>)
 8003774:	2263      	movs	r2, #99	; 0x63
 8003776:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <MX_TIM11_Init+0xa0>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <MX_TIM11_Init+0xa0>)
 8003780:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003784:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <MX_TIM11_Init+0xa0>)
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <MX_TIM11_Init+0xa0>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003792:	4818      	ldr	r0, [pc, #96]	; (80037f4 <MX_TIM11_Init+0xa0>)
 8003794:	f004 fa58 	bl	8007c48 <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800379e:	f000 f9b5 	bl	8003b0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80037a2:	4814      	ldr	r0, [pc, #80]	; (80037f4 <MX_TIM11_Init+0xa0>)
 80037a4:	f004 fb68 	bl	8007e78 <HAL_TIM_OC_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80037ae:	f000 f9ad 	bl	8003b0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80037b2:	2108      	movs	r1, #8
 80037b4:	480f      	ldr	r0, [pc, #60]	; (80037f4 <MX_TIM11_Init+0xa0>)
 80037b6:	f004 fcdb 	bl	8008170 <HAL_TIM_OnePulse_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80037c0:	f000 f9a4 	bl	8003b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80037c4:	2310      	movs	r3, #16
 80037c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80037c8:	f240 5399 	movw	r3, #1433	; 0x599
 80037cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	2200      	movs	r2, #0
 80037da:	4619      	mov	r1, r3
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_TIM11_Init+0xa0>)
 80037de:	f004 ffff 	bl	80087e0 <HAL_TIM_OC_ConfigChannel>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80037e8:	f000 f990 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000714 	.word	0x20000714
 80037f8:	40014800 	.word	0x40014800

080037fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <MX_USART2_UART_Init+0x54>)
 8003804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003808:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800380c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003814:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <MX_USART2_UART_Init+0x50>)
 800381e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003826:	220c      	movs	r2, #12
 8003828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <MX_USART2_UART_Init+0x50>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <MX_USART2_UART_Init+0x50>)
 8003838:	f005 ff5e 	bl	80096f8 <HAL_UART_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8003842:	f000 f963 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200007c8 	.word	0x200007c8
 8003850:	40004400 	.word	0x40004400

08003854 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <MX_USART6_UART_Init+0x54>)
 800385c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003864:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800386c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800386e:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 800387e:	220c      	movs	r2, #12
 8003880:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_USART6_UART_Init+0x50>)
 8003890:	f005 ff32 	bl	80096f8 <HAL_UART_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800389a:	f000 f937 	bl	8003b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000083c 	.word	0x2000083c
 80038a8:	40011400 	.word	0x40011400

080038ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <MX_DMA_Init+0x3c>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <MX_DMA_Init+0x3c>)
 80038bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <MX_DMA_Init+0x3c>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	2011      	movs	r0, #17
 80038d4:	f001 fc81 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80038d8:	2011      	movs	r0, #17
 80038da:	f001 fc9a 	bl	8005212 <HAL_NVIC_EnableIRQ>

}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800

080038ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f2:	f107 0314 	add.w	r3, r7, #20
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a5b      	ldr	r2, [pc, #364]	; (8003a78 <MX_GPIO_Init+0x18c>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b55      	ldr	r3, [pc, #340]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a4d      	ldr	r2, [pc, #308]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <MX_GPIO_Init+0x18c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <MX_GPIO_Init+0x18c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <MX_GPIO_Init+0x18c>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <MX_GPIO_Init+0x18c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Switch_Relay_3_Pin|Switch_Relay_1_Pin|Switch_Relay_2_Pin|DIR_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8003994:	4839      	ldr	r0, [pc, #228]	; (8003a7c <MX_GPIO_Init+0x190>)
 8003996:	f002 fa01 	bl	8005d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	2104      	movs	r1, #4
 800399e:	4838      	ldr	r0, [pc, #224]	; (8003a80 <MX_GPIO_Init+0x194>)
 80039a0:	f002 f9fc 	bl	8005d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Photoelectric_sensor_1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Photoelectric_sensor_1_Pin;
 80039a4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80039a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	4832      	ldr	r0, [pc, #200]	; (8003a84 <MX_GPIO_Init+0x198>)
 80039bc:	f002 f852 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80039c0:	2308      	movs	r3, #8
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	482b      	ldr	r0, [pc, #172]	; (8003a84 <MX_GPIO_Init+0x198>)
 80039d6:	f002 f845 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
  GPIO_InitStruct.Pin = Switch_Relay_3_Pin|Switch_Relay_1_Pin|Switch_Relay_2_Pin|DIR_Pin;
 80039da:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80039de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e0:	2301      	movs	r3, #1
 80039e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4619      	mov	r1, r3
 80039f2:	4822      	ldr	r0, [pc, #136]	; (8003a7c <MX_GPIO_Init+0x190>)
 80039f4:	f002 f836 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
  GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin|Photoelectric_sensor_3_Pin;
 80039f8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	481e      	ldr	r0, [pc, #120]	; (8003a88 <MX_GPIO_Init+0x19c>)
 8003a10:	f002 f828 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : JoyStick_SS_PIN_Pin */
  GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 8003a14:	2304      	movs	r3, #4
 8003a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a20:	2300      	movs	r3, #0
 8003a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4815      	ldr	r0, [pc, #84]	; (8003a80 <MX_GPIO_Init+0x194>)
 8003a2c:	f002 f81a 	bl	8005a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2008      	movs	r0, #8
 8003a36:	f001 fbd0 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003a3a:	2008      	movs	r0, #8
 8003a3c:	f001 fbe9 	bl	8005212 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a40:	2200      	movs	r2, #0
 8003a42:	2100      	movs	r1, #0
 8003a44:	2009      	movs	r0, #9
 8003a46:	f001 fbc8 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003a4a:	2009      	movs	r0, #9
 8003a4c:	f001 fbe1 	bl	8005212 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	2017      	movs	r0, #23
 8003a56:	f001 fbc0 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a5a:	2017      	movs	r0, #23
 8003a5c:	f001 fbd9 	bl	8005212 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2100      	movs	r1, #0
 8003a64:	2028      	movs	r0, #40	; 0x28
 8003a66:	f001 fbb8 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a6a:	2028      	movs	r0, #40	; 0x28
 8003a6c:	f001 fbd1 	bl	8005212 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a70:	bf00      	nop
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	40020c00 	.word	0x40020c00
 8003a84:	40020800 	.word	0x40020800
 8003a88:	40020400 	.word	0x40020400

08003a8c <HAL_GPIO_EXTI_Callback>:
		motor(0, 1);
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
//
//			State = EMERGENCY_LIMIT;
//		}
//
//	}
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <micros>:

uint64_t micros() {
 8003aa4:	b4b0      	push	{r4, r5, r7}
 8003aa6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <micros+0x2c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <micros+0x30>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	1884      	adds	r4, r0, r2
 8003abc:	eb41 0503 	adc.w	r5, r1, r3
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	462b      	mov	r3, r5
}
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bcb0      	pop	{r4, r5, r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000660 	.word	0x20000660
 8003ad4:	20000950 	.word	0x20000950

08003ad8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ad8:	b4b0      	push	{r4, r5, r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	1e54      	subs	r4, r2, #1
 8003af0:	f143 0500 	adc.w	r5, r3, #0
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003af6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bcb0      	pop	{r4, r5, r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000660 	.word	0x20000660
 8003b08:	20000950 	.word	0x20000950

08003b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b10:	b672      	cpsid	i
}
 8003b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003b14:	e7fe      	b.n	8003b14 <Error_Handler+0x8>
	...

08003b18 <PID>:
	EMERGENCY,
	OUT_EMBERGENCY,
	SENSOR_CHECK,
} State;

void PID(float setposition) {
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8003b22:	4bb1      	ldr	r3, [pc, #708]	; (8003de8 <PID+0x2d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4ab1      	ldr	r2, [pc, #708]	; (8003dec <PID+0x2d4>)
 8003b28:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (traject_us / 1000000.0);
 8003b2a:	4bb0      	ldr	r3, [pc, #704]	; (8003dec <PID+0x2d4>)
 8003b2c:	ed93 7a00 	vldr	s14, [r3]
 8003b30:	4baf      	ldr	r3, [pc, #700]	; (8003df0 <PID+0x2d8>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3a:	ee17 0a90 	vmov	r0, s15
 8003b3e:	f7fc fcaf 	bl	80004a0 <__aeabi_f2d>
 8003b42:	4604      	mov	r4, r0
 8003b44:	460d      	mov	r5, r1
 8003b46:	4bab      	ldr	r3, [pc, #684]	; (8003df4 <PID+0x2dc>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fc fcc8 	bl	80004e4 <__aeabi_ul2d>
 8003b54:	a39e      	add	r3, pc, #632	; (adr r3, 8003dd0 <PID+0x2b8>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fe23 	bl	80007a4 <__aeabi_ddiv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc fe1d 	bl	80007a4 <__aeabi_ddiv>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7fc ffbd 	bl	8000af0 <__aeabi_d2f>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4a9f      	ldr	r2, [pc, #636]	; (8003df8 <PID+0x2e0>)
 8003b7a:	6013      	str	r3, [r2, #0]
	acc = (current_velocity - previous_velocity) / (traject_us / 1000000.0);
 8003b7c:	4b9e      	ldr	r3, [pc, #632]	; (8003df8 <PID+0x2e0>)
 8003b7e:	ed93 7a00 	vldr	s14, [r3]
 8003b82:	4b9e      	ldr	r3, [pc, #632]	; (8003dfc <PID+0x2e4>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	ee17 0a90 	vmov	r0, s15
 8003b90:	f7fc fc86 	bl	80004a0 <__aeabi_f2d>
 8003b94:	4604      	mov	r4, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	4b96      	ldr	r3, [pc, #600]	; (8003df4 <PID+0x2dc>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fc fc9f 	bl	80004e4 <__aeabi_ul2d>
 8003ba6:	a38a      	add	r3, pc, #552	; (adr r3, 8003dd0 <PID+0x2b8>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fdfa 	bl	80007a4 <__aeabi_ddiv>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fdf4 	bl	80007a4 <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7fc ff94 	bl	8000af0 <__aeabi_d2f>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4a8d      	ldr	r2, [pc, #564]	; (8003e00 <PID+0x2e8>)
 8003bcc:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8003bce:	4b87      	ldr	r3, [pc, #540]	; (8003dec <PID+0x2d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a87      	ldr	r2, [pc, #540]	; (8003df0 <PID+0x2d8>)
 8003bd4:	6013      	str	r3, [r2, #0]
	previous_velocity = current_velocity;
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <PID+0x2e0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a88      	ldr	r2, [pc, #544]	; (8003dfc <PID+0x2e4>)
 8003bdc:	6013      	str	r3, [r2, #0]

	if (pos_f < -350) {
 8003bde:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <PID+0x2ec>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003e08 <PID+0x2f0>
 8003be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	d503      	bpl.n	8003bfa <PID+0xe2>
		pos_f = -350;
 8003bf2:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <PID+0x2ec>)
 8003bf4:	4a85      	ldr	r2, [pc, #532]	; (8003e0c <PID+0x2f4>)
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e00c      	b.n	8003c14 <PID+0xfc>
	} else if (pos_f > 350) {
 8003bfa:	4b82      	ldr	r3, [pc, #520]	; (8003e04 <PID+0x2ec>)
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003e10 <PID+0x2f8>
 8003c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	dd02      	ble.n	8003c14 <PID+0xfc>
		pos_f = 350;
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <PID+0x2ec>)
 8003c10:	4a80      	ldr	r2, [pc, #512]	; (8003e14 <PID+0x2fc>)
 8003c12:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8003c14:	4b74      	ldr	r3, [pc, #464]	; (8003de8 <PID+0x2d0>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c22:	4b7d      	ldr	r3, [pc, #500]	; (8003e18 <PID+0x300>)
 8003c24:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 8003c28:	4b7c      	ldr	r3, [pc, #496]	; (8003e1c <PID+0x304>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003e20 <PID+0x308>
 8003c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	bfac      	ite	ge
 8003c3c:	2301      	movge	r3, #1
 8003c3e:	2300      	movlt	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13f      	bne.n	8003ccc <PID+0x1b4>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003c4c:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <PID+0x300>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	bfac      	ite	ge
 8003c5c:	2301      	movge	r3, #1
 8003c5e:	2300      	movlt	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10f      	bne.n	8003c8c <PID+0x174>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003c6c:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <PID+0x30c>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	bfac      	ite	ge
 8003c7c:	2301      	movge	r3, #1
 8003c7e:	2300      	movlt	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02a      	beq.n	8003ce2 <PID+0x1ca>
 8003c8c:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <PID+0x300>)
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	bf4c      	ite	mi
 8003c9c:	2301      	movmi	r3, #1
 8003c9e:	2300      	movpl	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10f      	bne.n	8003ccc <PID+0x1b4>
 8003cac:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <PID+0x30c>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cba:	bf4c      	ite	mi
 8003cbc:	2301      	movmi	r3, #1
 8003cbe:	2300      	movpl	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <PID+0x1ca>
		Intregral = Intregral + Error;
 8003ccc:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <PID+0x30c>)
 8003cce:	ed93 7a00 	vldr	s14, [r3]
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <PID+0x300>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cdc:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <PID+0x30c>)
 8003cde:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <PID+0x310>)
 8003ce4:	ed93 7a00 	vldr	s14, [r3]
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <PID+0x300>)
 8003cea:	edd3 7a00 	vldr	s15, [r3]
 8003cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <PID+0x300>)
 8003cf4:	edd3 6a00 	vldr	s13, [r3]
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <PID+0x314>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003d02:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <PID+0x318>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <PID+0x31c>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d16:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 8003d1a:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <PID+0x30c>)
 8003d1c:	edd3 6a00 	vldr	s13, [r3]
 8003d20:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <PID+0x320>)
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <PID+0x304>)
 8003d30:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8003d34:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <PID+0x304>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fbb1 	bl	80004a0 <__aeabi_f2d>
 8003d3e:	a326      	add	r3, pc, #152	; (adr r3, 8003dd8 <PID+0x2c0>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fe8a 	bl	8000a5c <__aeabi_dcmpge>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <PID+0x23e>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8003d4e:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <PID+0x304>)
 8003d50:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <PID+0x324>)
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e00f      	b.n	8003d76 <PID+0x25e>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <PID+0x304>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fba0 	bl	80004a0 <__aeabi_f2d>
 8003d60:	a31f      	add	r3, pc, #124	; (adr r3, 8003de0 <PID+0x2c8>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fe6f 	bl	8000a48 <__aeabi_dcmple>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <PID+0x25e>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <PID+0x304>)
 8003d72:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <PID+0x328>)
 8003d74:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <PID+0x304>)
 8003d78:	edd3 7a00 	vldr	s15, [r3]
 8003d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	d503      	bpl.n	8003d8e <PID+0x276>
		dir = -1;
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <PID+0x32c>)
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e00a      	b.n	8003da4 <PID+0x28c>
	} else if (Dutyfeedback > 0) {
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <PID+0x304>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9c:	dd02      	ble.n	8003da4 <PID+0x28c>
		dir = 1;
 8003d9e:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <PID+0x32c>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <PID+0x300>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	dd47      	ble.n	8003e48 <PID+0x330>
		Dutyfeedback += 1 * Kp; //230
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <PID+0x304>)
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <PID+0x310>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <PID+0x304>)
 8003dca:	edc3 7a00 	vstr	s15, [r3]
 8003dce:	e050      	b.n	8003e72 <PID+0x35a>
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	412e8480 	.word	0x412e8480
 8003dd8:	66666666 	.word	0x66666666
 8003ddc:	40e66666 	.word	0x40e66666
 8003de0:	66666666 	.word	0x66666666
 8003de4:	c0e66666 	.word	0xc0e66666
 8003de8:	20000fd8 	.word	0x20000fd8
 8003dec:	20000940 	.word	0x20000940
 8003df0:	200010c4 	.word	0x200010c4
 8003df4:	20000238 	.word	0x20000238
 8003df8:	20000944 	.word	0x20000944
 8003dfc:	200010c8 	.word	0x200010c8
 8003e00:	20000948 	.word	0x20000948
 8003e04:	20000914 	.word	0x20000914
 8003e08:	c3af0000 	.word	0xc3af0000
 8003e0c:	c3af0000 	.word	0xc3af0000
 8003e10:	43af0000 	.word	0x43af0000
 8003e14:	43af0000 	.word	0x43af0000
 8003e18:	200010cc 	.word	0x200010cc
 8003e1c:	20000938 	.word	0x20000938
 8003e20:	47800000 	.word	0x47800000
 8003e24:	2000093c 	.word	0x2000093c
 8003e28:	2000026c 	.word	0x2000026c
 8003e2c:	200010d0 	.word	0x200010d0
 8003e30:	20000278 	.word	0x20000278
 8003e34:	20000274 	.word	0x20000274
 8003e38:	20000270 	.word	0x20000270
 8003e3c:	47333333 	.word	0x47333333
 8003e40:	c7333333 	.word	0xc7333333
 8003e44:	200010c0 	.word	0x200010c0
	} else if (Error < -1.0) {
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <PID+0x394>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	d50a      	bpl.n	8003e72 <PID+0x35a>
		Dutyfeedback -= 1 * Kp;
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <PID+0x398>)
 8003e5e:	ed93 7a00 	vldr	s14, [r3]
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <PID+0x39c>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <PID+0x398>)
 8003e6e:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <PID+0x398>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	eef0 7ae7 	vabs.f32	s15, s15
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <PID+0x398>)
 8003e7e:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <PID+0x398>)
 8003e84:	edd3 7a00 	vldr	s15, [r3]
 8003e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <PID+0x3a0>)
 8003e8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e92:	4619      	mov	r1, r3
 8003e94:	ee17 0a90 	vmov	r0, s15
 8003e98:	f7fd f822 	bl	8000ee0 <motor>
	Last_Error = Error;
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <PID+0x394>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a06      	ldr	r2, [pc, #24]	; (8003ebc <PID+0x3a4>)
 8003ea2:	6013      	str	r3, [r2, #0]
//			State = INIT_HOMING;
//		}

//	}

}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003eac:	200010cc 	.word	0x200010cc
 8003eb0:	20000938 	.word	0x20000938
 8003eb4:	2000026c 	.word	0x2000026c
 8003eb8:	200010c0 	.word	0x200010c0
 8003ebc:	200010d0 	.word	0x200010d0

08003ec0 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8003ec0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	ed87 0b06 	vstr	d0, [r7, #24]
 8003ecc:	ed87 1b04 	vstr	d1, [r7, #16]
 8003ed0:	ed87 2b02 	vstr	d2, [r7, #8]
 8003ed4:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8003ed8:	4993      	ldr	r1, [pc, #588]	; (8004128 <Trajectory_Gen+0x268>)
 8003eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ede:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8003ee2:	4992      	ldr	r1, [pc, #584]	; (800412c <Trajectory_Gen+0x26c>)
 8003ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8003eec:	4990      	ldr	r1, [pc, #576]	; (8004130 <Trajectory_Gen+0x270>)
 8003eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef2:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 8003ef6:	498f      	ldr	r1, [pc, #572]	; (8004134 <Trajectory_Gen+0x274>)
 8003ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003efc:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <Trajectory_Gen+0x278>)
 8003f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f06:	4a8d      	ldr	r2, [pc, #564]	; (800413c <Trajectory_Gen+0x27c>)
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f7fc fe40 	bl	8000b90 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fae4 	bl	80004e4 <__aeabi_ul2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4987      	ldr	r1, [pc, #540]	; (8004140 <Trajectory_Gen+0x280>)
 8003f22:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <Trajectory_Gen+0x278>)
 8003f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f2c:	4a83      	ldr	r2, [pc, #524]	; (800413c <Trajectory_Gen+0x27c>)
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f7fc fe2d 	bl	8000b90 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fc fad1 	bl	80004e4 <__aeabi_ul2d>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	497f      	ldr	r1, [pc, #508]	; (8004144 <Trajectory_Gen+0x284>)
 8003f48:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8003f4c:	4b7a      	ldr	r3, [pc, #488]	; (8004138 <Trajectory_Gen+0x278>)
 8003f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f52:	4a7a      	ldr	r2, [pc, #488]	; (800413c <Trajectory_Gen+0x27c>)
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc fe1a 	bl	8000b90 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7fc fabe 	bl	80004e4 <__aeabi_ul2d>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4976      	ldr	r1, [pc, #472]	; (8004148 <Trajectory_Gen+0x288>)
 8003f6e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 8003f72:	4b71      	ldr	r3, [pc, #452]	; (8004138 <Trajectory_Gen+0x278>)
 8003f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f78:	4a70      	ldr	r2, [pc, #448]	; (800413c <Trajectory_Gen+0x27c>)
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f7fc fe07 	bl	8000b90 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f7fc faab 	bl	80004e4 <__aeabi_ul2d>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	496e      	ldr	r1, [pc, #440]	; (800414c <Trajectory_Gen+0x28c>)
 8003f94:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <Trajectory_Gen+0x26c>)
 8003f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <Trajectory_Gen+0x268>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc f91c 	bl	80001e0 <__aeabi_dsub>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4614      	mov	r4, r2
 8003fae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003fb2:	4b67      	ldr	r3, [pc, #412]	; (8004150 <Trajectory_Gen+0x290>)
 8003fb4:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8003fb8:	4b5c      	ldr	r3, [pc, #368]	; (800412c <Trajectory_Gen+0x26c>)
 8003fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fbe:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <Trajectory_Gen+0x268>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc f90c 	bl	80001e0 <__aeabi_dsub>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f7fc fd4a 	bl	8000a70 <__aeabi_dcmpgt>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <Trajectory_Gen+0x12a>
		direct = 1;
 8003fe2:	4b5c      	ldr	r3, [pc, #368]	; (8004154 <Trajectory_Gen+0x294>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e018      	b.n	800401c <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8003fea:	4b50      	ldr	r3, [pc, #320]	; (800412c <Trajectory_Gen+0x26c>)
 8003fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <Trajectory_Gen+0x268>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc f8f3 	bl	80001e0 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f7fc fd13 	bl	8000a34 <__aeabi_dcmplt>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <Trajectory_Gen+0x15c>
		direct = -1;
 8004014:	4b4f      	ldr	r3, [pc, #316]	; (8004154 <Trajectory_Gen+0x294>)
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 800401c:	4b44      	ldr	r3, [pc, #272]	; (8004130 <Trajectory_Gen+0x270>)
 800401e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <Trajectory_Gen+0x274>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fbbc 	bl	80007a4 <__aeabi_ddiv>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4949      	ldr	r1, [pc, #292]	; (8004158 <Trajectory_Gen+0x298>)
 8004032:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8004036:	4b46      	ldr	r3, [pc, #280]	; (8004150 <Trajectory_Gen+0x290>)
 8004038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403c:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <Trajectory_Gen+0x274>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f7fc fbaf 	bl	80007a4 <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	ec43 2b17 	vmov	d7, r2, r3
 800404e:	eeb0 0a47 	vmov.f32	s0, s14
 8004052:	eef0 0a67 	vmov.f32	s1, s15
 8004056:	f006 fe29 	bl	800acac <sqrt>
 800405a:	eeb0 7a40 	vmov.f32	s14, s0
 800405e:	eef0 7a60 	vmov.f32	s15, s1
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <Trajectory_Gen+0x29c>)
 8004064:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8004068:	4b3c      	ldr	r3, [pc, #240]	; (800415c <Trajectory_Gen+0x29c>)
 800406a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800406e:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <Trajectory_Gen+0x298>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f7fc fcde 	bl	8000a34 <__aeabi_dcmplt>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00f      	beq.n	800409e <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 800407e:	4b37      	ldr	r3, [pc, #220]	; (800415c <Trajectory_Gen+0x29c>)
 8004080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	f7fc f8ac 	bl	80001e4 <__adddf3>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4933      	ldr	r1, [pc, #204]	; (8004160 <Trajectory_Gen+0x2a0>)
 8004092:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <Trajectory_Gen+0x2a4>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 800409c:	e03e      	b.n	800411c <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <Trajectory_Gen+0x29c>)
 80040a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040a4:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <Trajectory_Gen+0x298>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc fcd7 	bl	8000a5c <__aeabi_dcmpge>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d100      	bne.n	80040b6 <Trajectory_Gen+0x1f6>
}
 80040b4:	e032      	b.n	800411c <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <Trajectory_Gen+0x298>)
 80040b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	f7fc f890 	bl	80001e4 <__adddf3>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4690      	mov	r8, r2
 80040ca:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 80040cc:	4b20      	ldr	r3, [pc, #128]	; (8004150 <Trajectory_Gen+0x290>)
 80040ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040d2:	4b21      	ldr	r3, [pc, #132]	; (8004158 <Trajectory_Gen+0x298>)
 80040d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <Trajectory_Gen+0x270>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc fa37 	bl	8000550 <__aeabi_dmul>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4620      	mov	r0, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	f7fc f879 	bl	80001e0 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <Trajectory_Gen+0x270>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fb52 	bl	80007a4 <__aeabi_ddiv>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4640      	mov	r0, r8
 8004106:	4649      	mov	r1, r9
 8004108:	f7fc f86c 	bl	80001e4 <__adddf3>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8004110:	4913      	ldr	r1, [pc, #76]	; (8004160 <Trajectory_Gen+0x2a0>)
 8004112:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <Trajectory_Gen+0x2a4>)
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004126:	bf00      	nop
 8004128:	200010e0 	.word	0x200010e0
 800412c:	200010e8 	.word	0x200010e8
 8004130:	200010f0 	.word	0x200010f0
 8004134:	200010f8 	.word	0x200010f8
 8004138:	20000238 	.word	0x20000238
 800413c:	000f4240 	.word	0x000f4240
 8004140:	20000240 	.word	0x20000240
 8004144:	20000248 	.word	0x20000248
 8004148:	20000250 	.word	0x20000250
 800414c:	20000258 	.word	0x20000258
 8004150:	20001100 	.word	0x20001100
 8004154:	200010d8 	.word	0x200010d8
 8004158:	20001128 	.word	0x20001128
 800415c:	20001138 	.word	0x20001138
 8004160:	20001130 	.word	0x20001130
 8004164:	200010d4 	.word	0x200010d4

08004168 <Trajectory_Eva>:

void Trajectory_Eva() {
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 800416e:	4ba3      	ldr	r3, [pc, #652]	; (80043fc <Trajectory_Eva+0x294>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b02      	cmp	r3, #2
 8004174:	f000 8173 	beq.w	800445e <Trajectory_Eva+0x2f6>
 8004178:	2b02      	cmp	r3, #2
 800417a:	f300 835e 	bgt.w	800483a <Trajectory_Eva+0x6d2>
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 835a 	beq.w	8004838 <Trajectory_Eva+0x6d0>
 8004184:	2b01      	cmp	r3, #1
 8004186:	d000      	beq.n	800418a <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8004188:	e357      	b.n	800483a <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 800418a:	4b9d      	ldr	r3, [pc, #628]	; (8004400 <Trajectory_Eva+0x298>)
 800418c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004190:	4b9c      	ldr	r3, [pc, #624]	; (8004404 <Trajectory_Eva+0x29c>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fc fc57 	bl	8000a48 <__aeabi_dcmple>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8085 	beq.w	80042ac <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 80041a2:	4b99      	ldr	r3, [pc, #612]	; (8004408 <Trajectory_Eva+0x2a0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f968 	bl	800047c <__aeabi_i2d>
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	4b96      	ldr	r3, [pc, #600]	; (800440c <Trajectory_Eva+0x2a4>)
 80041b2:	f7fc f9cd 	bl	8000550 <__aeabi_dmul>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4b94      	ldr	r3, [pc, #592]	; (8004410 <Trajectory_Eva+0x2a8>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f7fc f9c4 	bl	8000550 <__aeabi_dmul>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4614      	mov	r4, r2
 80041ce:	461d      	mov	r5, r3
 80041d0:	4b90      	ldr	r3, [pc, #576]	; (8004414 <Trajectory_Eva+0x2ac>)
 80041d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041d6:	4b8f      	ldr	r3, [pc, #572]	; (8004414 <Trajectory_Eva+0x2ac>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc f9b8 	bl	8000550 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc f9b2 	bl	8000550 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	4b88      	ldr	r3, [pc, #544]	; (8004418 <Trajectory_Eva+0x2b0>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fb fff3 	bl	80001e4 <__adddf3>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
			x = x_initial
 8004202:	4986      	ldr	r1, [pc, #536]	; (800441c <Trajectory_Eva+0x2b4>)
 8004204:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <Trajectory_Eva+0x2a8>)
 800420a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800420e:	4b81      	ldr	r3, [pc, #516]	; (8004414 <Trajectory_Eva+0x2ac>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fc f99c 	bl	8000550 <__aeabi_dmul>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	4b79      	ldr	r3, [pc, #484]	; (8004408 <Trajectory_Eva+0x2a0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f929 	bl	800047c <__aeabi_i2d>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4620      	mov	r0, r4
 8004230:	4629      	mov	r1, r5
 8004232:	f7fc f98d 	bl	8000550 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4979      	ldr	r1, [pc, #484]	; (8004420 <Trajectory_Eva+0x2b8>)
 800423c:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8004240:	4b71      	ldr	r3, [pc, #452]	; (8004408 <Trajectory_Eva+0x2a0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f919 	bl	800047c <__aeabi_i2d>
 800424a:	4b71      	ldr	r3, [pc, #452]	; (8004410 <Trajectory_Eva+0x2a8>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc f97e 	bl	8000550 <__aeabi_dmul>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4972      	ldr	r1, [pc, #456]	; (8004424 <Trajectory_Eva+0x2bc>)
 800425a:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800425e:	4b6f      	ldr	r3, [pc, #444]	; (800441c <Trajectory_Eva+0x2b4>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	4970      	ldr	r1, [pc, #448]	; (8004428 <Trajectory_Eva+0x2c0>)
 8004266:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 800426a:	4b6d      	ldr	r3, [pc, #436]	; (8004420 <Trajectory_Eva+0x2b8>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	496e      	ldr	r1, [pc, #440]	; (800442c <Trajectory_Eva+0x2c4>)
 8004272:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8004276:	4b67      	ldr	r3, [pc, #412]	; (8004414 <Trajectory_Eva+0x2ac>)
 8004278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800427c:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <Trajectory_Eva+0x2c8>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fb ffaf 	bl	80001e4 <__adddf3>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4962      	ldr	r1, [pc, #392]	; (8004414 <Trajectory_Eva+0x2ac>)
 800428c:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <Trajectory_Eva+0x298>)
 8004292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004296:	4b66      	ldr	r3, [pc, #408]	; (8004430 <Trajectory_Eva+0x2c8>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ffa2 	bl	80001e4 <__adddf3>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4956      	ldr	r1, [pc, #344]	; (8004400 <Trajectory_Eva+0x298>)
 80042a6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80042aa:	e2c6      	b.n	800483a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 80042ac:	4b54      	ldr	r3, [pc, #336]	; (8004400 <Trajectory_Eva+0x298>)
 80042ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <Trajectory_Eva+0x2cc>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc fbc6 	bl	8000a48 <__aeabi_dcmple>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80bc 	beq.w	800443c <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <Trajectory_Eva+0x2c4>)
 80042c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ca:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <Trajectory_Eva+0x2d0>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc f93e 	bl	8000550 <__aeabi_dmul>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	4b52      	ldr	r3, [pc, #328]	; (8004428 <Trajectory_Eva+0x2c0>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f7fb ff7f 	bl	80001e4 <__adddf3>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4614      	mov	r4, r2
 80042ec:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <Trajectory_Eva+0x2a0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f8c2 	bl	800047c <__aeabi_i2d>
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	4b43      	ldr	r3, [pc, #268]	; (800440c <Trajectory_Eva+0x2a4>)
 80042fe:	f7fc f927 	bl	8000550 <__aeabi_dmul>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <Trajectory_Eva+0x2a8>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc f91e 	bl	8000550 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	4b46      	ldr	r3, [pc, #280]	; (8004438 <Trajectory_Eva+0x2d0>)
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f7fc f915 	bl	8000550 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <Trajectory_Eva+0x2d0>)
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f7fc f90c 	bl	8000550 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4620      	mov	r0, r4
 800433e:	4629      	mov	r1, r5
 8004340:	f7fb ff4e 	bl	80001e0 <__aeabi_dsub>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8004348:	4934      	ldr	r1, [pc, #208]	; (800441c <Trajectory_Eva+0x2b4>)
 800434a:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 800434e:	4b37      	ldr	r3, [pc, #220]	; (800442c <Trajectory_Eva+0x2c4>)
 8004350:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <Trajectory_Eva+0x2a8>)
 8004356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800435a:	4b37      	ldr	r3, [pc, #220]	; (8004438 <Trajectory_Eva+0x2d0>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fc f8f6 	bl	8000550 <__aeabi_dmul>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4692      	mov	sl, r2
 800436a:	469b      	mov	fp, r3
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <Trajectory_Eva+0x2a0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f883 	bl	800047c <__aeabi_i2d>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4650      	mov	r0, sl
 800437c:	4659      	mov	r1, fp
 800437e:	f7fc f8e7 	bl	8000550 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	f7fb ff29 	bl	80001e0 <__aeabi_dsub>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4923      	ldr	r1, [pc, #140]	; (8004420 <Trajectory_Eva+0x2b8>)
 8004394:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <Trajectory_Eva+0x2a8>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	4690      	mov	r8, r2
 80043a0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <Trajectory_Eva+0x2a0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc f867 	bl	800047c <__aeabi_i2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4640      	mov	r0, r8
 80043b4:	4649      	mov	r1, r9
 80043b6:	f7fc f8cb 	bl	8000550 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4919      	ldr	r1, [pc, #100]	; (8004424 <Trajectory_Eva+0x2bc>)
 80043c0:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80043c4:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <Trajectory_Eva+0x2d0>)
 80043c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <Trajectory_Eva+0x2c8>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fb ff08 	bl	80001e4 <__adddf3>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4917      	ldr	r1, [pc, #92]	; (8004438 <Trajectory_Eva+0x2d0>)
 80043da:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <Trajectory_Eva+0x298>)
 80043e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <Trajectory_Eva+0x2c8>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fb fefb 	bl	80001e4 <__adddf3>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4903      	ldr	r1, [pc, #12]	; (8004400 <Trajectory_Eva+0x298>)
 80043f4:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80043f8:	e21f      	b.n	800483a <Trajectory_Eva+0x6d2>
 80043fa:	bf00      	nop
 80043fc:	200010d4 	.word	0x200010d4
 8004400:	20000258 	.word	0x20000258
 8004404:	20001138 	.word	0x20001138
 8004408:	200010d8 	.word	0x200010d8
 800440c:	3fe00000 	.word	0x3fe00000
 8004410:	200010f8 	.word	0x200010f8
 8004414:	20000240 	.word	0x20000240
 8004418:	200010e0 	.word	0x200010e0
 800441c:	20000920 	.word	0x20000920
 8004420:	20000928 	.word	0x20000928
 8004424:	20000930 	.word	0x20000930
 8004428:	20001108 	.word	0x20001108
 800442c:	20001118 	.word	0x20001118
 8004430:	20000260 	.word	0x20000260
 8004434:	20001130 	.word	0x20001130
 8004438:	20000248 	.word	0x20000248
			x = x_final;
 800443c:	4b8e      	ldr	r3, [pc, #568]	; (8004678 <Trajectory_Eva+0x510>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	498e      	ldr	r1, [pc, #568]	; (800467c <Trajectory_Eva+0x514>)
 8004444:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8004448:	498d      	ldr	r1, [pc, #564]	; (8004680 <Trajectory_Eva+0x518>)
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8004456:	4b8b      	ldr	r3, [pc, #556]	; (8004684 <Trajectory_Eva+0x51c>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
		break;
 800445c:	e1ed      	b.n	800483a <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 800445e:	4b8a      	ldr	r3, [pc, #552]	; (8004688 <Trajectory_Eva+0x520>)
 8004460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004464:	4b89      	ldr	r3, [pc, #548]	; (800468c <Trajectory_Eva+0x524>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc faed 	bl	8000a48 <__aeabi_dcmple>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8089 	beq.w	8004588 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8004476:	4b86      	ldr	r3, [pc, #536]	; (8004690 <Trajectory_Eva+0x528>)
 8004478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	4b84      	ldr	r3, [pc, #528]	; (8004694 <Trajectory_Eva+0x52c>)
 8004482:	f7fc f865 	bl	8000550 <__aeabi_dmul>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4614      	mov	r4, r2
 800448c:	461d      	mov	r5, r3
 800448e:	4b82      	ldr	r3, [pc, #520]	; (8004698 <Trajectory_Eva+0x530>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fb fff2 	bl	800047c <__aeabi_i2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fc f856 	bl	8000550 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	4b7b      	ldr	r3, [pc, #492]	; (800469c <Trajectory_Eva+0x534>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f84d 	bl	8000550 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4b77      	ldr	r3, [pc, #476]	; (800469c <Trajectory_Eva+0x534>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f844 	bl	8000550 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <Trajectory_Eva+0x538>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fb fe85 	bl	80001e4 <__adddf3>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4967      	ldr	r1, [pc, #412]	; (800467c <Trajectory_Eva+0x514>)
 80044e0:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <Trajectory_Eva+0x528>)
 80044e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044ea:	4b6c      	ldr	r3, [pc, #432]	; (800469c <Trajectory_Eva+0x534>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fc f82e 	bl	8000550 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4b66      	ldr	r3, [pc, #408]	; (8004698 <Trajectory_Eva+0x530>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb ffbb 	bl	800047c <__aeabi_i2d>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fc f81f 	bl	8000550 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	495a      	ldr	r1, [pc, #360]	; (8004680 <Trajectory_Eva+0x518>)
 8004518:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 800451c:	4b5e      	ldr	r3, [pc, #376]	; (8004698 <Trajectory_Eva+0x530>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fb ffab 	bl	800047c <__aeabi_i2d>
 8004526:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <Trajectory_Eva+0x528>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fc f810 	bl	8000550 <__aeabi_dmul>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	495b      	ldr	r1, [pc, #364]	; (80046a4 <Trajectory_Eva+0x53c>)
 8004536:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800453a:	4b50      	ldr	r3, [pc, #320]	; (800467c <Trajectory_Eva+0x514>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	4959      	ldr	r1, [pc, #356]	; (80046a8 <Trajectory_Eva+0x540>)
 8004542:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8004546:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <Trajectory_Eva+0x518>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	4957      	ldr	r1, [pc, #348]	; (80046ac <Trajectory_Eva+0x544>)
 800454e:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8004552:	4b52      	ldr	r3, [pc, #328]	; (800469c <Trajectory_Eva+0x534>)
 8004554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004558:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <Trajectory_Eva+0x548>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb fe41 	bl	80001e4 <__adddf3>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	494d      	ldr	r1, [pc, #308]	; (800469c <Trajectory_Eva+0x534>)
 8004568:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800456c:	4b46      	ldr	r3, [pc, #280]	; (8004688 <Trajectory_Eva+0x520>)
 800456e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004572:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <Trajectory_Eva+0x548>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fb fe34 	bl	80001e4 <__adddf3>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4941      	ldr	r1, [pc, #260]	; (8004688 <Trajectory_Eva+0x520>)
 8004582:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004586:	e158      	b.n	800483a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8004588:	4b4a      	ldr	r3, [pc, #296]	; (80046b4 <Trajectory_Eva+0x54c>)
 800458a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800458e:	4b3f      	ldr	r3, [pc, #252]	; (800468c <Trajectory_Eva+0x524>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fb fe24 	bl	80001e0 <__aeabi_dsub>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <Trajectory_Eva+0x520>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f7fc fa59 	bl	8000a5c <__aeabi_dcmpge>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 808b 	beq.w	80046c8 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 80045b2:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <Trajectory_Eva+0x550>)
 80045b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <Trajectory_Eva+0x554>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fb ffc7 	bl	8000550 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4614      	mov	r4, r2
 80045c8:	461d      	mov	r5, r3
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <Trajectory_Eva+0x530>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff54 	bl	800047c <__aeabi_i2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4620      	mov	r0, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	f7fb ffb8 	bl	8000550 <__aeabi_dmul>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <Trajectory_Eva+0x540>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fb fdf9 	bl	80001e4 <__adddf3>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4921      	ldr	r1, [pc, #132]	; (800467c <Trajectory_Eva+0x514>)
 80045f8:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <Trajectory_Eva+0x530>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff3b 	bl	800047c <__aeabi_i2d>
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <Trajectory_Eva+0x550>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fb ffa0 	bl	8000550 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	491a      	ldr	r1, [pc, #104]	; (8004680 <Trajectory_Eva+0x518>)
 8004616:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 800461a:	4922      	ldr	r1, [pc, #136]	; (80046a4 <Trajectory_Eva+0x53c>)
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8004628:	4b14      	ldr	r3, [pc, #80]	; (800467c <Trajectory_Eva+0x514>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	4924      	ldr	r1, [pc, #144]	; (80046c0 <Trajectory_Eva+0x558>)
 8004630:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <Trajectory_Eva+0x518>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	4922      	ldr	r1, [pc, #136]	; (80046c4 <Trajectory_Eva+0x55c>)
 800463c:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <Trajectory_Eva+0x554>)
 8004642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <Trajectory_Eva+0x548>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb fdca 	bl	80001e4 <__adddf3>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4919      	ldr	r1, [pc, #100]	; (80046bc <Trajectory_Eva+0x554>)
 8004656:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <Trajectory_Eva+0x520>)
 800465c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <Trajectory_Eva+0x548>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fb fdbd 	bl	80001e4 <__adddf3>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4906      	ldr	r1, [pc, #24]	; (8004688 <Trajectory_Eva+0x520>)
 8004670:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004674:	e0e1      	b.n	800483a <Trajectory_Eva+0x6d2>
 8004676:	bf00      	nop
 8004678:	200010e8 	.word	0x200010e8
 800467c:	20000920 	.word	0x20000920
 8004680:	20000928 	.word	0x20000928
 8004684:	200010d4 	.word	0x200010d4
 8004688:	20000258 	.word	0x20000258
 800468c:	20001128 	.word	0x20001128
 8004690:	200010f8 	.word	0x200010f8
 8004694:	3fe00000 	.word	0x3fe00000
 8004698:	200010d8 	.word	0x200010d8
 800469c:	20000240 	.word	0x20000240
 80046a0:	200010e0 	.word	0x200010e0
 80046a4:	20000930 	.word	0x20000930
 80046a8:	20001108 	.word	0x20001108
 80046ac:	20001118 	.word	0x20001118
 80046b0:	20000260 	.word	0x20000260
 80046b4:	20001130 	.word	0x20001130
 80046b8:	200010f0 	.word	0x200010f0
 80046bc:	20000250 	.word	0x20000250
 80046c0:	20001110 	.word	0x20001110
 80046c4:	20001120 	.word	0x20001120
		} else if (t_count <= t_final) {
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <Trajectory_Eva+0x6d8>)
 80046ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ce:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <Trajectory_Eva+0x6dc>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fc f9b8 	bl	8000a48 <__aeabi_dcmple>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 809b 	beq.w	8004816 <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <Trajectory_Eva+0x6e0>)
 80046e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046e6:	4b59      	ldr	r3, [pc, #356]	; (800484c <Trajectory_Eva+0x6e4>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb ff30 	bl	8000550 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	4b55      	ldr	r3, [pc, #340]	; (8004850 <Trajectory_Eva+0x6e8>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f7fb fd71 	bl	80001e4 <__adddf3>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4690      	mov	r8, r2
 8004708:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 800470a:	4b52      	ldr	r3, [pc, #328]	; (8004854 <Trajectory_Eva+0x6ec>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb feb4 	bl	800047c <__aeabi_i2d>
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <Trajectory_Eva+0x6f0>)
 800471a:	f7fb ff19 	bl	8000550 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4b4d      	ldr	r3, [pc, #308]	; (800485c <Trajectory_Eva+0x6f4>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb ff10 	bl	8000550 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4692      	mov	sl, r2
 8004736:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8004738:	4b44      	ldr	r3, [pc, #272]	; (800484c <Trajectory_Eva+0x6e4>)
 800473a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <Trajectory_Eva+0x6e4>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb ff04 	bl	8000550 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4650      	mov	r0, sl
 800474e:	4659      	mov	r1, fp
 8004750:	f7fb fefe 	bl	8000550 <__aeabi_dmul>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb fd40 	bl	80001e0 <__aeabi_dsub>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
			x =
 8004764:	493e      	ldr	r1, [pc, #248]	; (8004860 <Trajectory_Eva+0x6f8>)
 8004766:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <Trajectory_Eva+0x6e0>)
 800476c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004770:	4b3a      	ldr	r3, [pc, #232]	; (800485c <Trajectory_Eva+0x6f4>)
 8004772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <Trajectory_Eva+0x6e4>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb fee8 	bl	8000550 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4692      	mov	sl, r2
 8004786:	469b      	mov	fp, r3
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <Trajectory_Eva+0x6ec>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fe75 	bl	800047c <__aeabi_i2d>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4650      	mov	r0, sl
 8004798:	4659      	mov	r1, fp
 800479a:	f7fb fed9 	bl	8000550 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb fd1b 	bl	80001e0 <__aeabi_dsub>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	492d      	ldr	r1, [pc, #180]	; (8004864 <Trajectory_Eva+0x6fc>)
 80047b0:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80047b4:	4b29      	ldr	r3, [pc, #164]	; (800485c <Trajectory_Eva+0x6f4>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	4614      	mov	r4, r2
 80047bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <Trajectory_Eva+0x6ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fe59 	bl	800047c <__aeabi_i2d>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4620      	mov	r0, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	f7fb febd 	bl	8000550 <__aeabi_dmul>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4923      	ldr	r1, [pc, #140]	; (8004868 <Trajectory_Eva+0x700>)
 80047dc:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <Trajectory_Eva+0x6e4>)
 80047e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <Trajectory_Eva+0x704>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb fcfa 	bl	80001e4 <__adddf3>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4915      	ldr	r1, [pc, #84]	; (800484c <Trajectory_Eva+0x6e4>)
 80047f6:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <Trajectory_Eva+0x6d8>)
 80047fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <Trajectory_Eva+0x704>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb fced 	bl	80001e4 <__adddf3>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	490c      	ldr	r1, [pc, #48]	; (8004840 <Trajectory_Eva+0x6d8>)
 8004810:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004814:	e011      	b.n	800483a <Trajectory_Eva+0x6d2>
			x = x_final;
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <Trajectory_Eva+0x708>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	4910      	ldr	r1, [pc, #64]	; (8004860 <Trajectory_Eva+0x6f8>)
 800481e:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8004822:	4910      	ldr	r1, [pc, #64]	; (8004864 <Trajectory_Eva+0x6fc>)
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <Trajectory_Eva+0x70c>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
		break;
 8004836:	e000      	b.n	800483a <Trajectory_Eva+0x6d2>
		break;
 8004838:	bf00      	nop
}
 800483a:	bf00      	nop
 800483c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004840:	20000258 	.word	0x20000258
 8004844:	20001130 	.word	0x20001130
 8004848:	20001120 	.word	0x20001120
 800484c:	20000248 	.word	0x20000248
 8004850:	20001110 	.word	0x20001110
 8004854:	200010d8 	.word	0x200010d8
 8004858:	3fe00000 	.word	0x3fe00000
 800485c:	200010f8 	.word	0x200010f8
 8004860:	20000920 	.word	0x20000920
 8004864:	20000928 	.word	0x20000928
 8004868:	20000930 	.word	0x20000930
 800486c:	20000260 	.word	0x20000260
 8004870:	200010e8 	.word	0x200010e8
 8004874:	200010d4 	.word	0x200010d4

08004878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_MspInit+0x4c>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <HAL_MspInit+0x4c>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488c:	6453      	str	r3, [r2, #68]	; 0x44
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_MspInit+0x4c>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_MspInit+0x4c>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <HAL_MspInit+0x4c>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_MspInit+0x4c>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048b6:	2007      	movs	r0, #7
 80048b8:	f000 fc84 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a22      	ldr	r2, [pc, #136]	; (8004970 <HAL_I2C_MspInit+0xa8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d13d      	bne.n	8004966 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_I2C_MspInit+0xac>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_I2C_MspInit+0xac>)
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_I2C_MspInit+0xac>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800490c:	2312      	movs	r3, #18
 800490e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004914:	2303      	movs	r3, #3
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004918:	2304      	movs	r3, #4
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4619      	mov	r1, r3
 8004922:	4815      	ldr	r0, [pc, #84]	; (8004978 <HAL_I2C_MspInit+0xb0>)
 8004924:	f001 f89e 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800492c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800492e:	2312      	movs	r3, #18
 8004930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004932:	2301      	movs	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004936:	2303      	movs	r3, #3
 8004938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800493a:	2309      	movs	r3, #9
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	4619      	mov	r1, r3
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <HAL_I2C_MspInit+0xb0>)
 8004946:	f001 f88d 	bl	8005a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_I2C_MspInit+0xac>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_I2C_MspInit+0xac>)
 8004954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_I2C_MspInit+0xac>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004966:	bf00      	nop
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40005800 	.word	0x40005800
 8004974:	40023800 	.word	0x40023800
 8004978:	40020400 	.word	0x40020400

0800497c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_SPI_MspInit+0x84>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d12c      	bne.n	80049f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ac:	6413      	str	r3, [r2, #64]	; 0x40
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_SPI_MspInit+0x88>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e4:	2303      	movs	r3, #3
 80049e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049e8:	2306      	movs	r3, #6
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ec:	f107 0314 	add.w	r3, r7, #20
 80049f0:	4619      	mov	r1, r3
 80049f2:	4805      	ldr	r0, [pc, #20]	; (8004a08 <HAL_SPI_MspInit+0x8c>)
 80049f4:	f001 f836 	bl	8005a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80049f8:	bf00      	nop
 80049fa:	3728      	adds	r7, #40	; 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40003c00 	.word	0x40003c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40020800 	.word	0x40020800

08004a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a38      	ldr	r2, [pc, #224]	; (8004afc <HAL_TIM_Base_MspInit+0xf0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d116      	bne.n	8004a4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2e:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	201a      	movs	r0, #26
 8004a40:	f000 fbcb 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a44:	201a      	movs	r0, #26
 8004a46:	f000 fbe4 	bl	8005212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004a4a:	e052      	b.n	8004af2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <HAL_TIM_Base_MspInit+0xf8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d116      	bne.n	8004a84 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	201d      	movs	r0, #29
 8004a78:	f000 fbaf 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a7c:	201d      	movs	r0, #29
 8004a7e:	f000 fbc8 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8004a82:	e036      	b.n	8004af2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_TIM_Base_MspInit+0xfc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d116      	bne.n	8004abc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2100      	movs	r1, #0
 8004aae:	2032      	movs	r0, #50	; 0x32
 8004ab0:	f000 fb93 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ab4:	2032      	movs	r0, #50	; 0x32
 8004ab6:	f000 fbac 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8004aba:	e01a      	b.n	8004af2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <HAL_TIM_Base_MspInit+0x100>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d115      	bne.n	8004af2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_TIM_Base_MspInit+0xf4>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	201a      	movs	r0, #26
 8004ae8:	f000 fb77 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004aec:	201a      	movs	r0, #26
 8004aee:	f000 fb90 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40014800 	.word	0x40014800

08004b10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d12b      	bne.n	8004b8a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b76:	2300      	movs	r3, #0
 8004b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	4804      	ldr	r0, [pc, #16]	; (8004b98 <HAL_TIM_Encoder_MspInit+0x88>)
 8004b86:	f000 ff6d 	bl	8005a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004b8a:	bf00      	nop
 8004b8c:	3728      	adds	r7, #40	; 0x28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40020000 	.word	0x40020000

08004b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <HAL_TIM_MspPostInit+0x68>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d11e      	bne.n	8004bfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_TIM_MspPostInit+0x6c>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <HAL_TIM_MspPostInit+0x6c>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <HAL_TIM_MspPostInit+0x6c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4805      	ldr	r0, [pc, #20]	; (8004c0c <HAL_TIM_MspPostInit+0x70>)
 8004bf8:	f000 ff34 	bl	8005a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bfc:	bf00      	nop
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020000 	.word	0x40020000

08004c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c18:	f107 031c 	add.w	r3, r7, #28
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a4d      	ldr	r2, [pc, #308]	; (8004d64 <HAL_UART_MspInit+0x154>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d162      	bne.n	8004cf8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c40:	6413      	str	r3, [r2, #64]	; 0x40
 8004c42:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	4b45      	ldr	r3, [pc, #276]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a44      	ldr	r2, [pc, #272]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	4619      	mov	r1, r3
 8004c84:	4839      	ldr	r0, [pc, #228]	; (8004d6c <HAL_UART_MspInit+0x15c>)
 8004c86:	f000 feed 	bl	8005a64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004c8c:	4a39      	ldr	r2, [pc, #228]	; (8004d74 <HAL_UART_MspInit+0x164>)
 8004c8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c9e:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ca4:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004caa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004cca:	4829      	ldr	r0, [pc, #164]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004ccc:	f000 fabc 	bl	8005248 <HAL_DMA_Init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004cd6:	f7fe ff19 	bl	8003b0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_UART_MspInit+0x160>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2026      	movs	r0, #38	; 0x26
 8004cec:	f000 fa75 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cf0:	2026      	movs	r0, #38	; 0x26
 8004cf2:	f000 fa8e 	bl	8005212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004cf6:	e031      	b.n	8004d5c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_UART_MspInit+0x168>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d12c      	bne.n	8004d5c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	6453      	str	r3, [r2, #68]	; 0x44
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <HAL_UART_MspInit+0x158>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d50:	f107 031c 	add.w	r3, r7, #28
 8004d54:	4619      	mov	r1, r3
 8004d56:	4805      	ldr	r0, [pc, #20]	; (8004d6c <HAL_UART_MspInit+0x15c>)
 8004d58:	f000 fe84 	bl	8005a64 <HAL_GPIO_Init>
}
 8004d5c:	bf00      	nop
 8004d5e:	3730      	adds	r7, #48	; 0x30
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40020000 	.word	0x40020000
 8004d70:	200008b0 	.word	0x200008b0
 8004d74:	400260a0 	.word	0x400260a0
 8004d78:	40011400 	.word	0x40011400

08004d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d80:	e7fe      	b.n	8004d80 <NMI_Handler+0x4>

08004d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d86:	e7fe      	b.n	8004d86 <HardFault_Handler+0x4>

08004d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <MemManage_Handler+0x4>

08004d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d92:	e7fe      	b.n	8004d92 <BusFault_Handler+0x4>

08004d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d98:	e7fe      	b.n	8004d98 <UsageFault_Handler+0x4>

08004d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc8:	f000 f8e8 	bl	8004f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8004dd4:	2004      	movs	r0, #4
 8004dd6:	f000 fffb 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8004de2:	2008      	movs	r0, #8
 8004de4:	f000 fff4 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004de8:	bf00      	nop
 8004dea:	bd80      	pop	{r7, pc}

08004dec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <DMA1_Stream6_IRQHandler+0x10>)
 8004df2:	f000 fbc1 	bl	8005578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200008b0 	.word	0x200008b0

08004e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8004e04:	2040      	movs	r0, #64	; 0x40
 8004e06:	f000 ffe3 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8004e0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e0e:	f000 ffdf 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e1c:	4803      	ldr	r0, [pc, #12]	; (8004e2c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004e1e:	f003 fbb7 	bl	8008590 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004e22:	4803      	ldr	r0, [pc, #12]	; (8004e30 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e24:	f003 fbb4 	bl	8008590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000444 	.word	0x20000444
 8004e30:	20000714 	.word	0x20000714

08004e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <TIM3_IRQHandler+0x10>)
 8004e3a:	f003 fba9 	bl	8008590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200005ac 	.word	0x200005ac

08004e48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <USART2_IRQHandler+0x10>)
 8004e4e:	f004 fea7 	bl	8009ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200007c8 	.word	0x200007c8

08004e5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e64:	f000 ffb4 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004e70:	4802      	ldr	r0, [pc, #8]	; (8004e7c <TIM5_IRQHandler+0x10>)
 8004e72:	f003 fb8d 	bl	8008590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000660 	.word	0x20000660

08004e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <SystemInit+0x20>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <SystemInit+0x20>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ea8:	480d      	ldr	r0, [pc, #52]	; (8004ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004eac:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb0:	e002      	b.n	8004eb8 <LoopCopyDataInit>

08004eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb6:	3304      	adds	r3, #4

08004eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ebc:	d3f9      	bcc.n	8004eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ebe:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ec0:	4c0b      	ldr	r4, [pc, #44]	; (8004ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec4:	e001      	b.n	8004eca <LoopFillZerobss>

08004ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec8:	3204      	adds	r2, #4

08004eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ecc:	d3fb      	bcc.n	8004ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ece:	f7ff ffd7 	bl	8004e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ed2:	f005 feb1 	bl	800ac38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ed6:	f7fd fa8f 	bl	80023f8 <main>
  bx  lr    
 8004eda:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee4:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8004ee8:	0800b148 	.word	0x0800b148
  ldr r2, =_sbss
 8004eec:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8004ef0:	20001144 	.word	0x20001144

08004ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef4:	e7fe      	b.n	8004ef4 <ADC_IRQHandler>
	...

08004ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <HAL_Init+0x40>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <HAL_Init+0x40>)
 8004f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_Init+0x40>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_Init+0x40>)
 8004f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_Init+0x40>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <HAL_Init+0x40>)
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f20:	2003      	movs	r0, #3
 8004f22:	f000 f94f 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f000 f808 	bl	8004f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f2c:	f7ff fca4 	bl	8004878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023c00 	.word	0x40023c00

08004f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_InitTick+0x54>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_InitTick+0x58>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f967 	bl	800522e <HAL_SYSTICK_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00e      	b.n	8004f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d80a      	bhi.n	8004f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f70:	2200      	movs	r2, #0
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	f000 f92f 	bl	80051da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <HAL_InitTick+0x5c>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	2000027c 	.word	0x2000027c
 8004f94:	20000284 	.word	0x20000284
 8004f98:	20000280 	.word	0x20000280

08004f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_IncTick+0x20>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000284 	.word	0x20000284
 8004fc0:	20001140 	.word	0x20001140

08004fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_GetTick+0x14>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20001140 	.word	0x20001140

08004fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7ff ffee 	bl	8004fc4 <HAL_GetTick>
 8004fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d005      	beq.n	8005002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_Delay+0x44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005002:	bf00      	nop
 8005004:	f7ff ffde 	bl	8004fc4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8f7      	bhi.n	8005004 <HAL_Delay+0x28>
  {
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000284 	.word	0x20000284

08005024 <__NVIC_SetPriorityGrouping>:
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800504c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	60d3      	str	r3, [r2, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_GetPriorityGrouping>:
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_GetPriorityGrouping+0x18>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0307 	and.w	r3, r3, #7
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_EnableIRQ>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db0b      	blt.n	80050b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <__NVIC_EnableIRQ+0x38>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2001      	movs	r0, #1
 80050aa:	fa00 f202 	lsl.w	r2, r0, r2
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_SetPriority>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0a      	blt.n	80050ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <__NVIC_SetPriority+0x4c>)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	440b      	add	r3, r1
 80050e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050ec:	e00a      	b.n	8005104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_SetPriority+0x50>)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	3b04      	subs	r3, #4
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	440b      	add	r3, r1
 8005102:	761a      	strb	r2, [r3, #24]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <NVIC_EncodePriority>:
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf28      	it	cs
 8005136:	2304      	movcs	r3, #4
 8005138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	2b06      	cmp	r3, #6
 8005140:	d902      	bls.n	8005148 <NVIC_EncodePriority+0x30>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b03      	subs	r3, #3
 8005146:	e000      	b.n	800514a <NVIC_EncodePriority+0x32>
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005160:	f04f 31ff 	mov.w	r1, #4294967295
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43d9      	mvns	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	4313      	orrs	r3, r2
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3b01      	subs	r3, #1
 800518c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005190:	d301      	bcc.n	8005196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005192:	2301      	movs	r3, #1
 8005194:	e00f      	b.n	80051b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <SysTick_Config+0x40>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519e:	210f      	movs	r1, #15
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	f7ff ff8e 	bl	80050c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SysTick_Config+0x40>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <SysTick_Config+0x40>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010

080051c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ff29 	bl	8005024 <__NVIC_SetPriorityGrouping>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	4603      	mov	r3, r0
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051ec:	f7ff ff3e 	bl	800506c <__NVIC_GetPriorityGrouping>
 80051f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff8e 	bl	8005118 <NVIC_EncodePriority>
 80051fc:	4602      	mov	r2, r0
 80051fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff5d 	bl	80050c4 <__NVIC_SetPriority>
}
 800520a:	bf00      	nop
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	4603      	mov	r3, r0
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800521c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff31 	bl	8005088 <__NVIC_EnableIRQ>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffa2 	bl	8005180 <SysTick_Config>
 800523c:	4603      	mov	r3, r0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005254:	f7ff feb6 	bl	8004fc4 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e099      	b.n	8005398 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005284:	e00f      	b.n	80052a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005286:	f7ff fe9d 	bl	8004fc4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b05      	cmp	r3, #5
 8005292:	d908      	bls.n	80052a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e078      	b.n	8005398 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e8      	bne.n	8005286 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_DMA_Init+0x158>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d107      	bne.n	8005310 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	4313      	orrs	r3, r2
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0307 	bic.w	r3, r3, #7
 8005326:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b04      	cmp	r3, #4
 8005338:	d117      	bne.n	800536a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00e      	beq.n	800536a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fb0d 	bl	800596c <DMA_CheckFifoParam>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005366:	2301      	movs	r3, #1
 8005368:	e016      	b.n	8005398 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fac4 	bl	8005900 <DMA_CalcBaseAndBitshift>
 8005378:	4603      	mov	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	223f      	movs	r2, #63	; 0x3f
 8005382:	409a      	lsls	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	f010803f 	.word	0xf010803f

080053a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_DMA_Start_IT+0x26>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e040      	b.n	800544c <HAL_DMA_Start_IT+0xa8>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d12f      	bne.n	800543e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa56 	bl	80058a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fc:	223f      	movs	r2, #63	; 0x3f
 80053fe:	409a      	lsls	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0216 	orr.w	r2, r2, #22
 8005412:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e005      	b.n	800544a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005462:	f7ff fdaf 	bl	8004fc4 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d008      	beq.n	8005486 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e052      	b.n	800552c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0216 	bic.w	r2, r2, #22
 8005494:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <HAL_DMA_Abort+0x62>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0208 	bic.w	r2, r2, #8
 80054c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d6:	e013      	b.n	8005500 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d8:	f7ff fd74 	bl	8004fc4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d90c      	bls.n	8005500 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2203      	movs	r2, #3
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e015      	b.n	800552c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e4      	bne.n	80054d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	223f      	movs	r2, #63	; 0x3f
 8005514:	409a      	lsls	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d004      	beq.n	8005552 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e00c      	b.n	800556c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2205      	movs	r2, #5
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005584:	4b8e      	ldr	r3, [pc, #568]	; (80057c0 <HAL_DMA_IRQHandler+0x248>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a8e      	ldr	r2, [pc, #568]	; (80057c4 <HAL_DMA_IRQHandler+0x24c>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	0a9b      	lsrs	r3, r3, #10
 8005590:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	2208      	movs	r2, #8
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01a      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0204 	bic.w	r2, r2, #4
 80055ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	2208      	movs	r2, #8
 80055d2:	409a      	lsls	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	f043 0201 	orr.w	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	2201      	movs	r2, #1
 8005608:	409a      	lsls	r2, r3
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561e:	2204      	movs	r2, #4
 8005620:	409a      	lsls	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d012      	beq.n	8005650 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	2204      	movs	r2, #4
 800563e:	409a      	lsls	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f043 0204 	orr.w	r2, r3, #4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	2210      	movs	r2, #16
 8005656:	409a      	lsls	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d043      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d03c      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	2210      	movs	r2, #16
 8005674:	409a      	lsls	r2, r3
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d018      	beq.n	80056ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d108      	bne.n	80056a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d024      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
 80056a6:	e01f      	b.n	80056e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
 80056b8:	e016      	b.n	80056e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0208 	bic.w	r2, r2, #8
 80056d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	2220      	movs	r2, #32
 80056ee:	409a      	lsls	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 808f 	beq.w	8005818 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8087 	beq.w	8005818 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570e:	2220      	movs	r2, #32
 8005710:	409a      	lsls	r2, r3
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b05      	cmp	r3, #5
 8005720:	d136      	bne.n	8005790 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0216 	bic.w	r2, r2, #22
 8005730:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005740:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <HAL_DMA_IRQHandler+0x1da>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0208 	bic.w	r2, r2, #8
 8005760:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	223f      	movs	r2, #63	; 0x3f
 8005768:	409a      	lsls	r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d07e      	beq.n	8005884 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
        }
        return;
 800578e:	e079      	b.n	8005884 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01d      	beq.n	80057da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d031      	beq.n	8005818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
 80057bc:	e02c      	b.n	8005818 <HAL_DMA_IRQHandler+0x2a0>
 80057be:	bf00      	nop
 80057c0:	2000027c 	.word	0x2000027c
 80057c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d023      	beq.n	8005818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
 80057d8:	e01e      	b.n	8005818 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0210 	bic.w	r2, r2, #16
 80057f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	2b00      	cmp	r3, #0
 800581e:	d032      	beq.n	8005886 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d022      	beq.n	8005872 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2205      	movs	r2, #5
 8005830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	3301      	adds	r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d307      	bcc.n	8005860 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f2      	bne.n	8005844 <HAL_DMA_IRQHandler+0x2cc>
 800585e:	e000      	b.n	8005862 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005860:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
 8005882:	e000      	b.n	8005886 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005884:	bf00      	nop
    }
  }
}
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d108      	bne.n	80058e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058e2:	e007      	b.n	80058f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	3b10      	subs	r3, #16
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <DMA_CalcBaseAndBitshift+0x64>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	091b      	lsrs	r3, r3, #4
 8005918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800591a:	4a13      	ldr	r2, [pc, #76]	; (8005968 <DMA_CalcBaseAndBitshift+0x68>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d909      	bls.n	8005942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	659a      	str	r2, [r3, #88]	; 0x58
 8005940:	e007      	b.n	8005952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	aaaaaaab 	.word	0xaaaaaaab
 8005968:	0800b12c 	.word	0x0800b12c

0800596c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d11f      	bne.n	80059c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d856      	bhi.n	8005a3a <DMA_CheckFifoParam+0xce>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <DMA_CheckFifoParam+0x28>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059b7 	.word	0x080059b7
 800599c:	080059a5 	.word	0x080059a5
 80059a0:	08005a3b 	.word	0x08005a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d046      	beq.n	8005a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b4:	e043      	b.n	8005a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059be:	d140      	bne.n	8005a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c4:	e03d      	b.n	8005a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ce:	d121      	bne.n	8005a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d837      	bhi.n	8005a46 <DMA_CheckFifoParam+0xda>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <DMA_CheckFifoParam+0x70>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059f3 	.word	0x080059f3
 80059e4:	080059ed 	.word	0x080059ed
 80059e8:	08005a05 	.word	0x08005a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e030      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d025      	beq.n	8005a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a02:	e022      	b.n	8005a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a0c:	d11f      	bne.n	8005a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a12:	e01c      	b.n	8005a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d903      	bls.n	8005a22 <DMA_CheckFifoParam+0xb6>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d003      	beq.n	8005a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a20:	e018      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
      break;
 8005a26:	e015      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
      break;
 8005a38:	e00b      	b.n	8005a52 <DMA_CheckFifoParam+0xe6>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e00a      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e008      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;
 8005a42:	bf00      	nop
 8005a44:	e006      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <DMA_CheckFifoParam+0xe8>
      break;
 8005a52:	bf00      	nop
    }
  } 
  
  return status; 
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e159      	b.n	8005d34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a80:	2201      	movs	r2, #1
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 8148 	bne.w	8005d2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d005      	beq.n	8005ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d130      	bne.n	8005b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aec:	2201      	movs	r2, #1
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 0201 	and.w	r2, r3, #1
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d017      	beq.n	8005b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2203      	movs	r2, #3
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d123      	bne.n	8005ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	08da      	lsrs	r2, r3, #3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3208      	adds	r2, #8
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	220f      	movs	r2, #15
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	08da      	lsrs	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0203 	and.w	r2, r3, #3
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a2 	beq.w	8005d2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	4b57      	ldr	r3, [pc, #348]	; (8005d4c <HAL_GPIO_Init+0x2e8>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	4a56      	ldr	r2, [pc, #344]	; (8005d4c <HAL_GPIO_Init+0x2e8>)
 8005bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bfa:	4b54      	ldr	r3, [pc, #336]	; (8005d4c <HAL_GPIO_Init+0x2e8>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c06:	4a52      	ldr	r2, [pc, #328]	; (8005d50 <HAL_GPIO_Init+0x2ec>)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	220f      	movs	r2, #15
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a49      	ldr	r2, [pc, #292]	; (8005d54 <HAL_GPIO_Init+0x2f0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d019      	beq.n	8005c66 <HAL_GPIO_Init+0x202>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a48      	ldr	r2, [pc, #288]	; (8005d58 <HAL_GPIO_Init+0x2f4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_GPIO_Init+0x1fe>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a47      	ldr	r2, [pc, #284]	; (8005d5c <HAL_GPIO_Init+0x2f8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_GPIO_Init+0x1fa>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a46      	ldr	r2, [pc, #280]	; (8005d60 <HAL_GPIO_Init+0x2fc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <HAL_GPIO_Init+0x1f6>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a45      	ldr	r2, [pc, #276]	; (8005d64 <HAL_GPIO_Init+0x300>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_GPIO_Init+0x1f2>
 8005c52:	2304      	movs	r3, #4
 8005c54:	e008      	b.n	8005c68 <HAL_GPIO_Init+0x204>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e006      	b.n	8005c68 <HAL_GPIO_Init+0x204>
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e004      	b.n	8005c68 <HAL_GPIO_Init+0x204>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e002      	b.n	8005c68 <HAL_GPIO_Init+0x204>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_GPIO_Init+0x204>
 8005c66:	2300      	movs	r3, #0
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	f002 0203 	and.w	r2, r2, #3
 8005c6e:	0092      	lsls	r2, r2, #2
 8005c70:	4093      	lsls	r3, r2
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c78:	4935      	ldr	r1, [pc, #212]	; (8005d50 <HAL_GPIO_Init+0x2ec>)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	089b      	lsrs	r3, r3, #2
 8005c7e:	3302      	adds	r3, #2
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c86:	4b38      	ldr	r3, [pc, #224]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005caa:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cd4:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cda:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d04:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d28:	4a0f      	ldr	r2, [pc, #60]	; (8005d68 <HAL_GPIO_Init+0x304>)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	f67f aea2 	bls.w	8005a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3724      	adds	r7, #36	; 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40020000 	.word	0x40020000
 8005d58:	40020400 	.word	0x40020400
 8005d5c:	40020800 	.word	0x40020800
 8005d60:	40020c00 	.word	0x40020c00
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40013c00 	.word	0x40013c00

08005d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
 8005d88:	e001      	b.n	8005d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
 8005da8:	4613      	mov	r3, r2
 8005daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dac:	787b      	ldrb	r3, [r7, #1]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005db8:	e003      	b.n	8005dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dba:	887b      	ldrh	r3, [r7, #2]
 8005dbc:	041a      	lsls	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	619a      	str	r2, [r3, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005de6:	4a05      	ldr	r2, [pc, #20]	; (8005dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fd fe4c 	bl	8003a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40013c00 	.word	0x40013c00

08005e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e12b      	b.n	800606a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fe fd4e 	bl	80048c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e64:	f001 fbd2 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 8005e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a81      	ldr	r2, [pc, #516]	; (8006074 <HAL_I2C_Init+0x274>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d807      	bhi.n	8005e84 <HAL_I2C_Init+0x84>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a80      	ldr	r2, [pc, #512]	; (8006078 <HAL_I2C_Init+0x278>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bf94      	ite	ls
 8005e7c:	2301      	movls	r3, #1
 8005e7e:	2300      	movhi	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e006      	b.n	8005e92 <HAL_I2C_Init+0x92>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a7d      	ldr	r2, [pc, #500]	; (800607c <HAL_I2C_Init+0x27c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bf94      	ite	ls
 8005e8c:	2301      	movls	r3, #1
 8005e8e:	2300      	movhi	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0e7      	b.n	800606a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a78      	ldr	r2, [pc, #480]	; (8006080 <HAL_I2C_Init+0x280>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0c9b      	lsrs	r3, r3, #18
 8005ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a6a      	ldr	r2, [pc, #424]	; (8006074 <HAL_I2C_Init+0x274>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d802      	bhi.n	8005ed4 <HAL_I2C_Init+0xd4>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	e009      	b.n	8005ee8 <HAL_I2C_Init+0xe8>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	4a69      	ldr	r2, [pc, #420]	; (8006084 <HAL_I2C_Init+0x284>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	495c      	ldr	r1, [pc, #368]	; (8006074 <HAL_I2C_Init+0x274>)
 8005f04:	428b      	cmp	r3, r1
 8005f06:	d819      	bhi.n	8005f3c <HAL_I2C_Init+0x13c>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e59      	subs	r1, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f16:	1c59      	adds	r1, r3, #1
 8005f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f1c:	400b      	ands	r3, r1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_I2C_Init+0x138>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1e59      	subs	r1, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f30:	3301      	adds	r3, #1
 8005f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f36:	e051      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	e04f      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d111      	bne.n	8005f68 <HAL_I2C_Init+0x168>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1e58      	subs	r0, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6859      	ldr	r1, [r3, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	440b      	add	r3, r1
 8005f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e012      	b.n	8005f8e <HAL_I2C_Init+0x18e>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1e58      	subs	r0, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	0099      	lsls	r1, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Init+0x196>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e022      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10e      	bne.n	8005fbc <HAL_I2C_Init+0x1bc>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1e58      	subs	r0, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	440b      	add	r3, r1
 8005fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	e00f      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	1e58      	subs	r0, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	0099      	lsls	r1, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	6809      	ldr	r1, [r1, #0]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800600a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6911      	ldr	r1, [r2, #16]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68d2      	ldr	r2, [r2, #12]
 8006016:	4311      	orrs	r1, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	430b      	orrs	r3, r1
 800601e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	000186a0 	.word	0x000186a0
 8006078:	001e847f 	.word	0x001e847f
 800607c:	003d08ff 	.word	0x003d08ff
 8006080:	431bde83 	.word	0x431bde83
 8006084:	10624dd3 	.word	0x10624dd3

08006088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	461a      	mov	r2, r3
 8006094:	460b      	mov	r3, r1
 8006096:	817b      	strh	r3, [r7, #10]
 8006098:	4613      	mov	r3, r2
 800609a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7fe ff92 	bl	8004fc4 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	f040 80e0 	bne.w	8006270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2319      	movs	r3, #25
 80060b6:	2201      	movs	r2, #1
 80060b8:	4970      	ldr	r1, [pc, #448]	; (800627c <HAL_I2C_Master_Transmit+0x1f4>)
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fc58 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0d3      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_I2C_Master_Transmit+0x50>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e0cc      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d007      	beq.n	80060fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800610c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2221      	movs	r2, #33	; 0x21
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2210      	movs	r2, #16
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	893a      	ldrh	r2, [r7, #8]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a50      	ldr	r2, [pc, #320]	; (8006280 <HAL_I2C_Master_Transmit+0x1f8>)
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006140:	8979      	ldrh	r1, [r7, #10]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fac2 	bl	80066d0 <I2C_MasterRequestWrite>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e08d      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800616c:	e066      	b.n	800623c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	6a39      	ldr	r1, [r7, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fcd2 	bl	8006b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b04      	cmp	r3, #4
 8006184:	d107      	bne.n	8006196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e06b      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d11b      	bne.n	8006210 <HAL_I2C_Master_Transmit+0x188>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	6a39      	ldr	r1, [r7, #32]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fcc2 	bl	8006b9e <I2C_WaitOnBTFFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b04      	cmp	r3, #4
 8006226:	d107      	bne.n	8006238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e01a      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d194      	bne.n	800616e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	00100002 	.word	0x00100002
 8006280:	ffff0000 	.word	0xffff0000

08006284 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08c      	sub	sp, #48	; 0x30
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	461a      	mov	r2, r3
 8006290:	460b      	mov	r3, r1
 8006292:	817b      	strh	r3, [r7, #10]
 8006294:	4613      	mov	r3, r2
 8006296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006298:	f7fe fe94 	bl	8004fc4 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	f040 820b 	bne.w	80066c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2319      	movs	r3, #25
 80062b2:	2201      	movs	r2, #1
 80062b4:	497c      	ldr	r1, [pc, #496]	; (80064a8 <HAL_I2C_Master_Receive+0x224>)
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fb5a 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
 80062c4:	e1fe      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_I2C_Master_Receive+0x50>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e1f7      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d007      	beq.n	80062fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2222      	movs	r2, #34	; 0x22
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2210      	movs	r2, #16
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	893a      	ldrh	r2, [r7, #8]
 800632a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a5c      	ldr	r2, [pc, #368]	; (80064ac <HAL_I2C_Master_Receive+0x228>)
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800633c:	8979      	ldrh	r1, [r7, #10]
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fa46 	bl	80067d4 <I2C_MasterRequestRead>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1b8      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e18c      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11b      	bne.n	80063c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e16c      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d11b      	bne.n	8006402 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	e14c      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006428:	e138      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642e:	2b03      	cmp	r3, #3
 8006430:	f200 80f1 	bhi.w	8006616 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	2b01      	cmp	r3, #1
 800643a:	d123      	bne.n	8006484 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fbed 	bl	8006c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e139      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006482:	e10b      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006488:	2b02      	cmp	r3, #2
 800648a:	d14e      	bne.n	800652a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	2200      	movs	r2, #0
 8006494:	4906      	ldr	r1, [pc, #24]	; (80064b0 <HAL_I2C_Master_Receive+0x22c>)
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fa6a 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e10e      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
 80064a6:	bf00      	nop
 80064a8:	00100002 	.word	0x00100002
 80064ac:	ffff0000 	.word	0xffff0000
 80064b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006528:	e0b8      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2200      	movs	r2, #0
 8006532:	4966      	ldr	r1, [pc, #408]	; (80066cc <HAL_I2C_Master_Receive+0x448>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa1b 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0bf      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2200      	movs	r2, #0
 800658e:	494f      	ldr	r1, [pc, #316]	; (80066cc <HAL_I2C_Master_Receive+0x448>)
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f9ed 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e091      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006614:	e042      	b.n	800669c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fb00 	bl	8006c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e04c      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d118      	bne.n	800669c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f47f aec2 	bne.w	800642a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066c2:	2302      	movs	r3, #2
  }
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3728      	adds	r7, #40	; 0x28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	00010004 	.word	0x00010004

080066d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	460b      	mov	r3, r1
 80066de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d006      	beq.n	80066fa <I2C_MasterRequestWrite+0x2a>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d003      	beq.n	80066fa <I2C_MasterRequestWrite+0x2a>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066f8:	d108      	bne.n	800670c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e00b      	b.n	8006724 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	2b12      	cmp	r3, #18
 8006712:	d107      	bne.n	8006724 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f91d 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	d103      	bne.n	8006754 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e035      	b.n	80067c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006760:	d108      	bne.n	8006774 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006762:	897b      	ldrh	r3, [r7, #10]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006770:	611a      	str	r2, [r3, #16]
 8006772:	e01b      	b.n	80067ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006774:	897b      	ldrh	r3, [r7, #10]
 8006776:	11db      	asrs	r3, r3, #7
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f063 030f 	orn	r3, r3, #15
 8006784:	b2da      	uxtb	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	490e      	ldr	r1, [pc, #56]	; (80067cc <I2C_MasterRequestWrite+0xfc>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f943 	bl	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e010      	b.n	80067c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4907      	ldr	r1, [pc, #28]	; (80067d0 <I2C_MasterRequestWrite+0x100>)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f933 	bl	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	00010008 	.word	0x00010008
 80067d0:	00010002 	.word	0x00010002

080067d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	460b      	mov	r3, r1
 80067e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d006      	beq.n	800680e <I2C_MasterRequestRead+0x3a>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d003      	beq.n	800680e <I2C_MasterRequestRead+0x3a>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800680c:	d108      	bne.n	8006820 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e00b      	b.n	8006838 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	2b11      	cmp	r3, #17
 8006826:	d107      	bne.n	8006838 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f893 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00d      	beq.n	800686c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	d103      	bne.n	8006868 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e079      	b.n	8006960 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006874:	d108      	bne.n	8006888 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]
 8006886:	e05f      	b.n	8006948 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006888:	897b      	ldrh	r3, [r7, #10]
 800688a:	11db      	asrs	r3, r3, #7
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0306 	and.w	r3, r3, #6
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f063 030f 	orn	r3, r3, #15
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4930      	ldr	r1, [pc, #192]	; (8006968 <I2C_MasterRequestRead+0x194>)
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f8b9 	bl	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e054      	b.n	8006960 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4929      	ldr	r1, [pc, #164]	; (800696c <I2C_MasterRequestRead+0x198>)
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f8a9 	bl	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e044      	b.n	8006960 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f831 	bl	8006970 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006922:	d103      	bne.n	800692c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800692a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e017      	b.n	8006960 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	11db      	asrs	r3, r3, #7
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0306 	and.w	r3, r3, #6
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f063 030e 	orn	r3, r3, #14
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4907      	ldr	r1, [pc, #28]	; (800696c <I2C_MasterRequestRead+0x198>)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f865 	bl	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	00010008 	.word	0x00010008
 800696c:	00010002 	.word	0x00010002

08006970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	4613      	mov	r3, r2
 800697e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006980:	e025      	b.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d021      	beq.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fe fb1b 	bl	8004fc4 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d116      	bne.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e023      	b.n	8006a16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10d      	bne.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	43da      	mvns	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf0c      	ite	eq
 80069ea:	2301      	moveq	r3, #1
 80069ec:	2300      	movne	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	e00c      	b.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	43da      	mvns	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d0b6      	beq.n	8006982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a2c:	e051      	b.n	8006ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3c:	d123      	bne.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f043 0204 	orr.w	r2, r3, #4
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e046      	b.n	8006b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d021      	beq.n	8006ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8e:	f7fe fa99 	bl	8004fc4 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d116      	bne.n	8006ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e020      	b.n	8006b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10c      	bne.n	8006af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf14      	ite	ne
 8006aee:	2301      	movne	r3, #1
 8006af0:	2300      	moveq	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	e00b      	b.n	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	43da      	mvns	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf14      	ite	ne
 8006b08:	2301      	movne	r3, #1
 8006b0a:	2300      	moveq	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d18d      	bne.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b28:	e02d      	b.n	8006b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f8ce 	bl	8006ccc <I2C_IsAcknowledgeFailed>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e02d      	b.n	8006b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b40:	d021      	beq.n	8006b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b42:	f7fe fa3f 	bl	8004fc4 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d302      	bcc.n	8006b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d116      	bne.n	8006b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f043 0220 	orr.w	r2, r3, #32
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e007      	b.n	8006b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d1ca      	bne.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006baa:	e02d      	b.n	8006c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f88d 	bl	8006ccc <I2C_IsAcknowledgeFailed>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e02d      	b.n	8006c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d021      	beq.n	8006c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc4:	f7fe f9fe 	bl	8004fc4 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d116      	bne.n	8006c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e007      	b.n	8006c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d1ca      	bne.n	8006bac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c2c:	e042      	b.n	8006cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d119      	bne.n	8006c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0210 	mvn.w	r2, #16
 8006c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e029      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c70:	f7fe f9a8 	bl	8004fc4 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d116      	bne.n	8006cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e007      	b.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d1b5      	bne.n	8006c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce2:	d11b      	bne.n	8006d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f043 0204 	orr.w	r2, r3, #4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e267      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d075      	beq.n	8006e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d4a:	4b88      	ldr	r3, [pc, #544]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d00c      	beq.n	8006d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d56:	4b85      	ldr	r3, [pc, #532]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d112      	bne.n	8006d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d62:	4b82      	ldr	r3, [pc, #520]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6e:	d10b      	bne.n	8006d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d70:	4b7e      	ldr	r3, [pc, #504]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d05b      	beq.n	8006e34 <HAL_RCC_OscConfig+0x108>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d157      	bne.n	8006e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e242      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d90:	d106      	bne.n	8006da0 <HAL_RCC_OscConfig+0x74>
 8006d92:	4b76      	ldr	r3, [pc, #472]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a75      	ldr	r2, [pc, #468]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e01d      	b.n	8006ddc <HAL_RCC_OscConfig+0xb0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x98>
 8006daa:	4b70      	ldr	r3, [pc, #448]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a6f      	ldr	r2, [pc, #444]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	4b6d      	ldr	r3, [pc, #436]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6c      	ldr	r2, [pc, #432]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e00b      	b.n	8006ddc <HAL_RCC_OscConfig+0xb0>
 8006dc4:	4b69      	ldr	r3, [pc, #420]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a68      	ldr	r2, [pc, #416]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	4b66      	ldr	r3, [pc, #408]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a65      	ldr	r2, [pc, #404]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7fe f8ee 	bl	8004fc4 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dec:	f7fe f8ea 	bl	8004fc4 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b64      	cmp	r3, #100	; 0x64
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e207      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfe:	4b5b      	ldr	r3, [pc, #364]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0xc0>
 8006e0a:	e014      	b.n	8006e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fe f8da 	bl	8004fc4 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e14:	f7fe f8d6 	bl	8004fc4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b64      	cmp	r3, #100	; 0x64
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e1f3      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e26:	4b51      	ldr	r3, [pc, #324]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0xe8>
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d063      	beq.n	8006f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e42:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 030c 	and.w	r3, r3, #12
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e4e:	4b47      	ldr	r3, [pc, #284]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d11c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e5a:	4b44      	ldr	r3, [pc, #272]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d116      	bne.n	8006e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e66:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_RCC_OscConfig+0x152>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d001      	beq.n	8006e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e1c7      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7e:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4937      	ldr	r1, [pc, #220]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e92:	e03a      	b.n	8006f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d020      	beq.n	8006ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e9c:	4b34      	ldr	r3, [pc, #208]	; (8006f70 <HAL_RCC_OscConfig+0x244>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea2:	f7fe f88f 	bl	8004fc4 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eaa:	f7fe f88b 	bl	8004fc4 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1a8      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec8:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	4925      	ldr	r1, [pc, #148]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]
 8006edc:	e015      	b.n	8006f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ede:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <HAL_RCC_OscConfig+0x244>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fe f86e 	bl	8004fc4 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eec:	f7fe f86a 	bl	8004fc4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e187      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006efe:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d036      	beq.n	8006f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d016      	beq.n	8006f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1e:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <HAL_RCC_OscConfig+0x248>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fe f84e 	bl	8004fc4 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f2c:	f7fe f84a 	bl	8004fc4 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e167      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <HAL_RCC_OscConfig+0x240>)
 8006f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCC_OscConfig+0x200>
 8006f4a:	e01b      	b.n	8006f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <HAL_RCC_OscConfig+0x248>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f52:	f7fe f837 	bl	8004fc4 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f58:	e00e      	b.n	8006f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f5a:	f7fe f833 	bl	8004fc4 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d907      	bls.n	8006f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e150      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	42470000 	.word	0x42470000
 8006f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f78:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8006f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1ea      	bne.n	8006f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8097 	beq.w	80070c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f96:	4b81      	ldr	r3, [pc, #516]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	4b7d      	ldr	r3, [pc, #500]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a7c      	ldr	r2, [pc, #496]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8006fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb2:	4b7a      	ldr	r3, [pc, #488]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc2:	4b77      	ldr	r3, [pc, #476]	; (80071a0 <HAL_RCC_OscConfig+0x474>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d118      	bne.n	8007000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fce:	4b74      	ldr	r3, [pc, #464]	; (80071a0 <HAL_RCC_OscConfig+0x474>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a73      	ldr	r2, [pc, #460]	; (80071a0 <HAL_RCC_OscConfig+0x474>)
 8006fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fda:	f7fd fff3 	bl	8004fc4 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe2:	f7fd ffef 	bl	8004fc4 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e10c      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff4:	4b6a      	ldr	r3, [pc, #424]	; (80071a0 <HAL_RCC_OscConfig+0x474>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d106      	bne.n	8007016 <HAL_RCC_OscConfig+0x2ea>
 8007008:	4b64      	ldr	r3, [pc, #400]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	4a63      	ldr	r2, [pc, #396]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6713      	str	r3, [r2, #112]	; 0x70
 8007014:	e01c      	b.n	8007050 <HAL_RCC_OscConfig+0x324>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d10c      	bne.n	8007038 <HAL_RCC_OscConfig+0x30c>
 800701e:	4b5f      	ldr	r3, [pc, #380]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4a5e      	ldr	r2, [pc, #376]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007024:	f043 0304 	orr.w	r3, r3, #4
 8007028:	6713      	str	r3, [r2, #112]	; 0x70
 800702a:	4b5c      	ldr	r3, [pc, #368]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a5b      	ldr	r2, [pc, #364]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
 8007036:	e00b      	b.n	8007050 <HAL_RCC_OscConfig+0x324>
 8007038:	4b58      	ldr	r3, [pc, #352]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703c:	4a57      	ldr	r2, [pc, #348]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	6713      	str	r3, [r2, #112]	; 0x70
 8007044:	4b55      	ldr	r3, [pc, #340]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	4a54      	ldr	r2, [pc, #336]	; (800719c <HAL_RCC_OscConfig+0x470>)
 800704a:	f023 0304 	bic.w	r3, r3, #4
 800704e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007058:	f7fd ffb4 	bl	8004fc4 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705e:	e00a      	b.n	8007076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fd ffb0 	bl	8004fc4 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	; 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e0cb      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007076:	4b49      	ldr	r3, [pc, #292]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0ee      	beq.n	8007060 <HAL_RCC_OscConfig+0x334>
 8007082:	e014      	b.n	80070ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007084:	f7fd ff9e 	bl	8004fc4 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800708a:	e00a      	b.n	80070a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800708c:	f7fd ff9a 	bl	8004fc4 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	f241 3288 	movw	r2, #5000	; 0x1388
 800709a:	4293      	cmp	r3, r2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e0b5      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a2:	4b3e      	ldr	r3, [pc, #248]	; (800719c <HAL_RCC_OscConfig+0x470>)
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1ee      	bne.n	800708c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d105      	bne.n	80070c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b4:	4b39      	ldr	r3, [pc, #228]	; (800719c <HAL_RCC_OscConfig+0x470>)
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	4a38      	ldr	r2, [pc, #224]	; (800719c <HAL_RCC_OscConfig+0x470>)
 80070ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a1 	beq.w	800720c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070ca:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_RCC_OscConfig+0x470>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d05c      	beq.n	8007190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d141      	bne.n	8007162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070de:	4b31      	ldr	r3, [pc, #196]	; (80071a4 <HAL_RCC_OscConfig+0x478>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fd ff6e 	bl	8004fc4 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fd ff6a 	bl	8004fc4 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e087      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fe:	4b27      	ldr	r3, [pc, #156]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	019b      	lsls	r3, r3, #6
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	3b01      	subs	r3, #1
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	491b      	ldr	r1, [pc, #108]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007130:	4313      	orrs	r3, r2
 8007132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <HAL_RCC_OscConfig+0x478>)
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713a:	f7fd ff43 	bl	8004fc4 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007142:	f7fd ff3f 	bl	8004fc4 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e05c      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007154:	4b11      	ldr	r3, [pc, #68]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x416>
 8007160:	e054      	b.n	800720c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <HAL_RCC_OscConfig+0x478>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fd ff2c 	bl	8004fc4 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007170:	f7fd ff28 	bl	8004fc4 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e045      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <HAL_RCC_OscConfig+0x470>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x444>
 800718e:	e03d      	b.n	800720c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d107      	bne.n	80071a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e038      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
 800719c:	40023800 	.word	0x40023800
 80071a0:	40007000 	.word	0x40007000
 80071a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071a8:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x4ec>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d028      	beq.n	8007208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d121      	bne.n	8007208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d11a      	bne.n	8007208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071d8:	4013      	ands	r3, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d111      	bne.n	8007208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	3b01      	subs	r3, #1
 80071f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800

0800721c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0cc      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007230:	4b68      	ldr	r3, [pc, #416]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d90c      	bls.n	8007258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723e:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007246:	4b63      	ldr	r3, [pc, #396]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d001      	beq.n	8007258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0b8      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d020      	beq.n	80072a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007270:	4b59      	ldr	r3, [pc, #356]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4a58      	ldr	r2, [pc, #352]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800727a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007288:	4b53      	ldr	r3, [pc, #332]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4a52      	ldr	r2, [pc, #328]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007294:	4b50      	ldr	r3, [pc, #320]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	494d      	ldr	r1, [pc, #308]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d044      	beq.n	800733c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d107      	bne.n	80072ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ba:	4b47      	ldr	r3, [pc, #284]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d119      	bne.n	80072fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e07f      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d003      	beq.n	80072da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d107      	bne.n	80072ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072da:	4b3f      	ldr	r3, [pc, #252]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e06f      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ea:	4b3b      	ldr	r3, [pc, #236]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e067      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fa:	4b37      	ldr	r3, [pc, #220]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 0203 	bic.w	r2, r3, #3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4934      	ldr	r1, [pc, #208]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	4313      	orrs	r3, r2
 800730a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800730c:	f7fd fe5a 	bl	8004fc4 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007312:	e00a      	b.n	800732a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007314:	f7fd fe56 	bl	8004fc4 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e04f      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	4b2b      	ldr	r3, [pc, #172]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 020c 	and.w	r2, r3, #12
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	429a      	cmp	r2, r3
 800733a:	d1eb      	bne.n	8007314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800733c:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d20c      	bcs.n	8007364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734a:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007352:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d001      	beq.n	8007364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e032      	b.n	80073ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4916      	ldr	r1, [pc, #88]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	490e      	ldr	r1, [pc, #56]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073a2:	f000 f821 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	490a      	ldr	r1, [pc, #40]	; (80073dc <HAL_RCC_ClockConfig+0x1c0>)
 80073b4:	5ccb      	ldrb	r3, [r1, r3]
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <HAL_RCC_ClockConfig+0x1c4>)
 80073bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <HAL_RCC_ClockConfig+0x1c8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fdba 	bl	8004f3c <HAL_InitTick>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40023c00 	.word	0x40023c00
 80073d8:	40023800 	.word	0x40023800
 80073dc:	0800b114 	.word	0x0800b114
 80073e0:	2000027c 	.word	0x2000027c
 80073e4:	20000280 	.word	0x20000280

080073e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073ec:	b094      	sub	sp, #80	; 0x50
 80073ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
 80073f4:	2300      	movs	r3, #0
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f8:	2300      	movs	r3, #0
 80073fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007400:	4b79      	ldr	r3, [pc, #484]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	2b08      	cmp	r3, #8
 800740a:	d00d      	beq.n	8007428 <HAL_RCC_GetSysClockFreq+0x40>
 800740c:	2b08      	cmp	r3, #8
 800740e:	f200 80e1 	bhi.w	80075d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_RCC_GetSysClockFreq+0x34>
 8007416:	2b04      	cmp	r3, #4
 8007418:	d003      	beq.n	8007422 <HAL_RCC_GetSysClockFreq+0x3a>
 800741a:	e0db      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800741c:	4b73      	ldr	r3, [pc, #460]	; (80075ec <HAL_RCC_GetSysClockFreq+0x204>)
 800741e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007420:	e0db      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007422:	4b73      	ldr	r3, [pc, #460]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007426:	e0d8      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007428:	4b6f      	ldr	r3, [pc, #444]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007430:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007432:	4b6d      	ldr	r3, [pc, #436]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d063      	beq.n	8007506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743e:	4b6a      	ldr	r3, [pc, #424]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	099b      	lsrs	r3, r3, #6
 8007444:	2200      	movs	r2, #0
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38
 8007448:	63fa      	str	r2, [r7, #60]	; 0x3c
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007450:	633b      	str	r3, [r7, #48]	; 0x30
 8007452:	2300      	movs	r3, #0
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
 8007456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	f04f 0000 	mov.w	r0, #0
 8007462:	f04f 0100 	mov.w	r1, #0
 8007466:	0159      	lsls	r1, r3, #5
 8007468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800746c:	0150      	lsls	r0, r2, #5
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4621      	mov	r1, r4
 8007474:	1a51      	subs	r1, r2, r1
 8007476:	6139      	str	r1, [r7, #16]
 8007478:	4629      	mov	r1, r5
 800747a:	eb63 0301 	sbc.w	r3, r3, r1
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800748c:	4659      	mov	r1, fp
 800748e:	018b      	lsls	r3, r1, #6
 8007490:	4651      	mov	r1, sl
 8007492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007496:	4651      	mov	r1, sl
 8007498:	018a      	lsls	r2, r1, #6
 800749a:	4651      	mov	r1, sl
 800749c:	ebb2 0801 	subs.w	r8, r2, r1
 80074a0:	4659      	mov	r1, fp
 80074a2:	eb63 0901 	sbc.w	r9, r3, r1
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ba:	4690      	mov	r8, r2
 80074bc:	4699      	mov	r9, r3
 80074be:	4623      	mov	r3, r4
 80074c0:	eb18 0303 	adds.w	r3, r8, r3
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	462b      	mov	r3, r5
 80074c8:	eb49 0303 	adc.w	r3, r9, r3
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074da:	4629      	mov	r1, r5
 80074dc:	024b      	lsls	r3, r1, #9
 80074de:	4621      	mov	r1, r4
 80074e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e4:	4621      	mov	r1, r4
 80074e6:	024a      	lsls	r2, r1, #9
 80074e8:	4610      	mov	r0, r2
 80074ea:	4619      	mov	r1, r3
 80074ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ee:	2200      	movs	r2, #0
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074f8:	f7f9 fb4a 	bl	8000b90 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4613      	mov	r3, r2
 8007502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007504:	e058      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007506:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	099b      	lsrs	r3, r3, #6
 800750c:	2200      	movs	r2, #0
 800750e:	4618      	mov	r0, r3
 8007510:	4611      	mov	r1, r2
 8007512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007516:	623b      	str	r3, [r7, #32]
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
 800751c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f04f 0100 	mov.w	r1, #0
 800752c:	0159      	lsls	r1, r3, #5
 800752e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007532:	0150      	lsls	r0, r2, #5
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4641      	mov	r1, r8
 800753a:	ebb2 0a01 	subs.w	sl, r2, r1
 800753e:	4649      	mov	r1, r9
 8007540:	eb63 0b01 	sbc.w	fp, r3, r1
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007558:	ebb2 040a 	subs.w	r4, r2, sl
 800755c:	eb63 050b 	sbc.w	r5, r3, fp
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	00eb      	lsls	r3, r5, #3
 800756a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800756e:	00e2      	lsls	r2, r4, #3
 8007570:	4614      	mov	r4, r2
 8007572:	461d      	mov	r5, r3
 8007574:	4643      	mov	r3, r8
 8007576:	18e3      	adds	r3, r4, r3
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	464b      	mov	r3, r9
 800757c:	eb45 0303 	adc.w	r3, r5, r3
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800758e:	4629      	mov	r1, r5
 8007590:	028b      	lsls	r3, r1, #10
 8007592:	4621      	mov	r1, r4
 8007594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007598:	4621      	mov	r1, r4
 800759a:	028a      	lsls	r2, r1, #10
 800759c:	4610      	mov	r0, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a2:	2200      	movs	r2, #0
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	61fa      	str	r2, [r7, #28]
 80075a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ac:	f7f9 faf0 	bl	8000b90 <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4613      	mov	r3, r2
 80075b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	3301      	adds	r3, #1
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075d2:	e002      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <HAL_RCC_GetSysClockFreq+0x204>)
 80075d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3750      	adds	r7, #80	; 0x50
 80075e0:	46bd      	mov	sp, r7
 80075e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e6:	bf00      	nop
 80075e8:	40023800 	.word	0x40023800
 80075ec:	00f42400 	.word	0x00f42400
 80075f0:	007a1200 	.word	0x007a1200

080075f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f8:	4b03      	ldr	r3, [pc, #12]	; (8007608 <HAL_RCC_GetHCLKFreq+0x14>)
 80075fa:	681b      	ldr	r3, [r3, #0]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	2000027c 	.word	0x2000027c

0800760c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007610:	f7ff fff0 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	0a9b      	lsrs	r3, r3, #10
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4903      	ldr	r1, [pc, #12]	; (8007630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40023800 	.word	0x40023800
 8007630:	0800b124 	.word	0x0800b124

08007634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007638:	f7ff ffdc 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800763c:	4602      	mov	r2, r0
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	0b5b      	lsrs	r3, r3, #13
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	4903      	ldr	r1, [pc, #12]	; (8007658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800764a:	5ccb      	ldrb	r3, [r1, r3]
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40023800 	.word	0x40023800
 8007658:	0800b124 	.word	0x0800b124

0800765c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e07b      	b.n	8007766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d108      	bne.n	8007688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767e:	d009      	beq.n	8007694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	61da      	str	r2, [r3, #28]
 8007686:	e005      	b.n	8007694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fd f964 	bl	800497c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007718:	ea42 0103 	orr.w	r1, r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	f003 0104 	and.w	r1, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	f003 0210 	and.w	r2, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b08c      	sub	sp, #48	; 0x30
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800777c:	2301      	movs	r3, #1
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x26>
 8007790:	2302      	movs	r3, #2
 8007792:	e18a      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x33c>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800779c:	f7fd fc12 	bl	8004fc4 <HAL_GetTick>
 80077a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077b2:	887b      	ldrh	r3, [r7, #2]
 80077b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d00f      	beq.n	80077de <HAL_SPI_TransmitReceive+0x70>
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c4:	d107      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x68>
 80077ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d003      	beq.n	80077de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
 80077d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077dc:	e15b      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x82>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x82>
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d103      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077f6:	e14e      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b04      	cmp	r3, #4
 8007802:	d003      	beq.n	800780c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2205      	movs	r2, #5
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	887a      	ldrh	r2, [r7, #2]
 800782e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	887a      	ldrh	r2, [r7, #2]
 8007834:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d007      	beq.n	8007860 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800785e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007868:	d178      	bne.n	800795c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x10a>
 8007872:	8b7b      	ldrh	r3, [r7, #26]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d166      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	881a      	ldrh	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	1c9a      	adds	r2, r3, #2
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	e053      	b.n	8007946 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d11b      	bne.n	80078e4 <HAL_SPI_TransmitReceive+0x176>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d016      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0x176>
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d113      	bne.n	80078e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	1c9a      	adds	r2, r3, #2
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d119      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x1b8>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d014      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	b292      	uxth	r2, r2
 8007908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007922:	2301      	movs	r3, #1
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007926:	f7fd fb4d 	bl	8004fc4 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007932:	429a      	cmp	r2, r3
 8007934:	d807      	bhi.n	8007946 <HAL_SPI_TransmitReceive+0x1d8>
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d003      	beq.n	8007946 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007944:	e0a7      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1a6      	bne.n	800789e <HAL_SPI_TransmitReceive+0x130>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1a1      	bne.n	800789e <HAL_SPI_TransmitReceive+0x130>
 800795a:	e07c      	b.n	8007a56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <HAL_SPI_TransmitReceive+0x1fc>
 8007964:	8b7b      	ldrh	r3, [r7, #26]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d16b      	bne.n	8007a42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	330c      	adds	r3, #12
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007990:	e057      	b.n	8007a42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d11c      	bne.n	80079da <HAL_SPI_TransmitReceive+0x26c>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d017      	beq.n	80079da <HAL_SPI_TransmitReceive+0x26c>
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d114      	bne.n	80079da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	330c      	adds	r3, #12
 80079ba:	7812      	ldrb	r2, [r2, #0]
 80079bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d119      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x2ae>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d014      	beq.n	8007a1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a1c:	f7fd fad2 	bl	8004fc4 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d803      	bhi.n	8007a34 <HAL_SPI_TransmitReceive+0x2c6>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d102      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x2cc>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a40:	e029      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1a2      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x224>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d19d      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f8b2 	bl	8007bc4 <SPI_EndRxTxTransaction>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a72:	e010      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	e000      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3730      	adds	r7, #48	; 0x30
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ac4:	f7fd fa7e 	bl	8004fc4 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ad4:	f7fd fa76 	bl	8004fc4 <HAL_GetTick>
 8007ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ada:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	015b      	lsls	r3, r3, #5
 8007ae0:	0d1b      	lsrs	r3, r3, #20
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	fb02 f303 	mul.w	r3, r2, r3
 8007ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aea:	e054      	b.n	8007b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d050      	beq.n	8007b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007af4:	f7fd fa66 	bl	8004fc4 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d902      	bls.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d13d      	bne.n	8007b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b22:	d111      	bne.n	8007b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2c:	d004      	beq.n	8007b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b36:	d107      	bne.n	8007b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b50:	d10f      	bne.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e017      	b.n	8007bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2301      	moveq	r3, #1
 8007ba8:	2300      	movne	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d19b      	bne.n	8007aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	2000027c 	.word	0x2000027c

08007bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <SPI_EndRxTxTransaction+0x7c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <SPI_EndRxTxTransaction+0x80>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	0d5b      	lsrs	r3, r3, #21
 8007bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bee:	d112      	bne.n	8007c16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff ff5a 	bl	8007ab4 <SPI_WaitFlagStateUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f043 0220 	orr.w	r2, r3, #32
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e00f      	b.n	8007c36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d0f2      	beq.n	8007c16 <SPI_EndRxTxTransaction+0x52>
 8007c30:	e000      	b.n	8007c34 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c32:	bf00      	nop
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000027c 	.word	0x2000027c
 8007c44:	165e9f81 	.word	0x165e9f81

08007c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e04c      	b.n	8007cf4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d111      	bne.n	8007c8a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fc0c 	bl	800948c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_TIM_Base_Init+0xb4>)
 8007c80:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f001 f929 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08004a0d 	.word	0x08004a0d

08007d00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d001      	beq.n	8007d18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e03c      	b.n	8007d92 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1e      	ldr	r2, [pc, #120]	; (8007da0 <HAL_TIM_Base_Start+0xa0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d018      	beq.n	8007d5c <HAL_TIM_Base_Start+0x5c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d32:	d013      	beq.n	8007d5c <HAL_TIM_Base_Start+0x5c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <HAL_TIM_Base_Start+0xa4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <HAL_TIM_Base_Start+0x5c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <HAL_TIM_Base_Start+0xa8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d009      	beq.n	8007d5c <HAL_TIM_Base_Start+0x5c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_TIM_Base_Start+0xac>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_TIM_Base_Start+0x5c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_TIM_Base_Start+0xb0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d111      	bne.n	8007d80 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b06      	cmp	r3, #6
 8007d6c:	d010      	beq.n	8007d90 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0201 	orr.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7e:	e007      	b.n	8007d90 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40010000 	.word	0x40010000
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40000800 	.word	0x40000800
 8007dac:	40000c00 	.word	0x40000c00
 8007db0:	40014000 	.word	0x40014000

08007db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d001      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e044      	b.n	8007e56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <HAL_TIM_Base_Start_IT+0xb0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d018      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d013      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIM_Base_Start_IT+0xb4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00e      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <HAL_TIM_Base_Start_IT+0xb8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d111      	bne.n	8007e44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b06      	cmp	r3, #6
 8007e30:	d010      	beq.n	8007e54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	e007      	b.n	8007e54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40014000 	.word	0x40014000

08007e78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e04c      	b.n	8007f24 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d111      	bne.n	8007eba <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 faf4 	bl	800948c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_TIM_OC_Init+0xb4>)
 8007eb0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f001 f811 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08007f31 	.word	0x08007f31

08007f30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e04c      	b.n	8007ff0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d111      	bne.n	8007f86 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 fa8e 	bl	800948c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a1f      	ldr	r2, [pc, #124]	; (8007ff8 <HAL_TIM_PWM_Init+0xb4>)
 8007f7c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f000 ffab 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	08007ffd 	.word	0x08007ffd

08007ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <HAL_TIM_PWM_Start+0x24>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e022      	b.n	800807a <HAL_TIM_PWM_Start+0x6a>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d109      	bne.n	800804e <HAL_TIM_PWM_Start+0x3e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	bf14      	ite	ne
 8008046:	2301      	movne	r3, #1
 8008048:	2300      	moveq	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	e015      	b.n	800807a <HAL_TIM_PWM_Start+0x6a>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b08      	cmp	r3, #8
 8008052:	d109      	bne.n	8008068 <HAL_TIM_PWM_Start+0x58>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b01      	cmp	r3, #1
 800805e:	bf14      	ite	ne
 8008060:	2301      	movne	r3, #1
 8008062:	2300      	moveq	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	e008      	b.n	800807a <HAL_TIM_PWM_Start+0x6a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b01      	cmp	r3, #1
 8008072:	bf14      	ite	ne
 8008074:	2301      	movne	r3, #1
 8008076:	2300      	moveq	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e068      	b.n	8008154 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <HAL_TIM_PWM_Start+0x82>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008090:	e013      	b.n	80080ba <HAL_TIM_PWM_Start+0xaa>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_PWM_Start+0x92>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a0:	e00b      	b.n	80080ba <HAL_TIM_PWM_Start+0xaa>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_PWM_Start+0xa2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b0:	e003      	b.n	80080ba <HAL_TIM_PWM_Start+0xaa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2201      	movs	r2, #1
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 f9bc 	bl	8009440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a23      	ldr	r2, [pc, #140]	; (800815c <HAL_TIM_PWM_Start+0x14c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1d      	ldr	r2, [pc, #116]	; (800815c <HAL_TIM_PWM_Start+0x14c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <HAL_TIM_PWM_Start+0x10e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f4:	d013      	beq.n	800811e <HAL_TIM_PWM_Start+0x10e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a19      	ldr	r2, [pc, #100]	; (8008160 <HAL_TIM_PWM_Start+0x150>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <HAL_TIM_PWM_Start+0x10e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a17      	ldr	r2, [pc, #92]	; (8008164 <HAL_TIM_PWM_Start+0x154>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_TIM_PWM_Start+0x10e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <HAL_TIM_PWM_Start+0x158>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <HAL_TIM_PWM_Start+0x10e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a14      	ldr	r2, [pc, #80]	; (800816c <HAL_TIM_PWM_Start+0x15c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d111      	bne.n	8008142 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b06      	cmp	r3, #6
 800812e:	d010      	beq.n	8008152 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008140:	e007      	b.n	8008152 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0201 	orr.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40010000 	.word	0x40010000
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40014000 	.word	0x40014000

08008170 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e04c      	b.n	800821e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d111      	bne.n	80081b4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f977 	bl	800948c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <HAL_TIM_OnePulse_Init+0xb8>)
 80081aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f000 fe94 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0208 	bic.w	r2, r2, #8
 80081da:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6819      	ldr	r1, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	0800822d 	.word	0x0800822d

0800822c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008250:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008258:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008260:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008268:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d108      	bne.n	8008282 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d105      	bne.n	8008282 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008276:	7b7b      	ldrb	r3, [r7, #13]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d102      	bne.n	8008282 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800827c:	7b3b      	ldrb	r3, [r7, #12]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d001      	beq.n	8008286 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e03b      	b.n	80082fe <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f042 0202 	orr.w	r2, r2, #2
 80082b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0204 	orr.w	r2, r2, #4
 80082c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 f8b6 	bl	8009440 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2201      	movs	r2, #1
 80082da:	2104      	movs	r1, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f8af 	bl	8009440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a08      	ldr	r2, [pc, #32]	; (8008308 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	40010000 	.word	0x40010000

0800830c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e0a2      	b.n	8008466 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d111      	bne.n	8008350 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f8a9 	bl	800948c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a4a      	ldr	r2, [pc, #296]	; (8008470 <HAL_TIM_Encoder_Init+0x164>)
 8008346:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008366:	f023 0307 	bic.w	r3, r3, #7
 800836a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3304      	adds	r3, #4
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f000 fdbc 	bl	8008ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	4313      	orrs	r3, r2
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80083c2:	f023 030c 	bic.w	r3, r3, #12
 80083c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	021b      	lsls	r3, r3, #8
 80083de:	4313      	orrs	r3, r2
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	011a      	lsls	r2, r3, #4
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	4313      	orrs	r3, r2
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008400:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008408:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	4313      	orrs	r3, r2
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	08004b11 	.word	0x08004b11

08008474 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008484:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800848c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008494:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800849c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d110      	bne.n	80084c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d102      	bne.n	80084b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084aa:	7b7b      	ldrb	r3, [r7, #13]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d001      	beq.n	80084b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e069      	b.n	8008588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084c4:	e031      	b.n	800852a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d110      	bne.n	80084ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d102      	bne.n	80084d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084d2:	7b3b      	ldrb	r3, [r7, #12]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d001      	beq.n	80084dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e055      	b.n	8008588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084ec:	e01d      	b.n	800852a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d108      	bne.n	8008506 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d105      	bne.n	8008506 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084fa:	7b7b      	ldrb	r3, [r7, #13]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d102      	bne.n	8008506 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008500:	7b3b      	ldrb	r3, [r7, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d001      	beq.n	800850a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e03e      	b.n	8008588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_TIM_Encoder_Start+0xc4>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b04      	cmp	r3, #4
 8008534:	d008      	beq.n	8008548 <HAL_TIM_Encoder_Start+0xd4>
 8008536:	e00f      	b.n	8008558 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2201      	movs	r2, #1
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f000 ff7d 	bl	8009440 <TIM_CCxChannelCmd>
      break;
 8008546:	e016      	b.n	8008576 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	2104      	movs	r1, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f000 ff75 	bl	8009440 <TIM_CCxChannelCmd>
      break;
 8008556:	e00e      	b.n	8008576 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	2100      	movs	r1, #0
 8008560:	4618      	mov	r0, r3
 8008562:	f000 ff6d 	bl	8009440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	2104      	movs	r1, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f000 ff66 	bl	8009440 <TIM_CCxChannelCmd>
      break;
 8008574:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0201 	orr.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d128      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d121      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0202 	mvn.w	r2, #2
 80085bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	e009      	b.n	80085f2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b04      	cmp	r3, #4
 8008604:	d128      	bne.n	8008658 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b04      	cmp	r3, #4
 8008612:	d121      	bne.n	8008658 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0204 	mvn.w	r2, #4
 800861c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
 800863c:	e009      	b.n	8008652 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b08      	cmp	r3, #8
 8008664:	d128      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b08      	cmp	r3, #8
 8008672:	d121      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0208 	mvn.w	r2, #8
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	4798      	blx	r3
 800869c:	e009      	b.n	80086b2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	2b10      	cmp	r3, #16
 80086c4:	d128      	bne.n	8008718 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d121      	bne.n	8008718 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0210 	mvn.w	r2, #16
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2208      	movs	r2, #8
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
 80086fc:	e009      	b.n	8008712 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	d110      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b01      	cmp	r3, #1
 8008732:	d109      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0201 	mvn.w	r2, #1
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008752:	2b80      	cmp	r3, #128	; 0x80
 8008754:	d110      	bne.n	8008778 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008760:	2b80      	cmp	r3, #128	; 0x80
 8008762:	d109      	bne.n	8008778 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800876c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b40      	cmp	r3, #64	; 0x40
 8008784:	d110      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008790:	2b40      	cmp	r3, #64	; 0x40
 8008792:	d109      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800879c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d110      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d109      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f06f 0220 	mvn.w	r2, #32
 80087cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e048      	b.n	8008890 <HAL_TIM_OC_ConfigChannel+0xb0>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d839      	bhi.n	8008880 <HAL_TIM_OC_ConfigChannel+0xa0>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <HAL_TIM_OC_ConfigChannel+0x34>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008849 	.word	0x08008849
 8008818:	08008881 	.word	0x08008881
 800881c:	08008881 	.word	0x08008881
 8008820:	08008881 	.word	0x08008881
 8008824:	08008857 	.word	0x08008857
 8008828:	08008881 	.word	0x08008881
 800882c:	08008881 	.word	0x08008881
 8008830:	08008881 	.word	0x08008881
 8008834:	08008865 	.word	0x08008865
 8008838:	08008881 	.word	0x08008881
 800883c:	08008881 	.word	0x08008881
 8008840:	08008881 	.word	0x08008881
 8008844:	08008873 	.word	0x08008873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fbd0 	bl	8008ff4 <TIM_OC1_SetConfig>
      break;
 8008854:	e017      	b.n	8008886 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fc2f 	bl	80090c0 <TIM_OC2_SetConfig>
      break;
 8008862:	e010      	b.n	8008886 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fc94 	bl	8009198 <TIM_OC3_SetConfig>
      break;
 8008870:	e009      	b.n	8008886 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fcf7 	bl	800926c <TIM_OC4_SetConfig>
      break;
 800887e:	e002      	b.n	8008886 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
      break;
 8008884:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0ae      	b.n	8008a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	f200 809f 	bhi.w	8008a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008901 	.word	0x08008901
 80088d0:	08008a05 	.word	0x08008a05
 80088d4:	08008a05 	.word	0x08008a05
 80088d8:	08008a05 	.word	0x08008a05
 80088dc:	08008941 	.word	0x08008941
 80088e0:	08008a05 	.word	0x08008a05
 80088e4:	08008a05 	.word	0x08008a05
 80088e8:	08008a05 	.word	0x08008a05
 80088ec:	08008983 	.word	0x08008983
 80088f0:	08008a05 	.word	0x08008a05
 80088f4:	08008a05 	.word	0x08008a05
 80088f8:	08008a05 	.word	0x08008a05
 80088fc:	080089c3 	.word	0x080089c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fb74 	bl	8008ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	619a      	str	r2, [r3, #24]
      break;
 800893e:	e064      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fbba 	bl	80090c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
      break;
 8008980:	e043      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fc05 	bl	8009198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0208 	orr.w	r2, r2, #8
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0204 	bic.w	r2, r2, #4
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	61da      	str	r2, [r3, #28]
      break;
 80089c0:	e023      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fc4f 	bl	800926c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	021a      	lsls	r2, r3, #8
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	61da      	str	r2, [r3, #28]
      break;
 8008a02:	e002      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75fb      	strb	r3, [r7, #23]
      break;
 8008a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_TIM_ConfigClockSource+0x1c>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e0b4      	b.n	8008ba2 <HAL_TIM_ConfigClockSource+0x186>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a70:	d03e      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0xd4>
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a76:	f200 8087 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7e:	f000 8086 	beq.w	8008b8e <HAL_TIM_ConfigClockSource+0x172>
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a86:	d87f      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008a88:	2b70      	cmp	r3, #112	; 0x70
 8008a8a:	d01a      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8008a8c:	2b70      	cmp	r3, #112	; 0x70
 8008a8e:	d87b      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008a90:	2b60      	cmp	r3, #96	; 0x60
 8008a92:	d050      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x11a>
 8008a94:	2b60      	cmp	r3, #96	; 0x60
 8008a96:	d877      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008a98:	2b50      	cmp	r3, #80	; 0x50
 8008a9a:	d03c      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0xfa>
 8008a9c:	2b50      	cmp	r3, #80	; 0x50
 8008a9e:	d873      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa0:	2b40      	cmp	r3, #64	; 0x40
 8008aa2:	d058      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x13a>
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d86f      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa8:	2b30      	cmp	r3, #48	; 0x30
 8008aaa:	d064      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x15a>
 8008aac:	2b30      	cmp	r3, #48	; 0x30
 8008aae:	d86b      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d060      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x15a>
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d867      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05c      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x15a>
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d05a      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x15a>
 8008ac0:	e062      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6899      	ldr	r1, [r3, #8]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f000 fc95 	bl	8009400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	609a      	str	r2, [r3, #8]
      break;
 8008aee:	e04f      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6899      	ldr	r1, [r3, #8]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f000 fc7e 	bl	8009400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b12:	609a      	str	r2, [r3, #8]
      break;
 8008b14:	e03c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fbf2 	bl	800930c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2150      	movs	r1, #80	; 0x50
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fc4b 	bl	80093ca <TIM_ITRx_SetConfig>
      break;
 8008b34:	e02c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 fc11 	bl	800936a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2160      	movs	r1, #96	; 0x60
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fc3b 	bl	80093ca <TIM_ITRx_SetConfig>
      break;
 8008b54:	e01c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6859      	ldr	r1, [r3, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f000 fbd2 	bl	800930c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2140      	movs	r1, #64	; 0x40
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fc2b 	bl	80093ca <TIM_ITRx_SetConfig>
      break;
 8008b74:	e00c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f000 fc22 	bl	80093ca <TIM_ITRx_SetConfig>
      break;
 8008b86:	e003      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8c:	e000      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e135      	b.n	8008ee8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_TIM_RegisterCallback+0x2a>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e12e      	b.n	8008ee8 <HAL_TIM_RegisterCallback+0x288>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	f040 80ba 	bne.w	8008e14 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	2b1a      	cmp	r3, #26
 8008ca4:	f200 80b3 	bhi.w	8008e0e <HAL_TIM_RegisterCallback+0x1ae>
 8008ca8:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <HAL_TIM_RegisterCallback+0x50>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008d1d 	.word	0x08008d1d
 8008cb4:	08008d25 	.word	0x08008d25
 8008cb8:	08008d2d 	.word	0x08008d2d
 8008cbc:	08008d35 	.word	0x08008d35
 8008cc0:	08008d3d 	.word	0x08008d3d
 8008cc4:	08008d45 	.word	0x08008d45
 8008cc8:	08008d4d 	.word	0x08008d4d
 8008ccc:	08008d55 	.word	0x08008d55
 8008cd0:	08008d5d 	.word	0x08008d5d
 8008cd4:	08008d65 	.word	0x08008d65
 8008cd8:	08008d6d 	.word	0x08008d6d
 8008cdc:	08008d75 	.word	0x08008d75
 8008ce0:	08008d7d 	.word	0x08008d7d
 8008ce4:	08008d85 	.word	0x08008d85
 8008ce8:	08008d8d 	.word	0x08008d8d
 8008cec:	08008d97 	.word	0x08008d97
 8008cf0:	08008da1 	.word	0x08008da1
 8008cf4:	08008dab 	.word	0x08008dab
 8008cf8:	08008db5 	.word	0x08008db5
 8008cfc:	08008dbf 	.word	0x08008dbf
 8008d00:	08008dc9 	.word	0x08008dc9
 8008d04:	08008dd3 	.word	0x08008dd3
 8008d08:	08008ddd 	.word	0x08008ddd
 8008d0c:	08008de7 	.word	0x08008de7
 8008d10:	08008df1 	.word	0x08008df1
 8008d14:	08008dfb 	.word	0x08008dfb
 8008d18:	08008e05 	.word	0x08008e05
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008d22:	e0dc      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008d2a:	e0d8      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008d32:	e0d4      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d3a:	e0d0      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d42:	e0cc      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d4a:	e0c8      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d52:	e0c4      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008d5a:	e0c0      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008d62:	e0bc      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d6a:	e0b8      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d72:	e0b4      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008d7a:	e0b0      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008d82:	e0ac      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008d8a:	e0a8      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008d94:	e0a3      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008d9e:	e09e      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008da8:	e099      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008db2:	e094      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008dbc:	e08f      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008dc6:	e08a      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008dd0:	e085      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008dda:	e080      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008de4:	e07b      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008dee:	e076      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008df8:	e071      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008e02:	e06c      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008e0c:	e067      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	75fb      	strb	r3, [r7, #23]
        break;
 8008e12:	e064      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d15c      	bne.n	8008eda <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	2b0d      	cmp	r3, #13
 8008e24:	d856      	bhi.n	8008ed4 <HAL_TIM_RegisterCallback+0x274>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <HAL_TIM_RegisterCallback+0x1cc>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e75 	.word	0x08008e75
 8008e38:	08008e7d 	.word	0x08008e7d
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008e8d 	.word	0x08008e8d
 8008e44:	08008e95 	.word	0x08008e95
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008ead 	.word	0x08008ead
 8008e54:	08008eb5 	.word	0x08008eb5
 8008e58:	08008ebd 	.word	0x08008ebd
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008ecd 	.word	0x08008ecd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008e6a:	e038      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008e72:	e034      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008e7a:	e030      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008e82:	e02c      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008e8a:	e028      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008e92:	e024      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008e9a:	e020      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008ea2:	e01c      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008eaa:	e018      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008eb2:	e014      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008eba:	e010      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008ec2:	e00c      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008eca:	e008      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008ed2:	e004      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
        break;
 8008ed8:	e001      	b.n	8008ede <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a34      	ldr	r2, [pc, #208]	; (8008fd8 <TIM_Base_SetConfig+0xe4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00f      	beq.n	8008f2c <TIM_Base_SetConfig+0x38>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f12:	d00b      	beq.n	8008f2c <TIM_Base_SetConfig+0x38>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a31      	ldr	r2, [pc, #196]	; (8008fdc <TIM_Base_SetConfig+0xe8>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d007      	beq.n	8008f2c <TIM_Base_SetConfig+0x38>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a30      	ldr	r2, [pc, #192]	; (8008fe0 <TIM_Base_SetConfig+0xec>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d003      	beq.n	8008f2c <TIM_Base_SetConfig+0x38>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2f      	ldr	r2, [pc, #188]	; (8008fe4 <TIM_Base_SetConfig+0xf0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d108      	bne.n	8008f3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a25      	ldr	r2, [pc, #148]	; (8008fd8 <TIM_Base_SetConfig+0xe4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d01b      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f4c:	d017      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a22      	ldr	r2, [pc, #136]	; (8008fdc <TIM_Base_SetConfig+0xe8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d013      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a21      	ldr	r2, [pc, #132]	; (8008fe0 <TIM_Base_SetConfig+0xec>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00f      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a20      	ldr	r2, [pc, #128]	; (8008fe4 <TIM_Base_SetConfig+0xf0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00b      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a1f      	ldr	r2, [pc, #124]	; (8008fe8 <TIM_Base_SetConfig+0xf4>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a1e      	ldr	r2, [pc, #120]	; (8008fec <TIM_Base_SetConfig+0xf8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_Base_SetConfig+0x8a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <TIM_Base_SetConfig+0xfc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d108      	bne.n	8008f90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <TIM_Base_SetConfig+0xe4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d103      	bne.n	8008fc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	615a      	str	r2, [r3, #20]
}
 8008fca:	bf00      	nop
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40014000 	.word	0x40014000
 8008fec:	40014400 	.word	0x40014400
 8008ff0:	40014800 	.word	0x40014800

08008ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	f023 0201 	bic.w	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f023 0302 	bic.w	r3, r3, #2
 800903c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a1c      	ldr	r2, [pc, #112]	; (80090bc <TIM_OC1_SetConfig+0xc8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d10c      	bne.n	800906a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f023 0308 	bic.w	r3, r3, #8
 8009056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f023 0304 	bic.w	r3, r3, #4
 8009068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a13      	ldr	r2, [pc, #76]	; (80090bc <TIM_OC1_SetConfig+0xc8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d111      	bne.n	8009096 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	4313      	orrs	r3, r2
 8009094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	621a      	str	r2, [r3, #32]
}
 80090b0:	bf00      	nop
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40010000 	.word	0x40010000

080090c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	f023 0210 	bic.w	r2, r3, #16
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f023 0320 	bic.w	r3, r3, #32
 800910a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <TIM_OC2_SetConfig+0xd4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d10d      	bne.n	800913c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800913a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a15      	ldr	r2, [pc, #84]	; (8009194 <TIM_OC2_SetConfig+0xd4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d113      	bne.n	800916c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800914a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40010000 	.word	0x40010000

08009198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <TIM_OC3_SetConfig+0xd0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d10d      	bne.n	8009212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a14      	ldr	r2, [pc, #80]	; (8009268 <TIM_OC3_SetConfig+0xd0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d113      	bne.n	8009242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	621a      	str	r2, [r3, #32]
}
 800925c:	bf00      	nop
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	40010000 	.word	0x40010000

0800926c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800929a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	021b      	lsls	r3, r3, #8
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	031b      	lsls	r3, r3, #12
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a10      	ldr	r2, [pc, #64]	; (8009308 <TIM_OC4_SetConfig+0x9c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d109      	bne.n	80092e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000

0800930c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f023 0201 	bic.w	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	4313      	orrs	r3, r2
 8009340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f023 030a 	bic.w	r3, r3, #10
 8009348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	621a      	str	r2, [r3, #32]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936a:	b480      	push	{r7}
 800936c:	b087      	sub	sp, #28
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f023 0210 	bic.w	r2, r3, #16
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	031b      	lsls	r3, r3, #12
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4313      	orrs	r3, r2
 800939e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f043 0307 	orr.w	r3, r3, #7
 80093ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	609a      	str	r2, [r3, #8]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800941a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	021a      	lsls	r2, r3, #8
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	431a      	orrs	r2, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	4313      	orrs	r3, r2
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	609a      	str	r2, [r3, #8]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 031f 	and.w	r3, r3, #31
 8009452:	2201      	movs	r2, #1
 8009454:	fa02 f303 	lsl.w	r3, r2, r3
 8009458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	43db      	mvns	r3, r3
 8009462:	401a      	ands	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a1a      	ldr	r2, [r3, #32]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f003 031f 	and.w	r3, r3, #31
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	fa01 f303 	lsl.w	r3, r1, r3
 8009478:	431a      	orrs	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <TIM_ResetCallback+0x7c>)
 8009498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a1b      	ldr	r2, [pc, #108]	; (800950c <TIM_ResetCallback+0x80>)
 80094a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1a      	ldr	r2, [pc, #104]	; (8009510 <TIM_ResetCallback+0x84>)
 80094a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a19      	ldr	r2, [pc, #100]	; (8009514 <TIM_ResetCallback+0x88>)
 80094b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a18      	ldr	r2, [pc, #96]	; (8009518 <TIM_ResetCallback+0x8c>)
 80094b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a17      	ldr	r2, [pc, #92]	; (800951c <TIM_ResetCallback+0x90>)
 80094c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a16      	ldr	r2, [pc, #88]	; (8009520 <TIM_ResetCallback+0x94>)
 80094c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a15      	ldr	r2, [pc, #84]	; (8009524 <TIM_ResetCallback+0x98>)
 80094d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a14      	ldr	r2, [pc, #80]	; (8009528 <TIM_ResetCallback+0x9c>)
 80094d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a13      	ldr	r2, [pc, #76]	; (800952c <TIM_ResetCallback+0xa0>)
 80094e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a12      	ldr	r2, [pc, #72]	; (8009530 <TIM_ResetCallback+0xa4>)
 80094e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a11      	ldr	r2, [pc, #68]	; (8009534 <TIM_ResetCallback+0xa8>)
 80094f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a10      	ldr	r2, [pc, #64]	; (8009538 <TIM_ResetCallback+0xac>)
 80094f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	08003ad9 	.word	0x08003ad9
 800950c:	08008bab 	.word	0x08008bab
 8009510:	08008c23 	.word	0x08008c23
 8009514:	08008c37 	.word	0x08008c37
 8009518:	08008bd3 	.word	0x08008bd3
 800951c:	08008be7 	.word	0x08008be7
 8009520:	08008bbf 	.word	0x08008bbf
 8009524:	08008bfb 	.word	0x08008bfb
 8009528:	08008c0f 	.word	0x08008c0f
 800952c:	08008c4b 	.word	0x08008c4b
 8009530:	080096bd 	.word	0x080096bd
 8009534:	080096d1 	.word	0x080096d1
 8009538:	080096e5 	.word	0x080096e5

0800953c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009550:	2302      	movs	r3, #2
 8009552:	e050      	b.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a1c      	ldr	r2, [pc, #112]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d018      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a0:	d013      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00e      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a16      	ldr	r2, [pc, #88]	; (800960c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d009      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a15      	ldr	r2, [pc, #84]	; (8009610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d004      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a13      	ldr	r2, [pc, #76]	; (8009614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d10c      	bne.n	80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40010000 	.word	0x40010000
 8009608:	40000400 	.word	0x40000400
 800960c:	40000800 	.word	0x40000800
 8009610:	40000c00 	.word	0x40000c00
 8009614:	40014000 	.word	0x40014000

08009618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009630:	2302      	movs	r3, #2
 8009632:	e03d      	b.n	80096b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e04a      	b.n	80097a0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d111      	bne.n	800973a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fd2c 	bl	800a17c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a1e      	ldr	r2, [pc, #120]	; (80097a8 <HAL_UART_Init+0xb0>)
 8009730:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2224      	movs	r2, #36	; 0x24
 800973e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009750:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fff6 	bl	800a744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691a      	ldr	r2, [r3, #16]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009776:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009786:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	08004c11 	.word	0x08004c11

080097ac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	460b      	mov	r3, r1
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d107      	bne.n	80097d4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c8:	f043 0220 	orr.w	r2, r3, #32
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e08c      	b.n	80098ee <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_UART_RegisterCallback+0x36>
 80097de:	2302      	movs	r3, #2
 80097e0:	e085      	b.n	80098ee <HAL_UART_RegisterCallback+0x142>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d151      	bne.n	800989a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	2b0c      	cmp	r3, #12
 80097fa:	d845      	bhi.n	8009888 <HAL_UART_RegisterCallback+0xdc>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <HAL_UART_RegisterCallback+0x58>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009839 	.word	0x08009839
 8009808:	08009841 	.word	0x08009841
 800980c:	08009849 	.word	0x08009849
 8009810:	08009851 	.word	0x08009851
 8009814:	08009859 	.word	0x08009859
 8009818:	08009861 	.word	0x08009861
 800981c:	08009869 	.word	0x08009869
 8009820:	08009871 	.word	0x08009871
 8009824:	08009889 	.word	0x08009889
 8009828:	08009889 	.word	0x08009889
 800982c:	08009889 	.word	0x08009889
 8009830:	08009879 	.word	0x08009879
 8009834:	08009881 	.word	0x08009881
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800983e:	e051      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009846:	e04d      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800984e:	e049      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009856:	e045      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800985e:	e041      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009866:	e03d      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800986e:	e039      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009876:	e035      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800987e:	e031      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009886:	e02d      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	f043 0220 	orr.w	r2, r3, #32
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
        break;
 8009898:	e024      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d116      	bne.n	80098d4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80098a6:	7afb      	ldrb	r3, [r7, #11]
 80098a8:	2b0b      	cmp	r3, #11
 80098aa:	d002      	beq.n	80098b2 <HAL_UART_RegisterCallback+0x106>
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	d004      	beq.n	80098ba <HAL_UART_RegisterCallback+0x10e>
 80098b0:	e007      	b.n	80098c2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80098b8:	e014      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80098c0:	e010      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	f043 0220 	orr.w	r2, r3, #32
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	75fb      	strb	r3, [r7, #23]
        break;
 80098d2:	e007      	b.n	80098e4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	f043 0220 	orr.w	r2, r3, #32
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop

080098fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b20      	cmp	r3, #32
 8009914:	d11d      	bne.n	8009952 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_UART_Receive_IT+0x26>
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e016      	b.n	8009954 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800992c:	2b01      	cmp	r3, #1
 800992e:	d101      	bne.n	8009934 <HAL_UART_Receive_IT+0x38>
 8009930:	2302      	movs	r3, #2
 8009932:	e00f      	b.n	8009954 <HAL_UART_Receive_IT+0x58>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	461a      	mov	r2, r3
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fcf7 	bl	800a33c <UART_Start_Receive_IT>
 800994e:	4603      	mov	r3, r0
 8009950:	e000      	b.n	8009954 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
  }
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08c      	sub	sp, #48	; 0x30
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b20      	cmp	r3, #32
 8009974:	d165      	bne.n	8009a42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_UART_Transmit_DMA+0x26>
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e05e      	b.n	8009a44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_UART_Transmit_DMA+0x38>
 8009990:	2302      	movs	r3, #2
 8009992:	e057      	b.n	8009a44 <HAL_UART_Transmit_DMA+0xe8>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	88fa      	ldrh	r2, [r7, #6]
 80099a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	88fa      	ldrh	r2, [r7, #6]
 80099ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2221      	movs	r2, #33	; 0x21
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	4a22      	ldr	r2, [pc, #136]	; (8009a4c <HAL_UART_Transmit_DMA+0xf0>)
 80099c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c8:	4a21      	ldr	r2, [pc, #132]	; (8009a50 <HAL_UART_Transmit_DMA+0xf4>)
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d0:	4a20      	ldr	r2, [pc, #128]	; (8009a54 <HAL_UART_Transmit_DMA+0xf8>)
 80099d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	2200      	movs	r2, #0
 80099da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	6819      	ldr	r1, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3304      	adds	r3, #4
 80099f0:	461a      	mov	r2, r3
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	f7fb fcd6 	bl	80053a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3314      	adds	r3, #20
 8009a10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8009a2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	6a39      	ldr	r1, [r7, #32]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e5      	bne.n	8009a0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e000      	b.n	8009a44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009a42:	2302      	movs	r3, #2
  }
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3730      	adds	r7, #48	; 0x30
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	0800a1ed 	.word	0x0800a1ed
 8009a50:	0800a289 	.word	0x0800a289
 8009a54:	0800a2a7 	.word	0x0800a2a7

08009a58 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b09a      	sub	sp, #104	; 0x68
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a76:	667b      	str	r3, [r7, #100]	; 0x64
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a80:	657a      	str	r2, [r7, #84]	; 0x54
 8009a82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e5      	bne.n	8009a60 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3314      	adds	r3, #20
 8009a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	f023 0301 	bic.w	r3, r3, #1
 8009aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e5      	bne.n	8009a94 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d119      	bne.n	8009b04 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f023 0310 	bic.w	r3, r3, #16
 8009ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e5      	bne.n	8009ad0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0e:	2b40      	cmp	r3, #64	; 0x40
 8009b10:	d136      	bne.n	8009b80 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3314      	adds	r3, #20
 8009b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b32:	61ba      	str	r2, [r7, #24]
 8009b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	6979      	ldr	r1, [r7, #20]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e5      	bne.n	8009b12 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d018      	beq.n	8009b80 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	2200      	movs	r2, #0
 8009b54:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fb fc7a 	bl	8005454 <HAL_DMA_Abort>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00c      	beq.n	8009b80 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fb fe8e 	bl	800588c <HAL_DMA_GetError>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b20      	cmp	r3, #32
 8009b74:	d104      	bne.n	8009b80 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2210      	movs	r2, #16
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e00a      	b.n	8009b96 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3768      	adds	r7, #104	; 0x68
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b0ba      	sub	sp, #232	; 0xe8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10f      	bne.n	8009c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d009      	beq.n	8009c06 <HAL_UART_IRQHandler+0x66>
 8009bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf6:	f003 0320 	and.w	r3, r3, #32
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fce3 	bl	800a5ca <UART_Receive_IT>
      return;
 8009c04:	e25b      	b.n	800a0be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 80e1 	beq.w	8009dd2 <HAL_UART_IRQHandler+0x232>
 8009c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d106      	bne.n	8009c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80d4 	beq.w	8009dd2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <HAL_UART_IRQHandler+0xae>
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	f043 0201 	orr.w	r2, r3, #1
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00b      	beq.n	8009c72 <HAL_UART_IRQHandler+0xd2>
 8009c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	f043 0202 	orr.w	r2, r3, #2
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00b      	beq.n	8009c96 <HAL_UART_IRQHandler+0xf6>
 8009c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f043 0204 	orr.w	r2, r3, #4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d011      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x126>
 8009ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f043 0208 	orr.w	r2, r3, #8
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 81f2 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <HAL_UART_IRQHandler+0x14e>
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce0:	f003 0320 	and.w	r3, r3, #32
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fc6e 	bl	800a5ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2301      	moveq	r3, #1
 8009cfe:	2300      	movne	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	f003 0308 	and.w	r3, r3, #8
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d103      	bne.n	8009d1a <HAL_UART_IRQHandler+0x17a>
 8009d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d051      	beq.n	8009dbe <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb74 	bl	800a408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2a:	2b40      	cmp	r3, #64	; 0x40
 8009d2c:	d142      	bne.n	8009db4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3314      	adds	r3, #20
 8009d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3314      	adds	r3, #20
 8009d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1d9      	bne.n	8009d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d013      	beq.n	8009daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	4a7f      	ldr	r2, [pc, #508]	; (8009f84 <HAL_UART_IRQHandler+0x3e4>)
 8009d88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fb fbd0 	bl	8005534 <HAL_DMA_Abort_IT>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d019      	beq.n	8009dce <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da8:	e011      	b.n	8009dce <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db2:	e00c      	b.n	8009dce <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbc:	e007      	b.n	8009dce <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dcc:	e172      	b.n	800a0b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dce:	bf00      	nop
    return;
 8009dd0:	e170      	b.n	800a0b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	f040 814c 	bne.w	800a074 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8145 	beq.w	800a074 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 813e 	beq.w	800a074 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60bb      	str	r3, [r7, #8]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60bb      	str	r3, [r7, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	60bb      	str	r3, [r7, #8]
 8009e0c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	f040 80b5 	bne.w	8009f88 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8142 	beq.w	800a0b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	f080 813b 	bcs.w	800a0b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e54:	f000 8088 	beq.w	8009f68 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	330c      	adds	r3, #12
 8009e80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1d9      	bne.n	8009e58 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eb6:	f023 0301 	bic.w	r3, r3, #1
 8009eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ec8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e1      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3314      	adds	r3, #20
 8009ee6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3314      	adds	r3, #20
 8009f00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e3      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	330c      	adds	r3, #12
 8009f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f30:	e853 3f00 	ldrex	r3, [r3]
 8009f34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f38:	f023 0310 	bic.w	r3, r3, #16
 8009f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	330c      	adds	r3, #12
 8009f46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e3      	bne.n	8009f26 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fb fa76 	bl	8005454 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009f74:	b292      	uxth	r2, r2
 8009f76:	1a8a      	subs	r2, r1, r2
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f80:	e09a      	b.n	800a0b8 <HAL_UART_IRQHandler+0x518>
 8009f82:	bf00      	nop
 8009f84:	0800a4cf 	.word	0x0800a4cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 808c 	beq.w	800a0bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 8087 	beq.w	800a0bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	330c      	adds	r3, #12
 8009fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	330c      	adds	r3, #12
 8009fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8009fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e3      	bne.n	8009fae <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3314      	adds	r3, #20
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	e853 3f00 	ldrex	r3, [r3]
 8009ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f023 0301 	bic.w	r3, r3, #1
 8009ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3314      	adds	r3, #20
 800a006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a00a:	633a      	str	r2, [r7, #48]	; 0x30
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e3      	bne.n	8009fe6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2220      	movs	r2, #32
 800a022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	330c      	adds	r3, #12
 800a032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0310 	bic.w	r3, r3, #16
 800a042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a050:	61fa      	str	r2, [r7, #28]
 800a052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	69b9      	ldr	r1, [r7, #24]
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	617b      	str	r3, [r7, #20]
   return(result);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e3      	bne.n	800a02c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a068:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a06c:	4611      	mov	r1, r2
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a072:	e023      	b.n	800a0bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d009      	beq.n	800a094 <HAL_UART_IRQHandler+0x4f4>
 800a080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa33 	bl	800a4f8 <UART_Transmit_IT>
    return;
 800a092:	e014      	b.n	800a0be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00e      	beq.n	800a0be <HAL_UART_IRQHandler+0x51e>
 800a0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fa73 	bl	800a598 <UART_EndTransmit_IT>
    return;
 800a0b2:	e004      	b.n	800a0be <HAL_UART_IRQHandler+0x51e>
    return;
 800a0b4:	bf00      	nop
 800a0b6:	e002      	b.n	800a0be <HAL_UART_IRQHandler+0x51e>
      return;
 800a0b8:	bf00      	nop
 800a0ba:	e000      	b.n	800a0be <HAL_UART_IRQHandler+0x51e>
      return;
 800a0bc:	bf00      	nop
  }
}
 800a0be:	37e8      	adds	r7, #232	; 0xe8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a10      	ldr	r2, [pc, #64]	; (800a1c8 <UART_InitCallbacksToDefault+0x4c>)
 800a188:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a0f      	ldr	r2, [pc, #60]	; (800a1cc <UART_InitCallbacksToDefault+0x50>)
 800a18e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a0f      	ldr	r2, [pc, #60]	; (800a1d0 <UART_InitCallbacksToDefault+0x54>)
 800a194:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a0e      	ldr	r2, [pc, #56]	; (800a1d4 <UART_InitCallbacksToDefault+0x58>)
 800a19a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a0e      	ldr	r2, [pc, #56]	; (800a1d8 <UART_InitCallbacksToDefault+0x5c>)
 800a1a0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a0d      	ldr	r2, [pc, #52]	; (800a1dc <UART_InitCallbacksToDefault+0x60>)
 800a1a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a0d      	ldr	r2, [pc, #52]	; (800a1e0 <UART_InitCallbacksToDefault+0x64>)
 800a1ac:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <UART_InitCallbacksToDefault+0x68>)
 800a1b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a0c      	ldr	r2, [pc, #48]	; (800a1e8 <UART_InitCallbacksToDefault+0x6c>)
 800a1b8:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	0800a0d9 	.word	0x0800a0d9
 800a1cc:	0800a0c5 	.word	0x0800a0c5
 800a1d0:	0800a101 	.word	0x0800a101
 800a1d4:	0800a0ed 	.word	0x0800a0ed
 800a1d8:	0800a115 	.word	0x0800a115
 800a1dc:	0800a129 	.word	0x0800a129
 800a1e0:	0800a13d 	.word	0x0800a13d
 800a1e4:	0800a151 	.word	0x0800a151
 800a1e8:	0800a165 	.word	0x0800a165

0800a1ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b090      	sub	sp, #64	; 0x40
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a204:	2b00      	cmp	r3, #0
 800a206:	d137      	bne.n	800a278 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20a:	2200      	movs	r2, #0
 800a20c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	623b      	str	r3, [r7, #32]
   return(result);
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a224:	63bb      	str	r3, [r7, #56]	; 0x38
 800a226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3314      	adds	r3, #20
 800a22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a22e:	633a      	str	r2, [r7, #48]	; 0x30
 800a230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e5      	bne.n	800a20e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	330c      	adds	r3, #12
 800a248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	60fb      	str	r3, [r7, #12]
   return(result);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a258:	637b      	str	r3, [r7, #52]	; 0x34
 800a25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	330c      	adds	r3, #12
 800a260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a262:	61fa      	str	r2, [r7, #28]
 800a264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	69b9      	ldr	r1, [r7, #24]
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	617b      	str	r3, [r7, #20]
   return(result);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a276:	e003      	b.n	800a280 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800a278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a27c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a27e:	4798      	blx	r3
}
 800a280:	bf00      	nop
 800a282:	3740      	adds	r7, #64	; 0x40
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b80      	cmp	r3, #128	; 0x80
 800a2c4:	bf0c      	ite	eq
 800a2c6:	2301      	moveq	r3, #1
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b21      	cmp	r3, #33	; 0x21
 800a2d8:	d108      	bne.n	800a2ec <UART_DMAError+0x46>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f000 f866 	bl	800a3b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	bf0c      	ite	eq
 800a2fa:	2301      	moveq	r3, #1
 800a2fc:	2300      	movne	r3, #0
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b22      	cmp	r3, #34	; 0x22
 800a30c:	d108      	bne.n	800a320 <UART_DMAError+0x7a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d005      	beq.n	800a320 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2200      	movs	r2, #0
 800a318:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a31a:	68b8      	ldr	r0, [r7, #8]
 800a31c:	f000 f874 	bl	800a408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a324:	f043 0210 	orr.w	r2, r3, #16
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a330:	68b8      	ldr	r0, [r7, #8]
 800a332:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	88fa      	ldrh	r2, [r7, #6]
 800a354:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	88fa      	ldrh	r2, [r7, #6]
 800a35a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2222      	movs	r2, #34	; 0x22
 800a366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a388:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0201 	orr.w	r2, r2, #1
 800a398:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f042 0220 	orr.w	r2, r2, #32
 800a3a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	; 0x24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	330c      	adds	r3, #12
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	61ba      	str	r2, [r7, #24]
 800a3e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6979      	ldr	r1, [r7, #20]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e5      	bne.n	800a3c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a3fc:	bf00      	nop
 800a3fe:	3724      	adds	r7, #36	; 0x24
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b095      	sub	sp, #84	; 0x54
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	330c      	adds	r3, #12
 800a416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a430:	643a      	str	r2, [r7, #64]	; 0x40
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3314      	adds	r3, #20
 800a44a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	61fb      	str	r3, [r7, #28]
   return(result);
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3314      	adds	r3, #20
 800a462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a464:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e5      	bne.n	800a444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d119      	bne.n	800a4b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	330c      	adds	r3, #12
 800a486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f023 0310 	bic.w	r3, r3, #16
 800a496:	647b      	str	r3, [r7, #68]	; 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	330c      	adds	r3, #12
 800a49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a0:	61ba      	str	r2, [r7, #24]
 800a4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6979      	ldr	r1, [r7, #20]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e5      	bne.n	800a480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4c2:	bf00      	nop
 800a4c4:	3754      	adds	r7, #84	; 0x54
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b21      	cmp	r3, #33	; 0x21
 800a50a:	d13e      	bne.n	800a58a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a514:	d114      	bne.n	800a540 <UART_Transmit_IT+0x48>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d110      	bne.n	800a540 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a532:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	1c9a      	adds	r2, r3, #2
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	621a      	str	r2, [r3, #32]
 800a53e:	e008      	b.n	800a552 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	1c59      	adds	r1, r3, #1
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6211      	str	r1, [r2, #32]
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a556:	b29b      	uxth	r3, r3
 800a558:	3b01      	subs	r3, #1
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4619      	mov	r1, r3
 800a560:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10f      	bne.n	800a586 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b08c      	sub	sp, #48	; 0x30
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b22      	cmp	r3, #34	; 0x22
 800a5dc:	f040 80ad 	bne.w	800a73a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e8:	d117      	bne.n	800a61a <UART_Receive_IT+0x50>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d113      	bne.n	800a61a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	b29b      	uxth	r3, r3
 800a604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	1c9a      	adds	r2, r3, #2
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	629a      	str	r2, [r3, #40]	; 0x28
 800a618:	e026      	b.n	800a668 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62c:	d007      	beq.n	800a63e <UART_Receive_IT+0x74>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <UART_Receive_IT+0x82>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d106      	bne.n	800a64c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	b2da      	uxtb	r2, r3
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	701a      	strb	r2, [r3, #0]
 800a64a:	e008      	b.n	800a65e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	3b01      	subs	r3, #1
 800a670:	b29b      	uxth	r3, r3
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4619      	mov	r1, r3
 800a676:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d15c      	bne.n	800a736 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0220 	bic.w	r2, r2, #32
 800a68a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a69a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695a      	ldr	r2, [r3, #20]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0201 	bic.w	r2, r2, #1
 800a6aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d136      	bne.n	800a72a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	330c      	adds	r3, #12
 800a6c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	e853 3f00 	ldrex	r3, [r3]
 800a6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f023 0310 	bic.w	r3, r3, #16
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	330c      	adds	r3, #12
 800a6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e2:	623a      	str	r2, [r7, #32]
 800a6e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e6:	69f9      	ldr	r1, [r7, #28]
 800a6e8:	6a3a      	ldr	r2, [r7, #32]
 800a6ea:	e841 2300 	strex	r3, r2, [r1]
 800a6ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1e5      	bne.n	800a6c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b10      	cmp	r3, #16
 800a702:	d10a      	bne.n	800a71a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a722:	4611      	mov	r1, r2
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	e003      	b.n	800a732 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	e002      	b.n	800a73c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	e000      	b.n	800a73c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a73a:	2302      	movs	r3, #2
  }
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3730      	adds	r7, #48	; 0x30
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a748:	b0c0      	sub	sp, #256	; 0x100
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a760:	68d9      	ldr	r1, [r3, #12]
 800a762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	ea40 0301 	orr.w	r3, r0, r1
 800a76c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	431a      	orrs	r2, r3
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a79c:	f021 010c 	bic.w	r1, r1, #12
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7be:	6999      	ldr	r1, [r3, #24]
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	ea40 0301 	orr.w	r3, r0, r1
 800a7ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b8f      	ldr	r3, [pc, #572]	; (800aa10 <UART_SetConfig+0x2cc>)
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d005      	beq.n	800a7e4 <UART_SetConfig+0xa0>
 800a7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	4b8d      	ldr	r3, [pc, #564]	; (800aa14 <UART_SetConfig+0x2d0>)
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d104      	bne.n	800a7ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7e4:	f7fc ff26 	bl	8007634 <HAL_RCC_GetPCLK2Freq>
 800a7e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a7ec:	e003      	b.n	800a7f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7ee:	f7fc ff0d 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 800a7f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a800:	f040 810c 	bne.w	800aa1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a80e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a816:	4622      	mov	r2, r4
 800a818:	462b      	mov	r3, r5
 800a81a:	1891      	adds	r1, r2, r2
 800a81c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a81e:	415b      	adcs	r3, r3
 800a820:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a826:	4621      	mov	r1, r4
 800a828:	eb12 0801 	adds.w	r8, r2, r1
 800a82c:	4629      	mov	r1, r5
 800a82e:	eb43 0901 	adc.w	r9, r3, r1
 800a832:	f04f 0200 	mov.w	r2, #0
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a83e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a846:	4690      	mov	r8, r2
 800a848:	4699      	mov	r9, r3
 800a84a:	4623      	mov	r3, r4
 800a84c:	eb18 0303 	adds.w	r3, r8, r3
 800a850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a854:	462b      	mov	r3, r5
 800a856:	eb49 0303 	adc.w	r3, r9, r3
 800a85a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a86a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a86e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a872:	460b      	mov	r3, r1
 800a874:	18db      	adds	r3, r3, r3
 800a876:	653b      	str	r3, [r7, #80]	; 0x50
 800a878:	4613      	mov	r3, r2
 800a87a:	eb42 0303 	adc.w	r3, r2, r3
 800a87e:	657b      	str	r3, [r7, #84]	; 0x54
 800a880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a888:	f7f6 f982 	bl	8000b90 <__aeabi_uldivmod>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4b61      	ldr	r3, [pc, #388]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a892:	fba3 2302 	umull	r2, r3, r3, r2
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	011c      	lsls	r4, r3, #4
 800a89a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	1891      	adds	r1, r2, r2
 800a8b2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8b4:	415b      	adcs	r3, r3
 800a8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8bc:	4641      	mov	r1, r8
 800a8be:	eb12 0a01 	adds.w	sl, r2, r1
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	eb43 0b01 	adc.w	fp, r3, r1
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8dc:	4692      	mov	sl, r2
 800a8de:	469b      	mov	fp, r3
 800a8e0:	4643      	mov	r3, r8
 800a8e2:	eb1a 0303 	adds.w	r3, sl, r3
 800a8e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	eb4b 0303 	adc.w	r3, fp, r3
 800a8f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a908:	460b      	mov	r3, r1
 800a90a:	18db      	adds	r3, r3, r3
 800a90c:	643b      	str	r3, [r7, #64]	; 0x40
 800a90e:	4613      	mov	r3, r2
 800a910:	eb42 0303 	adc.w	r3, r2, r3
 800a914:	647b      	str	r3, [r7, #68]	; 0x44
 800a916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a91a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a91e:	f7f6 f937 	bl	8000b90 <__aeabi_uldivmod>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4611      	mov	r1, r2
 800a928:	4b3b      	ldr	r3, [pc, #236]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a92a:	fba3 2301 	umull	r2, r3, r3, r1
 800a92e:	095b      	lsrs	r3, r3, #5
 800a930:	2264      	movs	r2, #100	; 0x64
 800a932:	fb02 f303 	mul.w	r3, r2, r3
 800a936:	1acb      	subs	r3, r1, r3
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a93e:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a940:	fba3 2302 	umull	r2, r3, r3, r2
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a94c:	441c      	add	r4, r3
 800a94e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a952:	2200      	movs	r2, #0
 800a954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a95c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a960:	4642      	mov	r2, r8
 800a962:	464b      	mov	r3, r9
 800a964:	1891      	adds	r1, r2, r2
 800a966:	63b9      	str	r1, [r7, #56]	; 0x38
 800a968:	415b      	adcs	r3, r3
 800a96a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a96c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a970:	4641      	mov	r1, r8
 800a972:	1851      	adds	r1, r2, r1
 800a974:	6339      	str	r1, [r7, #48]	; 0x30
 800a976:	4649      	mov	r1, r9
 800a978:	414b      	adcs	r3, r1
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a988:	4659      	mov	r1, fp
 800a98a:	00cb      	lsls	r3, r1, #3
 800a98c:	4651      	mov	r1, sl
 800a98e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a992:	4651      	mov	r1, sl
 800a994:	00ca      	lsls	r2, r1, #3
 800a996:	4610      	mov	r0, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	4642      	mov	r2, r8
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	eb42 0303 	adc.w	r3, r2, r3
 800a9ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	18db      	adds	r3, r3, r3
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	eb42 0303 	adc.w	r3, r2, r3
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a9da:	f7f6 f8d9 	bl	8000b90 <__aeabi_uldivmod>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a9e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	2164      	movs	r1, #100	; 0x64
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	3332      	adds	r3, #50	; 0x32
 800a9f6:	4a08      	ldr	r2, [pc, #32]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	f003 0207 	and.w	r2, r3, #7
 800aa02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4422      	add	r2, r4
 800aa0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa0c:	e105      	b.n	800ac1a <UART_SetConfig+0x4d6>
 800aa0e:	bf00      	nop
 800aa10:	40011000 	.word	0x40011000
 800aa14:	40011400 	.word	0x40011400
 800aa18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa2e:	4642      	mov	r2, r8
 800aa30:	464b      	mov	r3, r9
 800aa32:	1891      	adds	r1, r2, r2
 800aa34:	6239      	str	r1, [r7, #32]
 800aa36:	415b      	adcs	r3, r3
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa3e:	4641      	mov	r1, r8
 800aa40:	1854      	adds	r4, r2, r1
 800aa42:	4649      	mov	r1, r9
 800aa44:	eb43 0501 	adc.w	r5, r3, r1
 800aa48:	f04f 0200 	mov.w	r2, #0
 800aa4c:	f04f 0300 	mov.w	r3, #0
 800aa50:	00eb      	lsls	r3, r5, #3
 800aa52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa56:	00e2      	lsls	r2, r4, #3
 800aa58:	4614      	mov	r4, r2
 800aa5a:	461d      	mov	r5, r3
 800aa5c:	4643      	mov	r3, r8
 800aa5e:	18e3      	adds	r3, r4, r3
 800aa60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa64:	464b      	mov	r3, r9
 800aa66:	eb45 0303 	adc.w	r3, r5, r3
 800aa6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa7e:	f04f 0200 	mov.w	r2, #0
 800aa82:	f04f 0300 	mov.w	r3, #0
 800aa86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	008b      	lsls	r3, r1, #2
 800aa8e:	4621      	mov	r1, r4
 800aa90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa94:	4621      	mov	r1, r4
 800aa96:	008a      	lsls	r2, r1, #2
 800aa98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa9c:	f7f6 f878 	bl	8000b90 <__aeabi_uldivmod>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4b60      	ldr	r3, [pc, #384]	; (800ac28 <UART_SetConfig+0x4e4>)
 800aaa6:	fba3 2302 	umull	r2, r3, r3, r2
 800aaaa:	095b      	lsrs	r3, r3, #5
 800aaac:	011c      	lsls	r4, r3, #4
 800aaae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aabc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aac0:	4642      	mov	r2, r8
 800aac2:	464b      	mov	r3, r9
 800aac4:	1891      	adds	r1, r2, r2
 800aac6:	61b9      	str	r1, [r7, #24]
 800aac8:	415b      	adcs	r3, r3
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aad0:	4641      	mov	r1, r8
 800aad2:	1851      	adds	r1, r2, r1
 800aad4:	6139      	str	r1, [r7, #16]
 800aad6:	4649      	mov	r1, r9
 800aad8:	414b      	adcs	r3, r1
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aae8:	4659      	mov	r1, fp
 800aaea:	00cb      	lsls	r3, r1, #3
 800aaec:	4651      	mov	r1, sl
 800aaee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaf2:	4651      	mov	r1, sl
 800aaf4:	00ca      	lsls	r2, r1, #3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	4642      	mov	r2, r8
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab04:	464b      	mov	r3, r9
 800ab06:	460a      	mov	r2, r1
 800ab08:	eb42 0303 	adc.w	r3, r2, r3
 800ab0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab28:	4649      	mov	r1, r9
 800ab2a:	008b      	lsls	r3, r1, #2
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab32:	4641      	mov	r1, r8
 800ab34:	008a      	lsls	r2, r1, #2
 800ab36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab3a:	f7f6 f829 	bl	8000b90 <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4b39      	ldr	r3, [pc, #228]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2164      	movs	r1, #100	; 0x64
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	3332      	adds	r3, #50	; 0x32
 800ab56:	4a34      	ldr	r2, [pc, #208]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab62:	441c      	add	r4, r3
 800ab64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab68:	2200      	movs	r2, #0
 800ab6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab6c:	677a      	str	r2, [r7, #116]	; 0x74
 800ab6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab72:	4642      	mov	r2, r8
 800ab74:	464b      	mov	r3, r9
 800ab76:	1891      	adds	r1, r2, r2
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	415b      	adcs	r3, r3
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab82:	4641      	mov	r1, r8
 800ab84:	1851      	adds	r1, r2, r1
 800ab86:	6039      	str	r1, [r7, #0]
 800ab88:	4649      	mov	r1, r9
 800ab8a:	414b      	adcs	r3, r1
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	00cb      	lsls	r3, r1, #3
 800ab9e:	4651      	mov	r1, sl
 800aba0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aba4:	4651      	mov	r1, sl
 800aba6:	00ca      	lsls	r2, r1, #3
 800aba8:	4610      	mov	r0, r2
 800abaa:	4619      	mov	r1, r3
 800abac:	4603      	mov	r3, r0
 800abae:	4642      	mov	r2, r8
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb4:	464b      	mov	r3, r9
 800abb6:	460a      	mov	r2, r1
 800abb8:	eb42 0303 	adc.w	r3, r2, r3
 800abbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	663b      	str	r3, [r7, #96]	; 0x60
 800abc8:	667a      	str	r2, [r7, #100]	; 0x64
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800abd6:	4649      	mov	r1, r9
 800abd8:	008b      	lsls	r3, r1, #2
 800abda:	4641      	mov	r1, r8
 800abdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abe0:	4641      	mov	r1, r8
 800abe2:	008a      	lsls	r2, r1, #2
 800abe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800abe8:	f7f5 ffd2 	bl	8000b90 <__aeabi_uldivmod>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4b0d      	ldr	r3, [pc, #52]	; (800ac28 <UART_SetConfig+0x4e4>)
 800abf2:	fba3 1302 	umull	r1, r3, r3, r2
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	2164      	movs	r1, #100	; 0x64
 800abfa:	fb01 f303 	mul.w	r3, r1, r3
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	3332      	adds	r3, #50	; 0x32
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ac06:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	f003 020f 	and.w	r2, r3, #15
 800ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4422      	add	r2, r4
 800ac18:	609a      	str	r2, [r3, #8]
}
 800ac1a:	bf00      	nop
 800ac1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac20:	46bd      	mov	sp, r7
 800ac22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac26:	bf00      	nop
 800ac28:	51eb851f 	.word	0x51eb851f

0800ac2c <__errno>:
 800ac2c:	4b01      	ldr	r3, [pc, #4]	; (800ac34 <__errno+0x8>)
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000288 	.word	0x20000288

0800ac38 <__libc_init_array>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4d0d      	ldr	r5, [pc, #52]	; (800ac70 <__libc_init_array+0x38>)
 800ac3c:	4c0d      	ldr	r4, [pc, #52]	; (800ac74 <__libc_init_array+0x3c>)
 800ac3e:	1b64      	subs	r4, r4, r5
 800ac40:	10a4      	asrs	r4, r4, #2
 800ac42:	2600      	movs	r6, #0
 800ac44:	42a6      	cmp	r6, r4
 800ac46:	d109      	bne.n	800ac5c <__libc_init_array+0x24>
 800ac48:	4d0b      	ldr	r5, [pc, #44]	; (800ac78 <__libc_init_array+0x40>)
 800ac4a:	4c0c      	ldr	r4, [pc, #48]	; (800ac7c <__libc_init_array+0x44>)
 800ac4c:	f000 fa2e 	bl	800b0ac <_init>
 800ac50:	1b64      	subs	r4, r4, r5
 800ac52:	10a4      	asrs	r4, r4, #2
 800ac54:	2600      	movs	r6, #0
 800ac56:	42a6      	cmp	r6, r4
 800ac58:	d105      	bne.n	800ac66 <__libc_init_array+0x2e>
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac60:	4798      	blx	r3
 800ac62:	3601      	adds	r6, #1
 800ac64:	e7ee      	b.n	800ac44 <__libc_init_array+0xc>
 800ac66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6a:	4798      	blx	r3
 800ac6c:	3601      	adds	r6, #1
 800ac6e:	e7f2      	b.n	800ac56 <__libc_init_array+0x1e>
 800ac70:	0800b140 	.word	0x0800b140
 800ac74:	0800b140 	.word	0x0800b140
 800ac78:	0800b140 	.word	0x0800b140
 800ac7c:	0800b144 	.word	0x0800b144

0800ac80 <memcpy>:
 800ac80:	440a      	add	r2, r1
 800ac82:	4291      	cmp	r1, r2
 800ac84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac88:	d100      	bne.n	800ac8c <memcpy+0xc>
 800ac8a:	4770      	bx	lr
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac96:	4291      	cmp	r1, r2
 800ac98:	d1f9      	bne.n	800ac8e <memcpy+0xe>
 800ac9a:	bd10      	pop	{r4, pc}

0800ac9c <memset>:
 800ac9c:	4402      	add	r2, r0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d100      	bne.n	800aca6 <memset+0xa>
 800aca4:	4770      	bx	lr
 800aca6:	f803 1b01 	strb.w	r1, [r3], #1
 800acaa:	e7f9      	b.n	800aca0 <memset+0x4>

0800acac <sqrt>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	ed2d 8b02 	vpush	{d8}
 800acb2:	ec55 4b10 	vmov	r4, r5, d0
 800acb6:	f000 f851 	bl	800ad5c <__ieee754_sqrt>
 800acba:	4622      	mov	r2, r4
 800acbc:	462b      	mov	r3, r5
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	eeb0 8a40 	vmov.f32	s16, s0
 800acc6:	eef0 8a60 	vmov.f32	s17, s1
 800acca:	f7f5 fedb 	bl	8000a84 <__aeabi_dcmpun>
 800acce:	b990      	cbnz	r0, 800acf6 <sqrt+0x4a>
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 feac 	bl	8000a34 <__aeabi_dcmplt>
 800acdc:	b158      	cbz	r0, 800acf6 <sqrt+0x4a>
 800acde:	f7ff ffa5 	bl	800ac2c <__errno>
 800ace2:	2321      	movs	r3, #33	; 0x21
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	4610      	mov	r0, r2
 800acec:	4619      	mov	r1, r3
 800acee:	f7f5 fd59 	bl	80007a4 <__aeabi_ddiv>
 800acf2:	ec41 0b18 	vmov	d8, r0, r1
 800acf6:	eeb0 0a48 	vmov.f32	s0, s16
 800acfa:	eef0 0a68 	vmov.f32	s1, s17
 800acfe:	ecbd 8b02 	vpop	{d8}
 800ad02:	bd38      	pop	{r3, r4, r5, pc}

0800ad04 <asinf>:
 800ad04:	b508      	push	{r3, lr}
 800ad06:	ed2d 8b02 	vpush	{d8}
 800ad0a:	eeb0 8a40 	vmov.f32	s16, s0
 800ad0e:	f000 f8d7 	bl	800aec0 <__ieee754_asinf>
 800ad12:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1a:	eef0 8a40 	vmov.f32	s17, s0
 800ad1e:	d615      	bvs.n	800ad4c <asinf+0x48>
 800ad20:	eeb0 0a48 	vmov.f32	s0, s16
 800ad24:	f000 f9b5 	bl	800b092 <fabsf>
 800ad28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad34:	dd0a      	ble.n	800ad4c <asinf+0x48>
 800ad36:	f7ff ff79 	bl	800ac2c <__errno>
 800ad3a:	ecbd 8b02 	vpop	{d8}
 800ad3e:	2321      	movs	r3, #33	; 0x21
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad46:	4804      	ldr	r0, [pc, #16]	; (800ad58 <asinf+0x54>)
 800ad48:	f000 b9aa 	b.w	800b0a0 <nanf>
 800ad4c:	eeb0 0a68 	vmov.f32	s0, s17
 800ad50:	ecbd 8b02 	vpop	{d8}
 800ad54:	bd08      	pop	{r3, pc}
 800ad56:	bf00      	nop
 800ad58:	0800b134 	.word	0x0800b134

0800ad5c <__ieee754_sqrt>:
 800ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	ec55 4b10 	vmov	r4, r5, d0
 800ad64:	4e55      	ldr	r6, [pc, #340]	; (800aebc <__ieee754_sqrt+0x160>)
 800ad66:	43ae      	bics	r6, r5
 800ad68:	ee10 0a10 	vmov	r0, s0
 800ad6c:	ee10 3a10 	vmov	r3, s0
 800ad70:	462a      	mov	r2, r5
 800ad72:	4629      	mov	r1, r5
 800ad74:	d110      	bne.n	800ad98 <__ieee754_sqrt+0x3c>
 800ad76:	ee10 2a10 	vmov	r2, s0
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	f7f5 fbe8 	bl	8000550 <__aeabi_dmul>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fa2c 	bl	80001e4 <__adddf3>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	ec45 4b10 	vmov	d0, r4, r5
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	dc10      	bgt.n	800adbe <__ieee754_sqrt+0x62>
 800ad9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ada0:	4330      	orrs	r0, r6
 800ada2:	d0f5      	beq.n	800ad90 <__ieee754_sqrt+0x34>
 800ada4:	b15d      	cbz	r5, 800adbe <__ieee754_sqrt+0x62>
 800ada6:	ee10 2a10 	vmov	r2, s0
 800adaa:	462b      	mov	r3, r5
 800adac:	ee10 0a10 	vmov	r0, s0
 800adb0:	f7f5 fa16 	bl	80001e0 <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	f7f5 fcf4 	bl	80007a4 <__aeabi_ddiv>
 800adbc:	e7e6      	b.n	800ad8c <__ieee754_sqrt+0x30>
 800adbe:	1512      	asrs	r2, r2, #20
 800adc0:	d074      	beq.n	800aeac <__ieee754_sqrt+0x150>
 800adc2:	07d4      	lsls	r4, r2, #31
 800adc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800adc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800adcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800add0:	bf5e      	ittt	pl
 800add2:	0fda      	lsrpl	r2, r3, #31
 800add4:	005b      	lslpl	r3, r3, #1
 800add6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800adda:	2400      	movs	r4, #0
 800addc:	0fda      	lsrs	r2, r3, #31
 800adde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ade2:	107f      	asrs	r7, r7, #1
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	2516      	movs	r5, #22
 800ade8:	4620      	mov	r0, r4
 800adea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800adee:	1886      	adds	r6, r0, r2
 800adf0:	428e      	cmp	r6, r1
 800adf2:	bfde      	ittt	le
 800adf4:	1b89      	suble	r1, r1, r6
 800adf6:	18b0      	addle	r0, r6, r2
 800adf8:	18a4      	addle	r4, r4, r2
 800adfa:	0049      	lsls	r1, r1, #1
 800adfc:	3d01      	subs	r5, #1
 800adfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ae02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ae06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae0a:	d1f0      	bne.n	800adee <__ieee754_sqrt+0x92>
 800ae0c:	462a      	mov	r2, r5
 800ae0e:	f04f 0e20 	mov.w	lr, #32
 800ae12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae16:	4281      	cmp	r1, r0
 800ae18:	eb06 0c05 	add.w	ip, r6, r5
 800ae1c:	dc02      	bgt.n	800ae24 <__ieee754_sqrt+0xc8>
 800ae1e:	d113      	bne.n	800ae48 <__ieee754_sqrt+0xec>
 800ae20:	459c      	cmp	ip, r3
 800ae22:	d811      	bhi.n	800ae48 <__ieee754_sqrt+0xec>
 800ae24:	f1bc 0f00 	cmp.w	ip, #0
 800ae28:	eb0c 0506 	add.w	r5, ip, r6
 800ae2c:	da43      	bge.n	800aeb6 <__ieee754_sqrt+0x15a>
 800ae2e:	2d00      	cmp	r5, #0
 800ae30:	db41      	blt.n	800aeb6 <__ieee754_sqrt+0x15a>
 800ae32:	f100 0801 	add.w	r8, r0, #1
 800ae36:	1a09      	subs	r1, r1, r0
 800ae38:	459c      	cmp	ip, r3
 800ae3a:	bf88      	it	hi
 800ae3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ae40:	eba3 030c 	sub.w	r3, r3, ip
 800ae44:	4432      	add	r2, r6
 800ae46:	4640      	mov	r0, r8
 800ae48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ae4c:	f1be 0e01 	subs.w	lr, lr, #1
 800ae50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ae54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae5c:	d1db      	bne.n	800ae16 <__ieee754_sqrt+0xba>
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	d006      	beq.n	800ae70 <__ieee754_sqrt+0x114>
 800ae62:	1c50      	adds	r0, r2, #1
 800ae64:	bf13      	iteet	ne
 800ae66:	3201      	addne	r2, #1
 800ae68:	3401      	addeq	r4, #1
 800ae6a:	4672      	moveq	r2, lr
 800ae6c:	f022 0201 	bicne.w	r2, r2, #1
 800ae70:	1063      	asrs	r3, r4, #1
 800ae72:	0852      	lsrs	r2, r2, #1
 800ae74:	07e1      	lsls	r1, r4, #31
 800ae76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae7e:	bf48      	it	mi
 800ae80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ae84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ae88:	4614      	mov	r4, r2
 800ae8a:	e781      	b.n	800ad90 <__ieee754_sqrt+0x34>
 800ae8c:	0ad9      	lsrs	r1, r3, #11
 800ae8e:	3815      	subs	r0, #21
 800ae90:	055b      	lsls	r3, r3, #21
 800ae92:	2900      	cmp	r1, #0
 800ae94:	d0fa      	beq.n	800ae8c <__ieee754_sqrt+0x130>
 800ae96:	02cd      	lsls	r5, r1, #11
 800ae98:	d50a      	bpl.n	800aeb0 <__ieee754_sqrt+0x154>
 800ae9a:	f1c2 0420 	rsb	r4, r2, #32
 800ae9e:	fa23 f404 	lsr.w	r4, r3, r4
 800aea2:	1e55      	subs	r5, r2, #1
 800aea4:	4093      	lsls	r3, r2
 800aea6:	4321      	orrs	r1, r4
 800aea8:	1b42      	subs	r2, r0, r5
 800aeaa:	e78a      	b.n	800adc2 <__ieee754_sqrt+0x66>
 800aeac:	4610      	mov	r0, r2
 800aeae:	e7f0      	b.n	800ae92 <__ieee754_sqrt+0x136>
 800aeb0:	0049      	lsls	r1, r1, #1
 800aeb2:	3201      	adds	r2, #1
 800aeb4:	e7ef      	b.n	800ae96 <__ieee754_sqrt+0x13a>
 800aeb6:	4680      	mov	r8, r0
 800aeb8:	e7bd      	b.n	800ae36 <__ieee754_sqrt+0xda>
 800aeba:	bf00      	nop
 800aebc:	7ff00000 	.word	0x7ff00000

0800aec0 <__ieee754_asinf>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	ee10 5a10 	vmov	r5, s0
 800aec6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aeca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800aece:	ed2d 8b04 	vpush	{d8-d9}
 800aed2:	d10c      	bne.n	800aeee <__ieee754_asinf+0x2e>
 800aed4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b04c <__ieee754_asinf+0x18c>
 800aed8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b050 <__ieee754_asinf+0x190>
 800aedc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aee0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aee4:	eeb0 0a67 	vmov.f32	s0, s15
 800aee8:	ecbd 8b04 	vpop	{d8-d9}
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
 800aeee:	dd04      	ble.n	800aefa <__ieee754_asinf+0x3a>
 800aef0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aef4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aef8:	e7f6      	b.n	800aee8 <__ieee754_asinf+0x28>
 800aefa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aefe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800af02:	da0b      	bge.n	800af1c <__ieee754_asinf+0x5c>
 800af04:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800af08:	da52      	bge.n	800afb0 <__ieee754_asinf+0xf0>
 800af0a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b054 <__ieee754_asinf+0x194>
 800af0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800af12:	eef4 7ae8 	vcmpe.f32	s15, s17
 800af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1a:	dce5      	bgt.n	800aee8 <__ieee754_asinf+0x28>
 800af1c:	f000 f8b9 	bl	800b092 <fabsf>
 800af20:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800af24:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800af28:	ee20 8a08 	vmul.f32	s16, s0, s16
 800af2c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b058 <__ieee754_asinf+0x198>
 800af30:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b05c <__ieee754_asinf+0x19c>
 800af34:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b060 <__ieee754_asinf+0x1a0>
 800af38:	eea8 7a27 	vfma.f32	s14, s16, s15
 800af3c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b064 <__ieee754_asinf+0x1a4>
 800af40:	eee7 7a08 	vfma.f32	s15, s14, s16
 800af44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b068 <__ieee754_asinf+0x1a8>
 800af48:	eea7 7a88 	vfma.f32	s14, s15, s16
 800af4c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b06c <__ieee754_asinf+0x1ac>
 800af50:	eee7 7a08 	vfma.f32	s15, s14, s16
 800af54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b070 <__ieee754_asinf+0x1b0>
 800af58:	eea7 9a88 	vfma.f32	s18, s15, s16
 800af5c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b074 <__ieee754_asinf+0x1b4>
 800af60:	eee8 7a07 	vfma.f32	s15, s16, s14
 800af64:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b078 <__ieee754_asinf+0x1b8>
 800af68:	eea7 7a88 	vfma.f32	s14, s15, s16
 800af6c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b07c <__ieee754_asinf+0x1bc>
 800af70:	eee7 7a08 	vfma.f32	s15, s14, s16
 800af74:	eeb0 0a48 	vmov.f32	s0, s16
 800af78:	eee7 8a88 	vfma.f32	s17, s15, s16
 800af7c:	f000 f886 	bl	800b08c <__ieee754_sqrtf>
 800af80:	4b3f      	ldr	r3, [pc, #252]	; (800b080 <__ieee754_asinf+0x1c0>)
 800af82:	ee29 9a08 	vmul.f32	s18, s18, s16
 800af86:	429c      	cmp	r4, r3
 800af88:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800af8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800af90:	dd3d      	ble.n	800b00e <__ieee754_asinf+0x14e>
 800af92:	eea0 0a06 	vfma.f32	s0, s0, s12
 800af96:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b084 <__ieee754_asinf+0x1c4>
 800af9a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800af9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b050 <__ieee754_asinf+0x190>
 800afa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	bfd8      	it	le
 800afaa:	eeb1 0a40 	vnegle.f32	s0, s0
 800afae:	e79b      	b.n	800aee8 <__ieee754_asinf+0x28>
 800afb0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800afb4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b058 <__ieee754_asinf+0x198>
 800afb8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b05c <__ieee754_asinf+0x19c>
 800afbc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b070 <__ieee754_asinf+0x1b0>
 800afc0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800afc4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b064 <__ieee754_asinf+0x1a4>
 800afc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afcc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b068 <__ieee754_asinf+0x1a8>
 800afd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afd4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b06c <__ieee754_asinf+0x1ac>
 800afd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afdc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b060 <__ieee754_asinf+0x1a0>
 800afe0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afe4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b074 <__ieee754_asinf+0x1b4>
 800afe8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800afec:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b078 <__ieee754_asinf+0x1b8>
 800aff0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800aff4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b07c <__ieee754_asinf+0x1bc>
 800aff8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800affc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b000:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b004:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b008:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b00c:	e76c      	b.n	800aee8 <__ieee754_asinf+0x28>
 800b00e:	ee10 3a10 	vmov	r3, s0
 800b012:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b016:	f023 030f 	bic.w	r3, r3, #15
 800b01a:	ee07 3a10 	vmov	s14, r3
 800b01e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b022:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b026:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b02a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b02e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b04c <__ieee754_asinf+0x18c>
 800b032:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b036:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b03a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b088 <__ieee754_asinf+0x1c8>
 800b03e:	eeb0 6a40 	vmov.f32	s12, s0
 800b042:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b046:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b04a:	e7aa      	b.n	800afa2 <__ieee754_asinf+0xe2>
 800b04c:	b33bbd2e 	.word	0xb33bbd2e
 800b050:	3fc90fdb 	.word	0x3fc90fdb
 800b054:	7149f2ca 	.word	0x7149f2ca
 800b058:	3811ef08 	.word	0x3811ef08
 800b05c:	3a4f7f04 	.word	0x3a4f7f04
 800b060:	3e2aaaab 	.word	0x3e2aaaab
 800b064:	bd241146 	.word	0xbd241146
 800b068:	3e4e0aa8 	.word	0x3e4e0aa8
 800b06c:	bea6b090 	.word	0xbea6b090
 800b070:	3d9dc62e 	.word	0x3d9dc62e
 800b074:	bf303361 	.word	0xbf303361
 800b078:	4001572d 	.word	0x4001572d
 800b07c:	c019d139 	.word	0xc019d139
 800b080:	3f799999 	.word	0x3f799999
 800b084:	333bbd2e 	.word	0x333bbd2e
 800b088:	3f490fdb 	.word	0x3f490fdb

0800b08c <__ieee754_sqrtf>:
 800b08c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b090:	4770      	bx	lr

0800b092 <fabsf>:
 800b092:	ee10 3a10 	vmov	r3, s0
 800b096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b09a:	ee00 3a10 	vmov	s0, r3
 800b09e:	4770      	bx	lr

0800b0a0 <nanf>:
 800b0a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0a8 <nanf+0x8>
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	7fc00000 	.word	0x7fc00000

0800b0ac <_init>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	bf00      	nop
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <_fini>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr
