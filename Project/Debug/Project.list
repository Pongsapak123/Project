
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  00020340  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd8  08009dd8  00020340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  08009de0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  20000340  0800a120  00020340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  0800a120  0002104c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001749a  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7e  00000000  00000000  0003780a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a3d  00000000  00000000  0003c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184eb  00000000  00000000  00055315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e44  00000000  00000000  0006d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  00102694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000340 	.word	0x20000340
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d48 	.word	0x08009d48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000344 	.word	0x20000344
 80001d4:	08009d48 	.word	0x08009d48

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <read_pos>:
	RUNPOINTMODE,
	EMERGENCY_LIMIT,
	SENSOR_CHECK
} State ;

void read_pos() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <read_pos+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <read_pos+0x40>)
 8000e62:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <read_pos+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb07 	bl	800047c <__aeabi_i2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <read_pos+0x44>)
 8000e74:	f7ff fb6c 	bl	8000550 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe16 	bl	8000ab0 <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <read_pos+0x48>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200004e4 	.word	0x200004e4
 8000e94:	20000fac 	.word	0x20000fac
 8000e98:	3f8e0000 	.word	0x3f8e0000
 8000e9c:	20000fb0 	.word	0x20000fb0

08000ea0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d10a      	bne.n	8000ec8 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <motor+0x4c>)
 8000eba:	f003 fedf 	bl	8004c7c <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <motor+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 8000ec6:	e00c      	b.n	8000ee2 <motor+0x42>
	} else if (DIR == 1) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <motor+0x4c>)
 8000ed6:	f003 fed1 	bl	8004c7c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <motor+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	20000430 	.word	0x20000430

08000ef4 <Init_Homing>:

void Init_Homing() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <Init_Homing+0xe8>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <Init_Homing+0x12>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d01b      	beq.n	8000f3c <Init_Homing+0x48>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f04:	e068      	b.n	8000fd8 <Init_Homing+0xe4>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	4835      	ldr	r0, [pc, #212]	; (8000fe0 <Init_Homing+0xec>)
 8000f0c:	f003 fe9e 	bl	8004c4c <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <Init_Homing+0x3a>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <Init_Homing+0xf0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ffbd 	bl	8000ea0 <motor>
			state_homing = 1;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <Init_Homing+0xe8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	801a      	strh	r2, [r3, #0]
		break;
 8000f2c:	e054      	b.n	8000fd8 <Init_Homing+0xe4>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f36:	f7ff ffb3 	bl	8000ea0 <motor>
		break;
 8000f3a:	e04d      	b.n	8000fd8 <Init_Homing+0xe4>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <Init_Homing+0xec>)
 8000f40:	f003 fe84 	bl	8004c4c <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d140      	bne.n	8000fcc <Init_Homing+0xd8>
			motor(0, 1);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffa7 	bl	8000ea0 <motor>
			HAL_Delay(400);
 8000f52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f56:	f002 ffb1 	bl	8003ebc <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Init_Homing+0xf0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Init_Homing+0xf0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <Init_Homing+0xf4>)
 8000f6c:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <Init_Homing+0xf4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa82 	bl	800047c <__aeabi_i2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <Init_Homing+0xf8>)
 8000f7e:	f7ff fae7 	bl	8000550 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd91 	bl	8000ab0 <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <Init_Homing+0xfc>)
 8000f92:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <Init_Homing+0xfc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <Init_Homing+0x100>)
 8000f9a:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <Init_Homing+0x104>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <Init_Homing+0x108>)
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a15      	ldr	r2, [pc, #84]	; (8001000 <Init_Homing+0x10c>)
 8000faa:	6013      	str	r3, [r2, #0]
			y_axis_Moving_Status = 0;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <Init_Homing+0x110>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	841a      	strh	r2, [r3, #32]
			State_PID = 2;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <Init_Homing+0x114>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <Init_Homing+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f000 fb82 	bl	80016c8 <EndEffector_Event>
			State = IDLE;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <Init_Homing+0x118>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	701a      	strb	r2, [r3, #0]
		break;
 8000fca:	e004      	b.n	8000fd6 <Init_Homing+0xe2>
			motor(Max_Counter_PWM * 0.18, 1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	f642 6014 	movw	r0, #11796	; 0x2e14
 8000fd2:	f7ff ff65 	bl	8000ea0 <motor>
		break;
 8000fd6:	bf00      	nop
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000035c 	.word	0x2000035c
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	200004e4 	.word	0x200004e4
 8000fe8:	20000fac 	.word	0x20000fac
 8000fec:	3f8e0000 	.word	0x3f8e0000
 8000ff0:	20000fb0 	.word	0x20000fb0
 8000ff4:	200008fc 	.word	0x200008fc
 8000ff8:	20000fb4 	.word	0x20000fb4
 8000ffc:	20000274 	.word	0x20000274
 8001000:	20000900 	.word	0x20000900
 8001004:	20000e08 	.word	0x20000e08
 8001008:	20000270 	.word	0x20000270
 800100c:	200002bc 	.word	0x200002bc

08001010 <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <modbus_1t5_Timeout+0x1c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	751a      	strb	r2, [r3, #20]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000360 	.word	0x20000360

08001030 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <modbus_3t5_Timeout+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	755a      	strb	r2, [r3, #21]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000360 	.word	0x20000360

08001050 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <modbus_UART_Recived+0x60>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <modbus_UART_Recived+0x60>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800106a:	1c59      	adds	r1, r3, #1
 800106c:	b289      	uxth	r1, r1
 800106e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001072:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001076:	d210      	bcs.n	800109a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <modbus_UART_Recived+0x60>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68d8      	ldr	r0, [r3, #12]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <modbus_UART_Recived+0x60>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <modbus_UART_Recived+0x60>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800108a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800108e:	4413      	add	r3, r2
 8001090:	3302      	adds	r3, #2
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	f007 fba1 	bl	80087dc <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <modbus_UART_Recived+0x60>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000360 	.word	0x20000360

080010b4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <Modbus_init+0x9c>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <Modbus_init+0x9c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	4a20      	ldr	r2, [pc, #128]	; (8001154 <Modbus_init+0xa0>)
 80010d4:	2114      	movs	r1, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 fd32 	bl	8007b40 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <Modbus_init+0x9c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <Modbus_init+0xa4>)
 80010e4:	210e      	movs	r1, #14
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 fd2a 	bl	8007b40 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <Modbus_init+0x9c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	4a1a      	ldr	r2, [pc, #104]	; (800115c <Modbus_init+0xa8>)
 80010f4:	2103      	movs	r1, #3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fac8 	bl	800868c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <Modbus_init+0x9c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68d8      	ldr	r0, [r3, #12]
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <Modbus_init+0x9c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <Modbus_init+0x9c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001112:	4413      	add	r3, r2
 8001114:	3302      	adds	r3, #2
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	f007 fb5f 	bl	80087dc <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <Modbus_init+0x9c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10c      	bne.n	8001148 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <Modbus_init+0x9c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fdad 	bl	8006c94 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <Modbus_init+0x9c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f005 ffec 	bl	8007120 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000360 	.word	0x20000360
 8001154:	08001011 	.word	0x08001011
 8001158:	08001031 	.word	0x08001031
 800115c:	08001051 	.word	0x08001051

08001160 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001170:	23ff      	movs	r3, #255	; 0xff
 8001172:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001174:	e013      	b.n	800119e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	4053      	eors	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <CRC16+0x64>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4053      	eors	r3, r2
 8001192:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <CRC16+0x68>)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	803a      	strh	r2, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e6      	bne.n	8001176 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b29b      	uxth	r3, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20000100 	.word	0x20000100
 80011c8:	20000000 	.word	0x20000000

080011cc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011d2:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7e1b      	ldrb	r3, [r3, #24]
 80011d8:	3b01      	subs	r3, #1
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d80a      	bhi.n	80011f4 <Modbus_Protocal_Worker+0x28>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <Modbus_Protocal_Worker+0x18>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011ff 	.word	0x080011ff
 80011e8:	0800139f 	.word	0x0800139f
 80011ec:	0800128b 	.word	0x0800128b
 80011f0:	080012b1 	.word	0x080012b1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011f4:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	761a      	strb	r2, [r3, #24]
		break;
 80011fc:	e0e8      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800120a:	f000 f9dd 	bl	80015c8 <Modbus_Emission>
 800120e:	e01c      	b.n	800124a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001210:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	7d9b      	ldrb	r3, [r3, #22]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d017      	beq.n	800124a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800121a:	4b6f      	ldr	r3, [pc, #444]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001222:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800122a:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2203      	movs	r2, #3
 8001248:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b20      	cmp	r3, #32
 8001258:	f040 80b3 	bne.w	80013c2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800125c:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d8      	ldr	r0, [r3, #12]
 800126c:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001278:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800127c:	4413      	add	r3, r2
 800127e:	3302      	adds	r3, #2
 8001280:	2201      	movs	r2, #1
 8001282:	4619      	mov	r1, r3
 8001284:	f007 faaa 	bl	80087dc <HAL_UART_Receive_IT>
		}
		break;
 8001288:	e09b      	b.n	80013c2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7d1b      	ldrb	r3, [r3, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8098 	beq.w	80013c6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800129e:	4b4e      	ldr	r3, [pc, #312]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	22fe      	movs	r2, #254	; 0xfe
 80012a4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2204      	movs	r2, #4
 80012ac:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012ae:	e08a      	b.n	80013c6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012b0:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	7d9b      	ldrb	r3, [r3, #22]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d009      	beq.n	80012ce <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012d6:	f113 0f02 	cmn.w	r3, #2
 80012da:	d150      	bne.n	800137e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012f4:	3b02      	subs	r3, #2
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f7ff ff31 	bl	8001160 <CRC16>
 80012fe:	4603      	mov	r3, r0
 8001300:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001302:	793a      	ldrb	r2, [r7, #4]
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001310:	3b02      	subs	r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001318:	429a      	cmp	r2, r3
 800131a:	d10c      	bne.n	8001336 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800132a:	3b01      	subs	r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001332:	429a      	cmp	r2, r3
 8001334:	d004      	beq.n	8001340 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	75da      	strb	r2, [r3, #23]
				break;
 800133e:	e047      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d113      	bne.n	800137a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001362:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800136c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800136e:	461a      	mov	r2, r3
 8001370:	f008 fbf6 	bl	8009b60 <memcpy>

			//execute command
			Modbus_frame_response();
 8001374:	f000 f910 	bl	8001598 <Modbus_frame_response>
 8001378:	e001      	b.n	800137e <Modbus_Protocal_Worker+0x1b2>
				break;
 800137a:	bf00      	nop
					}
		break;


	}
}
 800137c:	e028      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	7d5b      	ldrb	r3, [r3, #21]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4618      	mov	r0, r3
 8001398:	f007 face 	bl	8008938 <HAL_UART_AbortReceive>
		break;
 800139c:	e015      	b.n	80013ca <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d10f      	bne.n	80013ce <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <Modbus_Protocal_Worker+0x20c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	761a      	strb	r2, [r3, #24]
		break;
 80013c0:	e005      	b.n	80013ce <Modbus_Protocal_Worker+0x202>
		break;
 80013c2:	bf00      	nop
 80013c4:	e004      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
 80013c8:	e002      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
		break;
 80013ca:	bf00      	nop
 80013cc:	e000      	b.n	80013d0 <Modbus_Protocal_Worker+0x204>
		break;
 80013ce:	bf00      	nop
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000360 	.word	0x20000360

080013dc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <modbusWrite1Register+0x80>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	7e9b      	ldrb	r3, [r3, #26]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <modbusWrite1Register+0x80>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	7edb      	ldrb	r3, [r3, #27]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <modbusWrite1Register+0x80>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	429a      	cmp	r2, r3
 8001404:	d903      	bls.n	800140e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001406:	2002      	movs	r0, #2
 8001408:	f000 f8a4 	bl	8001554 <ModbusErrorReply>
			 return;
 800140c:	e023      	b.n	8001456 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <modbusWrite1Register+0x80>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <modbusWrite1Register+0x80>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	7f12      	ldrb	r2, [r2, #28]
 8001420:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <modbusWrite1Register+0x80>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <modbusWrite1Register+0x80>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	440b      	add	r3, r1
 8001432:	7f52      	ldrb	r2, [r2, #29]
 8001434:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <modbusWrite1Register+0x80>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	f008 fb8a 	bl	8009b60 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <modbusWrite1Register+0x80>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2205      	movs	r2, #5
 8001452:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000360 	.word	0x20000360

08001460 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <modbusRead1Register+0xf0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	7f1b      	ldrb	r3, [r3, #28]
 800146c:	b29b      	uxth	r3, r3
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <modbusRead1Register+0xf0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	7f5b      	ldrb	r3, [r3, #29]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4413      	add	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <modbusRead1Register+0xf0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	7e9b      	ldrb	r3, [r3, #26]
 8001484:	b29b      	uxth	r3, r3
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <modbusRead1Register+0xf0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	7edb      	ldrb	r3, [r3, #27]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <modbusRead1Register+0x42>
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	2b7d      	cmp	r3, #125	; 0x7d
 80014a0:	d903      	bls.n	80014aa <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f856 	bl	8001554 <ModbusErrorReply>
		 return;
 80014a8:	e04e      	b.n	8001548 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014aa:	88ba      	ldrh	r2, [r7, #4]
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <modbusRead1Register+0xf0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d808      	bhi.n	80014c8 <modbusRead1Register+0x68>
 80014b6:	88ba      	ldrh	r2, [r7, #4]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4413      	add	r3, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <modbusRead1Register+0xf0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d903      	bls.n	80014d0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f000 f843 	bl	8001554 <ModbusErrorReply>
		 return;
 80014ce:	e03b      	b.n	8001548 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <modbusRead1Register+0xf0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <modbusRead1Register+0xf0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0052      	lsls	r2, r2, #1
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014ea:	2400      	movs	r4, #0
 80014ec:	e020      	b.n	8001530 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <modbusRead1Register+0xf0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	4423      	add	r3, r4
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	18d1      	adds	r1, r2, r3
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <modbusRead1Register+0xf0>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	1c63      	adds	r3, r4, #1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	7849      	ldrb	r1, [r1, #1]
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <modbusRead1Register+0xf0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	4423      	add	r3, r4
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	18d1      	adds	r1, r2, r3
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <modbusRead1Register+0xf0>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	0063      	lsls	r3, r4, #1
 8001522:	3303      	adds	r3, #3
 8001524:	7809      	ldrb	r1, [r1, #0]
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800152e:	3401      	adds	r4, #1
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	429c      	cmp	r4, r3
 8001534:	dbdb      	blt.n	80014ee <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3301      	adds	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <modbusRead1Register+0xf0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	20000360 	.word	0x20000360

08001554 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <ModbusErrorReply+0x40>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	7e5a      	ldrb	r2, [r3, #25]
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <ModbusErrorReply+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <ModbusErrorReply+0x40>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	79fa      	ldrb	r2, [r7, #7]
 8001578:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <ModbusErrorReply+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000360 	.word	0x20000360

08001598 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <Modbus_frame_response+0x2c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d004      	beq.n	80015b0 <Modbus_frame_response+0x18>
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d105      	bne.n	80015b6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80015aa:	f7ff ff17 	bl	80013dc <modbusWrite1Register>
		break;
 80015ae:	e006      	b.n	80015be <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80015b0:	f7ff ff56 	bl	8001460 <modbusRead1Register>
		break;
 80015b4:	e003      	b.n	80015be <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff ffcc 	bl	8001554 <ModbusErrorReply>
		break;
 80015bc:	bf00      	nop

	}
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000360 	.word	0x20000360

080015c8 <Modbus_Emission>:

void Modbus_Emission()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d15e      	bne.n	800169c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <Modbus_Emission+0xfc>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <Modbus_Emission+0xfc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015f4:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <Modbus_Emission+0xfc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <Modbus_Emission+0xfc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001606:	461a      	mov	r2, r3
 8001608:	f008 faaa 	bl	8009b60 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <Modbus_Emission+0xfc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3203      	adds	r2, #3
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <Modbus_Emission+0xfc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <Modbus_Emission+0xfc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001632:	3b02      	subs	r3, #2
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fd92 	bl	8001160 <CRC16>
 800163c:	4603      	mov	r3, r0
 800163e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <Modbus_Emission+0xfc>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <Modbus_Emission+0xfc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800164c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800164e:	7939      	ldrb	r1, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	460a      	mov	r2, r1
 8001654:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <Modbus_Emission+0xfc>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001664:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001666:	7979      	ldrb	r1, [r7, #5]
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <Modbus_Emission+0xfc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b20      	cmp	r3, #32
 800167e:	d10d      	bne.n	800169c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <Modbus_Emission+0xfc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <Modbus_Emission+0xfc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <Modbus_Emission+0xfc>)
 8001690:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001692:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001696:	461a      	mov	r2, r3
 8001698:	f007 f8d0 	bl	800883c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <Modbus_Emission+0xfc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <Modbus_Emission+0xfc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <Modbus_Emission+0xfc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <Modbus_Emission+0xfc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2202      	movs	r2, #2
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000360 	.word	0x20000360

080016c8 <EndEffector_Event>:
	Pick,
	Place,
	Read,
} EndEffector_State;

void EndEffector_Event(char EndEffector_State) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 80016d2:	4b55      	ldr	r3, [pc, #340]	; (8001828 <EndEffector_Event+0x160>)
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b20      	cmp	r3, #32
 80016dc:	f040 809c 	bne.w	8001818 <EndEffector_Event+0x150>
		switch (EndEffector_State) {
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	f200 809b 	bhi.w	800181e <EndEffector_Event+0x156>
 80016e8:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <EndEffector_Event+0x28>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	0800181d 	.word	0x0800181d
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	08001735 	.word	0x08001735
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	08001765 	.word	0x08001765
 8001704:	0800177d 	.word	0x0800177d
 8001708:	08001795 	.word	0x08001795
 800170c:	080017ad 	.word	0x080017ad
 8001710:	080017c5 	.word	0x080017c5
 8001714:	080017e5 	.word	0x080017e5
 8001718:	08001805 	.word	0x08001805
		case Init:
			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 800171c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2302      	movs	r3, #2
 8001724:	4a41      	ldr	r2, [pc, #260]	; (800182c <EndEffector_Event+0x164>)
 8001726:	212a      	movs	r1, #42	; 0x2a
 8001728:	483f      	ldr	r0, [pc, #252]	; (8001828 <EndEffector_Event+0x160>)
 800172a:	f003 fc1d 	bl	8004f68 <HAL_I2C_Master_Transmit>
					2, 10000);
			EndEffector_State = Init;
 800172e:	2300      	movs	r3, #0
 8001730:	71fb      	strb	r3, [r7, #7]
			break;
 8001732:	e074      	b.n	800181e <EndEffector_Event+0x156>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 8001734:	f242 7310 	movw	r3, #10000	; 0x2710
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <EndEffector_Event+0x168>)
 800173e:	212a      	movs	r1, #42	; 0x2a
 8001740:	4839      	ldr	r0, [pc, #228]	; (8001828 <EndEffector_Event+0x160>)
 8001742:	f003 fc11 	bl	8004f68 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
			break;
 800174a:	e068      	b.n	800181e <EndEffector_Event+0x156>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 800174c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2304      	movs	r3, #4
 8001754:	4a37      	ldr	r2, [pc, #220]	; (8001834 <EndEffector_Event+0x16c>)
 8001756:	212a      	movs	r1, #42	; 0x2a
 8001758:	4833      	ldr	r0, [pc, #204]	; (8001828 <EndEffector_Event+0x160>)
 800175a:	f003 fc05 	bl	8004f68 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
			break;
 8001762:	e05c      	b.n	800181e <EndEffector_Event+0x156>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001764:	f242 7310 	movw	r3, #10000	; 0x2710
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	4a32      	ldr	r2, [pc, #200]	; (8001838 <EndEffector_Event+0x170>)
 800176e:	212a      	movs	r1, #42	; 0x2a
 8001770:	482d      	ldr	r0, [pc, #180]	; (8001828 <EndEffector_Event+0x160>)
 8001772:	f003 fbf9 	bl	8004f68 <HAL_I2C_Master_Transmit>
					1, 10000);
			EndEffector_State = Init;
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]
			break;
 800177a:	e050      	b.n	800181e <EndEffector_Event+0x156>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 800177c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2304      	movs	r3, #4
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <EndEffector_Event+0x174>)
 8001786:	212a      	movs	r1, #42	; 0x2a
 8001788:	4827      	ldr	r0, [pc, #156]	; (8001828 <EndEffector_Event+0x160>)
 800178a:	f003 fbed 	bl	8004f68 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 10000);
			EndEffector_State = Init;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
			break;
 8001792:	e044      	b.n	800181e <EndEffector_Event+0x156>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 8001794:	f242 7310 	movw	r3, #10000	; 0x2710
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2302      	movs	r3, #2
 800179c:	4a28      	ldr	r2, [pc, #160]	; (8001840 <EndEffector_Event+0x178>)
 800179e:	212a      	movs	r1, #42	; 0x2a
 80017a0:	4821      	ldr	r0, [pc, #132]	; (8001828 <EndEffector_Event+0x160>)
 80017a2:	f003 fbe1 	bl	8004f68 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
			break;
 80017aa:	e038      	b.n	800181e <EndEffector_Event+0x156>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80017ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2302      	movs	r3, #2
 80017b4:	4a23      	ldr	r2, [pc, #140]	; (8001844 <EndEffector_Event+0x17c>)
 80017b6:	212a      	movs	r1, #42	; 0x2a
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <EndEffector_Event+0x160>)
 80017ba:	f003 fbd5 	bl	8004f68 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 10000);
			EndEffector_State = Init;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]
			break;
 80017c2:	e02c      	b.n	800181e <EndEffector_Event+0x156>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 80017c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2302      	movs	r3, #2
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <EndEffector_Event+0x180>)
 80017ce:	212a      	movs	r1, #42	; 0x2a
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <EndEffector_Event+0x160>)
 80017d2:	f003 fbc9 	bl	8004f68 <HAL_I2C_Master_Transmit>
					10000);
			HAL_Delay(2000);
 80017d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017da:	f002 fb6f 	bl	8003ebc <HAL_Delay>
			EndEffector_State = Init;
 80017de:	2300      	movs	r3, #0
 80017e0:	71fb      	strb	r3, [r7, #7]
			break;
 80017e2:	e01c      	b.n	800181e <EndEffector_Event+0x156>
		case Place:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 80017e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <EndEffector_Event+0x184>)
 80017ee:	212a      	movs	r1, #42	; 0x2a
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <EndEffector_Event+0x160>)
 80017f2:	f003 fbb9 	bl	8004f68 <HAL_I2C_Master_Transmit>
					10000);
			HAL_Delay(2000);
 80017f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017fa:	f002 fb5f 	bl	8003ebc <HAL_Delay>
			EndEffector_State = Init;
 80017fe:	2300      	movs	r3, #0
 8001800:	71fb      	strb	r3, [r7, #7]
			break;
 8001802:	e00c      	b.n	800181e <EndEffector_Event+0x156>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 8001804:	f242 7310 	movw	r3, #10000	; 0x2710
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <EndEffector_Event+0x188>)
 800180e:	212a      	movs	r1, #42	; 0x2a
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <EndEffector_Event+0x160>)
 8001812:	f003 fca7 	bl	8005164 <HAL_I2C_Master_Receive>
					10000);
			break;
 8001816:	e002      	b.n	800181e <EndEffector_Event+0x156>
		}

	}
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <EndEffector_Event+0x156>
			break;
 800181c:	bf00      	nop
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000384 	.word	0x20000384
 800182c:	20000200 	.word	0x20000200
 8001830:	20000204 	.word	0x20000204
 8001834:	20000208 	.word	0x20000208
 8001838:	2000020c 	.word	0x2000020c
 800183c:	20000210 	.word	0x20000210
 8001840:	20000214 	.word	0x20000214
 8001844:	20000218 	.word	0x20000218
 8001848:	2000021c 	.word	0x2000021c
 800184c:	20000220 	.word	0x20000220
 8001850:	20000364 	.word	0x20000364

08001854 <JoyStickControl>:
float y_pre_final[9];
float x_final_joy[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float y_final_joy[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
float q;

void JoyStickControl() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af02      	add	r7, sp, #8

	read_pos();
 800185a:	f7ff fafb 	bl	8000e54 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2104      	movs	r1, #4
 8001862:	488f      	ldr	r0, [pc, #572]	; (8001aa0 <JoyStickControl+0x24c>)
 8001864:	f003 fa0a 	bl	8004c7c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8001868:	231e      	movs	r3, #30
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	230a      	movs	r3, #10
 800186e:	4a8d      	ldr	r2, [pc, #564]	; (8001aa4 <JoyStickControl+0x250>)
 8001870:	498d      	ldr	r1, [pc, #564]	; (8001aa8 <JoyStickControl+0x254>)
 8001872:	488e      	ldr	r0, [pc, #568]	; (8001aac <JoyStickControl+0x258>)
 8001874:	f004 feeb 	bl	800664e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	2104      	movs	r1, #4
 800187c:	4888      	ldr	r0, [pc, #544]	; (8001aa0 <JoyStickControl+0x24c>)
 800187e:	f003 f9fd 	bl	8004c7c <HAL_GPIO_WritePin>

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <JoyStickControl+0x250>)
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	2bfe      	cmp	r3, #254	; 0xfe
 8001888:	d113      	bne.n	80018b2 <JoyStickControl+0x5e>
 800188a:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <JoyStickControl+0x25c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d10f      	bne.n	80018b2 <JoyStickControl+0x5e>
		if (state_motor == 1) {
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <JoyStickControl+0x260>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d103      	bne.n	80018a2 <JoyStickControl+0x4e>
			state_motor = 0;
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <JoyStickControl+0x260>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80018a0:	e05e      	b.n	8001960 <JoyStickControl+0x10c>
		} else if (state_motor == 0) {
 80018a2:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <JoyStickControl+0x260>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d15a      	bne.n	8001960 <JoyStickControl+0x10c>
			state_motor = 1;
 80018aa:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <JoyStickControl+0x260>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80018b0:	e056      	b.n	8001960 <JoyStickControl+0x10c>
		}
	} else if (RX[4] == 0xbf && button_last == 0xFF) { //X Button
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <JoyStickControl+0x250>)
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	2bbf      	cmp	r3, #191	; 0xbf
 80018b8:	d143      	bne.n	8001942 <JoyStickControl+0xee>
 80018ba:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <JoyStickControl+0x264>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d13f      	bne.n	8001942 <JoyStickControl+0xee>

		if (y_count >= 2) {
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <JoyStickControl+0x268>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d92b      	bls.n	8001922 <JoyStickControl+0xce>

			Pick_Tray_Origin_x= 500;
 80018ca:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <JoyStickControl+0x26c>)
 80018cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Pick_Tray_Origin_y = 2000;
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <JoyStickControl+0x26c>)
 80018d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Pick_Tray_Origin_Orientation = 18000;;
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <JoyStickControl+0x26c>)
 80018e0:	f244 6250 	movw	r2, #18000	; 0x4650
 80018e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			Place_Tray_Origin_x = -500;
 80018e8:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <JoyStickControl+0x26c>)
 80018ea:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80018ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Place_Tray_Origin_y = -2000;
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <JoyStickControl+0x26c>)
 80018f4:	f64f 0230 	movw	r2, #63536	; 0xf830
 80018f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Place_Tray_Origin_Orientation = 9000;;
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <JoyStickControl+0x26c>)
 80018fe:	f242 3228 	movw	r2, #9000	; 0x2328
 8001902:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			y_axis_Moving_Status= 0;
 8001906:	4b6e      	ldr	r3, [pc, #440]	; (8001ac0 <JoyStickControl+0x26c>)
 8001908:	2200      	movs	r2, #0
 800190a:	841a      	strh	r2, [r3, #32]
			State = IDLE;
 800190c:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <JoyStickControl+0x270>)
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
			y_count = 0;
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <JoyStickControl+0x268>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]

			motor(0, 0);
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fac0 	bl	8000ea0 <motor>
		if (y_count >= 2) {
 8001920:	e01f      	b.n	8001962 <JoyStickControl+0x10e>
		} else {
			y_count += 1;
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <JoyStickControl+0x268>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <JoyStickControl+0x268>)
 800192c:	701a      	strb	r2, [r3, #0]
			y_c[y_count] = PosY;
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <JoyStickControl+0x268>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <JoyStickControl+0x274>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4964      	ldr	r1, [pc, #400]	; (8001acc <JoyStickControl+0x278>)
 800193a:	0083      	lsls	r3, r0, #2
 800193c:	440b      	add	r3, r1
 800193e:	601a      	str	r2, [r3, #0]
		if (y_count >= 2) {
 8001940:	e00f      	b.n	8001962 <JoyStickControl+0x10e>
		}


	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <JoyStickControl+0x250>)
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	2bef      	cmp	r3, #239	; 0xef
 8001948:	d10b      	bne.n	8001962 <JoyStickControl+0x10e>
 800194a:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <JoyStickControl+0x264>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d107      	bne.n	8001962 <JoyStickControl+0x10e>
		workState = 1;
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <JoyStickControl+0x27c>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 8001958:	4b5a      	ldr	r3, [pc, #360]	; (8001ac4 <JoyStickControl+0x270>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e000      	b.n	8001962 <JoyStickControl+0x10e>
		if (state_motor == 1) {
 8001960:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <JoyStickControl+0x260>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <JoyStickControl+0x11c>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d046      	beq.n	80019fc <JoyStickControl+0x1a8>
 800196e:	e08c      	b.n	8001a8a <JoyStickControl+0x236>
	case 0:
		if (RX[3] == 0xfe) { //Not be push
 8001970:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <JoyStickControl+0x250>)
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	2bfe      	cmp	r3, #254	; 0xfe
 8001976:	d108      	bne.n	800198a <JoyStickControl+0x136>
			motor(0, 1);
 8001978:	2101      	movs	r1, #1
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fa90 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <JoyStickControl+0x26c>)
 8001982:	2200      	movs	r2, #0
 8001984:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		else if (RX[3] == 0xde) { //right
			x_axis_Moving_Status = 4;
			motor(0, 1);
		}

		break;
 8001988:	e07e      	b.n	8001a88 <JoyStickControl+0x234>
		else if (RX[3] == 0xee) { //UP
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <JoyStickControl+0x250>)
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	2bee      	cmp	r3, #238	; 0xee
 8001990:	d10b      	bne.n	80019aa <JoyStickControl+0x156>
			x_axis_Moving_Status= 0;
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <JoyStickControl+0x26c>)
 8001994:	2200      	movs	r2, #0
 8001996:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, -1);
 800199a:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <JoyStickControl+0x280>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f04f 31ff 	mov.w	r1, #4294967295
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa7c 	bl	8000ea0 <motor>
		break;
 80019a8:	e06e      	b.n	8001a88 <JoyStickControl+0x234>
		else if (RX[3] == 0xbe) { //Down
 80019aa:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <JoyStickControl+0x250>)
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	2bbe      	cmp	r3, #190	; 0xbe
 80019b0:	d10a      	bne.n	80019c8 <JoyStickControl+0x174>
			x_axis_Moving_Status= 0;
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <JoyStickControl+0x26c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, 1);
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <JoyStickControl+0x280>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fa6d 	bl	8000ea0 <motor>
		break;
 80019c6:	e05f      	b.n	8001a88 <JoyStickControl+0x234>
		else if (RX[3] == 0x7e) { //left
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <JoyStickControl+0x250>)
 80019ca:	78db      	ldrb	r3, [r3, #3]
 80019cc:	2b7e      	cmp	r3, #126	; 0x7e
 80019ce:	d108      	bne.n	80019e2 <JoyStickControl+0x18e>
			x_axis_Moving_Status = 8;
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <JoyStickControl+0x26c>)
 80019d2:	2208      	movs	r2, #8
 80019d4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 80019d8:	2101      	movs	r1, #1
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fa60 	bl	8000ea0 <motor>
		break;
 80019e0:	e052      	b.n	8001a88 <JoyStickControl+0x234>
		else if (RX[3] == 0xde) { //right
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <JoyStickControl+0x250>)
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	2bde      	cmp	r3, #222	; 0xde
 80019e8:	d14e      	bne.n	8001a88 <JoyStickControl+0x234>
			x_axis_Moving_Status = 4;
 80019ea:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <JoyStickControl+0x26c>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 80019f2:	2101      	movs	r1, #1
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fa53 	bl	8000ea0 <motor>
		break;
 80019fa:	e045      	b.n	8001a88 <JoyStickControl+0x234>

		case 1:
		if (RX[3] == 0xfe) { //Not be push
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <JoyStickControl+0x250>)
 80019fe:	78db      	ldrb	r3, [r3, #3]
 8001a00:	2bfe      	cmp	r3, #254	; 0xfe
 8001a02:	d108      	bne.n	8001a16 <JoyStickControl+0x1c2>
			motor(0, 1);
 8001a04:	2101      	movs	r1, #1
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fa4a 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <JoyStickControl+0x26c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001a14:	e039      	b.n	8001a8a <JoyStickControl+0x236>
		}
		else if (RX[3] == 0xee) { //UP
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <JoyStickControl+0x250>)
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	2bee      	cmp	r3, #238	; 0xee
 8001a1c:	d10b      	bne.n	8001a36 <JoyStickControl+0x1e2>
			x_axis_Moving_Status= 0;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <JoyStickControl+0x26c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, -1);
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <JoyStickControl+0x284>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa36 	bl	8000ea0 <motor>
 8001a34:	e029      	b.n	8001a8a <JoyStickControl+0x236>
		}
		else if (RX[3] == 0xbe) { //Down
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <JoyStickControl+0x250>)
 8001a38:	78db      	ldrb	r3, [r3, #3]
 8001a3a:	2bbe      	cmp	r3, #190	; 0xbe
 8001a3c:	d10a      	bne.n	8001a54 <JoyStickControl+0x200>
			x_axis_Moving_Status= 0;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <JoyStickControl+0x26c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, 1);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <JoyStickControl+0x284>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fa27 	bl	8000ea0 <motor>
 8001a52:	e01a      	b.n	8001a8a <JoyStickControl+0x236>
		}
		else if (RX[3] == 0x7e) { //left
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <JoyStickControl+0x250>)
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	2b7e      	cmp	r3, #126	; 0x7e
 8001a5a:	d108      	bne.n	8001a6e <JoyStickControl+0x21a>
			x_axis_Moving_Status = 8;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <JoyStickControl+0x26c>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fa1a 	bl	8000ea0 <motor>
 8001a6c:	e00d      	b.n	8001a8a <JoyStickControl+0x236>
		}
		else if (RX[3] == 0xde) { //right
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <JoyStickControl+0x250>)
 8001a70:	78db      	ldrb	r3, [r3, #3]
 8001a72:	2bde      	cmp	r3, #222	; 0xde
 8001a74:	d109      	bne.n	8001a8a <JoyStickControl+0x236>
			x_axis_Moving_Status = 4;
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <JoyStickControl+0x26c>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fa0d 	bl	8000ea0 <motor>
 8001a86:	e000      	b.n	8001a8a <JoyStickControl+0x236>
		break;
 8001a88:	bf00      	nop
		}

	}
	RX_last = RX[4];
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <JoyStickControl+0x250>)
 8001a8c:	791a      	ldrb	r2, [r3, #4]
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <JoyStickControl+0x25c>)
 8001a90:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <JoyStickControl+0x250>)
 8001a94:	791a      	ldrb	r2, [r3, #4]
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <JoyStickControl+0x264>)
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	20000368 	.word	0x20000368
 8001aa8:	20000224 	.word	0x20000224
 8001aac:	200003d8 	.word	0x200003d8
 8001ab0:	20000374 	.word	0x20000374
 8001ab4:	20000373 	.word	0x20000373
 8001ab8:	20000375 	.word	0x20000375
 8001abc:	20000376 	.word	0x20000376
 8001ac0:	20000e08 	.word	0x20000e08
 8001ac4:	200002bc 	.word	0x200002bc
 8001ac8:	20000fb0 	.word	0x20000fb0
 8001acc:	20000378 	.word	0x20000378
 8001ad0:	20000372 	.word	0x20000372
 8001ad4:	2000022e 	.word	0x2000022e
 8001ad8:	20000230 	.word	0x20000230

08001adc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae0:	f3bf 8f4f 	dsb	sy
}
 8001ae4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__NVIC_SystemReset+0x24>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aee:	4904      	ldr	r1, [pc, #16]	; (8001b00 <__NVIC_SystemReset+0x24>)
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_SystemReset+0x28>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001af6:	f3bf 8f4f 	dsb	sy
}
 8001afa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <__NVIC_SystemReset+0x20>
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	05fa0004 	.word	0x05fa0004

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b0c:	b098      	sub	sp, #96	; 0x60
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b10:	f002 f962 	bl	8003dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b14:	f000 fb76 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b18:	f000 fe9c 	bl	8002854 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b1c:	f000 fe7a 	bl	8002814 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b20:	f000 fe20 	bl	8002764 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b24:	f000 fcda 	bl	80024dc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001b28:	f000 fc38 	bl	800239c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b2c:	f000 fd2a 	bl	8002584 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001b30:	f000 fe44 	bl	80027bc <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001b34:	f000 fd74 	bl	8002620 <MX_TIM5_Init>
  MX_SPI3_Init();
 8001b38:	f000 fbfa 	bl	8002330 <MX_SPI3_Init>
  MX_TIM11_Init();
 8001b3c:	f000 fdbe 	bl	80026bc <MX_TIM11_Init>
  MX_I2C2_Init();
 8001b40:	f000 fbc8 	bl	80022d4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f7ff fdbf 	bl	80016c8 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	48b0      	ldr	r0, [pc, #704]	; (8001e10 <main+0x308>)
 8001b4e:	f005 fc01 	bl	8007354 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001b52:	48b0      	ldr	r0, [pc, #704]	; (8001e14 <main+0x30c>)
 8001b54:	f005 f89e 	bl	8006c94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001b58:	48af      	ldr	r0, [pc, #700]	; (8001e18 <main+0x310>)
 8001b5a:	f005 f841 	bl	8006be0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	48ad      	ldr	r0, [pc, #692]	; (8001e18 <main+0x310>)
 8001b62:	f005 f9c5 	bl	8006ef0 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8001b66:	48ad      	ldr	r0, [pc, #692]	; (8001e1c <main+0x314>)
 8001b68:	f005 f894 	bl	8006c94 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8001b6c:	4bac      	ldr	r3, [pc, #688]	; (8001e20 <main+0x318>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe fcb5 	bl	80004e4 <__aeabi_ul2d>
 8001b7a:	a3a3      	add	r3, pc, #652	; (adr r3, 8001e08 <main+0x300>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fe10 	bl	80007a4 <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	49a6      	ldr	r1, [pc, #664]	; (8001e24 <main+0x31c>)
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 8001b8e:	4ba4      	ldr	r3, [pc, #656]	; (8001e20 <main+0x318>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe fca4 	bl	80004e4 <__aeabi_ul2d>
 8001b9c:	a39a      	add	r3, pc, #616	; (adr r3, 8001e08 <main+0x300>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fdff 	bl	80007a4 <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	499f      	ldr	r1, [pc, #636]	; (8001e28 <main+0x320>)
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 8001bb0:	4b9b      	ldr	r3, [pc, #620]	; (8001e20 <main+0x318>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe fc93 	bl	80004e4 <__aeabi_ul2d>
 8001bbe:	a392      	add	r3, pc, #584	; (adr r3, 8001e08 <main+0x300>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fdee 	bl	80007a4 <__aeabi_ddiv>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4997      	ldr	r1, [pc, #604]	; (8001e2c <main+0x324>)
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 8001bd2:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <main+0x318>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe fc82 	bl	80004e4 <__aeabi_ul2d>
 8001be0:	a389      	add	r3, pc, #548	; (adr r3, 8001e08 <main+0x300>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fddd 	bl	80007a4 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4990      	ldr	r1, [pc, #576]	; (8001e30 <main+0x328>)
 8001bf0:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 8001bf4:	4b8a      	ldr	r3, [pc, #552]	; (8001e20 <main+0x318>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fc71 	bl	80004e4 <__aeabi_ul2d>
 8001c02:	a381      	add	r3, pc, #516	; (adr r3, 8001e08 <main+0x300>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fdcc 	bl	80007a4 <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4988      	ldr	r1, [pc, #544]	; (8001e34 <main+0x32c>)
 8001c12:	e9c1 2300 	strd	r2, r3, [r1]

	hmodbus.huart = &huart2;
 8001c16:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <main+0x330>)
 8001c18:	4a88      	ldr	r2, [pc, #544]	; (8001e3c <main+0x334>)
 8001c1a:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8001c1c:	4b86      	ldr	r3, [pc, #536]	; (8001e38 <main+0x330>)
 8001c1e:	4a88      	ldr	r2, [pc, #544]	; (8001e40 <main+0x338>)
 8001c20:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001c22:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <main+0x330>)
 8001c24:	2215      	movs	r2, #21
 8001c26:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001c28:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <main+0x330>)
 8001c2a:	22c8      	movs	r2, #200	; 0xc8
 8001c2c:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001c2e:	4985      	ldr	r1, [pc, #532]	; (8001e44 <main+0x33c>)
 8001c30:	4881      	ldr	r0, [pc, #516]	; (8001e38 <main+0x330>)
 8001c32:	f7ff fa3f 	bl	80010b4 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 8001c36:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <main+0x340>)
 8001c38:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	6023      	str	r3, [r4, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 8001c46:	4b81      	ldr	r3, [pc, #516]	; (8001e4c <main+0x344>)
 8001c48:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	6023      	str	r3, [r4, #0]
			.LaserOn = 1, .GripperPower = 2, .GripperPicking = 6,
			.GripperPlacing = 10 };

	struct yaxisMovingStatusBit yaxisMovingStatusData =
 8001c56:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <main+0x348>)
 8001c58:	f107 0418 	add.w	r4, r7, #24
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c66:	e884 0003 	stmia.w	r4, {r0, r1}
			{ .JogPick = 1, .JogPlease = 2, .Home = 4, .GoPick = 8, .GoPlace =
					16, .Gopoint = 32 };

	struct xaxisMovingStatusBit xaxisMovingStatusData = { .Home = 1, .Run = 2,
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <main+0x34c>)
 8001c6c:	f107 0408 	add.w	r4, r7, #8
 8001c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.JogLeft = 4, .JogRight = 8 };

	x_axis_Actual_Position= 0;
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <main+0x33c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	x_axis_Target_Speed= 2500;
 8001c7e:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <main+0x33c>)
 8001c80:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c84:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	x_axis_Target_Acceleration_Time= 2;
 8001c88:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <main+0x33c>)
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  /* USER CODE BEGIN WHILE */
	while (1) {

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		int64_t GetTicku = micros();
 8001c90:	f000 feb0 	bl	80029f4 <micros>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		Modbus_Protocal_Worker();
 8001c9c:	f7ff fa96 	bl	80011cc <Modbus_Protocal_Worker>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 8001ca0:	f002 f900 	bl	8003ea4 <HAL_GetTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4698      	mov	r8, r3
 8001caa:	4691      	mov	r9, r2
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <main+0x350>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	4590      	cmp	r8, r2
 8001cb4:	eb79 0303 	sbcs.w	r3, r9, r3
 8001cb8:	d323      	bcc.n	8001d02 <main+0x1fa>
			timestamp_heartbeat = HAL_GetTick() + 200;
 8001cba:	f002 f8f3 	bl	8003ea4 <HAL_GetTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	33c8      	adds	r3, #200	; 0xc8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <main+0x350>)
 8001cca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cce:	e9c3 1200 	strd	r1, r2, [r3]

			Heartbeat_Protocol= 22881;
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <main+0x33c>)
 8001cd4:	f645 1261 	movw	r2, #22881	; 0x5961
 8001cd8:	801a      	strh	r2, [r3, #0]

			y_axis_Actual_Position= (int32_t)(PosY* 10);
 8001cda:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <main+0x354>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cec:	ee17 3a90 	vmov	r3, s15
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <main+0x33c>)
 8001cf4:	845a      	strh	r2, [r3, #34]	; 0x22
			y_axis_Actual_Speed= 0;
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <main+0x33c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	849a      	strh	r2, [r3, #36]	; 0x24
			y_axis_Actual_Acceleration= 0;
 8001cfc:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <main+0x33c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	84da      	strh	r2, [r3, #38]	; 0x26
		}

		switch (State) {
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <main+0x358>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	f200 826f 	bhi.w	80021ea <main+0x6e2>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <main+0x20c>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d39 	.word	0x08001d39
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	08001d59 	.word	0x08001d59
 8001d20:	08001fa1 	.word	0x08001fa1
 8001d24:	08001fa7 	.word	0x08001fa7
 8001d28:	080021eb 	.word	0x080021eb
 8001d2c:	08001fad 	.word	0x08001fad
 8001d30:	08002097 	.word	0x08002097
 8001d34:	0800209f 	.word	0x0800209f

		case INIT:
			State = INIT_HOMING;
 8001d38:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <main+0x358>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
			break;
 8001d3e:	e254      	b.n	80021ea <main+0x6e2>

		case INIT_HOMING:
			y_axis_Moving_Status= yaxisMovingStatusData.Home;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <main+0x33c>)
 8001d46:	841a      	strh	r2, [r3, #32]
			x_axis_Moving_Status = xaxisMovingStatusData.Home;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <main+0x33c>)
 8001d4e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			Init_Homing();
 8001d52:	f7ff f8cf 	bl	8000ef4 <Init_Homing>
			break;
 8001d56:	e248      	b.n	80021ea <main+0x6e2>

			case IDLE: //HOME

			if (End_Effector_Status == EndEffectorStatusData.LaserOn) {
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <main+0x33c>)
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d103      	bne.n	8001d6c <main+0x264>
				EndEffector_Event(Test_Start);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff fcaf 	bl	80016c8 <EndEffector_Event>
 8001d6a:	e012      	b.n	8001d92 <main+0x28a>
			} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <main+0x33c>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	461a      	mov	r2, r3
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d103      	bne.n	8001d80 <main+0x278>
				EndEffector_Event(Test_Stop);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fca5 	bl	80016c8 <EndEffector_Event>
 8001d7e:	e008      	b.n	8001d92 <main+0x28a>
			} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <main+0x33c>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	461a      	mov	r2, r3
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d102      	bne.n	8001d92 <main+0x28a>
				EndEffector_Event(Run_Mode);
 8001d8c:	2006      	movs	r0, #6
 8001d8e:	f7ff fc9b 	bl	80016c8 <EndEffector_Event>
			}

			if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <main+0x33c>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10a      	bne.n	8001db4 <main+0x2ac>
				EndEffector_Event(Run_Mode);
 8001d9e:	2006      	movs	r0, #6
 8001da0:	f7ff fc92 	bl	80016c8 <EndEffector_Event>
				EndEffector_Event(Pick);
 8001da4:	2008      	movs	r0, #8
 8001da6:	f7ff fc8f 	bl	80016c8 <EndEffector_Event>
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <main+0x33c>)
 8001db0:	809a      	strh	r2, [r3, #4]
 8001db2:	e00f      	b.n	8001dd4 <main+0x2cc>
			} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <main+0x33c>)
 8001db6:	889b      	ldrh	r3, [r3, #4]
 8001db8:	461a      	mov	r2, r3
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d109      	bne.n	8001dd4 <main+0x2cc>
				EndEffector_Event(Run_Mode);
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	f7ff fc81 	bl	80016c8 <EndEffector_Event>
				EndEffector_Event(Place);
 8001dc6:	2009      	movs	r0, #9
 8001dc8:	f7ff fc7e 	bl	80016c8 <EndEffector_Event>
				End_Effector_Status = EndEffectorStatusData.GripperPower;
 8001dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <main+0x33c>)
 8001dd2:	809a      	strh	r2, [r3, #4]
			}

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <main+0x33c>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d141      	bne.n	8001e64 <main+0x35c>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <main+0x33c>)
 8001de6:	809a      	strh	r2, [r3, #4]
				EndEffector_Event(Test_Start);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fc6d 	bl	80016c8 <EndEffector_Event>
				Base_System_Status = 0;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <main+0x33c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	805a      	strh	r2, [r3, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPick;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <main+0x33c>)
 8001dfa:	841a      	strh	r2, [r3, #32]
				State = SETPICKTRAY;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <main+0x358>)
 8001dfe:	2203      	movs	r2, #3
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e046      	b.n	8001e92 <main+0x38a>
 8001e04:	f3af 8000 	nop.w
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	412e8480 	.word	0x412e8480
 8001e10:	200004e4 	.word	0x200004e4
 8001e14:	20000598 	.word	0x20000598
 8001e18:	20000430 	.word	0x20000430
 8001e1c:	2000064c 	.word	0x2000064c
 8001e20:	20000238 	.word	0x20000238
 8001e24:	20000248 	.word	0x20000248
 8001e28:	20000250 	.word	0x20000250
 8001e2c:	20000258 	.word	0x20000258
 8001e30:	20000260 	.word	0x20000260
 8001e34:	20000268 	.word	0x20000268
 8001e38:	20000930 	.word	0x20000930
 8001e3c:	200007b4 	.word	0x200007b4
 8001e40:	20000700 	.word	0x20000700
 8001e44:	20000e08 	.word	0x20000e08
 8001e48:	08009d60 	.word	0x08009d60
 8001e4c:	08009d74 	.word	0x08009d74
 8001e50:	08009d88 	.word	0x08009d88
 8001e54:	08009da0 	.word	0x08009da0
 8001e58:	20000fb8 	.word	0x20000fb8
 8001e5c:	20000fb0 	.word	0x20000fb0
 8001e60:	200002bc 	.word	0x200002bc
			} else if(Base_System_Status == BaseSystemStatusData.SetPlaceTray) {
 8001e64:	4bb2      	ldr	r3, [pc, #712]	; (8002130 <main+0x628>)
 8001e66:	885b      	ldrh	r3, [r3, #2]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d110      	bne.n	8001e92 <main+0x38a>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4bae      	ldr	r3, [pc, #696]	; (8002130 <main+0x628>)
 8001e76:	809a      	strh	r2, [r3, #4]
				EndEffector_Event(Test_Start);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fc25 	bl	80016c8 <EndEffector_Event>
				Base_System_Status = 0;
 8001e7e:	4bac      	ldr	r3, [pc, #688]	; (8002130 <main+0x628>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	805a      	strh	r2, [r3, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPlease;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <main+0x628>)
 8001e8a:	841a      	strh	r2, [r3, #32]
				State = SETPLACETRAY;
 8001e8c:	4ba9      	ldr	r3, [pc, #676]	; (8002134 <main+0x62c>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	701a      	strb	r2, [r3, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.RunPointMode) {
 8001e92:	4ba7      	ldr	r3, [pc, #668]	; (8002130 <main+0x628>)
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d166      	bne.n	8001f6c <main+0x464>
				Base_System_Status = 0;
 8001e9e:	4ba4      	ldr	r3, [pc, #656]	; (8002130 <main+0x628>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	805a      	strh	r2, [r3, #2]

				x_axis_Target_Position = Goal_Point_x;
 8001ea4:	4ba2      	ldr	r3, [pc, #648]	; (8002130 <main+0x628>)
 8001ea6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8001eaa:	4ba1      	ldr	r3, [pc, #644]	; (8002130 <main+0x628>)
 8001eac:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b9e      	ldr	r3, [pc, #632]	; (8002130 <main+0x628>)
 8001eb6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

				pos_i = PosY;
 8001eba:	4b9f      	ldr	r3, [pc, #636]	; (8002138 <main+0x630>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a9f      	ldr	r2, [pc, #636]	; (800213c <main+0x634>)
 8001ec0:	6013      	str	r3, [r2, #0]
				if(Goal_Point_y >= 0 && Goal_Point_y <= 3500) {
 8001ec2:	4b9b      	ldr	r3, [pc, #620]	; (8002130 <main+0x628>)
 8001ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ec8:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d80e      	bhi.n	8001eee <main+0x3e6>
					pos_f = (float)Goal_Point_y/10;
 8001ed0:	4b97      	ldr	r3, [pc, #604]	; (8002130 <main+0x628>)
 8001ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ede:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee6:	4b96      	ldr	r3, [pc, #600]	; (8002140 <main+0x638>)
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
 8001eec:	e01e      	b.n	8001f2c <main+0x424>
				} else if(Goal_Point_y >= 65535-3500 && Goal_Point_y <= 65535) {
 8001eee:	4b90      	ldr	r3, [pc, #576]	; (8002130 <main+0x628>)
 8001ef0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ef4:	f24f 2252 	movw	r2, #62034	; 0xf252
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d917      	bls.n	8001f2c <main+0x424>
					pos_f = -(float)(65536%Goal_Point_y)/10;
 8001efc:	4b8c      	ldr	r3, [pc, #560]	; (8002130 <main+0x628>)
 8001efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001f02:	461a      	mov	r2, r3
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	eeb1 7a67 	vneg.f32	s14, s15
 8001f1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	4b86      	ldr	r3, [pc, #536]	; (8002140 <main+0x638>)
 8001f28:	edc3 7a00 	vstr	s15, [r3]
				}
				Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8001f2c:	4b83      	ldr	r3, [pc, #524]	; (800213c <main+0x634>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fab5 	bl	80004a0 <__aeabi_f2d>
 8001f36:	4604      	mov	r4, r0
 8001f38:	460d      	mov	r5, r1
 8001f3a:	4b81      	ldr	r3, [pc, #516]	; (8002140 <main+0x638>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe faae 	bl	80004a0 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	ed9f 3b71 	vldr	d3, [pc, #452]	; 8002110 <main+0x608>
 8001f4c:	ed9f 2b72 	vldr	d2, [pc, #456]	; 8002118 <main+0x610>
 8001f50:	ec43 2b11 	vmov	d1, r2, r3
 8001f54:	ec45 4b10 	vmov	d0, r4, r5
 8001f58:	f000 ff22 	bl	8002da0 <Trajectory_Gen>
				y_axis_Moving_Status = yaxisMovingStatusData.Gopoint;
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b73      	ldr	r3, [pc, #460]	; (8002130 <main+0x628>)
 8001f62:	841a      	strh	r2, [r3, #32]

				State = RUNPOINTMODE;
 8001f64:	4b73      	ldr	r3, [pc, #460]	; (8002134 <main+0x62c>)
 8001f66:	2206      	movs	r2, #6
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e00b      	b.n	8001f84 <main+0x47c>

			} else if(Base_System_Status == BaseSystemStatusData.RunTrayMode) {
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <main+0x628>)
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	461a      	mov	r2, r3
 8001f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d105      	bne.n	8001f84 <main+0x47c>

				Base_System_Status = 0;
 8001f78:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <main+0x628>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	805a      	strh	r2, [r3, #2]

				State = RUNTRAYMODE;
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <main+0x62c>)
 8001f80:	2205      	movs	r2, #5
 8001f82:	701a      	strb	r2, [r3, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.Home) {
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <main+0x628>)
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 812b 	bne.w	80021e8 <main+0x6e0>
				Base_System_Status = 0;
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <main+0x628>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	805a      	strh	r2, [r3, #2]
				State = INIT_HOMING;
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <main+0x62c>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f9e:	e123      	b.n	80021e8 <main+0x6e0>

			case SETPICKTRAY:
			JoyStickControl();
 8001fa0:	f7ff fc58 	bl	8001854 <JoyStickControl>
			break;
 8001fa4:	e121      	b.n	80021ea <main+0x6e2>

			case SETPLACETRAY:
			JoyStickControl();
 8001fa6:	f7ff fc55 	bl	8001854 <JoyStickControl>
			break;
 8001faa:	e11e      	b.n	80021ea <main+0x6e2>

			case RUNPOINTMODE:
			if (GetTicku >= timestamp_traject) {
 8001fac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fb0:	4b64      	ldr	r3, [pc, #400]	; (8002144 <main+0x63c>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	eb71 0303 	sbcs.w	r3, r1, r3
 8001fbc:	d31c      	bcc.n	8001ff8 <main+0x4f0>
				timestamp_traject = GetTicku + traject_us;
 8001fbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <main+0x640>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	eb10 0a02 	adds.w	sl, r0, r2
 8001fcc:	eb41 0b03 	adc.w	fp, r1, r3
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <main+0x63c>)
 8001fd2:	e9c3 ab00 	strd	sl, fp, [r3]
				Trajectory_Eva();
 8001fd6:	f001 f837 	bl	8003048 <Trajectory_Eva>
				read_pos();
 8001fda:	f7fe ff3b 	bl	8000e54 <read_pos>
				PID(x);
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <main+0x644>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd62 	bl	8000ab0 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	ee00 3a10 	vmov	s0, r3
 8001ff2:	f000 fd39 	bl	8002a68 <PID>

				pos_i = PosY;
				y_axis_Moving_Status = 0;
				State = IDLE;
			}
			break;
 8001ff6:	e0f8      	b.n	80021ea <main+0x6e2>
			} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 8001ff8:	4b51      	ldr	r3, [pc, #324]	; (8002140 <main+0x638>)
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <main+0x630>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	ee17 0a90 	vmov	r0, s15
 800200c:	f7fe fa48 	bl	80004a0 <__aeabi_f2d>
 8002010:	a343      	add	r3, pc, #268	; (adr r3, 8002120 <main+0x618>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fd17 	bl	8000a48 <__aeabi_dcmple>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d100      	bne.n	8002022 <main+0x51a>
			break;
 8002020:	e0e3      	b.n	80021ea <main+0x6e2>
			} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <main+0x638>)
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <main+0x630>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002032:	ee17 0a90 	vmov	r0, s15
 8002036:	f7fe fa33 	bl	80004a0 <__aeabi_f2d>
 800203a:	a33b      	add	r3, pc, #236	; (adr r3, 8002128 <main+0x620>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fd0c 	bl	8000a5c <__aeabi_dcmpge>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d100      	bne.n	800204c <main+0x544>
			break;
 800204a:	e0ce      	b.n	80021ea <main+0x6e2>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <main+0x648>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
				Intregral = 0;
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <main+0x64c>)
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
				Dutyfeedback = 0;
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <main+0x650>)
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
				v = 0;
 8002064:	493d      	ldr	r1, [pc, #244]	; (800215c <main+0x654>)
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9c1 2300 	strd	r2, r3, [r1]
				a = 0;
 8002072:	493b      	ldr	r1, [pc, #236]	; (8002160 <main+0x658>)
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c1 2300 	strd	r2, r3, [r1]
				pos_i = PosY;
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <main+0x630>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <main+0x634>)
 8002086:	6013      	str	r3, [r2, #0]
				y_axis_Moving_Status = 0;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <main+0x628>)
 800208a:	2200      	movs	r2, #0
 800208c:	841a      	strh	r2, [r3, #32]
				State = IDLE;
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <main+0x62c>)
 8002090:	2202      	movs	r2, #2
 8002092:	701a      	strb	r2, [r3, #0]
			break;
 8002094:	e0a9      	b.n	80021ea <main+0x6e2>

			case RUNTRAYMODE:
			break;

			case EMERGENCY_LIMIT:
			state_IT = 1;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <main+0x65c>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
			break;
 800209c:	e0a5      	b.n	80021ea <main+0x6e2>

			case SENSOR_CHECK:
			read_pos();
 800209e:	f7fe fed9 	bl	8000e54 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,Photoelectric_sensor_1_Pin);
 80020a2:	2140      	movs	r1, #64	; 0x40
 80020a4:	4830      	ldr	r0, [pc, #192]	; (8002168 <main+0x660>)
 80020a6:	f002 fdd1 	bl	8004c4c <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <main+0x664>)
 80020b0:	601a      	str	r2, [r3, #0]
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,Photoelectric_sensor_2_Pin);
 80020b2:	2104      	movs	r1, #4
 80020b4:	482e      	ldr	r0, [pc, #184]	; (8002170 <main+0x668>)
 80020b6:	f002 fdc9 	bl	8004c4c <HAL_GPIO_ReadPin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <main+0x664>)
 80020c0:	605a      	str	r2, [r3, #4]
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,Photoelectric_sensor_3_Pin);
 80020c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c6:	482a      	ldr	r0, [pc, #168]	; (8002170 <main+0x668>)
 80020c8:	f002 fdc0 	bl	8004c4c <HAL_GPIO_ReadPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <main+0x664>)
 80020d2:	609a      	str	r2, [r3, #8]
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port,Emergency_Pin);
 80020d4:	2108      	movs	r1, #8
 80020d6:	4824      	ldr	r0, [pc, #144]	; (8002168 <main+0x660>)
 80020d8:	f002 fdb8 	bl	8004c4c <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <main+0x664>)
 80020e2:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <main+0x664>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d145      	bne.n	8002178 <main+0x670>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80020ec:	2201      	movs	r2, #1
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	4820      	ldr	r0, [pc, #128]	; (8002174 <main+0x66c>)
 80020f2:	f002 fdc3 	bl	8004c7c <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80020f6:	2200      	movs	r2, #0
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	481e      	ldr	r0, [pc, #120]	; (8002174 <main+0x66c>)
 80020fc:	f002 fdbe 	bl	8004c7c <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002100:	2200      	movs	r2, #0
 8002102:	2120      	movs	r1, #32
 8002104:	481b      	ldr	r0, [pc, #108]	; (8002174 <main+0x66c>)
 8002106:	f002 fdb9 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
						RESET);
			}
			break;
 800210a:	e06e      	b.n	80021ea <main+0x6e2>
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40b04100 	.word	0x40b04100
 8002118:	00000000 	.word	0x00000000
 800211c:	408d8800 	.word	0x408d8800
 8002120:	9999999a 	.word	0x9999999a
 8002124:	3fc99999 	.word	0x3fc99999
 8002128:	9999999a 	.word	0x9999999a
 800212c:	bfc99999 	.word	0xbfc99999
 8002130:	20000e08 	.word	0x20000e08
 8002134:	200002bc 	.word	0x200002bc
 8002138:	20000fb0 	.word	0x20000fb0
 800213c:	200008fc 	.word	0x200008fc
 8002140:	20000900 	.word	0x20000900
 8002144:	20000fc0 	.word	0x20000fc0
 8002148:	20000238 	.word	0x20000238
 800214c:	20000908 	.word	0x20000908
 8002150:	20000430 	.word	0x20000430
 8002154:	20000924 	.word	0x20000924
 8002158:	20000920 	.word	0x20000920
 800215c:	20000910 	.word	0x20000910
 8002160:	20000918 	.word	0x20000918
 8002164:	20000904 	.word	0x20000904
 8002168:	40020800 	.word	0x40020800
 800216c:	20000f98 	.word	0x20000f98
 8002170:	40020400 	.word	0x40020400
 8002174:	40020000 	.word	0x40020000
			} else if (GPIO_test.ramp == 2) {
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <main+0x6f0>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d10f      	bne.n	80021a0 <main+0x698>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002180:	2200      	movs	r2, #0
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	481d      	ldr	r0, [pc, #116]	; (80021fc <main+0x6f4>)
 8002186:	f002 fd79 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 800218a:	2201      	movs	r2, #1
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	481b      	ldr	r0, [pc, #108]	; (80021fc <main+0x6f4>)
 8002190:	f002 fd74 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002194:	2200      	movs	r2, #0
 8002196:	2120      	movs	r1, #32
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <main+0x6f4>)
 800219a:	f002 fd6f 	bl	8004c7c <HAL_GPIO_WritePin>
			break;
 800219e:	e024      	b.n	80021ea <main+0x6e2>
			} else if (GPIO_test.ramp == 3) {
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <main+0x6f0>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d10f      	bne.n	80021c8 <main+0x6c0>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	; 0x40
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <main+0x6f4>)
 80021ae:	f002 fd65 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	4811      	ldr	r0, [pc, #68]	; (80021fc <main+0x6f4>)
 80021b8:	f002 fd60 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80021bc:	2201      	movs	r2, #1
 80021be:	2120      	movs	r1, #32
 80021c0:	480e      	ldr	r0, [pc, #56]	; (80021fc <main+0x6f4>)
 80021c2:	f002 fd5b 	bl	8004c7c <HAL_GPIO_WritePin>
			break;
 80021c6:	e010      	b.n	80021ea <main+0x6e2>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 80021c8:	2200      	movs	r2, #0
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <main+0x6f4>)
 80021ce:	f002 fd55 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 80021d2:	2200      	movs	r2, #0
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <main+0x6f4>)
 80021d8:	f002 fd50 	bl	8004c7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 80021dc:	2200      	movs	r2, #0
 80021de:	2120      	movs	r1, #32
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <main+0x6f4>)
 80021e2:	f002 fd4b 	bl	8004c7c <HAL_GPIO_WritePin>
			break;
 80021e6:	e000      	b.n	80021ea <main+0x6e2>
			break;
 80021e8:	bf00      	nop
		}

		if (Re == 1) {
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <main+0x6f8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	f47f ad4e 	bne.w	8001c90 <main+0x188>
			NVIC_SystemReset();
 80021f4:	f7ff fc72 	bl	8001adc <__NVIC_SystemReset>
 80021f8:	20000f98 	.word	0x20000f98
 80021fc:	40020000 	.word	0x40020000
 8002200:	20000905 	.word	0x20000905

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b094      	sub	sp, #80	; 0x50
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 0320 	add.w	r3, r7, #32
 800220e:	2230      	movs	r2, #48	; 0x30
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f007 fcb2 	bl	8009b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <SystemClock_Config+0xc8>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <SystemClock_Config+0xc8>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <SystemClock_Config+0xc8>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <SystemClock_Config+0xcc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <SystemClock_Config+0xcc>)
 800224e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <SystemClock_Config+0xcc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002260:	2301      	movs	r3, #1
 8002262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002264:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002274:	2304      	movs	r3, #4
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002278:	2364      	movs	r3, #100	; 0x64
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227c:	2302      	movs	r3, #2
 800227e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002280:	2304      	movs	r3, #4
 8002282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002284:	f107 0320 	add.w	r3, r7, #32
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fcbf 	bl	8005c0c <HAL_RCC_OscConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002294:	f000 fbe2 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2103      	movs	r1, #3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 ff21 	bl	80060fc <HAL_RCC_ClockConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022c0:	f000 fbcc 	bl	8002a5c <Error_Handler>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3750      	adds	r7, #80	; 0x50
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000

080022d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_I2C2_Init+0x50>)
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <MX_I2C2_Init+0x54>)
 80022dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_I2C2_Init+0x50>)
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <MX_I2C2_Init+0x58>)
 80022e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_I2C2_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_I2C2_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_I2C2_Init+0x50>)
 80022f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <MX_I2C2_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_I2C2_Init+0x50>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <MX_I2C2_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_I2C2_Init+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <MX_I2C2_Init+0x50>)
 8002312:	f002 fce5 	bl	8004ce0 <HAL_I2C_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800231c:	f000 fb9e 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000384 	.word	0x20000384
 8002328:	40005800 	.word	0x40005800
 800232c:	000186a0 	.word	0x000186a0

08002330 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_SPI3_Init+0x64>)
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <MX_SPI3_Init+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_SPI3_Init+0x64>)
 800233c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002340:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_SPI3_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_SPI3_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_SPI3_Init+0x64>)
 8002350:	2202      	movs	r2, #2
 8002352:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_SPI3_Init+0x64>)
 8002356:	2201      	movs	r2, #1
 8002358:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_SPI3_Init+0x64>)
 800235c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002360:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_SPI3_Init+0x64>)
 8002364:	2238      	movs	r2, #56	; 0x38
 8002366:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_SPI3_Init+0x64>)
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_SPI3_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_SPI3_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_SPI3_Init+0x64>)
 800237c:	220a      	movs	r2, #10
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_SPI3_Init+0x64>)
 8002382:	f004 f8db 	bl	800653c <HAL_SPI_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800238c:	f000 fb66 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200003d8 	.word	0x200003d8
 8002398:	40003c00 	.word	0x40003c00

0800239c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b096      	sub	sp, #88	; 0x58
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2220      	movs	r2, #32
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 fbd1 	bl	8009b7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023dc:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <MX_TIM1_Init+0x13c>)
 80023de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023e0:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <MX_TIM1_Init+0x138>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002406:	4833      	ldr	r0, [pc, #204]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002408:	f004 fb8e 	bl	8006b28 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002412:	f000 fb23 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002420:	4619      	mov	r1, r3
 8002422:	482c      	ldr	r0, [pc, #176]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002424:	f005 fa6a 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800242e:	f000 fb15 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002434:	f004 fcf6 	bl	8006e24 <HAL_TIM_PWM_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800243e:	f000 fb0d 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800244a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800244e:	4619      	mov	r1, r3
 8002450:	4820      	ldr	r0, [pc, #128]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002452:	f005 ffe3 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800245c:	f000 fafe 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002460:	2360      	movs	r3, #96	; 0x60
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <MX_TIM1_Init+0x138>)
 8002486:	f005 f977 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002490:	f000 fae4 	bl	8002a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <MX_TIM1_Init+0x138>)
 80024b8:	f006 f81e 	bl	80084f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024c2:	f000 facb 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <MX_TIM1_Init+0x138>)
 80024c8:	f001 fad8 	bl	8003a7c <HAL_TIM_MspPostInit>

}
 80024cc:	bf00      	nop
 80024ce:	3758      	adds	r7, #88	; 0x58
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000430 	.word	0x20000430
 80024d8:	40010000 	.word	0x40010000

080024dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 fb46 	bl	8009b7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <MX_TIM2_Init+0xa4>)
 80024fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <MX_TIM2_Init+0xa4>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0xa4>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_TIM2_Init+0xa4>)
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM2_Init+0xa4>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MX_TIM2_Init+0xa4>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002520:	2303      	movs	r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002530:	230f      	movs	r3, #15
 8002532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002538:	2301      	movs	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002540:	230f      	movs	r3, #15
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_TIM2_Init+0xa4>)
 800254c:	f004 fe4e 	bl	80071ec <HAL_TIM_Encoder_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002556:	f000 fa81 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <MX_TIM2_Init+0xa4>)
 8002568:	f005 ff58 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002572:	f000 fa73 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3730      	adds	r7, #48	; 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200004e4 	.word	0x200004e4

08002584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_TIM3_Init+0x94>)
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <MX_TIM3_Init+0x98>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <MX_TIM3_Init+0x94>)
 80025a8:	2263      	movs	r2, #99	; 0x63
 80025aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_TIM3_Init+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <MX_TIM3_Init+0x94>)
 80025b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80025b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <MX_TIM3_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_TIM3_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <MX_TIM3_Init+0x94>)
 80025c8:	f004 faae 	bl	8006b28 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025d2:	f000 fa43 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <MX_TIM3_Init+0x94>)
 80025e4:	f005 f98a 	bl	80078fc <HAL_TIM_ConfigClockSource>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025ee:	f000 fa35 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	4619      	mov	r1, r3
 80025fe:	4806      	ldr	r0, [pc, #24]	; (8002618 <MX_TIM3_Init+0x94>)
 8002600:	f005 ff0c 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800260a:	f000 fa27 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000598 	.word	0x20000598
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	463b      	mov	r3, r7
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM5_Init+0x94>)
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <MX_TIM5_Init+0x98>)
 8002640:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <MX_TIM5_Init+0x94>)
 8002644:	2263      	movs	r2, #99	; 0x63
 8002646:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <MX_TIM5_Init+0x94>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_TIM5_Init+0x94>)
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_TIM5_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_TIM5_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002662:	4814      	ldr	r0, [pc, #80]	; (80026b4 <MX_TIM5_Init+0x94>)
 8002664:	f004 fa60 	bl	8006b28 <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800266e:	f000 f9f5 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002678:	f107 0308 	add.w	r3, r7, #8
 800267c:	4619      	mov	r1, r3
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <MX_TIM5_Init+0x94>)
 8002680:	f005 f93c 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800268a:	f000 f9e7 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002696:	463b      	mov	r3, r7
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <MX_TIM5_Init+0x94>)
 800269c:	f005 febe 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80026a6:	f000 f9d9 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000064c 	.word	0x2000064c
 80026b8:	40000c00 	.word	0x40000c00

080026bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <MX_TIM11_Init+0xa0>)
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <MX_TIM11_Init+0xa4>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <MX_TIM11_Init+0xa0>)
 80026dc:	2263      	movs	r2, #99	; 0x63
 80026de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <MX_TIM11_Init+0xa0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <MX_TIM11_Init+0xa0>)
 80026e8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80026ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_TIM11_Init+0xa0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <MX_TIM11_Init+0xa0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026fa:	4818      	ldr	r0, [pc, #96]	; (800275c <MX_TIM11_Init+0xa0>)
 80026fc:	f004 fa14 	bl	8006b28 <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002706:	f000 f9a9 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800270a:	4814      	ldr	r0, [pc, #80]	; (800275c <MX_TIM11_Init+0xa0>)
 800270c:	f004 fb24 	bl	8006d58 <HAL_TIM_OC_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002716:	f000 f9a1 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800271a:	2108      	movs	r1, #8
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <MX_TIM11_Init+0xa0>)
 800271e:	f004 fc97 	bl	8007050 <HAL_TIM_OnePulse_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002728:	f000 f998 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800272c:	2310      	movs	r3, #16
 800272e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002730:	f240 5399 	movw	r3, #1433	; 0x599
 8002734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_TIM11_Init+0xa0>)
 8002746:	f004 ffbb 	bl	80076c0 <HAL_TIM_OC_ConfigChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002750:	f000 f984 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000700 	.word	0x20000700
 8002760:	40014800 	.word	0x40014800

08002764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <MX_USART2_UART_Init+0x54>)
 800276c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 8002770:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 8002778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800277c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 80027a0:	f005 ff1a 	bl	80085d8 <HAL_UART_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80027aa:	f000 f957 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200007b4 	.word	0x200007b4
 80027b8:	40004400 	.word	0x40004400

080027bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027c2:	4a13      	ldr	r2, [pc, #76]	; (8002810 <MX_USART6_UART_Init+0x54>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_USART6_UART_Init+0x50>)
 80027f8:	f005 feee 	bl	80085d8 <HAL_UART_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8002802:	f000 f92b 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000828 	.word	0x20000828
 8002810:	40011400 	.word	0x40011400

08002814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_DMA_Init+0x3c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <MX_DMA_Init+0x3c>)
 8002824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_DMA_Init+0x3c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2011      	movs	r0, #17
 800283c:	f001 fc3d 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002840:	2011      	movs	r0, #17
 8002842:	f001 fc56 	bl	80040f2 <HAL_NVIC_EnableIRQ>

}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <MX_GPIO_Init+0x174>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <MX_GPIO_Init+0x174>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <MX_GPIO_Init+0x174>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <MX_GPIO_Init+0x174>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a4e      	ldr	r2, [pc, #312]	; (80029c8 <MX_GPIO_Init+0x174>)
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <MX_GPIO_Init+0x174>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <MX_GPIO_Init+0x174>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Switch_Relay_3_Pin|Switch_Relay_1_Pin|Switch_Relay_2_Pin|DIR_Pin, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80028fc:	4833      	ldr	r0, [pc, #204]	; (80029cc <MX_GPIO_Init+0x178>)
 80028fe:	f002 f9bd 	bl	8004c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	2104      	movs	r1, #4
 8002906:	4832      	ldr	r0, [pc, #200]	; (80029d0 <MX_GPIO_Init+0x17c>)
 8002908:	f002 f9b8 	bl	8004c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Emergency_Pin|Photoelectric_sensor_1_Pin;
 800290c:	f242 0348 	movw	r3, #8264	; 0x2048
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002912:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	482c      	ldr	r0, [pc, #176]	; (80029d4 <MX_GPIO_Init+0x180>)
 8002924:	f002 f80e 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
  GPIO_InitStruct.Pin = Switch_Relay_3_Pin|Switch_Relay_1_Pin|Switch_Relay_2_Pin|DIR_Pin;
 8002928:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4822      	ldr	r0, [pc, #136]	; (80029cc <MX_GPIO_Init+0x178>)
 8002942:	f001 ffff 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
  GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin|Photoelectric_sensor_3_Pin;
 8002946:	f44f 7382 	mov.w	r3, #260	; 0x104
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800294c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	481e      	ldr	r0, [pc, #120]	; (80029d8 <MX_GPIO_Init+0x184>)
 800295e:	f001 fff1 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : JoyStick_SS_PIN_Pin */
  GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 8002962:	2304      	movs	r3, #4
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4815      	ldr	r0, [pc, #84]	; (80029d0 <MX_GPIO_Init+0x17c>)
 800297a:	f001 ffe3 	bl	8004944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2008      	movs	r0, #8
 8002984:	f001 fb99 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002988:	2008      	movs	r0, #8
 800298a:	f001 fbb2 	bl	80040f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2009      	movs	r0, #9
 8002994:	f001 fb91 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002998:	2009      	movs	r0, #9
 800299a:	f001 fbaa 	bl	80040f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2017      	movs	r0, #23
 80029a4:	f001 fb89 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029a8:	2017      	movs	r0, #23
 80029aa:	f001 fba2 	bl	80040f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2028      	movs	r0, #40	; 0x28
 80029b4:	f001 fb81 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029b8:	2028      	movs	r0, #40	; 0x28
 80029ba:	f001 fb9a 	bl	80040f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40020c00 	.word	0x40020c00
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40020400 	.word	0x40020400

080029dc <HAL_GPIO_EXTI_Callback>:
		motor(0, 1);
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <micros>:

uint64_t micros() {
 80029f4:	b4b0      	push	{r4, r5, r7}
 80029f6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <micros+0x2c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2200      	movs	r2, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	4611      	mov	r1, r2
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <micros+0x30>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	1884      	adds	r4, r0, r2
 8002a0c:	eb41 0503 	adc.w	r5, r1, r3
 8002a10:	4622      	mov	r2, r4
 8002a12:	462b      	mov	r3, r5
}
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bcb0      	pop	{r4, r5, r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	2000064c 	.word	0x2000064c
 8002a24:	20000928 	.word	0x20000928

08002a28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a28:	b4b0      	push	{r4, r5, r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	1e54      	subs	r4, r2, #1
 8002a40:	f143 0500 	adc.w	r5, r3, #0
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a46:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bcb0      	pop	{r4, r5, r7}
 8002a52:	4770      	bx	lr
 8002a54:	2000064c 	.word	0x2000064c
 8002a58:	20000928 	.word	0x20000928

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a64:	e7fe      	b.n	8002a64 <Error_Handler+0x8>
	...

08002a68 <PID>:
	RUNPOINTMODE,
	EMERGENCY_LIMIT,
	SENSOR_CHECK
} State ;

void PID(float setposition) {
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8002a72:	4bb5      	ldr	r3, [pc, #724]	; (8002d48 <PID+0x2e0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4ab5      	ldr	r2, [pc, #724]	; (8002d4c <PID+0x2e4>)
 8002a78:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 8002a7a:	4bb4      	ldr	r3, [pc, #720]	; (8002d4c <PID+0x2e4>)
 8002a7c:	ed93 7a00 	vldr	s14, [r3]
 8002a80:	4bb3      	ldr	r3, [pc, #716]	; (8002d50 <PID+0x2e8>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	ee17 0a90 	vmov	r0, s15
 8002a8e:	f7fd fd07 	bl	80004a0 <__aeabi_f2d>
 8002a92:	4604      	mov	r4, r0
 8002a94:	460d      	mov	r5, r1
 8002a96:	4baf      	ldr	r3, [pc, #700]	; (8002d54 <PID+0x2ec>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fd fd20 	bl	80004e4 <__aeabi_ul2d>
 8002aa4:	a3a2      	add	r3, pc, #648	; (adr r3, 8002d30 <PID+0x2c8>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fe7b 	bl	80007a4 <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fe75 	bl	80007a4 <__aeabi_ddiv>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fd fff5 	bl	8000ab0 <__aeabi_d2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4aa3      	ldr	r2, [pc, #652]	; (8002d58 <PID+0x2f0>)
 8002aca:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8002acc:	4b9f      	ldr	r3, [pc, #636]	; (8002d4c <PID+0x2e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a9f      	ldr	r2, [pc, #636]	; (8002d50 <PID+0x2e8>)
 8002ad2:	6013      	str	r3, [r2, #0]

	if (pos_f < -350) {
 8002ad4:	4ba1      	ldr	r3, [pc, #644]	; (8002d5c <PID+0x2f4>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002d60 <PID+0x2f8>
 8002ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d503      	bpl.n	8002af0 <PID+0x88>
		pos_f = -350;
 8002ae8:	4b9c      	ldr	r3, [pc, #624]	; (8002d5c <PID+0x2f4>)
 8002aea:	4a9e      	ldr	r2, [pc, #632]	; (8002d64 <PID+0x2fc>)
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e00c      	b.n	8002b0a <PID+0xa2>
	} else if (pos_f > 350) {
 8002af0:	4b9a      	ldr	r3, [pc, #616]	; (8002d5c <PID+0x2f4>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002d68 <PID+0x300>
 8002afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	dd02      	ble.n	8002b0a <PID+0xa2>
		pos_f = 350;
 8002b04:	4b95      	ldr	r3, [pc, #596]	; (8002d5c <PID+0x2f4>)
 8002b06:	4a99      	ldr	r2, [pc, #612]	; (8002d6c <PID+0x304>)
 8002b08:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8002b0a:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <PID+0x2e0>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b18:	4b95      	ldr	r3, [pc, #596]	; (8002d70 <PID+0x308>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 8002b1e:	4b95      	ldr	r3, [pc, #596]	; (8002d74 <PID+0x30c>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002d78 <PID+0x310>
 8002b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	bfac      	ite	ge
 8002b32:	2301      	movge	r3, #1
 8002b34:	2300      	movlt	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13f      	bne.n	8002bc2 <PID+0x15a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <PID+0x308>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	bfac      	ite	ge
 8002b52:	2301      	movge	r3, #1
 8002b54:	2300      	movlt	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <PID+0x11a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002b62:	4b86      	ldr	r3, [pc, #536]	; (8002d7c <PID+0x314>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	bfac      	ite	ge
 8002b72:	2301      	movge	r3, #1
 8002b74:	2300      	movlt	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f083 0301 	eor.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02a      	beq.n	8002bd8 <PID+0x170>
 8002b82:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <PID+0x308>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	bf4c      	ite	mi
 8002b92:	2301      	movmi	r3, #1
 8002b94:	2300      	movpl	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <PID+0x15a>
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <PID+0x314>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	bf4c      	ite	mi
 8002bb2:	2301      	movmi	r3, #1
 8002bb4:	2300      	movpl	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <PID+0x170>
		Intregral = Intregral + Error;
 8002bc2:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <PID+0x314>)
 8002bc4:	ed93 7a00 	vldr	s14, [r3]
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <PID+0x308>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <PID+0x314>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <PID+0x318>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <PID+0x308>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <PID+0x308>)
 8002bea:	edd3 6a00 	vldr	s13, [r3]
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <PID+0x31c>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <PID+0x320>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002c02:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <PID+0x324>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <PID+0x314>)
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <PID+0x328>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <PID+0x30c>)
 8002c26:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8002c2a:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <PID+0x30c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc36 	bl	80004a0 <__aeabi_f2d>
 8002c34:	a340      	add	r3, pc, #256	; (adr r3, 8002d38 <PID+0x2d0>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd ff0f 	bl	8000a5c <__aeabi_dcmpge>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <PID+0x1e4>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <PID+0x30c>)
 8002c46:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <PID+0x32c>)
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00f      	b.n	8002c6c <PID+0x204>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 8002c4c:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <PID+0x30c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc25 	bl	80004a0 <__aeabi_f2d>
 8002c56:	a33a      	add	r3, pc, #232	; (adr r3, 8002d40 <PID+0x2d8>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fef4 	bl	8000a48 <__aeabi_dcmple>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <PID+0x204>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <PID+0x30c>)
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <PID+0x330>)
 8002c6a:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <PID+0x30c>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	d503      	bpl.n	8002c84 <PID+0x21c>
		dir = -1;
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <PID+0x334>)
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e00a      	b.n	8002c9a <PID+0x232>
	} else if (Dutyfeedback > 0) {
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <PID+0x30c>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	dd02      	ble.n	8002c9a <PID+0x232>
		dir = 1;
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <PID+0x334>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 8002c9a:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <PID+0x308>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	dd0b      	ble.n	8002cc6 <PID+0x25e>
		Dutyfeedback += 1 * Kp; //230
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <PID+0x30c>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <PID+0x318>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <PID+0x30c>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
 8002cc4:	e014      	b.n	8002cf0 <PID+0x288>
	} else if (Error < -1.0) {
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <PID+0x308>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	d50a      	bpl.n	8002cf0 <PID+0x288>
		Dutyfeedback -= 1 * Kp;
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <PID+0x30c>)
 8002cdc:	ed93 7a00 	vldr	s14, [r3]
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <PID+0x318>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <PID+0x30c>)
 8002cec:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <PID+0x30c>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <PID+0x30c>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <PID+0x30c>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <PID+0x334>)
 8002d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d10:	4619      	mov	r1, r3
 8002d12:	ee17 0a90 	vmov	r0, s15
 8002d16:	f7fe f8c3 	bl	8000ea0 <motor>
	Last_Error = Error;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <PID+0x308>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <PID+0x31c>)
 8002d20:	6013      	str	r3, [r2, #0]
//			State = INIT_HOMING;
//		}

//	}

}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w
 8002d30:	00000000 	.word	0x00000000
 8002d34:	412e8480 	.word	0x412e8480
 8002d38:	66666666 	.word	0x66666666
 8002d3c:	40e66666 	.word	0x40e66666
 8002d40:	66666666 	.word	0x66666666
 8002d44:	c0e66666 	.word	0xc0e66666
 8002d48:	20000fb0 	.word	0x20000fb0
 8002d4c:	20000fcc 	.word	0x20000fcc
 8002d50:	20000fd0 	.word	0x20000fd0
 8002d54:	20000240 	.word	0x20000240
 8002d58:	20000fd4 	.word	0x20000fd4
 8002d5c:	20000900 	.word	0x20000900
 8002d60:	c3af0000 	.word	0xc3af0000
 8002d64:	c3af0000 	.word	0xc3af0000
 8002d68:	43af0000 	.word	0x43af0000
 8002d6c:	43af0000 	.word	0x43af0000
 8002d70:	20000fd8 	.word	0x20000fd8
 8002d74:	20000920 	.word	0x20000920
 8002d78:	47800000 	.word	0x47800000
 8002d7c:	20000924 	.word	0x20000924
 8002d80:	200002c0 	.word	0x200002c0
 8002d84:	20000fdc 	.word	0x20000fdc
 8002d88:	200002cc 	.word	0x200002cc
 8002d8c:	200002c8 	.word	0x200002c8
 8002d90:	200002c4 	.word	0x200002c4
 8002d94:	47333333 	.word	0x47333333
 8002d98:	c7333333 	.word	0xc7333333
 8002d9c:	20000fc8 	.word	0x20000fc8

08002da0 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8002da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	ed87 0b06 	vstr	d0, [r7, #24]
 8002dac:	ed87 1b04 	vstr	d1, [r7, #16]
 8002db0:	ed87 2b02 	vstr	d2, [r7, #8]
 8002db4:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8002db8:	4993      	ldr	r1, [pc, #588]	; (8003008 <Trajectory_Gen+0x268>)
 8002dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbe:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8002dc2:	4992      	ldr	r1, [pc, #584]	; (800300c <Trajectory_Gen+0x26c>)
 8002dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc8:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8002dcc:	4990      	ldr	r1, [pc, #576]	; (8003010 <Trajectory_Gen+0x270>)
 8002dce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd2:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 8002dd6:	498f      	ldr	r1, [pc, #572]	; (8003014 <Trajectory_Gen+0x274>)
 8002dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ddc:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8002de0:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <Trajectory_Gen+0x278>)
 8002de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de6:	4a8d      	ldr	r2, [pc, #564]	; (800301c <Trajectory_Gen+0x27c>)
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f7fd feb0 	bl	8000b50 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fd fb74 	bl	80004e4 <__aeabi_ul2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4987      	ldr	r1, [pc, #540]	; (8003020 <Trajectory_Gen+0x280>)
 8002e02:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 8002e06:	4b84      	ldr	r3, [pc, #528]	; (8003018 <Trajectory_Gen+0x278>)
 8002e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e0c:	4a83      	ldr	r2, [pc, #524]	; (800301c <Trajectory_Gen+0x27c>)
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f7fd fe9d 	bl	8000b50 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7fd fb61 	bl	80004e4 <__aeabi_ul2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	497f      	ldr	r1, [pc, #508]	; (8003024 <Trajectory_Gen+0x284>)
 8002e28:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8002e2c:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <Trajectory_Gen+0x278>)
 8002e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e32:	4a7a      	ldr	r2, [pc, #488]	; (800301c <Trajectory_Gen+0x27c>)
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	f7fd fe8a 	bl	8000b50 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd fb4e 	bl	80004e4 <__aeabi_ul2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4976      	ldr	r1, [pc, #472]	; (8003028 <Trajectory_Gen+0x288>)
 8002e4e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 8002e52:	4b71      	ldr	r3, [pc, #452]	; (8003018 <Trajectory_Gen+0x278>)
 8002e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e58:	4a70      	ldr	r2, [pc, #448]	; (800301c <Trajectory_Gen+0x27c>)
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f7fd fe77 	bl	8000b50 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fb3b 	bl	80004e4 <__aeabi_ul2d>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	496e      	ldr	r1, [pc, #440]	; (800302c <Trajectory_Gen+0x28c>)
 8002e74:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8002e78:	4b64      	ldr	r3, [pc, #400]	; (800300c <Trajectory_Gen+0x26c>)
 8002e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7e:	4b62      	ldr	r3, [pc, #392]	; (8003008 <Trajectory_Gen+0x268>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd f9ac 	bl	80001e0 <__aeabi_dsub>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002e92:	4b67      	ldr	r3, [pc, #412]	; (8003030 <Trajectory_Gen+0x290>)
 8002e94:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8002e98:	4b5c      	ldr	r3, [pc, #368]	; (800300c <Trajectory_Gen+0x26c>)
 8002e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e9e:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <Trajectory_Gen+0x268>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd f99c 	bl	80001e0 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f7fd fdda 	bl	8000a70 <__aeabi_dcmpgt>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <Trajectory_Gen+0x12a>
		direct = 1;
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <Trajectory_Gen+0x294>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e018      	b.n	8002efc <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8002eca:	4b50      	ldr	r3, [pc, #320]	; (800300c <Trajectory_Gen+0x26c>)
 8002ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <Trajectory_Gen+0x268>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd f983 	bl	80001e0 <__aeabi_dsub>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	f7fd fda3 	bl	8000a34 <__aeabi_dcmplt>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <Trajectory_Gen+0x15c>
		direct = -1;
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <Trajectory_Gen+0x294>)
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8002efa:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8002efc:	4b44      	ldr	r3, [pc, #272]	; (8003010 <Trajectory_Gen+0x270>)
 8002efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f02:	4b44      	ldr	r3, [pc, #272]	; (8003014 <Trajectory_Gen+0x274>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fc4c 	bl	80007a4 <__aeabi_ddiv>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4949      	ldr	r1, [pc, #292]	; (8003038 <Trajectory_Gen+0x298>)
 8002f12:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <Trajectory_Gen+0x290>)
 8002f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <Trajectory_Gen+0x274>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fc3f 	bl	80007a4 <__aeabi_ddiv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	ec43 2b17 	vmov	d7, r2, r3
 8002f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f32:	eef0 0a67 	vmov.f32	s1, s15
 8002f36:	f006 fe29 	bl	8009b8c <sqrt>
 8002f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f3e:	eef0 7a60 	vmov.f32	s15, s1
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <Trajectory_Gen+0x29c>)
 8002f44:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <Trajectory_Gen+0x29c>)
 8002f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <Trajectory_Gen+0x298>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fd6e 	bl	8000a34 <__aeabi_dcmplt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00f      	beq.n	8002f7e <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <Trajectory_Gen+0x29c>)
 8002f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	f7fd f93c 	bl	80001e4 <__adddf3>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4933      	ldr	r1, [pc, #204]	; (8003040 <Trajectory_Gen+0x2a0>)
 8002f72:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <Trajectory_Gen+0x2a4>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8002f7c:	e03e      	b.n	8002ffc <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <Trajectory_Gen+0x29c>)
 8002f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <Trajectory_Gen+0x298>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fd67 	bl	8000a5c <__aeabi_dcmpge>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d100      	bne.n	8002f96 <Trajectory_Gen+0x1f6>
}
 8002f94:	e032      	b.n	8002ffc <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <Trajectory_Gen+0x298>)
 8002f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	f7fd f920 	bl	80001e4 <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4690      	mov	r8, r2
 8002faa:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <Trajectory_Gen+0x290>)
 8002fae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <Trajectory_Gen+0x298>)
 8002fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <Trajectory_Gen+0x270>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f7fd fac7 	bl	8000550 <__aeabi_dmul>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd f909 	bl	80001e0 <__aeabi_dsub>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <Trajectory_Gen+0x270>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f7fd fbe2 	bl	80007a4 <__aeabi_ddiv>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4640      	mov	r0, r8
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	f7fd f8fc 	bl	80001e4 <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8002ff0:	4913      	ldr	r1, [pc, #76]	; (8003040 <Trajectory_Gen+0x2a0>)
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <Trajectory_Gen+0x2a4>)
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003006:	bf00      	nop
 8003008:	20000fe8 	.word	0x20000fe8
 800300c:	20000ff0 	.word	0x20000ff0
 8003010:	20000ff8 	.word	0x20000ff8
 8003014:	20001000 	.word	0x20001000
 8003018:	20000238 	.word	0x20000238
 800301c:	000f4240 	.word	0x000f4240
 8003020:	20000248 	.word	0x20000248
 8003024:	20000250 	.word	0x20000250
 8003028:	20000258 	.word	0x20000258
 800302c:	20000260 	.word	0x20000260
 8003030:	20001008 	.word	0x20001008
 8003034:	20000fe4 	.word	0x20000fe4
 8003038:	20001030 	.word	0x20001030
 800303c:	20001040 	.word	0x20001040
 8003040:	20001038 	.word	0x20001038
 8003044:	20000fe0 	.word	0x20000fe0

08003048 <Trajectory_Eva>:

void Trajectory_Eva() {
 8003048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800304c:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 800304e:	4ba3      	ldr	r3, [pc, #652]	; (80032dc <Trajectory_Eva+0x294>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	f000 8173 	beq.w	800333e <Trajectory_Eva+0x2f6>
 8003058:	2b02      	cmp	r3, #2
 800305a:	f300 835e 	bgt.w	800371a <Trajectory_Eva+0x6d2>
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 835a 	beq.w	8003718 <Trajectory_Eva+0x6d0>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d000      	beq.n	800306a <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8003068:	e357      	b.n	800371a <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 800306a:	4b9d      	ldr	r3, [pc, #628]	; (80032e0 <Trajectory_Eva+0x298>)
 800306c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003070:	4b9c      	ldr	r3, [pc, #624]	; (80032e4 <Trajectory_Eva+0x29c>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd fce7 	bl	8000a48 <__aeabi_dcmple>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8085 	beq.w	800318c <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8003082:	4b99      	ldr	r3, [pc, #612]	; (80032e8 <Trajectory_Eva+0x2a0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd f9f8 	bl	800047c <__aeabi_i2d>
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	4b96      	ldr	r3, [pc, #600]	; (80032ec <Trajectory_Eva+0x2a4>)
 8003092:	f7fd fa5d 	bl	8000550 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4b94      	ldr	r3, [pc, #592]	; (80032f0 <Trajectory_Eva+0x2a8>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fa54 	bl	8000550 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4b90      	ldr	r3, [pc, #576]	; (80032f4 <Trajectory_Eva+0x2ac>)
 80030b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b6:	4b8f      	ldr	r3, [pc, #572]	; (80032f4 <Trajectory_Eva+0x2ac>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fa48 	bl	8000550 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd fa42 	bl	8000550 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <Trajectory_Eva+0x2b0>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd f883 	bl	80001e4 <__adddf3>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
			x = x_initial
 80030e2:	4986      	ldr	r1, [pc, #536]	; (80032fc <Trajectory_Eva+0x2b4>)
 80030e4:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 80030e8:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <Trajectory_Eva+0x2a8>)
 80030ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ee:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <Trajectory_Eva+0x2ac>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fa2c 	bl	8000550 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <Trajectory_Eva+0x2a0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd f9b9 	bl	800047c <__aeabi_i2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4620      	mov	r0, r4
 8003110:	4629      	mov	r1, r5
 8003112:	f7fd fa1d 	bl	8000550 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4979      	ldr	r1, [pc, #484]	; (8003300 <Trajectory_Eva+0x2b8>)
 800311c:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003120:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <Trajectory_Eva+0x2a0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9a9 	bl	800047c <__aeabi_i2d>
 800312a:	4b71      	ldr	r3, [pc, #452]	; (80032f0 <Trajectory_Eva+0x2a8>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd fa0e 	bl	8000550 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4972      	ldr	r1, [pc, #456]	; (8003304 <Trajectory_Eva+0x2bc>)
 800313a:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <Trajectory_Eva+0x2b4>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	4970      	ldr	r1, [pc, #448]	; (8003308 <Trajectory_Eva+0x2c0>)
 8003146:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 800314a:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <Trajectory_Eva+0x2b8>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	496e      	ldr	r1, [pc, #440]	; (800330c <Trajectory_Eva+0x2c4>)
 8003152:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <Trajectory_Eva+0x2ac>)
 8003158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800315c:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <Trajectory_Eva+0x2c8>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f7fd f83f 	bl	80001e4 <__adddf3>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4962      	ldr	r1, [pc, #392]	; (80032f4 <Trajectory_Eva+0x2ac>)
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003170:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <Trajectory_Eva+0x298>)
 8003172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003176:	4b66      	ldr	r3, [pc, #408]	; (8003310 <Trajectory_Eva+0x2c8>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd f832 	bl	80001e4 <__adddf3>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4956      	ldr	r1, [pc, #344]	; (80032e0 <Trajectory_Eva+0x298>)
 8003186:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800318a:	e2c6      	b.n	800371a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 800318c:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <Trajectory_Eva+0x298>)
 800318e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003192:	4b60      	ldr	r3, [pc, #384]	; (8003314 <Trajectory_Eva+0x2cc>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd fc56 	bl	8000a48 <__aeabi_dcmple>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80bc 	beq.w	800331c <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <Trajectory_Eva+0x2c4>)
 80031a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <Trajectory_Eva+0x2d0>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f9ce 	bl	8000550 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	4b52      	ldr	r3, [pc, #328]	; (8003308 <Trajectory_Eva+0x2c0>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd f80f 	bl	80001e4 <__adddf3>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <Trajectory_Eva+0x2a0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f952 	bl	800047c <__aeabi_i2d>
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	4b43      	ldr	r3, [pc, #268]	; (80032ec <Trajectory_Eva+0x2a4>)
 80031de:	f7fd f9b7 	bl	8000550 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <Trajectory_Eva+0x2a8>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f7fd f9ae 	bl	8000550 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <Trajectory_Eva+0x2d0>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fd f9a5 	bl	8000550 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	4b42      	ldr	r3, [pc, #264]	; (8003318 <Trajectory_Eva+0x2d0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd f99c 	bl	8000550 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fc ffde 	bl	80001e0 <__aeabi_dsub>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8003228:	4934      	ldr	r1, [pc, #208]	; (80032fc <Trajectory_Eva+0x2b4>)
 800322a:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <Trajectory_Eva+0x2c4>)
 8003230:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003234:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <Trajectory_Eva+0x2a8>)
 8003236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <Trajectory_Eva+0x2d0>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f7fd f986 	bl	8000550 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4692      	mov	sl, r2
 800324a:	469b      	mov	fp, r3
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <Trajectory_Eva+0x2a0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f913 	bl	800047c <__aeabi_i2d>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4650      	mov	r0, sl
 800325c:	4659      	mov	r1, fp
 800325e:	f7fd f977 	bl	8000550 <__aeabi_dmul>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fc ffb9 	bl	80001e0 <__aeabi_dsub>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4923      	ldr	r1, [pc, #140]	; (8003300 <Trajectory_Eva+0x2b8>)
 8003274:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <Trajectory_Eva+0x2a8>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	4690      	mov	r8, r2
 8003280:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <Trajectory_Eva+0x2a0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f8f7 	bl	800047c <__aeabi_i2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4640      	mov	r0, r8
 8003294:	4649      	mov	r1, r9
 8003296:	f7fd f95b 	bl	8000550 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4919      	ldr	r1, [pc, #100]	; (8003304 <Trajectory_Eva+0x2bc>)
 80032a0:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <Trajectory_Eva+0x2d0>)
 80032a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <Trajectory_Eva+0x2c8>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f7fc ff98 	bl	80001e4 <__adddf3>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4917      	ldr	r1, [pc, #92]	; (8003318 <Trajectory_Eva+0x2d0>)
 80032ba:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <Trajectory_Eva+0x298>)
 80032c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <Trajectory_Eva+0x2c8>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fc ff8b 	bl	80001e4 <__adddf3>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4903      	ldr	r1, [pc, #12]	; (80032e0 <Trajectory_Eva+0x298>)
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80032d8:	e21f      	b.n	800371a <Trajectory_Eva+0x6d2>
 80032da:	bf00      	nop
 80032dc:	20000fe0 	.word	0x20000fe0
 80032e0:	20000260 	.word	0x20000260
 80032e4:	20001040 	.word	0x20001040
 80032e8:	20000fe4 	.word	0x20000fe4
 80032ec:	3fe00000 	.word	0x3fe00000
 80032f0:	20001000 	.word	0x20001000
 80032f4:	20000248 	.word	0x20000248
 80032f8:	20000fe8 	.word	0x20000fe8
 80032fc:	20000908 	.word	0x20000908
 8003300:	20000910 	.word	0x20000910
 8003304:	20000918 	.word	0x20000918
 8003308:	20001010 	.word	0x20001010
 800330c:	20001020 	.word	0x20001020
 8003310:	20000268 	.word	0x20000268
 8003314:	20001038 	.word	0x20001038
 8003318:	20000250 	.word	0x20000250
			x = x_final;
 800331c:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <Trajectory_Eva+0x510>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	498e      	ldr	r1, [pc, #568]	; (800355c <Trajectory_Eva+0x514>)
 8003324:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8003328:	498d      	ldr	r1, [pc, #564]	; (8003560 <Trajectory_Eva+0x518>)
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8003336:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <Trajectory_Eva+0x51c>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
		break;
 800333c:	e1ed      	b.n	800371a <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 800333e:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <Trajectory_Eva+0x520>)
 8003340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003344:	4b89      	ldr	r3, [pc, #548]	; (800356c <Trajectory_Eva+0x524>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fd fb7d 	bl	8000a48 <__aeabi_dcmple>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8089 	beq.w	8003468 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8003356:	4b86      	ldr	r3, [pc, #536]	; (8003570 <Trajectory_Eva+0x528>)
 8003358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b84      	ldr	r3, [pc, #528]	; (8003574 <Trajectory_Eva+0x52c>)
 8003362:	f7fd f8f5 	bl	8000550 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <Trajectory_Eva+0x530>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f882 	bl	800047c <__aeabi_i2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f8e6 	bl	8000550 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	4b7b      	ldr	r3, [pc, #492]	; (800357c <Trajectory_Eva+0x534>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f7fd f8dd 	bl	8000550 <__aeabi_dmul>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	4b77      	ldr	r3, [pc, #476]	; (800357c <Trajectory_Eva+0x534>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f7fd f8d4 	bl	8000550 <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	4b73      	ldr	r3, [pc, #460]	; (8003580 <Trajectory_Eva+0x538>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fc ff15 	bl	80001e4 <__adddf3>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4967      	ldr	r1, [pc, #412]	; (800355c <Trajectory_Eva+0x514>)
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <Trajectory_Eva+0x528>)
 80033c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ca:	4b6c      	ldr	r3, [pc, #432]	; (800357c <Trajectory_Eva+0x534>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f8be 	bl	8000550 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <Trajectory_Eva+0x530>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f84b 	bl	800047c <__aeabi_i2d>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4620      	mov	r0, r4
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7fd f8af 	bl	8000550 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	495a      	ldr	r1, [pc, #360]	; (8003560 <Trajectory_Eva+0x518>)
 80033f8:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <Trajectory_Eva+0x530>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd f83b 	bl	800047c <__aeabi_i2d>
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <Trajectory_Eva+0x528>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd f8a0 	bl	8000550 <__aeabi_dmul>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	495b      	ldr	r1, [pc, #364]	; (8003584 <Trajectory_Eva+0x53c>)
 8003416:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <Trajectory_Eva+0x514>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	4959      	ldr	r1, [pc, #356]	; (8003588 <Trajectory_Eva+0x540>)
 8003422:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8003426:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <Trajectory_Eva+0x518>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	4957      	ldr	r1, [pc, #348]	; (800358c <Trajectory_Eva+0x544>)
 800342e:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8003432:	4b52      	ldr	r3, [pc, #328]	; (800357c <Trajectory_Eva+0x534>)
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	4b55      	ldr	r3, [pc, #340]	; (8003590 <Trajectory_Eva+0x548>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fc fed1 	bl	80001e4 <__adddf3>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	494d      	ldr	r1, [pc, #308]	; (800357c <Trajectory_Eva+0x534>)
 8003448:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <Trajectory_Eva+0x520>)
 800344e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <Trajectory_Eva+0x548>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f7fc fec4 	bl	80001e4 <__adddf3>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4941      	ldr	r1, [pc, #260]	; (8003568 <Trajectory_Eva+0x520>)
 8003462:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003466:	e158      	b.n	800371a <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <Trajectory_Eva+0x54c>)
 800346a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <Trajectory_Eva+0x524>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fc feb4 	bl	80001e0 <__aeabi_dsub>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <Trajectory_Eva+0x520>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd fae9 	bl	8000a5c <__aeabi_dcmpge>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 808b 	beq.w	80035a8 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <Trajectory_Eva+0x550>)
 8003494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <Trajectory_Eva+0x554>)
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f7fd f857 	bl	8000550 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4614      	mov	r4, r2
 80034a8:	461d      	mov	r5, r3
 80034aa:	4b33      	ldr	r3, [pc, #204]	; (8003578 <Trajectory_Eva+0x530>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc ffe4 	bl	800047c <__aeabi_i2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fd f848 	bl	8000550 <__aeabi_dmul>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <Trajectory_Eva+0x540>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fe89 	bl	80001e4 <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4921      	ldr	r1, [pc, #132]	; (800355c <Trajectory_Eva+0x514>)
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <Trajectory_Eva+0x530>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fc ffcb 	bl	800047c <__aeabi_i2d>
 80034e6:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <Trajectory_Eva+0x550>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f830 	bl	8000550 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	491a      	ldr	r1, [pc, #104]	; (8003560 <Trajectory_Eva+0x518>)
 80034f6:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 80034fa:	4922      	ldr	r1, [pc, #136]	; (8003584 <Trajectory_Eva+0x53c>)
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <Trajectory_Eva+0x514>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	4924      	ldr	r1, [pc, #144]	; (80035a0 <Trajectory_Eva+0x558>)
 8003510:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <Trajectory_Eva+0x518>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <Trajectory_Eva+0x55c>)
 800351c:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <Trajectory_Eva+0x554>)
 8003522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <Trajectory_Eva+0x548>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f7fc fe5a 	bl	80001e4 <__adddf3>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4919      	ldr	r1, [pc, #100]	; (800359c <Trajectory_Eva+0x554>)
 8003536:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <Trajectory_Eva+0x520>)
 800353c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <Trajectory_Eva+0x548>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f7fc fe4d 	bl	80001e4 <__adddf3>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4906      	ldr	r1, [pc, #24]	; (8003568 <Trajectory_Eva+0x520>)
 8003550:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003554:	e0e1      	b.n	800371a <Trajectory_Eva+0x6d2>
 8003556:	bf00      	nop
 8003558:	20000ff0 	.word	0x20000ff0
 800355c:	20000908 	.word	0x20000908
 8003560:	20000910 	.word	0x20000910
 8003564:	20000fe0 	.word	0x20000fe0
 8003568:	20000260 	.word	0x20000260
 800356c:	20001030 	.word	0x20001030
 8003570:	20001000 	.word	0x20001000
 8003574:	3fe00000 	.word	0x3fe00000
 8003578:	20000fe4 	.word	0x20000fe4
 800357c:	20000248 	.word	0x20000248
 8003580:	20000fe8 	.word	0x20000fe8
 8003584:	20000918 	.word	0x20000918
 8003588:	20001010 	.word	0x20001010
 800358c:	20001020 	.word	0x20001020
 8003590:	20000268 	.word	0x20000268
 8003594:	20001038 	.word	0x20001038
 8003598:	20000ff8 	.word	0x20000ff8
 800359c:	20000258 	.word	0x20000258
 80035a0:	20001018 	.word	0x20001018
 80035a4:	20001028 	.word	0x20001028
		} else if (t_count <= t_final) {
 80035a8:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <Trajectory_Eva+0x6d8>)
 80035aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <Trajectory_Eva+0x6dc>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fd fa48 	bl	8000a48 <__aeabi_dcmple>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 809b 	beq.w	80036f6 <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <Trajectory_Eva+0x6e0>)
 80035c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c6:	4b59      	ldr	r3, [pc, #356]	; (800372c <Trajectory_Eva+0x6e4>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fc ffc0 	bl	8000550 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	4b55      	ldr	r3, [pc, #340]	; (8003730 <Trajectory_Eva+0x6e8>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fc fe01 	bl	80001e4 <__adddf3>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4690      	mov	r8, r2
 80035e8:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <Trajectory_Eva+0x6ec>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ff44 	bl	800047c <__aeabi_i2d>
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <Trajectory_Eva+0x6f0>)
 80035fa:	f7fc ffa9 	bl	8000550 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <Trajectory_Eva+0x6f4>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fc ffa0 	bl	8000550 <__aeabi_dmul>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4692      	mov	sl, r2
 8003616:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8003618:	4b44      	ldr	r3, [pc, #272]	; (800372c <Trajectory_Eva+0x6e4>)
 800361a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <Trajectory_Eva+0x6e4>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f7fc ff94 	bl	8000550 <__aeabi_dmul>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4650      	mov	r0, sl
 800362e:	4659      	mov	r1, fp
 8003630:	f7fc ff8e 	bl	8000550 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8003638:	4640      	mov	r0, r8
 800363a:	4649      	mov	r1, r9
 800363c:	f7fc fdd0 	bl	80001e0 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
			x =
 8003644:	493e      	ldr	r1, [pc, #248]	; (8003740 <Trajectory_Eva+0x6f8>)
 8003646:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <Trajectory_Eva+0x6e0>)
 800364c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <Trajectory_Eva+0x6f4>)
 8003652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <Trajectory_Eva+0x6e4>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc ff78 	bl	8000550 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4692      	mov	sl, r2
 8003666:	469b      	mov	fp, r3
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <Trajectory_Eva+0x6ec>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc ff05 	bl	800047c <__aeabi_i2d>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4650      	mov	r0, sl
 8003678:	4659      	mov	r1, fp
 800367a:	f7fc ff69 	bl	8000550 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4640      	mov	r0, r8
 8003684:	4649      	mov	r1, r9
 8003686:	f7fc fdab 	bl	80001e0 <__aeabi_dsub>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	492d      	ldr	r1, [pc, #180]	; (8003744 <Trajectory_Eva+0x6fc>)
 8003690:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <Trajectory_Eva+0x6f4>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	4614      	mov	r4, r2
 800369c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <Trajectory_Eva+0x6ec>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc fee9 	bl	800047c <__aeabi_i2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fc ff4d 	bl	8000550 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4923      	ldr	r1, [pc, #140]	; (8003748 <Trajectory_Eva+0x700>)
 80036bc:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <Trajectory_Eva+0x6e4>)
 80036c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <Trajectory_Eva+0x704>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc fd8a 	bl	80001e4 <__adddf3>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4915      	ldr	r1, [pc, #84]	; (800372c <Trajectory_Eva+0x6e4>)
 80036d6:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <Trajectory_Eva+0x6d8>)
 80036dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <Trajectory_Eva+0x704>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc fd7d 	bl	80001e4 <__adddf3>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	490c      	ldr	r1, [pc, #48]	; (8003720 <Trajectory_Eva+0x6d8>)
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80036f4:	e011      	b.n	800371a <Trajectory_Eva+0x6d2>
			x = x_final;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <Trajectory_Eva+0x708>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	4910      	ldr	r1, [pc, #64]	; (8003740 <Trajectory_Eva+0x6f8>)
 80036fe:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8003702:	4910      	ldr	r1, [pc, #64]	; (8003744 <Trajectory_Eva+0x6fc>)
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <Trajectory_Eva+0x70c>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
		break;
 8003716:	e000      	b.n	800371a <Trajectory_Eva+0x6d2>
		break;
 8003718:	bf00      	nop
}
 800371a:	bf00      	nop
 800371c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003720:	20000260 	.word	0x20000260
 8003724:	20001038 	.word	0x20001038
 8003728:	20001028 	.word	0x20001028
 800372c:	20000250 	.word	0x20000250
 8003730:	20001018 	.word	0x20001018
 8003734:	20000fe4 	.word	0x20000fe4
 8003738:	3fe00000 	.word	0x3fe00000
 800373c:	20001000 	.word	0x20001000
 8003740:	20000908 	.word	0x20000908
 8003744:	20000910 	.word	0x20000910
 8003748:	20000918 	.word	0x20000918
 800374c:	20000268 	.word	0x20000268
 8003750:	20000ff0 	.word	0x20000ff0
 8003754:	20000fe0 	.word	0x20000fe0

08003758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_MspInit+0x4c>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_MspInit+0x4c>)
 8003768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376c:	6453      	str	r3, [r2, #68]	; 0x44
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_MspInit+0x4c>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_MspInit+0x4c>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <HAL_MspInit+0x4c>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_MspInit+0x4c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003796:	2007      	movs	r0, #7
 8003798:	f000 fc84 	bl	80040a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800

080037a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_I2C_MspInit+0xa8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d13d      	bne.n	8003846 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_I2C_MspInit+0xac>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_I2C_MspInit+0xac>)
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <HAL_I2C_MspInit+0xac>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ec:	2312      	movs	r3, #18
 80037ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f4:	2303      	movs	r3, #3
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037f8:	2304      	movs	r3, #4
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	4619      	mov	r1, r3
 8003802:	4815      	ldr	r0, [pc, #84]	; (8003858 <HAL_I2C_MspInit+0xb0>)
 8003804:	f001 f89e 	bl	8004944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800380e:	2312      	movs	r3, #18
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800381a:	2309      	movs	r3, #9
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	4619      	mov	r1, r3
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <HAL_I2C_MspInit+0xb0>)
 8003826:	f001 f88d 	bl	8004944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_I2C_MspInit+0xac>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_I2C_MspInit+0xac>)
 8003834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_I2C_MspInit+0xac>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	; 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40005800 	.word	0x40005800
 8003854:	40023800 	.word	0x40023800
 8003858:	40020400 	.word	0x40020400

0800385c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d12c      	bne.n	80038d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80038b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80038ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2303      	movs	r3, #3
 80038c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038c8:	2306      	movs	r3, #6
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	4805      	ldr	r0, [pc, #20]	; (80038e8 <HAL_SPI_MspInit+0x8c>)
 80038d4:	f001 f836 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038d8:	bf00      	nop
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40003c00 	.word	0x40003c00
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020800 	.word	0x40020800

080038ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a38      	ldr	r2, [pc, #224]	; (80039dc <HAL_TIM_Base_MspInit+0xf0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d116      	bne.n	800392c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4a36      	ldr	r2, [pc, #216]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6453      	str	r3, [r2, #68]	; 0x44
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	201a      	movs	r0, #26
 8003920:	f000 fbcb 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003924:	201a      	movs	r0, #26
 8003926:	f000 fbe4 	bl	80040f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800392a:	e052      	b.n	80039d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <HAL_TIM_Base_MspInit+0xf8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d116      	bne.n	8003964 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2100      	movs	r1, #0
 8003956:	201d      	movs	r0, #29
 8003958:	f000 fbaf 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800395c:	201d      	movs	r0, #29
 800395e:	f000 fbc8 	bl	80040f2 <HAL_NVIC_EnableIRQ>
}
 8003962:	e036      	b.n	80039d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <HAL_TIM_Base_MspInit+0xfc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d116      	bne.n	800399c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2032      	movs	r0, #50	; 0x32
 8003990:	f000 fb93 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003994:	2032      	movs	r0, #50	; 0x32
 8003996:	f000 fbac 	bl	80040f2 <HAL_NVIC_EnableIRQ>
}
 800399a:	e01a      	b.n	80039d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_TIM_Base_MspInit+0x100>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d115      	bne.n	80039d2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_TIM_Base_MspInit+0xf4>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	201a      	movs	r0, #26
 80039c8:	f000 fb77 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80039cc:	201a      	movs	r0, #26
 80039ce:	f000 fb90 	bl	80040f2 <HAL_NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40014800 	.word	0x40014800

080039f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d12b      	bne.n	8003a6a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	f107 0314 	add.w	r3, r7, #20
 8003a62:	4619      	mov	r1, r3
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a66:	f000 ff6d 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a6a:	bf00      	nop
 8003a6c:	3728      	adds	r7, #40	; 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000

08003a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <HAL_TIM_MspPostInit+0x68>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d11e      	bne.n	8003adc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_TIM_MspPostInit+0x6c>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <HAL_TIM_MspPostInit+0x6c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_TIM_MspPostInit+0x6c>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4805      	ldr	r0, [pc, #20]	; (8003aec <HAL_TIM_MspPostInit+0x70>)
 8003ad8:	f000 ff34 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003adc:	bf00      	nop
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40020000 	.word	0x40020000

08003af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	; 0x30
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_UART_MspInit+0x154>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d162      	bne.n	8003bd8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b20:	6413      	str	r3, [r2, #64]	; 0x40
 8003b22:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a44      	ldr	r2, [pc, #272]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2303      	movs	r3, #3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	4839      	ldr	r0, [pc, #228]	; (8003c4c <HAL_UART_MspInit+0x15c>)
 8003b66:	f000 feed 	bl	8004944 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b6c:	4a39      	ldr	r2, [pc, #228]	; (8003c54 <HAL_UART_MspInit+0x164>)
 8003b6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b70:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b78:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b7a:	2240      	movs	r2, #64	; 0x40
 8003b7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b7e:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b8c:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003baa:	4829      	ldr	r0, [pc, #164]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003bac:	f000 fabc 	bl	8004128 <HAL_DMA_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003bb6:	f7fe ff51 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <HAL_UART_MspInit+0x160>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2026      	movs	r0, #38	; 0x26
 8003bcc:	f000 fa75 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bd0:	2026      	movs	r0, #38	; 0x26
 8003bd2:	f000 fa8e 	bl	80040f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003bd6:	e031      	b.n	8003c3c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_UART_MspInit+0x168>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d12c      	bne.n	8003c3c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003bec:	f043 0320 	orr.w	r3, r3, #32
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_UART_MspInit+0x158>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	4619      	mov	r1, r3
 8003c36:	4805      	ldr	r0, [pc, #20]	; (8003c4c <HAL_UART_MspInit+0x15c>)
 8003c38:	f000 fe84 	bl	8004944 <HAL_GPIO_Init>
}
 8003c3c:	bf00      	nop
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40004400 	.word	0x40004400
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	2000089c 	.word	0x2000089c
 8003c54:	400260a0 	.word	0x400260a0
 8003c58:	40011400 	.word	0x40011400

08003c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <NMI_Handler+0x4>

08003c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c66:	e7fe      	b.n	8003c66 <HardFault_Handler+0x4>

08003c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <MemManage_Handler+0x4>

08003c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c72:	e7fe      	b.n	8003c72 <BusFault_Handler+0x4>

08003c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c78:	e7fe      	b.n	8003c78 <UsageFault_Handler+0x4>

08003c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca8:	f000 f8e8 	bl	8003e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8003cb4:	2004      	movs	r0, #4
 8003cb6:	f000 fffb 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003cc2:	2008      	movs	r0, #8
 8003cc4:	f000 fff4 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <DMA1_Stream6_IRQHandler+0x10>)
 8003cd2:	f000 fbc1 	bl	8004458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000089c 	.word	0x2000089c

08003ce0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8003ce4:	2040      	movs	r0, #64	; 0x40
 8003ce6:	f000 ffe3 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8003cea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cee:	f000 ffdf 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cfc:	4803      	ldr	r0, [pc, #12]	; (8003d0c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003cfe:	f003 fbb7 	bl	8007470 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003d02:	4803      	ldr	r0, [pc, #12]	; (8003d10 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003d04:	f003 fbb4 	bl	8007470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000430 	.word	0x20000430
 8003d10:	20000700 	.word	0x20000700

08003d14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <TIM3_IRQHandler+0x10>)
 8003d1a:	f003 fba9 	bl	8007470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000598 	.word	0x20000598

08003d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <USART2_IRQHandler+0x10>)
 8003d2e:	f004 fea7 	bl	8008a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200007b4 	.word	0x200007b4

08003d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003d40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d44:	f000 ffb4 	bl	8004cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <TIM5_IRQHandler+0x10>)
 8003d52:	f003 fb8d 	bl	8007470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000064c 	.word	0x2000064c

08003d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <SystemInit+0x20>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <SystemInit+0x20>)
 8003d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d8a:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d8c:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d90:	e002      	b.n	8003d98 <LoopCopyDataInit>

08003d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d96:	3304      	adds	r3, #4

08003d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d9c:	d3f9      	bcc.n	8003d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003da0:	4c0b      	ldr	r4, [pc, #44]	; (8003dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da4:	e001      	b.n	8003daa <LoopFillZerobss>

08003da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da8:	3204      	adds	r2, #4

08003daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dac:	d3fb      	bcc.n	8003da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dae:	f7ff ffd7 	bl	8003d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003db2:	f005 feb1 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db6:	f7fd fea7 	bl	8001b08 <main>
  bx  lr    
 8003dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc4:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8003dc8:	08009de0 	.word	0x08009de0
  ldr r2, =_sbss
 8003dcc:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8003dd0:	2000104c 	.word	0x2000104c

08003dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd4:	e7fe      	b.n	8003dd4 <ADC_IRQHandler>
	...

08003dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <HAL_Init+0x40>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_Init+0x40>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_Init+0x40>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <HAL_Init+0x40>)
 8003dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_Init+0x40>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_Init+0x40>)
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e00:	2003      	movs	r0, #3
 8003e02:	f000 f94f 	bl	80040a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f000 f808 	bl	8003e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e0c:	f7ff fca4 	bl	8003758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00

08003e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_InitTick+0x54>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_InitTick+0x58>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f967 	bl	800410e <HAL_SYSTICK_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00e      	b.n	8003e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d80a      	bhi.n	8003e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e50:	2200      	movs	r2, #0
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f000 f92f 	bl	80040ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e5c:	4a06      	ldr	r2, [pc, #24]	; (8003e78 <HAL_InitTick+0x5c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200002d0 	.word	0x200002d0
 8003e74:	200002d8 	.word	0x200002d8
 8003e78:	200002d4 	.word	0x200002d4

08003e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_IncTick+0x20>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_IncTick+0x24>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <HAL_IncTick+0x24>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200002d8 	.word	0x200002d8
 8003ea0:	20001048 	.word	0x20001048

08003ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_GetTick+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20001048 	.word	0x20001048

08003ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff ffee 	bl	8003ea4 <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d005      	beq.n	8003ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_Delay+0x44>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ee2:	bf00      	nop
 8003ee4:	f7ff ffde 	bl	8003ea4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d8f7      	bhi.n	8003ee4 <HAL_Delay+0x28>
  {
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200002d8 	.word	0x200002d8

08003f04 <__NVIC_SetPriorityGrouping>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	60d3      	str	r3, [r2, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <__NVIC_GetPriorityGrouping>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <__NVIC_GetPriorityGrouping+0x18>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0307 	and.w	r3, r3, #7
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_EnableIRQ>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db0b      	blt.n	8003f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <__NVIC_EnableIRQ+0x38>)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e100 	.word	0xe000e100

08003fa4 <__NVIC_SetPriority>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	db0a      	blt.n	8003fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	490c      	ldr	r1, [pc, #48]	; (8003ff0 <__NVIC_SetPriority+0x4c>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fcc:	e00a      	b.n	8003fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <__NVIC_SetPriority+0x50>)
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	0112      	lsls	r2, r2, #4
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	761a      	strb	r2, [r3, #24]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000e100 	.word	0xe000e100
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <NVIC_EncodePriority>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f1c3 0307 	rsb	r3, r3, #7
 8004012:	2b04      	cmp	r3, #4
 8004014:	bf28      	it	cs
 8004016:	2304      	movcs	r3, #4
 8004018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3304      	adds	r3, #4
 800401e:	2b06      	cmp	r3, #6
 8004020:	d902      	bls.n	8004028 <NVIC_EncodePriority+0x30>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3b03      	subs	r3, #3
 8004026:	e000      	b.n	800402a <NVIC_EncodePriority+0x32>
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	401a      	ands	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004040:	f04f 31ff 	mov.w	r1, #4294967295
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	43d9      	mvns	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	4313      	orrs	r3, r2
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004070:	d301      	bcc.n	8004076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004072:	2301      	movs	r3, #1
 8004074:	e00f      	b.n	8004096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <SysTick_Config+0x40>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800407e:	210f      	movs	r1, #15
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	f7ff ff8e 	bl	8003fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <SysTick_Config+0x40>)
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <SysTick_Config+0x40>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010

080040a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff29 	bl	8003f04 <__NVIC_SetPriorityGrouping>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040cc:	f7ff ff3e 	bl	8003f4c <__NVIC_GetPriorityGrouping>
 80040d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7ff ff8e 	bl	8003ff8 <NVIC_EncodePriority>
 80040dc:	4602      	mov	r2, r0
 80040de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff5d 	bl	8003fa4 <__NVIC_SetPriority>
}
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff31 	bl	8003f68 <__NVIC_EnableIRQ>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ffa2 	bl	8004060 <SysTick_Config>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff feb6 	bl	8003ea4 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e099      	b.n	8004278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004164:	e00f      	b.n	8004186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004166:	f7ff fe9d 	bl	8003ea4 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b05      	cmp	r3, #5
 8004172:	d908      	bls.n	8004186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e078      	b.n	8004278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e8      	bne.n	8004166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_DMA_Init+0x158>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d107      	bne.n	80041f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	4313      	orrs	r3, r2
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	2b04      	cmp	r3, #4
 8004218:	d117      	bne.n	800424a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fb0d 	bl	800484c <DMA_CheckFifoParam>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004246:	2301      	movs	r3, #1
 8004248:	e016      	b.n	8004278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fac4 	bl	80047e0 <DMA_CalcBaseAndBitshift>
 8004258:	4603      	mov	r3, r0
 800425a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	f010803f 	.word	0xf010803f

08004284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Start_IT+0x26>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e040      	b.n	800432c <HAL_DMA_Start_IT+0xa8>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12f      	bne.n	800431e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fa56 	bl	8004784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	409a      	lsls	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0216 	orr.w	r2, r2, #22
 80042f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0208 	orr.w	r2, r2, #8
 800430a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e005      	b.n	800432a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004342:	f7ff fdaf 	bl	8003ea4 <HAL_GetTick>
 8004346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d008      	beq.n	8004366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e052      	b.n	800440c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_Abort+0x62>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043b6:	e013      	b.n	80043e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043b8:	f7ff fd74 	bl	8003ea4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d90c      	bls.n	80043e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2203      	movs	r2, #3
 80043d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e015      	b.n	800440c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e4      	bne.n	80043b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	223f      	movs	r2, #63	; 0x3f
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d004      	beq.n	8004432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2280      	movs	r2, #128	; 0x80
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e00c      	b.n	800444c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2205      	movs	r2, #5
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004464:	4b8e      	ldr	r3, [pc, #568]	; (80046a0 <HAL_DMA_IRQHandler+0x248>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a8e      	ldr	r2, [pc, #568]	; (80046a4 <HAL_DMA_IRQHandler+0x24c>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2208      	movs	r2, #8
 8004484:	409a      	lsls	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0204 	bic.w	r2, r2, #4
 80044aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	2208      	movs	r2, #8
 80044b2:	409a      	lsls	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d012      	beq.n	80044fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	2201      	movs	r2, #1
 80044e8:	409a      	lsls	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	2204      	movs	r2, #4
 8004500:	409a      	lsls	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	2204      	movs	r2, #4
 800451e:	409a      	lsls	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	2210      	movs	r2, #16
 8004536:	409a      	lsls	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d043      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03c      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004552:	2210      	movs	r2, #16
 8004554:	409a      	lsls	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d018      	beq.n	800459a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d024      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
 8004586:	e01f      	b.n	80045c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
 8004598:	e016      	b.n	80045c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0208 	bic.w	r2, r2, #8
 80045b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	2220      	movs	r2, #32
 80045ce:	409a      	lsls	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 808f 	beq.w	80046f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8087 	beq.w	80046f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	2220      	movs	r2, #32
 80045f0:	409a      	lsls	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d136      	bne.n	8004670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0216 	bic.w	r2, r2, #22
 8004610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_DMA_IRQHandler+0x1da>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0208 	bic.w	r2, r2, #8
 8004640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	223f      	movs	r2, #63	; 0x3f
 8004648:	409a      	lsls	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d07e      	beq.n	8004764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
        }
        return;
 800466e:	e079      	b.n	8004764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01d      	beq.n	80046ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	2b00      	cmp	r3, #0
 8004692:	d031      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
 800469c:	e02c      	b.n	80046f8 <HAL_DMA_IRQHandler+0x2a0>
 800469e:	bf00      	nop
 80046a0:	200002d0 	.word	0x200002d0
 80046a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d023      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	e01e      	b.n	80046f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10f      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0210 	bic.w	r2, r2, #16
 80046d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d032      	beq.n	8004766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d022      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2205      	movs	r2, #5
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3301      	adds	r3, #1
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	429a      	cmp	r2, r3
 800472e:	d307      	bcc.n	8004740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f2      	bne.n	8004724 <HAL_DMA_IRQHandler+0x2cc>
 800473e:	e000      	b.n	8004742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004740:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	e000      	b.n	8004766 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004764:	bf00      	nop
    }
  }
}
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d108      	bne.n	80047c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047c2:	e007      	b.n	80047d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	3b10      	subs	r3, #16
 80047f0:	4a14      	ldr	r2, [pc, #80]	; (8004844 <DMA_CalcBaseAndBitshift+0x64>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <DMA_CalcBaseAndBitshift+0x68>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d909      	bls.n	8004822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	659a      	str	r2, [r3, #88]	; 0x58
 8004820:	e007      	b.n	8004832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	aaaaaaab 	.word	0xaaaaaaab
 8004848:	08009dc8 	.word	0x08009dc8

0800484c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11f      	bne.n	80048a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d856      	bhi.n	800491a <DMA_CheckFifoParam+0xce>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <DMA_CheckFifoParam+0x28>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	08004897 	.word	0x08004897
 800487c:	08004885 	.word	0x08004885
 8004880:	0800491b 	.word	0x0800491b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d046      	beq.n	800491e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e043      	b.n	800491e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800489e:	d140      	bne.n	8004922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e03d      	b.n	8004922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ae:	d121      	bne.n	80048f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d837      	bhi.n	8004926 <DMA_CheckFifoParam+0xda>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <DMA_CheckFifoParam+0x70>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d3 	.word	0x080048d3
 80048c4:	080048cd 	.word	0x080048cd
 80048c8:	080048e5 	.word	0x080048e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e030      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d025      	beq.n	800492a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e022      	b.n	800492a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ec:	d11f      	bne.n	800492e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048f2:	e01c      	b.n	800492e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d903      	bls.n	8004902 <DMA_CheckFifoParam+0xb6>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d003      	beq.n	8004908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004900:	e018      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      break;
 8004906:	e015      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e00b      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 800491a:	bf00      	nop
 800491c:	e00a      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e008      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e006      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e004      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
 800492c:	e002      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;   
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
    }
  } 
  
  return status; 
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e159      	b.n	8004c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004960:	2201      	movs	r2, #1
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	f040 8148 	bne.w	8004c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d005      	beq.n	8004996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004992:	2b02      	cmp	r3, #2
 8004994:	d130      	bne.n	80049f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	2203      	movs	r2, #3
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049cc:	2201      	movs	r2, #1
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 0201 	and.w	r2, r3, #1
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d017      	beq.n	8004a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d123      	bne.n	8004a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	08da      	lsrs	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3208      	adds	r2, #8
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	220f      	movs	r2, #15
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	08da      	lsrs	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3208      	adds	r2, #8
 8004a82:	69b9      	ldr	r1, [r7, #24]
 8004a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	2203      	movs	r2, #3
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a2 	beq.w	8004c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b57      	ldr	r3, [pc, #348]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4a56      	ldr	r2, [pc, #344]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ada:	4b54      	ldr	r3, [pc, #336]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae6:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	3302      	adds	r3, #2
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a49      	ldr	r2, [pc, #292]	; (8004c34 <HAL_GPIO_Init+0x2f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d019      	beq.n	8004b46 <HAL_GPIO_Init+0x202>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a48      	ldr	r2, [pc, #288]	; (8004c38 <HAL_GPIO_Init+0x2f4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_GPIO_Init+0x1fe>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <HAL_GPIO_Init+0x2f8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00d      	beq.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_GPIO_Init+0x2fc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <HAL_GPIO_Init+0x1f6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a45      	ldr	r2, [pc, #276]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d101      	bne.n	8004b36 <HAL_GPIO_Init+0x1f2>
 8004b32:	2304      	movs	r3, #4
 8004b34:	e008      	b.n	8004b48 <HAL_GPIO_Init+0x204>
 8004b36:	2307      	movs	r3, #7
 8004b38:	e006      	b.n	8004b48 <HAL_GPIO_Init+0x204>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e004      	b.n	8004b48 <HAL_GPIO_Init+0x204>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e002      	b.n	8004b48 <HAL_GPIO_Init+0x204>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_GPIO_Init+0x204>
 8004b46:	2300      	movs	r3, #0
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f002 0203 	and.w	r2, r2, #3
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	4093      	lsls	r3, r2
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b58:	4935      	ldr	r1, [pc, #212]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bde:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c08:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <HAL_GPIO_Init+0x304>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	f67f aea2 	bls.w	8004960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40013800 	.word	0x40013800
 8004c34:	40020000 	.word	0x40020000
 8004c38:	40020400 	.word	0x40020400
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	40020c00 	.word	0x40020c00
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40013c00 	.word	0x40013c00

08004c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
 8004c68:	e001      	b.n	8004c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c8c:	787b      	ldrb	r3, [r7, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c98:	e003      	b.n	8004ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	041a      	lsls	r2, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cc6:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd fe84 	bl	80029dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40013c00 	.word	0x40013c00

08004ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e12b      	b.n	8004f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe fd4e 	bl	80037a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d44:	f001 fbd2 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8004d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a81      	ldr	r2, [pc, #516]	; (8004f54 <HAL_I2C_Init+0x274>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d807      	bhi.n	8004d64 <HAL_I2C_Init+0x84>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a80      	ldr	r2, [pc, #512]	; (8004f58 <HAL_I2C_Init+0x278>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	bf94      	ite	ls
 8004d5c:	2301      	movls	r3, #1
 8004d5e:	2300      	movhi	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e006      	b.n	8004d72 <HAL_I2C_Init+0x92>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a7d      	ldr	r2, [pc, #500]	; (8004f5c <HAL_I2C_Init+0x27c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf94      	ite	ls
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	2300      	movhi	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0e7      	b.n	8004f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a78      	ldr	r2, [pc, #480]	; (8004f60 <HAL_I2C_Init+0x280>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0c9b      	lsrs	r3, r3, #18
 8004d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a6a      	ldr	r2, [pc, #424]	; (8004f54 <HAL_I2C_Init+0x274>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d802      	bhi.n	8004db4 <HAL_I2C_Init+0xd4>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3301      	adds	r3, #1
 8004db2:	e009      	b.n	8004dc8 <HAL_I2C_Init+0xe8>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	4a69      	ldr	r2, [pc, #420]	; (8004f64 <HAL_I2C_Init+0x284>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	495c      	ldr	r1, [pc, #368]	; (8004f54 <HAL_I2C_Init+0x274>)
 8004de4:	428b      	cmp	r3, r1
 8004de6:	d819      	bhi.n	8004e1c <HAL_I2C_Init+0x13c>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e59      	subs	r1, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_I2C_Init+0x138>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1e59      	subs	r1, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e10:	3301      	adds	r3, #1
 8004e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e16:	e051      	b.n	8004ebc <HAL_I2C_Init+0x1dc>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	e04f      	b.n	8004ebc <HAL_I2C_Init+0x1dc>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d111      	bne.n	8004e48 <HAL_I2C_Init+0x168>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	440b      	add	r3, r1
 8004e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e012      	b.n	8004e6e <HAL_I2C_Init+0x18e>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1e58      	subs	r0, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	0099      	lsls	r1, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Init+0x196>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e022      	b.n	8004ebc <HAL_I2C_Init+0x1dc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <HAL_I2C_Init+0x1bc>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1e58      	subs	r0, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	440b      	add	r3, r1
 8004e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e90:	3301      	adds	r3, #1
 8004e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	e00f      	b.n	8004ebc <HAL_I2C_Init+0x1dc>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1e58      	subs	r0, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	0099      	lsls	r1, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	6809      	ldr	r1, [r1, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6911      	ldr	r1, [r2, #16]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	4311      	orrs	r1, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	000186a0 	.word	0x000186a0
 8004f58:	001e847f 	.word	0x001e847f
 8004f5c:	003d08ff 	.word	0x003d08ff
 8004f60:	431bde83 	.word	0x431bde83
 8004f64:	10624dd3 	.word	0x10624dd3

08004f68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	461a      	mov	r2, r3
 8004f74:	460b      	mov	r3, r1
 8004f76:	817b      	strh	r3, [r7, #10]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7fe ff92 	bl	8003ea4 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	f040 80e0 	bne.w	8005150 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2319      	movs	r3, #25
 8004f96:	2201      	movs	r2, #1
 8004f98:	4970      	ldr	r1, [pc, #448]	; (800515c <HAL_I2C_Master_Transmit+0x1f4>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fc58 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e0d3      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_I2C_Master_Transmit+0x50>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0cc      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d007      	beq.n	8004fde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2221      	movs	r2, #33	; 0x21
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	893a      	ldrh	r2, [r7, #8]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a50      	ldr	r2, [pc, #320]	; (8005160 <HAL_I2C_Master_Transmit+0x1f8>)
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005020:	8979      	ldrh	r1, [r7, #10]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fac2 	bl	80055b0 <I2C_MasterRequestWrite>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e08d      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800504c:	e066      	b.n	800511c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fcd2 	bl	80059fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06b      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d11b      	bne.n	80050f0 <HAL_I2C_Master_Transmit+0x188>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d017      	beq.n	80050f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	6a39      	ldr	r1, [r7, #32]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fcc2 	bl	8005a7e <I2C_WaitOnBTFFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2b04      	cmp	r3, #4
 8005106:	d107      	bne.n	8005118 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005116:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e01a      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d194      	bne.n	800504e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	00100002 	.word	0x00100002
 8005160:	ffff0000 	.word	0xffff0000

08005164 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	; 0x30
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	461a      	mov	r2, r3
 8005170:	460b      	mov	r3, r1
 8005172:	817b      	strh	r3, [r7, #10]
 8005174:	4613      	mov	r3, r2
 8005176:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005178:	f7fe fe94 	bl	8003ea4 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b20      	cmp	r3, #32
 8005188:	f040 820b 	bne.w	80055a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2319      	movs	r3, #25
 8005192:	2201      	movs	r2, #1
 8005194:	497c      	ldr	r1, [pc, #496]	; (8005388 <HAL_I2C_Master_Receive+0x224>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fb5a 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	e1fe      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2C_Master_Receive+0x50>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e1f7      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d007      	beq.n	80051da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2222      	movs	r2, #34	; 0x22
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2210      	movs	r2, #16
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	893a      	ldrh	r2, [r7, #8]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a5c      	ldr	r2, [pc, #368]	; (800538c <HAL_I2C_Master_Receive+0x228>)
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800521c:	8979      	ldrh	r1, [r7, #10]
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fa46 	bl	80056b4 <I2C_MasterRequestRead>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1b8      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d113      	bne.n	8005262 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523a:	2300      	movs	r3, #0
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e18c      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	2b01      	cmp	r3, #1
 8005268:	d11b      	bne.n	80052a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e16c      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d11b      	bne.n	80052e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	e14c      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005308:	e138      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	2b03      	cmp	r3, #3
 8005310:	f200 80f1 	bhi.w	80054f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	2b01      	cmp	r3, #1
 800531a:	d123      	bne.n	8005364 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fbed 	bl	8005b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e139      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005362:	e10b      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005368:	2b02      	cmp	r3, #2
 800536a:	d14e      	bne.n	800540a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2200      	movs	r2, #0
 8005374:	4906      	ldr	r1, [pc, #24]	; (8005390 <HAL_I2C_Master_Receive+0x22c>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa6a 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e10e      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
 8005386:	bf00      	nop
 8005388:	00100002 	.word	0x00100002
 800538c:	ffff0000 	.word	0xffff0000
 8005390:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005408:	e0b8      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2200      	movs	r2, #0
 8005412:	4966      	ldr	r1, [pc, #408]	; (80055ac <HAL_I2C_Master_Receive+0x448>)
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fa1b 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0bf      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	494f      	ldr	r1, [pc, #316]	; (80055ac <HAL_I2C_Master_Receive+0x448>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f9ed 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e091      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f4:	e042      	b.n	800557c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fb00 	bl	8005b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e04c      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d118      	bne.n	800557c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f aec2 	bne.w	800530a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3728      	adds	r7, #40	; 0x28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	00010004 	.word	0x00010004

080055b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	460b      	mov	r3, r1
 80055be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d006      	beq.n	80055da <I2C_MasterRequestWrite+0x2a>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d003      	beq.n	80055da <I2C_MasterRequestWrite+0x2a>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d8:	d108      	bne.n	80055ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e00b      	b.n	8005604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	2b12      	cmp	r3, #18
 80055f2:	d107      	bne.n	8005604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f91d 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562a:	d103      	bne.n	8005634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e035      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005640:	d108      	bne.n	8005654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005642:	897b      	ldrh	r3, [r7, #10]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	e01b      	b.n	800568c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	11db      	asrs	r3, r3, #7
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f063 030f 	orn	r3, r3, #15
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	490e      	ldr	r1, [pc, #56]	; (80056ac <I2C_MasterRequestWrite+0xfc>)
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f943 	bl	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e010      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4907      	ldr	r1, [pc, #28]	; (80056b0 <I2C_MasterRequestWrite+0x100>)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f933 	bl	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	00010008 	.word	0x00010008
 80056b0:	00010002 	.word	0x00010002

080056b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d006      	beq.n	80056ee <I2C_MasterRequestRead+0x3a>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d003      	beq.n	80056ee <I2C_MasterRequestRead+0x3a>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ec:	d108      	bne.n	8005700 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e00b      	b.n	8005718 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b11      	cmp	r3, #17
 8005706:	d107      	bne.n	8005718 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f893 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d103      	bne.n	8005748 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e079      	b.n	8005840 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005754:	d108      	bne.n	8005768 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	e05f      	b.n	8005828 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005768:	897b      	ldrh	r3, [r7, #10]
 800576a:	11db      	asrs	r3, r3, #7
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0306 	and.w	r3, r3, #6
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f063 030f 	orn	r3, r3, #15
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4930      	ldr	r1, [pc, #192]	; (8005848 <I2C_MasterRequestRead+0x194>)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f8b9 	bl	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e054      	b.n	8005840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4929      	ldr	r1, [pc, #164]	; (800584c <I2C_MasterRequestRead+0x198>)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f8a9 	bl	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e044      	b.n	8005840 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f831 	bl	8005850 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005802:	d103      	bne.n	800580c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e017      	b.n	8005840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	11db      	asrs	r3, r3, #7
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 0306 	and.w	r3, r3, #6
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f063 030e 	orn	r3, r3, #14
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4907      	ldr	r1, [pc, #28]	; (800584c <I2C_MasterRequestRead+0x198>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f865 	bl	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	00010008 	.word	0x00010008
 800584c:	00010002 	.word	0x00010002

08005850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005860:	e025      	b.n	80058ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d021      	beq.n	80058ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fe fb1b 	bl	8003ea4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d116      	bne.n	80058ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e023      	b.n	80058f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10d      	bne.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	e00c      	b.n	80058ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	43da      	mvns	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d0b6      	beq.n	8005862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800590c:	e051      	b.n	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591c:	d123      	bne.n	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005936:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f043 0204 	orr.w	r2, r3, #4
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e046      	b.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d021      	beq.n	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fe fa99 	bl	8003ea4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d116      	bne.n	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e020      	b.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10c      	bne.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	43da      	mvns	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	e00b      	b.n	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	43da      	mvns	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4013      	ands	r3, r2
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d18d      	bne.n	800590e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a08:	e02d      	b.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f8ce 	bl	8005bac <I2C_IsAcknowledgeFailed>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e02d      	b.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d021      	beq.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fe fa3f 	bl	8003ea4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e007      	b.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d1ca      	bne.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a8a:	e02d      	b.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f88d 	bl	8005bac <I2C_IsAcknowledgeFailed>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e02d      	b.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d021      	beq.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa4:	f7fe f9fe 	bl	8003ea4 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d116      	bne.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e007      	b.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d1ca      	bne.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b0c:	e042      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d119      	bne.n	8005b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e029      	b.n	8005ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b50:	f7fe f9a8 	bl	8003ea4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e007      	b.n	8005ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d1b5      	bne.n	8005b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc2:	d11b      	bne.n	8005bfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0204 	orr.w	r2, r3, #4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e267      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d075      	beq.n	8005d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c2a:	4b88      	ldr	r3, [pc, #544]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c36:	4b85      	ldr	r3, [pc, #532]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d112      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c42:	4b82      	ldr	r3, [pc, #520]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	4b7e      	ldr	r3, [pc, #504]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05b      	beq.n	8005d14 <HAL_RCC_OscConfig+0x108>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d157      	bne.n	8005d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e242      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d106      	bne.n	8005c80 <HAL_RCC_OscConfig+0x74>
 8005c72:	4b76      	ldr	r3, [pc, #472]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xb0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x98>
 8005c8a:	4b70      	ldr	r3, [pc, #448]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a6f      	ldr	r2, [pc, #444]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6c      	ldr	r2, [pc, #432]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xb0>
 8005ca4:	4b69      	ldr	r3, [pc, #420]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a68      	ldr	r2, [pc, #416]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b66      	ldr	r3, [pc, #408]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a65      	ldr	r2, [pc, #404]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fe f8ee 	bl	8003ea4 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fe f8ea 	bl	8003ea4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e207      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b5b      	ldr	r3, [pc, #364]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xc0>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7fe f8da 	bl	8003ea4 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fe f8d6 	bl	8003ea4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1f3      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	4b51      	ldr	r3, [pc, #324]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0xe8>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d063      	beq.n	8005dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d22:	4b4a      	ldr	r3, [pc, #296]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d11c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3a:	4b44      	ldr	r3, [pc, #272]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_RCC_OscConfig+0x152>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1c7      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4937      	ldr	r1, [pc, #220]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	e03a      	b.n	8005dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d020      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d7c:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <HAL_RCC_OscConfig+0x244>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d82:	f7fe f88f 	bl	8003ea4 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8a:	f7fe f88b 	bl	8003ea4 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e1a8      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da8:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4925      	ldr	r1, [pc, #148]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]
 8005dbc:	e015      	b.n	8005dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_RCC_OscConfig+0x244>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fe f86e 	bl	8003ea4 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dcc:	f7fe f86a 	bl	8003ea4 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e187      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d036      	beq.n	8005e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <HAL_RCC_OscConfig+0x248>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e04:	f7fe f84e 	bl	8003ea4 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0c:	f7fe f84a 	bl	8003ea4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e167      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0x200>
 8005e2a:	e01b      	b.n	8005e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_OscConfig+0x248>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e32:	f7fe f837 	bl	8003ea4 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e38:	e00e      	b.n	8005e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3a:	f7fe f833 	bl	8003ea4 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d907      	bls.n	8005e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e150      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	42470000 	.word	0x42470000
 8005e54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e58:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ea      	bne.n	8005e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8097 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e76:	4b81      	ldr	r3, [pc, #516]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10f      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	4b7d      	ldr	r3, [pc, #500]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	4a7c      	ldr	r2, [pc, #496]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6413      	str	r3, [r2, #64]	; 0x40
 8005e92:	4b7a      	ldr	r3, [pc, #488]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea2:	4b77      	ldr	r3, [pc, #476]	; (8006080 <HAL_RCC_OscConfig+0x474>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d118      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eae:	4b74      	ldr	r3, [pc, #464]	; (8006080 <HAL_RCC_OscConfig+0x474>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a73      	ldr	r2, [pc, #460]	; (8006080 <HAL_RCC_OscConfig+0x474>)
 8005eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eba:	f7fd fff3 	bl	8003ea4 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec2:	f7fd ffef 	bl	8003ea4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e10c      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed4:	4b6a      	ldr	r3, [pc, #424]	; (8006080 <HAL_RCC_OscConfig+0x474>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x2ea>
 8005ee8:	4b64      	ldr	r3, [pc, #400]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	4a63      	ldr	r2, [pc, #396]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef4:	e01c      	b.n	8005f30 <HAL_RCC_OscConfig+0x324>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x30c>
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	4a5e      	ldr	r2, [pc, #376]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f04:	f043 0304 	orr.w	r3, r3, #4
 8005f08:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0a:	4b5c      	ldr	r3, [pc, #368]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	4a5b      	ldr	r2, [pc, #364]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70
 8005f16:	e00b      	b.n	8005f30 <HAL_RCC_OscConfig+0x324>
 8005f18:	4b58      	ldr	r3, [pc, #352]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a57      	ldr	r2, [pc, #348]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	4b55      	ldr	r3, [pc, #340]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a54      	ldr	r2, [pc, #336]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f2a:	f023 0304 	bic.w	r3, r3, #4
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d015      	beq.n	8005f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fd ffb4 	bl	8003ea4 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fd ffb0 	bl	8003ea4 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0cb      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f56:	4b49      	ldr	r3, [pc, #292]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0ee      	beq.n	8005f40 <HAL_RCC_OscConfig+0x334>
 8005f62:	e014      	b.n	8005f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f64:	f7fd ff9e 	bl	8003ea4 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6c:	f7fd ff9a 	bl	8003ea4 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0b5      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f82:	4b3e      	ldr	r3, [pc, #248]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1ee      	bne.n	8005f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80a1 	beq.w	80060ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005faa:	4b34      	ldr	r3, [pc, #208]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d05c      	beq.n	8006070 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d141      	bne.n	8006042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbe:	4b31      	ldr	r3, [pc, #196]	; (8006084 <HAL_RCC_OscConfig+0x478>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc4:	f7fd ff6e 	bl	8003ea4 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fd ff6a 	bl	8003ea4 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e087      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69da      	ldr	r2, [r3, #28]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	3b01      	subs	r3, #1
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	061b      	lsls	r3, r3, #24
 800600e:	491b      	ldr	r1, [pc, #108]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8006010:	4313      	orrs	r3, r2
 8006012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006014:	4b1b      	ldr	r3, [pc, #108]	; (8006084 <HAL_RCC_OscConfig+0x478>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601a:	f7fd ff43 	bl	8003ea4 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006022:	f7fd ff3f 	bl	8003ea4 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e05c      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x416>
 8006040:	e054      	b.n	80060ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_OscConfig+0x478>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd ff2c 	bl	8003ea4 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fd ff28 	bl	8003ea4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e045      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_RCC_OscConfig+0x470>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x444>
 800606e:	e03d      	b.n	80060ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d107      	bne.n	8006088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e038      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
 800607c:	40023800 	.word	0x40023800
 8006080:	40007000 	.word	0x40007000
 8006084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x4ec>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d028      	beq.n	80060e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d121      	bne.n	80060e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d11a      	bne.n	80060e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060b8:	4013      	ands	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d111      	bne.n	80060e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	3b01      	subs	r3, #1
 80060d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d107      	bne.n	80060e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800

080060fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0cc      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006110:	4b68      	ldr	r3, [pc, #416]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d90c      	bls.n	8006138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611e:	4b65      	ldr	r3, [pc, #404]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b63      	ldr	r3, [pc, #396]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e0b8      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006150:	4b59      	ldr	r3, [pc, #356]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4a58      	ldr	r2, [pc, #352]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800615a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006168:	4b53      	ldr	r3, [pc, #332]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4a52      	ldr	r2, [pc, #328]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006174:	4b50      	ldr	r3, [pc, #320]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	494d      	ldr	r1, [pc, #308]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d044      	beq.n	800621c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d107      	bne.n	80061aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	4b47      	ldr	r3, [pc, #284]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d119      	bne.n	80061da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e07f      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d003      	beq.n	80061ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ba:	4b3f      	ldr	r3, [pc, #252]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e06f      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ca:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e067      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061da:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f023 0203 	bic.w	r2, r3, #3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4934      	ldr	r1, [pc, #208]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061ec:	f7fd fe5a 	bl	8003ea4 <HAL_GetTick>
 80061f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f2:	e00a      	b.n	800620a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f4:	f7fd fe56 	bl	8003ea4 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e04f      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620a:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 020c 	and.w	r2, r3, #12
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	429a      	cmp	r2, r3
 800621a:	d1eb      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d20c      	bcs.n	8006244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e032      	b.n	80062aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006250:	4b19      	ldr	r3, [pc, #100]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4916      	ldr	r1, [pc, #88]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	4313      	orrs	r3, r2
 8006260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	490e      	ldr	r1, [pc, #56]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006282:	f000 f821 	bl	80062c8 <HAL_RCC_GetSysClockFreq>
 8006286:	4602      	mov	r2, r0
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	490a      	ldr	r1, [pc, #40]	; (80062bc <HAL_RCC_ClockConfig+0x1c0>)
 8006294:	5ccb      	ldrb	r3, [r1, r3]
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <HAL_RCC_ClockConfig+0x1c4>)
 800629c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <HAL_RCC_ClockConfig+0x1c8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fd fdba 	bl	8003e1c <HAL_InitTick>

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	40023c00 	.word	0x40023c00
 80062b8:	40023800 	.word	0x40023800
 80062bc:	08009db0 	.word	0x08009db0
 80062c0:	200002d0 	.word	0x200002d0
 80062c4:	200002d4 	.word	0x200002d4

080062c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062cc:	b094      	sub	sp, #80	; 0x50
 80062ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	647b      	str	r3, [r7, #68]	; 0x44
 80062d4:	2300      	movs	r3, #0
 80062d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d8:	2300      	movs	r3, #0
 80062da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e0:	4b79      	ldr	r3, [pc, #484]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d00d      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0x40>
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	f200 80e1 	bhi.w	80064b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_RCC_GetSysClockFreq+0x34>
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d003      	beq.n	8006302 <HAL_RCC_GetSysClockFreq+0x3a>
 80062fa:	e0db      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062fc:	4b73      	ldr	r3, [pc, #460]	; (80064cc <HAL_RCC_GetSysClockFreq+0x204>)
 80062fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006300:	e0db      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006302:	4b73      	ldr	r3, [pc, #460]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006306:	e0d8      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006308:	4b6f      	ldr	r3, [pc, #444]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006312:	4b6d      	ldr	r3, [pc, #436]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d063      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	4b6a      	ldr	r3, [pc, #424]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	2200      	movs	r2, #0
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
 8006328:	63fa      	str	r2, [r7, #60]	; 0x3c
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
 8006336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800633a:	4622      	mov	r2, r4
 800633c:	462b      	mov	r3, r5
 800633e:	f04f 0000 	mov.w	r0, #0
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	0159      	lsls	r1, r3, #5
 8006348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634c:	0150      	lsls	r0, r2, #5
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4621      	mov	r1, r4
 8006354:	1a51      	subs	r1, r2, r1
 8006356:	6139      	str	r1, [r7, #16]
 8006358:	4629      	mov	r1, r5
 800635a:	eb63 0301 	sbc.w	r3, r3, r1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800636c:	4659      	mov	r1, fp
 800636e:	018b      	lsls	r3, r1, #6
 8006370:	4651      	mov	r1, sl
 8006372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006376:	4651      	mov	r1, sl
 8006378:	018a      	lsls	r2, r1, #6
 800637a:	4651      	mov	r1, sl
 800637c:	ebb2 0801 	subs.w	r8, r2, r1
 8006380:	4659      	mov	r1, fp
 8006382:	eb63 0901 	sbc.w	r9, r3, r1
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800639a:	4690      	mov	r8, r2
 800639c:	4699      	mov	r9, r3
 800639e:	4623      	mov	r3, r4
 80063a0:	eb18 0303 	adds.w	r3, r8, r3
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	462b      	mov	r3, r5
 80063a8:	eb49 0303 	adc.w	r3, r9, r3
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063ba:	4629      	mov	r1, r5
 80063bc:	024b      	lsls	r3, r1, #9
 80063be:	4621      	mov	r1, r4
 80063c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063c4:	4621      	mov	r1, r4
 80063c6:	024a      	lsls	r2, r1, #9
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	2200      	movs	r2, #0
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063d8:	f7fa fbba 	bl	8000b50 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e4:	e058      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e6:	4b38      	ldr	r3, [pc, #224]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	2200      	movs	r2, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	4611      	mov	r1, r2
 80063f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063f6:	623b      	str	r3, [r7, #32]
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
 80063fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	0159      	lsls	r1, r3, #5
 800640e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006412:	0150      	lsls	r0, r2, #5
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4641      	mov	r1, r8
 800641a:	ebb2 0a01 	subs.w	sl, r2, r1
 800641e:	4649      	mov	r1, r9
 8006420:	eb63 0b01 	sbc.w	fp, r3, r1
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006438:	ebb2 040a 	subs.w	r4, r2, sl
 800643c:	eb63 050b 	sbc.w	r5, r3, fp
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	00eb      	lsls	r3, r5, #3
 800644a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644e:	00e2      	lsls	r2, r4, #3
 8006450:	4614      	mov	r4, r2
 8006452:	461d      	mov	r5, r3
 8006454:	4643      	mov	r3, r8
 8006456:	18e3      	adds	r3, r4, r3
 8006458:	603b      	str	r3, [r7, #0]
 800645a:	464b      	mov	r3, r9
 800645c:	eb45 0303 	adc.w	r3, r5, r3
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800646e:	4629      	mov	r1, r5
 8006470:	028b      	lsls	r3, r1, #10
 8006472:	4621      	mov	r1, r4
 8006474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006478:	4621      	mov	r1, r4
 800647a:	028a      	lsls	r2, r1, #10
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	2200      	movs	r2, #0
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	61fa      	str	r2, [r7, #28]
 8006488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800648c:	f7fa fb60 	bl	8000b50 <__aeabi_uldivmod>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4613      	mov	r3, r2
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006498:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80064a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064b2:	e002      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <HAL_RCC_GetSysClockFreq+0x204>)
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3750      	adds	r7, #80	; 0x50
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c6:	bf00      	nop
 80064c8:	40023800 	.word	0x40023800
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	007a1200 	.word	0x007a1200

080064d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064da:	681b      	ldr	r3, [r3, #0]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200002d0 	.word	0x200002d0

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064f0:	f7ff fff0 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	0a9b      	lsrs	r3, r3, #10
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	; (8006510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40023800 	.word	0x40023800
 8006510:	08009dc0 	.word	0x08009dc0

08006514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006518:	f7ff ffdc 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 800651c:	4602      	mov	r2, r0
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	0b5b      	lsrs	r3, r3, #13
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	4903      	ldr	r1, [pc, #12]	; (8006538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800652a:	5ccb      	ldrb	r3, [r1, r3]
 800652c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40023800 	.word	0x40023800
 8006538:	08009dc0 	.word	0x08009dc0

0800653c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e07b      	b.n	8006646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655e:	d009      	beq.n	8006574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	61da      	str	r2, [r3, #28]
 8006566:	e005      	b.n	8006574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fd f964 	bl	800385c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	ea42 0103 	orr.w	r1, r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0104 	and.w	r1, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	f003 0210 	and.w	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b08c      	sub	sp, #48	; 0x30
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800665c:	2301      	movs	r3, #1
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x26>
 8006670:	2302      	movs	r3, #2
 8006672:	e18a      	b.n	800698a <HAL_SPI_TransmitReceive+0x33c>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800667c:	f7fd fc12 	bl	8003ea4 <HAL_GetTick>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800669a:	2b01      	cmp	r3, #1
 800669c:	d00f      	beq.n	80066be <HAL_SPI_TransmitReceive+0x70>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a4:	d107      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x68>
 80066ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d003      	beq.n	80066be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
 80066b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066bc:	e15b      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x82>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x82>
 80066ca:	887b      	ldrh	r3, [r7, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066d6:	e14e      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d003      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2205      	movs	r2, #5
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	887a      	ldrh	r2, [r7, #2]
 80066fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	887a      	ldrh	r2, [r7, #2]
 8006702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	887a      	ldrh	r2, [r7, #2]
 800670e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	887a      	ldrh	r2, [r7, #2]
 8006714:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d007      	beq.n	8006740 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006748:	d178      	bne.n	800683c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_SPI_TransmitReceive+0x10a>
 8006752:	8b7b      	ldrh	r3, [r7, #26]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d166      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677c:	e053      	b.n	8006826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d11b      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x176>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x176>
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d113      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	881a      	ldrh	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d119      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x1b8>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d014      	beq.n	8006806 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	b292      	uxth	r2, r2
 80067e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	1c9a      	adds	r2, r3, #2
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006802:	2301      	movs	r3, #1
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006806:	f7fd fb4d 	bl	8003ea4 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006812:	429a      	cmp	r2, r3
 8006814:	d807      	bhi.n	8006826 <HAL_SPI_TransmitReceive+0x1d8>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d003      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006824:	e0a7      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1a6      	bne.n	800677e <HAL_SPI_TransmitReceive+0x130>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1a1      	bne.n	800677e <HAL_SPI_TransmitReceive+0x130>
 800683a:	e07c      	b.n	8006936 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_TransmitReceive+0x1fc>
 8006844:	8b7b      	ldrh	r3, [r7, #26]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d16b      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006870:	e057      	b.n	8006922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b02      	cmp	r3, #2
 800687e:	d11c      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x26c>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x26c>
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d114      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d119      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x2ae>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d014      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f8:	2301      	movs	r3, #1
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068fc:	f7fd fad2 	bl	8003ea4 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006908:	429a      	cmp	r2, r3
 800690a:	d803      	bhi.n	8006914 <HAL_SPI_TransmitReceive+0x2c6>
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d102      	bne.n	800691a <HAL_SPI_TransmitReceive+0x2cc>
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006920:	e029      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1a2      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x224>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d19d      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f8b2 	bl	8006aa4 <SPI_EndRxTxTransaction>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006952:	e010      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	e000      	b.n	8006976 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800698a:	4618      	mov	r0, r3
 800698c:	3730      	adds	r7, #48	; 0x30
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069a4:	f7fd fa7e 	bl	8003ea4 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069b4:	f7fd fa76 	bl	8003ea4 <HAL_GetTick>
 80069b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069ba:	4b39      	ldr	r3, [pc, #228]	; (8006aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	015b      	lsls	r3, r3, #5
 80069c0:	0d1b      	lsrs	r3, r3, #20
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ca:	e054      	b.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d050      	beq.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d4:	f7fd fa66 	bl	8003ea4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d902      	bls.n	80069ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d13d      	bne.n	8006a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a02:	d111      	bne.n	8006a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0c:	d004      	beq.n	8006a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a16:	d107      	bne.n	8006a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a30:	d10f      	bne.n	8006a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e017      	b.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d19b      	bne.n	80069cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200002d0 	.word	0x200002d0

08006aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <SPI_EndRxTxTransaction+0x7c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <SPI_EndRxTxTransaction+0x80>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	0d5b      	lsrs	r3, r3, #21
 8006abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d112      	bne.n	8006af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff ff5a 	bl	8006994 <SPI_WaitFlagStateUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00f      	b.n	8006b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d0f2      	beq.n	8006af6 <SPI_EndRxTxTransaction+0x52>
 8006b10:	e000      	b.n	8006b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b12:	bf00      	nop
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200002d0 	.word	0x200002d0
 8006b24:	165e9f81 	.word	0x165e9f81

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e04c      	b.n	8006bd4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d111      	bne.n	8006b6a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fc0c 	bl	800836c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <HAL_TIM_Base_Init+0xb4>)
 8006b60:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f001 f929 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	080038ed 	.word	0x080038ed

08006be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d001      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e03c      	b.n	8006c72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <HAL_TIM_Base_Start+0xa0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_TIM_Base_Start+0x5c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c12:	d013      	beq.n	8006c3c <HAL_TIM_Base_Start+0x5c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <HAL_TIM_Base_Start+0xa4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_TIM_Base_Start+0x5c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <HAL_TIM_Base_Start+0xa8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_TIM_Base_Start+0x5c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <HAL_TIM_Base_Start+0xac>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_Base_Start+0x5c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <HAL_TIM_Base_Start+0xb0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d111      	bne.n	8006c60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d010      	beq.n	8006c70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0201 	orr.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5e:	e007      	b.n	8006c70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40000800 	.word	0x40000800
 8006c8c:	40000c00 	.word	0x40000c00
 8006c90:	40014000 	.word	0x40014000

08006c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e044      	b.n	8006d36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIM_Base_Start_IT+0xb0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_TIM_Base_Start_IT+0xb4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_TIM_Base_Start_IT+0xb8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_TIM_Base_Start_IT+0xbc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_TIM_Base_Start_IT+0xc0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d111      	bne.n	8006d24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d010      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	e007      	b.n	8006d34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40014000 	.word	0x40014000

08006d58 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e04c      	b.n	8006e04 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d111      	bne.n	8006d9a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 faf4 	bl	800836c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_TIM_OC_Init+0xb4>)
 8006d90:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f001 f811 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08006e11 	.word	0x08006e11

08006e10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e04c      	b.n	8006ed0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d111      	bne.n	8006e66 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fa8e 	bl	800836c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <HAL_TIM_PWM_Init+0xb4>)
 8006e5c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 ffab 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	08006edd 	.word	0x08006edd

08006edc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <HAL_TIM_PWM_Start+0x24>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e022      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d109      	bne.n	8006f2e <HAL_TIM_PWM_Start+0x3e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	e015      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d109      	bne.n	8006f48 <HAL_TIM_PWM_Start+0x58>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	bf14      	ite	ne
 8006f40:	2301      	movne	r3, #1
 8006f42:	2300      	moveq	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e008      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e068      	b.n	8007034 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_PWM_Start+0x82>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	e013      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_PWM_Start+0x92>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f80:	e00b      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_PWM_Start+0xa2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f90:	e003      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f9bc 	bl	8008320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a23      	ldr	r2, [pc, #140]	; (800703c <HAL_TIM_PWM_Start+0x14c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_TIM_PWM_Start+0x14c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d013      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a19      	ldr	r2, [pc, #100]	; (8007040 <HAL_TIM_PWM_Start+0x150>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a17      	ldr	r2, [pc, #92]	; (8007044 <HAL_TIM_PWM_Start+0x154>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a16      	ldr	r2, [pc, #88]	; (8007048 <HAL_TIM_PWM_Start+0x158>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a14      	ldr	r2, [pc, #80]	; (800704c <HAL_TIM_PWM_Start+0x15c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d111      	bne.n	8007022 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b06      	cmp	r3, #6
 800700e:	d010      	beq.n	8007032 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007020:	e007      	b.n	8007032 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40010000 	.word	0x40010000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40014000 	.word	0x40014000

08007050 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e04c      	b.n	80070fe <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d111      	bne.n	8007094 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f977 	bl	800836c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <HAL_TIM_OnePulse_Init+0xb8>)
 800708a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f000 fe94 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0208 	bic.w	r2, r2, #8
 80070ba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	0800710d 	.word	0x0800710d

0800710c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007130:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007138:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007140:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007148:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d108      	bne.n	8007162 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007156:	7b7b      	ldrb	r3, [r7, #13]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d102      	bne.n	8007162 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800715c:	7b3b      	ldrb	r3, [r7, #12]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d001      	beq.n	8007166 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e03b      	b.n	80071de <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0202 	orr.w	r2, r2, #2
 8007194:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0204 	orr.w	r2, r2, #4
 80071a4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2201      	movs	r2, #1
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 f8b6 	bl	8008320 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	2104      	movs	r1, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 f8af 	bl	8008320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d107      	bne.n	80071dc <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40010000 	.word	0x40010000

080071ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0a2      	b.n	8007346 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d111      	bne.n	8007230 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f8a9 	bl	800836c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	2b00      	cmp	r3, #0
 8007220:	d102      	bne.n	8007228 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a4a      	ldr	r2, [pc, #296]	; (8007350 <HAL_TIM_Encoder_Init+0x164>)
 8007226:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f000 fdbc 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	4313      	orrs	r3, r2
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80072a2:	f023 030c 	bic.w	r3, r3, #12
 80072a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	4313      	orrs	r3, r2
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	011a      	lsls	r2, r3, #4
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	031b      	lsls	r3, r3, #12
 80072d2:	4313      	orrs	r3, r2
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80072e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80072e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	4313      	orrs	r3, r2
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	080039f1 	.word	0x080039f1

08007354 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007364:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800736c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007374:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800737c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d110      	bne.n	80073a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d102      	bne.n	8007390 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800738a:	7b7b      	ldrb	r3, [r7, #13]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d001      	beq.n	8007394 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e069      	b.n	8007468 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a4:	e031      	b.n	800740a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d110      	bne.n	80073ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d102      	bne.n	80073b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073b2:	7b3b      	ldrb	r3, [r7, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d001      	beq.n	80073bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e055      	b.n	8007468 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073cc:	e01d      	b.n	800740a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d108      	bne.n	80073e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073da:	7b7b      	ldrb	r3, [r7, #13]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d102      	bne.n	80073e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073e0:	7b3b      	ldrb	r3, [r7, #12]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d001      	beq.n	80073ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e03e      	b.n	8007468 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_TIM_Encoder_Start+0xc4>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d008      	beq.n	8007428 <HAL_TIM_Encoder_Start+0xd4>
 8007416:	e00f      	b.n	8007438 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f000 ff7d 	bl	8008320 <TIM_CCxChannelCmd>
      break;
 8007426:	e016      	b.n	8007456 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	2104      	movs	r1, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f000 ff75 	bl	8008320 <TIM_CCxChannelCmd>
      break;
 8007436:	e00e      	b.n	8007456 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f000 ff6d 	bl	8008320 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	2104      	movs	r1, #4
 800744e:	4618      	mov	r0, r3
 8007450:	f000 ff66 	bl	8008320 <TIM_CCxChannelCmd>
      break;
 8007454:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b02      	cmp	r3, #2
 8007484:	d128      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b02      	cmp	r3, #2
 8007492:	d121      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0202 	mvn.w	r2, #2
 800749c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	e009      	b.n	80074d2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d128      	bne.n	8007538 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d121      	bne.n	8007538 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0204 	mvn.w	r2, #4
 80074fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
 800751c:	e009      	b.n	8007532 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b08      	cmp	r3, #8
 8007544:	d128      	bne.n	8007598 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b08      	cmp	r3, #8
 8007552:	d121      	bne.n	8007598 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0208 	mvn.w	r2, #8
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2204      	movs	r2, #4
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
 800757c:	e009      	b.n	8007592 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0310 	and.w	r3, r3, #16
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d128      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d121      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0210 	mvn.w	r2, #16
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2208      	movs	r2, #8
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	4798      	blx	r3
 80075dc:	e009      	b.n	80075f2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d110      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b01      	cmp	r3, #1
 8007612:	d109      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0201 	mvn.w	r2, #1
 800761c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d110      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007640:	2b80      	cmp	r3, #128	; 0x80
 8007642:	d109      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d110      	bne.n	8007688 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d109      	bne.n	8007688 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b20      	cmp	r3, #32
 8007694:	d110      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d109      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0220 	mvn.w	r2, #32
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_TIM_OC_ConfigChannel+0x1e>
 80076da:	2302      	movs	r3, #2
 80076dc:	e048      	b.n	8007770 <HAL_TIM_OC_ConfigChannel+0xb0>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	d839      	bhi.n	8007760 <HAL_TIM_OC_ConfigChannel+0xa0>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007729 	.word	0x08007729
 80076f8:	08007761 	.word	0x08007761
 80076fc:	08007761 	.word	0x08007761
 8007700:	08007761 	.word	0x08007761
 8007704:	08007737 	.word	0x08007737
 8007708:	08007761 	.word	0x08007761
 800770c:	08007761 	.word	0x08007761
 8007710:	08007761 	.word	0x08007761
 8007714:	08007745 	.word	0x08007745
 8007718:	08007761 	.word	0x08007761
 800771c:	08007761 	.word	0x08007761
 8007720:	08007761 	.word	0x08007761
 8007724:	08007753 	.word	0x08007753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fbd0 	bl	8007ed4 <TIM_OC1_SetConfig>
      break;
 8007734:	e017      	b.n	8007766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fc2f 	bl	8007fa0 <TIM_OC2_SetConfig>
      break;
 8007742:	e010      	b.n	8007766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fc94 	bl	8008078 <TIM_OC3_SetConfig>
      break;
 8007750:	e009      	b.n	8007766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fcf7 	bl	800814c <TIM_OC4_SetConfig>
      break;
 800775e:	e002      	b.n	8007766 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
      break;
 8007764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007792:	2302      	movs	r3, #2
 8007794:	e0ae      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	f200 809f 	bhi.w	80078e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	080078e5 	.word	0x080078e5
 80077b4:	080078e5 	.word	0x080078e5
 80077b8:	080078e5 	.word	0x080078e5
 80077bc:	08007821 	.word	0x08007821
 80077c0:	080078e5 	.word	0x080078e5
 80077c4:	080078e5 	.word	0x080078e5
 80077c8:	080078e5 	.word	0x080078e5
 80077cc:	08007863 	.word	0x08007863
 80077d0:	080078e5 	.word	0x080078e5
 80077d4:	080078e5 	.word	0x080078e5
 80077d8:	080078e5 	.word	0x080078e5
 80077dc:	080078a3 	.word	0x080078a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fb74 	bl	8007ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0208 	orr.w	r2, r2, #8
 80077fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0204 	bic.w	r2, r2, #4
 800780a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6999      	ldr	r1, [r3, #24]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	619a      	str	r2, [r3, #24]
      break;
 800781e:	e064      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fbba 	bl	8007fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	021a      	lsls	r2, r3, #8
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	619a      	str	r2, [r3, #24]
      break;
 8007860:	e043      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fc05 	bl	8008078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0208 	orr.w	r2, r2, #8
 800787c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0204 	bic.w	r2, r2, #4
 800788c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69d9      	ldr	r1, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	61da      	str	r2, [r3, #28]
      break;
 80078a0:	e023      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fc4f 	bl	800814c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	021a      	lsls	r2, r3, #8
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	61da      	str	r2, [r3, #28]
      break;
 80078e2:	e002      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIM_ConfigClockSource+0x1c>
 8007914:	2302      	movs	r3, #2
 8007916:	e0b4      	b.n	8007a82 <HAL_TIM_ConfigClockSource+0x186>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007950:	d03e      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007956:	f200 8087 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	f000 8086 	beq.w	8007a6e <HAL_TIM_ConfigClockSource+0x172>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d87f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b70      	cmp	r3, #112	; 0x70
 800796a:	d01a      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0xa6>
 800796c:	2b70      	cmp	r3, #112	; 0x70
 800796e:	d87b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b60      	cmp	r3, #96	; 0x60
 8007972:	d050      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x11a>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d877      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b50      	cmp	r3, #80	; 0x50
 800797a:	d03c      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0xfa>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d873      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d058      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x13a>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d86f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b30      	cmp	r3, #48	; 0x30
 800798a:	d064      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d86b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b20      	cmp	r3, #32
 8007992:	d060      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d867      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800799c:	2b10      	cmp	r3, #16
 800799e:	d05a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	e062      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f000 fc95 	bl	80082e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e04f      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6899      	ldr	r1, [r3, #8]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f000 fc7e 	bl	80082e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e03c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 fbf2 	bl	80081ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc4b 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8007a14:	e02c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fc11 	bl	800824a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	; 0x60
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fc3b 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8007a34:	e01c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fbd2 	bl	80081ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fc2b 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8007a54:	e00c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 fc22 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8007a66:	e003      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e135      	b.n	8007dc8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_RegisterCallback+0x2a>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e12e      	b.n	8007dc8 <HAL_TIM_RegisterCallback+0x288>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	f040 80ba 	bne.w	8007cf4 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	2b1a      	cmp	r3, #26
 8007b84:	f200 80b3 	bhi.w	8007cee <HAL_TIM_RegisterCallback+0x1ae>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <HAL_TIM_RegisterCallback+0x50>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007c05 	.word	0x08007c05
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007c15 	.word	0x08007c15
 8007ba0:	08007c1d 	.word	0x08007c1d
 8007ba4:	08007c25 	.word	0x08007c25
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c35 	.word	0x08007c35
 8007bb0:	08007c3d 	.word	0x08007c3d
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c4d 	.word	0x08007c4d
 8007bbc:	08007c55 	.word	0x08007c55
 8007bc0:	08007c5d 	.word	0x08007c5d
 8007bc4:	08007c65 	.word	0x08007c65
 8007bc8:	08007c6d 	.word	0x08007c6d
 8007bcc:	08007c77 	.word	0x08007c77
 8007bd0:	08007c81 	.word	0x08007c81
 8007bd4:	08007c8b 	.word	0x08007c8b
 8007bd8:	08007c95 	.word	0x08007c95
 8007bdc:	08007c9f 	.word	0x08007c9f
 8007be0:	08007ca9 	.word	0x08007ca9
 8007be4:	08007cb3 	.word	0x08007cb3
 8007be8:	08007cbd 	.word	0x08007cbd
 8007bec:	08007cc7 	.word	0x08007cc7
 8007bf0:	08007cd1 	.word	0x08007cd1
 8007bf4:	08007cdb 	.word	0x08007cdb
 8007bf8:	08007ce5 	.word	0x08007ce5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007c02:	e0dc      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007c0a:	e0d8      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007c12:	e0d4      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007c1a:	e0d0      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007c22:	e0cc      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007c2a:	e0c8      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007c32:	e0c4      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007c3a:	e0c0      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007c42:	e0bc      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007c4a:	e0b8      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007c52:	e0b4      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007c5a:	e0b0      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007c62:	e0ac      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007c6a:	e0a8      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007c74:	e0a3      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007c7e:	e09e      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007c88:	e099      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007c92:	e094      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007c9c:	e08f      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007ca6:	e08a      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007cb0:	e085      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007cba:	e080      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007cc4:	e07b      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007cce:	e076      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007cd8:	e071      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007ce2:	e06c      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007cec:	e067      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
        break;
 8007cf2:	e064      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d15c      	bne.n	8007dba <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	2b0d      	cmp	r3, #13
 8007d04:	d856      	bhi.n	8007db4 <HAL_TIM_RegisterCallback+0x274>
 8007d06:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <HAL_TIM_RegisterCallback+0x1cc>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d45 	.word	0x08007d45
 8007d10:	08007d4d 	.word	0x08007d4d
 8007d14:	08007d55 	.word	0x08007d55
 8007d18:	08007d5d 	.word	0x08007d5d
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d6d 	.word	0x08007d6d
 8007d24:	08007d75 	.word	0x08007d75
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d8d 	.word	0x08007d8d
 8007d34:	08007d95 	.word	0x08007d95
 8007d38:	08007d9d 	.word	0x08007d9d
 8007d3c:	08007da5 	.word	0x08007da5
 8007d40:	08007dad 	.word	0x08007dad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007d4a:	e038      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007d52:	e034      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007d5a:	e030      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007d62:	e02c      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007d6a:	e028      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007d72:	e024      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007d7a:	e020      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007d82:	e01c      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007d8a:	e018      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007d92:	e014      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007d9a:	e010      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007da2:	e00c      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007daa:	e008      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007db2:	e004      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
        break;
 8007db8:	e001      	b.n	8007dbe <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a34      	ldr	r2, [pc, #208]	; (8007eb8 <TIM_Base_SetConfig+0xe4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00f      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df2:	d00b      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a31      	ldr	r2, [pc, #196]	; (8007ebc <TIM_Base_SetConfig+0xe8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a30      	ldr	r2, [pc, #192]	; (8007ec0 <TIM_Base_SetConfig+0xec>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <TIM_Base_SetConfig+0x38>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a2f      	ldr	r2, [pc, #188]	; (8007ec4 <TIM_Base_SetConfig+0xf0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d108      	bne.n	8007e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a25      	ldr	r2, [pc, #148]	; (8007eb8 <TIM_Base_SetConfig+0xe4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01b      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2c:	d017      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <TIM_Base_SetConfig+0xe8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <TIM_Base_SetConfig+0xec>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00f      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a20      	ldr	r2, [pc, #128]	; (8007ec4 <TIM_Base_SetConfig+0xf0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1f      	ldr	r2, [pc, #124]	; (8007ec8 <TIM_Base_SetConfig+0xf4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d007      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <TIM_Base_SetConfig+0xf8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_Base_SetConfig+0x8a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1d      	ldr	r2, [pc, #116]	; (8007ed0 <TIM_Base_SetConfig+0xfc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d108      	bne.n	8007e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <TIM_Base_SetConfig+0xe4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d103      	bne.n	8007ea4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	615a      	str	r2, [r3, #20]
}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800

08007ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f023 0201 	bic.w	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f023 0302 	bic.w	r3, r3, #2
 8007f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a1c      	ldr	r2, [pc, #112]	; (8007f9c <TIM_OC1_SetConfig+0xc8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10c      	bne.n	8007f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f023 0308 	bic.w	r3, r3, #8
 8007f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f023 0304 	bic.w	r3, r3, #4
 8007f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a13      	ldr	r2, [pc, #76]	; (8007f9c <TIM_OC1_SetConfig+0xc8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d111      	bne.n	8007f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40010000 	.word	0x40010000

08007fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0210 	bic.w	r2, r3, #16
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0320 	bic.w	r3, r3, #32
 8007fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <TIM_OC2_SetConfig+0xd4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10d      	bne.n	800801c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a15      	ldr	r2, [pc, #84]	; (8008074 <TIM_OC2_SetConfig+0xd4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d113      	bne.n	800804c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800802a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40010000 	.word	0x40010000

08008078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a1d      	ldr	r2, [pc, #116]	; (8008148 <TIM_OC3_SetConfig+0xd0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10d      	bne.n	80080f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a14      	ldr	r2, [pc, #80]	; (8008148 <TIM_OC3_SetConfig+0xd0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d113      	bne.n	8008122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	40010000 	.word	0x40010000

0800814c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <TIM_OC4_SetConfig+0x9c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d109      	bne.n	80081c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	019b      	lsls	r3, r3, #6
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	621a      	str	r2, [r3, #32]
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40010000 	.word	0x40010000

080081ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f023 0201 	bic.w	r2, r3, #1
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f023 030a 	bic.w	r3, r3, #10
 8008228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f023 0210 	bic.w	r2, r3, #16
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	031b      	lsls	r3, r3, #12
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	621a      	str	r2, [r3, #32]
}
 800829e:	bf00      	nop
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f043 0307 	orr.w	r3, r3, #7
 80082cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	021a      	lsls	r2, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	431a      	orrs	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4313      	orrs	r3, r2
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	609a      	str	r2, [r3, #8]
}
 8008314:	bf00      	nop
 8008316:	371c      	adds	r7, #28
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 031f 	and.w	r3, r3, #31
 8008332:	2201      	movs	r2, #1
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a1a      	ldr	r2, [r3, #32]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	43db      	mvns	r3, r3
 8008342:	401a      	ands	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	fa01 f303 	lsl.w	r3, r1, r3
 8008358:	431a      	orrs	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	621a      	str	r2, [r3, #32]
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <TIM_ResetCallback+0x7c>)
 8008378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <TIM_ResetCallback+0x80>)
 8008380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1a      	ldr	r2, [pc, #104]	; (80083f0 <TIM_ResetCallback+0x84>)
 8008388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <TIM_ResetCallback+0x88>)
 8008390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <TIM_ResetCallback+0x8c>)
 8008398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a17      	ldr	r2, [pc, #92]	; (80083fc <TIM_ResetCallback+0x90>)
 80083a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a16      	ldr	r2, [pc, #88]	; (8008400 <TIM_ResetCallback+0x94>)
 80083a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a15      	ldr	r2, [pc, #84]	; (8008404 <TIM_ResetCallback+0x98>)
 80083b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a14      	ldr	r2, [pc, #80]	; (8008408 <TIM_ResetCallback+0x9c>)
 80083b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a13      	ldr	r2, [pc, #76]	; (800840c <TIM_ResetCallback+0xa0>)
 80083c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a12      	ldr	r2, [pc, #72]	; (8008410 <TIM_ResetCallback+0xa4>)
 80083c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a11      	ldr	r2, [pc, #68]	; (8008414 <TIM_ResetCallback+0xa8>)
 80083d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a10      	ldr	r2, [pc, #64]	; (8008418 <TIM_ResetCallback+0xac>)
 80083d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	08002a29 	.word	0x08002a29
 80083ec:	08007a8b 	.word	0x08007a8b
 80083f0:	08007b03 	.word	0x08007b03
 80083f4:	08007b17 	.word	0x08007b17
 80083f8:	08007ab3 	.word	0x08007ab3
 80083fc:	08007ac7 	.word	0x08007ac7
 8008400:	08007a9f 	.word	0x08007a9f
 8008404:	08007adb 	.word	0x08007adb
 8008408:	08007aef 	.word	0x08007aef
 800840c:	08007b2b 	.word	0x08007b2b
 8008410:	0800859d 	.word	0x0800859d
 8008414:	080085b1 	.word	0x080085b1
 8008418:	080085c5 	.word	0x080085c5

0800841c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e050      	b.n	80084d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1c      	ldr	r2, [pc, #112]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d018      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008480:	d013      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00e      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a16      	ldr	r2, [pc, #88]	; (80084ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a13      	ldr	r2, [pc, #76]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10c      	bne.n	80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40000400 	.word	0x40000400
 80084ec:	40000800 	.word	0x40000800
 80084f0:	40000c00 	.word	0x40000c00
 80084f4:	40014000 	.word	0x40014000

080084f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008510:	2302      	movs	r3, #2
 8008512:	e03d      	b.n	8008590 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e04a      	b.n	8008680 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d111      	bne.n	800861a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fd2c 	bl	800905c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <HAL_UART_Init+0xb0>)
 8008610:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2224      	movs	r2, #36	; 0x24
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008630:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fff6 	bl	8009624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691a      	ldr	r2, [r3, #16]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008646:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695a      	ldr	r2, [r3, #20]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008656:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008666:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	08003af1 	.word	0x08003af1

0800868c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	460b      	mov	r3, r1
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d107      	bne.n	80086b4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	f043 0220 	orr.w	r2, r3, #32
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e08c      	b.n	80087ce <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_RegisterCallback+0x36>
 80086be:	2302      	movs	r3, #2
 80086c0:	e085      	b.n	80087ce <HAL_UART_RegisterCallback+0x142>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d151      	bne.n	800877a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	d845      	bhi.n	8008768 <HAL_UART_RegisterCallback+0xdc>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <HAL_UART_RegisterCallback+0x58>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008719 	.word	0x08008719
 80086e8:	08008721 	.word	0x08008721
 80086ec:	08008729 	.word	0x08008729
 80086f0:	08008731 	.word	0x08008731
 80086f4:	08008739 	.word	0x08008739
 80086f8:	08008741 	.word	0x08008741
 80086fc:	08008749 	.word	0x08008749
 8008700:	08008751 	.word	0x08008751
 8008704:	08008769 	.word	0x08008769
 8008708:	08008769 	.word	0x08008769
 800870c:	08008769 	.word	0x08008769
 8008710:	08008759 	.word	0x08008759
 8008714:	08008761 	.word	0x08008761
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800871e:	e051      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008726:	e04d      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800872e:	e049      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008736:	e045      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800873e:	e041      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008746:	e03d      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800874e:	e039      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008756:	e035      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800875e:	e031      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008766:	e02d      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	f043 0220 	orr.w	r2, r3, #32
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
        break;
 8008778:	e024      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d116      	bne.n	80087b4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	2b0b      	cmp	r3, #11
 800878a:	d002      	beq.n	8008792 <HAL_UART_RegisterCallback+0x106>
 800878c:	2b0c      	cmp	r3, #12
 800878e:	d004      	beq.n	800879a <HAL_UART_RegisterCallback+0x10e>
 8008790:	e007      	b.n	80087a2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008798:	e014      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80087a0:	e010      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f043 0220 	orr.w	r2, r3, #32
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
        break;
 80087b2:	e007      	b.n	80087c4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	f043 0220 	orr.w	r2, r3, #32
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop

080087dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d11d      	bne.n	8008832 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <HAL_UART_Receive_IT+0x26>
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e016      	b.n	8008834 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_UART_Receive_IT+0x38>
 8008810:	2302      	movs	r3, #2
 8008812:	e00f      	b.n	8008834 <HAL_UART_Receive_IT+0x58>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	461a      	mov	r2, r3
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fcf7 	bl	800921c <UART_Start_Receive_IT>
 800882e:	4603      	mov	r3, r0
 8008830:	e000      	b.n	8008834 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008832:	2302      	movs	r3, #2
  }
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08c      	sub	sp, #48	; 0x30
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b20      	cmp	r3, #32
 8008854:	d165      	bne.n	8008922 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_UART_Transmit_DMA+0x26>
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e05e      	b.n	8008924 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <HAL_UART_Transmit_DMA+0x38>
 8008870:	2302      	movs	r3, #2
 8008872:	e057      	b.n	8008924 <HAL_UART_Transmit_DMA+0xe8>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	88fa      	ldrh	r2, [r7, #6]
 8008886:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2221      	movs	r2, #33	; 0x21
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a0:	4a22      	ldr	r2, [pc, #136]	; (800892c <HAL_UART_Transmit_DMA+0xf0>)
 80088a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a8:	4a21      	ldr	r2, [pc, #132]	; (8008930 <HAL_UART_Transmit_DMA+0xf4>)
 80088aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a20      	ldr	r2, [pc, #128]	; (8008934 <HAL_UART_Transmit_DMA+0xf8>)
 80088b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b8:	2200      	movs	r2, #0
 80088ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80088bc:	f107 0308 	add.w	r3, r7, #8
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	6819      	ldr	r1, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3304      	adds	r3, #4
 80088d0:	461a      	mov	r2, r3
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	f7fb fcd6 	bl	8004284 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	617b      	str	r3, [r7, #20]
   return(result);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3314      	adds	r3, #20
 8008908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890a:	627a      	str	r2, [r7, #36]	; 0x24
 800890c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6a39      	ldr	r1, [r7, #32]
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	61fb      	str	r3, [r7, #28]
   return(result);
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	e000      	b.n	8008924 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008922:	2302      	movs	r3, #2
  }
}
 8008924:	4618      	mov	r0, r3
 8008926:	3730      	adds	r7, #48	; 0x30
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	080090cd 	.word	0x080090cd
 8008930:	08009169 	.word	0x08009169
 8008934:	08009187 	.word	0x08009187

08008938 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b09a      	sub	sp, #104	; 0x68
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008956:	667b      	str	r3, [r7, #100]	; 0x64
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008960:	657a      	str	r2, [r7, #84]	; 0x54
 8008962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008966:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800896e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3314      	adds	r3, #20
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	663b      	str	r3, [r7, #96]	; 0x60
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3314      	adds	r3, #20
 8008992:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008994:	643a      	str	r2, [r7, #64]	; 0x40
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800899a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e5      	bne.n	8008974 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d119      	bne.n	80089e4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	330c      	adds	r3, #12
 80089b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f023 0310 	bic.w	r3, r3, #16
 80089c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	330c      	adds	r3, #12
 80089ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e5      	bne.n	80089b0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d136      	bne.n	8008a60 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a12:	61ba      	str	r2, [r7, #24]
 8008a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6979      	ldr	r1, [r7, #20]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d018      	beq.n	8008a60 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	2200      	movs	r2, #0
 8008a34:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fb fc7a 	bl	8004334 <HAL_DMA_Abort>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00c      	beq.n	8008a60 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fb fe8e 	bl	800476c <HAL_DMA_GetError>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d104      	bne.n	8008a60 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2210      	movs	r2, #16
 8008a5a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e00a      	b.n	8008a76 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3768      	adds	r7, #104	; 0x68
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b0ba      	sub	sp, #232	; 0xe8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10f      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x66>
 8008ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fce3 	bl	80094aa <UART_Receive_IT>
      return;
 8008ae4:	e25b      	b.n	8008f9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80e1 	beq.w	8008cb2 <HAL_UART_IRQHandler+0x232>
 8008af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80d4 	beq.w	8008cb2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <HAL_UART_IRQHandler+0xae>
 8008b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f043 0201 	orr.w	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00b      	beq.n	8008b52 <HAL_UART_IRQHandler+0xd2>
 8008b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	f043 0202 	orr.w	r2, r3, #2
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <HAL_UART_IRQHandler+0xf6>
 8008b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f043 0204 	orr.w	r2, r3, #4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7a:	f003 0308 	and.w	r3, r3, #8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d011      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x126>
 8008b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	f043 0208 	orr.w	r2, r3, #8
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 81f2 	beq.w	8008f94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_UART_IRQHandler+0x14e>
 8008bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc6e 	bl	80094aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b40      	cmp	r3, #64	; 0x40
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <HAL_UART_IRQHandler+0x17a>
 8008bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d051      	beq.n	8008c9e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fb74 	bl	80092e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d142      	bne.n	8008c94 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3314      	adds	r3, #20
 8008c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3314      	adds	r3, #20
 8008c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1d9      	bne.n	8008c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d013      	beq.n	8008c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	4a7f      	ldr	r2, [pc, #508]	; (8008e64 <HAL_UART_IRQHandler+0x3e4>)
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fb fbd0 	bl	8004414 <HAL_DMA_Abort_IT>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d019      	beq.n	8008cae <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c88:	e011      	b.n	8008cae <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c92:	e00c      	b.n	8008cae <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9c:	e007      	b.n	8008cae <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008cac:	e172      	b.n	8008f94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cae:	bf00      	nop
    return;
 8008cb0:	e170      	b.n	8008f94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	f040 814c 	bne.w	8008f54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8145 	beq.w	8008f54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cce:	f003 0310 	and.w	r3, r3, #16
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 813e 	beq.w	8008f54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60bb      	str	r3, [r7, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	60bb      	str	r3, [r7, #8]
 8008cec:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf8:	2b40      	cmp	r3, #64	; 0x40
 8008cfa:	f040 80b5 	bne.w	8008e68 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8142 	beq.w	8008f98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	f080 813b 	bcs.w	8008f98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	f000 8088 	beq.w	8008e48 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	330c      	adds	r3, #12
 8008d60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1d9      	bne.n	8008d38 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008da8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008dac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e1      	bne.n	8008d84 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3314      	adds	r3, #20
 8008de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008de4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e3      	bne.n	8008dc0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	330c      	adds	r3, #12
 8008e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e18:	f023 0310 	bic.w	r3, r3, #16
 8008e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e2c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e3      	bne.n	8008e06 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fb fa76 	bl	8004334 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008e54:	b292      	uxth	r2, r2
 8008e56:	1a8a      	subs	r2, r1, r2
 8008e58:	b292      	uxth	r2, r2
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e60:	e09a      	b.n	8008f98 <HAL_UART_IRQHandler+0x518>
 8008e62:	bf00      	nop
 8008e64:	080093af 	.word	0x080093af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 808c 	beq.w	8008f9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8087 	beq.w	8008f9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	330c      	adds	r3, #12
 8008e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e3      	bne.n	8008e8e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008eea:	633a      	str	r2, [r7, #48]	; 0x30
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e3      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	330c      	adds	r3, #12
 8008f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008f30:	61fa      	str	r2, [r7, #28]
 8008f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	69b9      	ldr	r1, [r7, #24]
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e3      	bne.n	8008f0c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f48:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f52:	e023      	b.n	8008f9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <HAL_UART_IRQHandler+0x4f4>
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa33 	bl	80093d8 <UART_Transmit_IT>
    return;
 8008f72:	e014      	b.n	8008f9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <HAL_UART_IRQHandler+0x51e>
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d008      	beq.n	8008f9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fa73 	bl	8009478 <UART_EndTransmit_IT>
    return;
 8008f92:	e004      	b.n	8008f9e <HAL_UART_IRQHandler+0x51e>
    return;
 8008f94:	bf00      	nop
 8008f96:	e002      	b.n	8008f9e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f9c:	bf00      	nop
  }
}
 8008f9e:	37e8      	adds	r7, #232	; 0xe8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a10      	ldr	r2, [pc, #64]	; (80090a8 <UART_InitCallbacksToDefault+0x4c>)
 8009068:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a0f      	ldr	r2, [pc, #60]	; (80090ac <UART_InitCallbacksToDefault+0x50>)
 800906e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a0f      	ldr	r2, [pc, #60]	; (80090b0 <UART_InitCallbacksToDefault+0x54>)
 8009074:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <UART_InitCallbacksToDefault+0x58>)
 800907a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a0e      	ldr	r2, [pc, #56]	; (80090b8 <UART_InitCallbacksToDefault+0x5c>)
 8009080:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <UART_InitCallbacksToDefault+0x60>)
 8009086:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a0d      	ldr	r2, [pc, #52]	; (80090c0 <UART_InitCallbacksToDefault+0x64>)
 800908c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a0c      	ldr	r2, [pc, #48]	; (80090c4 <UART_InitCallbacksToDefault+0x68>)
 8009092:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <UART_InitCallbacksToDefault+0x6c>)
 8009098:	669a      	str	r2, [r3, #104]	; 0x68

}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	08008fb9 	.word	0x08008fb9
 80090ac:	08008fa5 	.word	0x08008fa5
 80090b0:	08008fe1 	.word	0x08008fe1
 80090b4:	08008fcd 	.word	0x08008fcd
 80090b8:	08008ff5 	.word	0x08008ff5
 80090bc:	08009009 	.word	0x08009009
 80090c0:	0800901d 	.word	0x0800901d
 80090c4:	08009031 	.word	0x08009031
 80090c8:	08009045 	.word	0x08009045

080090cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b090      	sub	sp, #64	; 0x40
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d137      	bne.n	8009158 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80090e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ea:	2200      	movs	r2, #0
 80090ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	623b      	str	r3, [r7, #32]
   return(result);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009104:	63bb      	str	r3, [r7, #56]	; 0x38
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3314      	adds	r3, #20
 800910c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800910e:	633a      	str	r2, [r7, #48]	; 0x30
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e5      	bne.n	80090ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	330c      	adds	r3, #12
 8009128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60fb      	str	r3, [r7, #12]
   return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009142:	61fa      	str	r2, [r7, #28]
 8009144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	617b      	str	r3, [r7, #20]
   return(result);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009156:	e003      	b.n	8009160 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800915c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800915e:	4798      	blx	r3
}
 8009160:	bf00      	nop
 8009162:	3740      	adds	r7, #64	; 0x40
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a2:	2b80      	cmp	r3, #128	; 0x80
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b21      	cmp	r3, #33	; 0x21
 80091b8:	d108      	bne.n	80091cc <UART_DMAError+0x46>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2200      	movs	r2, #0
 80091c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80091c6:	68b8      	ldr	r0, [r7, #8]
 80091c8:	f000 f866 	bl	8009298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	bf0c      	ite	eq
 80091da:	2301      	moveq	r3, #1
 80091dc:	2300      	movne	r3, #0
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b22      	cmp	r3, #34	; 0x22
 80091ec:	d108      	bne.n	8009200 <UART_DMAError+0x7a>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2200      	movs	r2, #0
 80091f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80091fa:	68b8      	ldr	r0, [r7, #8]
 80091fc:	f000 f874 	bl	80092e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	f043 0210 	orr.w	r2, r3, #16
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009210:	68b8      	ldr	r0, [r7, #8]
 8009212:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2222      	movs	r2, #34	; 0x22
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009268:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695a      	ldr	r2, [r3, #20]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0220 	orr.w	r2, r2, #32
 8009288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b089      	sub	sp, #36	; 0x24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	330c      	adds	r3, #12
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	61ba      	str	r2, [r7, #24]
 80092c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	613b      	str	r3, [r7, #16]
   return(result);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80092dc:	bf00      	nop
 80092de:	3724      	adds	r7, #36	; 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b095      	sub	sp, #84	; 0x54
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	330c      	adds	r3, #12
 80092f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	330c      	adds	r3, #12
 800930e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009310:	643a      	str	r2, [r7, #64]	; 0x40
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e5      	bne.n	80092f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3314      	adds	r3, #20
 800932a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	61fb      	str	r3, [r7, #28]
   return(result);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	64bb      	str	r3, [r7, #72]	; 0x48
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3314      	adds	r3, #20
 8009342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800934a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935c:	2b01      	cmp	r3, #1
 800935e:	d119      	bne.n	8009394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f023 0310 	bic.w	r3, r3, #16
 8009376:	647b      	str	r3, [r7, #68]	; 0x44
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009380:	61ba      	str	r2, [r7, #24]
 8009382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	613b      	str	r3, [r7, #16]
   return(result);
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e5      	bne.n	8009360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093a2:	bf00      	nop
 80093a4:	3754      	adds	r7, #84	; 0x54
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b21      	cmp	r3, #33	; 0x21
 80093ea:	d13e      	bne.n	800946a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f4:	d114      	bne.n	8009420 <UART_Transmit_IT+0x48>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d110      	bne.n	8009420 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009412:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	1c9a      	adds	r2, r3, #2
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	621a      	str	r2, [r3, #32]
 800941e:	e008      	b.n	8009432 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	1c59      	adds	r1, r3, #1
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6211      	str	r1, [r2, #32]
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	b29b      	uxth	r3, r3
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	4619      	mov	r1, r3
 8009440:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10f      	bne.n	8009466 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009454:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009464:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e000      	b.n	800946c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800946a:	2302      	movs	r3, #2
  }
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800948e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b08c      	sub	sp, #48	; 0x30
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b22      	cmp	r3, #34	; 0x22
 80094bc:	f040 80ad 	bne.w	800961a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c8:	d117      	bne.n	80094fa <UART_Receive_IT+0x50>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d113      	bne.n	80094fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	1c9a      	adds	r2, r3, #2
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28
 80094f8:	e026      	b.n	8009548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009500:	2300      	movs	r3, #0
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950c:	d007      	beq.n	800951e <UART_Receive_IT+0x74>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <UART_Receive_IT+0x82>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	e008      	b.n	800953e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009538:	b2da      	uxtb	r2, r3
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29b      	uxth	r3, r3
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4619      	mov	r1, r3
 8009556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009558:	2b00      	cmp	r3, #0
 800955a:	d15c      	bne.n	8009616 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0220 	bic.w	r2, r2, #32
 800956a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800957a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	695a      	ldr	r2, [r3, #20]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0201 	bic.w	r2, r2, #1
 800958a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	2b01      	cmp	r3, #1
 800959a:	d136      	bne.n	800960a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	330c      	adds	r3, #12
 80095a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	613b      	str	r3, [r7, #16]
   return(result);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f023 0310 	bic.w	r3, r3, #16
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	623a      	str	r2, [r7, #32]
 80095c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	69f9      	ldr	r1, [r7, #28]
 80095c8:	6a3a      	ldr	r2, [r7, #32]
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e5      	bne.n	80095a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d10a      	bne.n	80095fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009602:	4611      	mov	r1, r2
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
 8009608:	e003      	b.n	8009612 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	e002      	b.n	800961c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	e000      	b.n	800961c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800961a:	2302      	movs	r3, #2
  }
}
 800961c:	4618      	mov	r0, r3
 800961e:	3730      	adds	r7, #48	; 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009628:	b0c0      	sub	sp, #256	; 0x100
 800962a:	af00      	add	r7, sp, #0
 800962c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	68d9      	ldr	r1, [r3, #12]
 8009642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	ea40 0301 	orr.w	r3, r0, r1
 800964c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800964e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	431a      	orrs	r2, r3
 800965c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	431a      	orrs	r2, r3
 8009664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	4313      	orrs	r3, r2
 800966c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800967c:	f021 010c 	bic.w	r1, r1, #12
 8009680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800968a:	430b      	orrs	r3, r1
 800968c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800968e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800969a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969e:	6999      	ldr	r1, [r3, #24]
 80096a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	ea40 0301 	orr.w	r3, r0, r1
 80096aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b8f      	ldr	r3, [pc, #572]	; (80098f0 <UART_SetConfig+0x2cc>)
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d005      	beq.n	80096c4 <UART_SetConfig+0xa0>
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	4b8d      	ldr	r3, [pc, #564]	; (80098f4 <UART_SetConfig+0x2d0>)
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d104      	bne.n	80096ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096c4:	f7fc ff26 	bl	8006514 <HAL_RCC_GetPCLK2Freq>
 80096c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096cc:	e003      	b.n	80096d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096ce:	f7fc ff0d 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 80096d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e0:	f040 810c 	bne.w	80098fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096f6:	4622      	mov	r2, r4
 80096f8:	462b      	mov	r3, r5
 80096fa:	1891      	adds	r1, r2, r2
 80096fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80096fe:	415b      	adcs	r3, r3
 8009700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009706:	4621      	mov	r1, r4
 8009708:	eb12 0801 	adds.w	r8, r2, r1
 800970c:	4629      	mov	r1, r5
 800970e:	eb43 0901 	adc.w	r9, r3, r1
 8009712:	f04f 0200 	mov.w	r2, #0
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800971e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009726:	4690      	mov	r8, r2
 8009728:	4699      	mov	r9, r3
 800972a:	4623      	mov	r3, r4
 800972c:	eb18 0303 	adds.w	r3, r8, r3
 8009730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009734:	462b      	mov	r3, r5
 8009736:	eb49 0303 	adc.w	r3, r9, r3
 800973a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800973e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800974a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800974e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009752:	460b      	mov	r3, r1
 8009754:	18db      	adds	r3, r3, r3
 8009756:	653b      	str	r3, [r7, #80]	; 0x50
 8009758:	4613      	mov	r3, r2
 800975a:	eb42 0303 	adc.w	r3, r2, r3
 800975e:	657b      	str	r3, [r7, #84]	; 0x54
 8009760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009768:	f7f7 f9f2 	bl	8000b50 <__aeabi_uldivmod>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4b61      	ldr	r3, [pc, #388]	; (80098f8 <UART_SetConfig+0x2d4>)
 8009772:	fba3 2302 	umull	r2, r3, r3, r2
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	011c      	lsls	r4, r3, #4
 800977a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800977e:	2200      	movs	r2, #0
 8009780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009784:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800978c:	4642      	mov	r2, r8
 800978e:	464b      	mov	r3, r9
 8009790:	1891      	adds	r1, r2, r2
 8009792:	64b9      	str	r1, [r7, #72]	; 0x48
 8009794:	415b      	adcs	r3, r3
 8009796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800979c:	4641      	mov	r1, r8
 800979e:	eb12 0a01 	adds.w	sl, r2, r1
 80097a2:	4649      	mov	r1, r9
 80097a4:	eb43 0b01 	adc.w	fp, r3, r1
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	f04f 0300 	mov.w	r3, #0
 80097b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097bc:	4692      	mov	sl, r2
 80097be:	469b      	mov	fp, r3
 80097c0:	4643      	mov	r3, r8
 80097c2:	eb1a 0303 	adds.w	r3, sl, r3
 80097c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097ca:	464b      	mov	r3, r9
 80097cc:	eb4b 0303 	adc.w	r3, fp, r3
 80097d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097e8:	460b      	mov	r3, r1
 80097ea:	18db      	adds	r3, r3, r3
 80097ec:	643b      	str	r3, [r7, #64]	; 0x40
 80097ee:	4613      	mov	r3, r2
 80097f0:	eb42 0303 	adc.w	r3, r2, r3
 80097f4:	647b      	str	r3, [r7, #68]	; 0x44
 80097f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097fe:	f7f7 f9a7 	bl	8000b50 <__aeabi_uldivmod>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4611      	mov	r1, r2
 8009808:	4b3b      	ldr	r3, [pc, #236]	; (80098f8 <UART_SetConfig+0x2d4>)
 800980a:	fba3 2301 	umull	r2, r3, r3, r1
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	2264      	movs	r2, #100	; 0x64
 8009812:	fb02 f303 	mul.w	r3, r2, r3
 8009816:	1acb      	subs	r3, r1, r3
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800981e:	4b36      	ldr	r3, [pc, #216]	; (80098f8 <UART_SetConfig+0x2d4>)
 8009820:	fba3 2302 	umull	r2, r3, r3, r2
 8009824:	095b      	lsrs	r3, r3, #5
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800982c:	441c      	add	r4, r3
 800982e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009832:	2200      	movs	r2, #0
 8009834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800983c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009840:	4642      	mov	r2, r8
 8009842:	464b      	mov	r3, r9
 8009844:	1891      	adds	r1, r2, r2
 8009846:	63b9      	str	r1, [r7, #56]	; 0x38
 8009848:	415b      	adcs	r3, r3
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800984c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009850:	4641      	mov	r1, r8
 8009852:	1851      	adds	r1, r2, r1
 8009854:	6339      	str	r1, [r7, #48]	; 0x30
 8009856:	4649      	mov	r1, r9
 8009858:	414b      	adcs	r3, r1
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
 800985c:	f04f 0200 	mov.w	r2, #0
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009868:	4659      	mov	r1, fp
 800986a:	00cb      	lsls	r3, r1, #3
 800986c:	4651      	mov	r1, sl
 800986e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009872:	4651      	mov	r1, sl
 8009874:	00ca      	lsls	r2, r1, #3
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	4603      	mov	r3, r0
 800987c:	4642      	mov	r2, r8
 800987e:	189b      	adds	r3, r3, r2
 8009880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009884:	464b      	mov	r3, r9
 8009886:	460a      	mov	r2, r1
 8009888:	eb42 0303 	adc.w	r3, r2, r3
 800988c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800989c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098a4:	460b      	mov	r3, r1
 80098a6:	18db      	adds	r3, r3, r3
 80098a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80098aa:	4613      	mov	r3, r2
 80098ac:	eb42 0303 	adc.w	r3, r2, r3
 80098b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098ba:	f7f7 f949 	bl	8000b50 <__aeabi_uldivmod>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <UART_SetConfig+0x2d4>)
 80098c4:	fba3 1302 	umull	r1, r3, r3, r2
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	2164      	movs	r1, #100	; 0x64
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	3332      	adds	r3, #50	; 0x32
 80098d6:	4a08      	ldr	r2, [pc, #32]	; (80098f8 <UART_SetConfig+0x2d4>)
 80098d8:	fba2 2303 	umull	r2, r3, r2, r3
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	f003 0207 	and.w	r2, r3, #7
 80098e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4422      	add	r2, r4
 80098ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098ec:	e105      	b.n	8009afa <UART_SetConfig+0x4d6>
 80098ee:	bf00      	nop
 80098f0:	40011000 	.word	0x40011000
 80098f4:	40011400 	.word	0x40011400
 80098f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009900:	2200      	movs	r2, #0
 8009902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800990a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800990e:	4642      	mov	r2, r8
 8009910:	464b      	mov	r3, r9
 8009912:	1891      	adds	r1, r2, r2
 8009914:	6239      	str	r1, [r7, #32]
 8009916:	415b      	adcs	r3, r3
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
 800991a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800991e:	4641      	mov	r1, r8
 8009920:	1854      	adds	r4, r2, r1
 8009922:	4649      	mov	r1, r9
 8009924:	eb43 0501 	adc.w	r5, r3, r1
 8009928:	f04f 0200 	mov.w	r2, #0
 800992c:	f04f 0300 	mov.w	r3, #0
 8009930:	00eb      	lsls	r3, r5, #3
 8009932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009936:	00e2      	lsls	r2, r4, #3
 8009938:	4614      	mov	r4, r2
 800993a:	461d      	mov	r5, r3
 800993c:	4643      	mov	r3, r8
 800993e:	18e3      	adds	r3, r4, r3
 8009940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009944:	464b      	mov	r3, r9
 8009946:	eb45 0303 	adc.w	r3, r5, r3
 800994a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800994e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800995a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800996a:	4629      	mov	r1, r5
 800996c:	008b      	lsls	r3, r1, #2
 800996e:	4621      	mov	r1, r4
 8009970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009974:	4621      	mov	r1, r4
 8009976:	008a      	lsls	r2, r1, #2
 8009978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800997c:	f7f7 f8e8 	bl	8000b50 <__aeabi_uldivmod>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4b60      	ldr	r3, [pc, #384]	; (8009b08 <UART_SetConfig+0x4e4>)
 8009986:	fba3 2302 	umull	r2, r3, r3, r2
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	011c      	lsls	r4, r3, #4
 800998e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009992:	2200      	movs	r2, #0
 8009994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800999c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099a0:	4642      	mov	r2, r8
 80099a2:	464b      	mov	r3, r9
 80099a4:	1891      	adds	r1, r2, r2
 80099a6:	61b9      	str	r1, [r7, #24]
 80099a8:	415b      	adcs	r3, r3
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099b0:	4641      	mov	r1, r8
 80099b2:	1851      	adds	r1, r2, r1
 80099b4:	6139      	str	r1, [r7, #16]
 80099b6:	4649      	mov	r1, r9
 80099b8:	414b      	adcs	r3, r1
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	f04f 0300 	mov.w	r3, #0
 80099c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099c8:	4659      	mov	r1, fp
 80099ca:	00cb      	lsls	r3, r1, #3
 80099cc:	4651      	mov	r1, sl
 80099ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099d2:	4651      	mov	r1, sl
 80099d4:	00ca      	lsls	r2, r1, #3
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	4603      	mov	r3, r0
 80099dc:	4642      	mov	r2, r8
 80099de:	189b      	adds	r3, r3, r2
 80099e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099e4:	464b      	mov	r3, r9
 80099e6:	460a      	mov	r2, r1
 80099e8:	eb42 0303 	adc.w	r3, r2, r3
 80099ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80099fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	f04f 0300 	mov.w	r3, #0
 8009a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a08:	4649      	mov	r1, r9
 8009a0a:	008b      	lsls	r3, r1, #2
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a12:	4641      	mov	r1, r8
 8009a14:	008a      	lsls	r2, r1, #2
 8009a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a1a:	f7f7 f899 	bl	8000b50 <__aeabi_uldivmod>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4b39      	ldr	r3, [pc, #228]	; (8009b08 <UART_SetConfig+0x4e4>)
 8009a24:	fba3 1302 	umull	r1, r3, r3, r2
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	2164      	movs	r1, #100	; 0x64
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	3332      	adds	r3, #50	; 0x32
 8009a36:	4a34      	ldr	r2, [pc, #208]	; (8009b08 <UART_SetConfig+0x4e4>)
 8009a38:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3c:	095b      	lsrs	r3, r3, #5
 8009a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a42:	441c      	add	r4, r3
 8009a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a48:	2200      	movs	r2, #0
 8009a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a4c:	677a      	str	r2, [r7, #116]	; 0x74
 8009a4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	1891      	adds	r1, r2, r2
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	415b      	adcs	r3, r3
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a62:	4641      	mov	r1, r8
 8009a64:	1851      	adds	r1, r2, r1
 8009a66:	6039      	str	r1, [r7, #0]
 8009a68:	4649      	mov	r1, r9
 8009a6a:	414b      	adcs	r3, r1
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	00cb      	lsls	r3, r1, #3
 8009a7e:	4651      	mov	r1, sl
 8009a80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a84:	4651      	mov	r1, sl
 8009a86:	00ca      	lsls	r2, r1, #3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4642      	mov	r2, r8
 8009a90:	189b      	adds	r3, r3, r2
 8009a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a94:	464b      	mov	r3, r9
 8009a96:	460a      	mov	r2, r1
 8009a98:	eb42 0303 	adc.w	r3, r2, r3
 8009a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8009aa8:	667a      	str	r2, [r7, #100]	; 0x64
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	008b      	lsls	r3, r1, #2
 8009aba:	4641      	mov	r1, r8
 8009abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	008a      	lsls	r2, r1, #2
 8009ac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ac8:	f7f7 f842 	bl	8000b50 <__aeabi_uldivmod>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <UART_SetConfig+0x4e4>)
 8009ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ad6:	095b      	lsrs	r3, r3, #5
 8009ad8:	2164      	movs	r1, #100	; 0x64
 8009ada:	fb01 f303 	mul.w	r3, r1, r3
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	011b      	lsls	r3, r3, #4
 8009ae2:	3332      	adds	r3, #50	; 0x32
 8009ae4:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <UART_SetConfig+0x4e4>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	f003 020f 	and.w	r2, r3, #15
 8009af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4422      	add	r2, r4
 8009af8:	609a      	str	r2, [r3, #8]
}
 8009afa:	bf00      	nop
 8009afc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b00:	46bd      	mov	sp, r7
 8009b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b06:	bf00      	nop
 8009b08:	51eb851f 	.word	0x51eb851f

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	; (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	200002dc 	.word	0x200002dc

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	; (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f000 f90c 	bl	8009d48 <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	08009dd8 	.word	0x08009dd8
 8009b54:	08009dd8 	.word	0x08009dd8
 8009b58:	08009dd8 	.word	0x08009dd8
 8009b5c:	08009ddc 	.word	0x08009ddc

08009b60 <memcpy>:
 8009b60:	440a      	add	r2, r1
 8009b62:	4291      	cmp	r1, r2
 8009b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b68:	d100      	bne.n	8009b6c <memcpy+0xc>
 8009b6a:	4770      	bx	lr
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b76:	4291      	cmp	r1, r2
 8009b78:	d1f9      	bne.n	8009b6e <memcpy+0xe>
 8009b7a:	bd10      	pop	{r4, pc}

08009b7c <memset>:
 8009b7c:	4402      	add	r2, r0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d100      	bne.n	8009b86 <memset+0xa>
 8009b84:	4770      	bx	lr
 8009b86:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8a:	e7f9      	b.n	8009b80 <memset+0x4>

08009b8c <sqrt>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	ed2d 8b02 	vpush	{d8}
 8009b92:	ec55 4b10 	vmov	r4, r5, d0
 8009b96:	f000 f825 	bl	8009be4 <__ieee754_sqrt>
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	eeb0 8a40 	vmov.f32	s16, s0
 8009ba6:	eef0 8a60 	vmov.f32	s17, s1
 8009baa:	f7f6 ff6b 	bl	8000a84 <__aeabi_dcmpun>
 8009bae:	b990      	cbnz	r0, 8009bd6 <sqrt+0x4a>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f7f6 ff3c 	bl	8000a34 <__aeabi_dcmplt>
 8009bbc:	b158      	cbz	r0, 8009bd6 <sqrt+0x4a>
 8009bbe:	f7ff ffa5 	bl	8009b0c <__errno>
 8009bc2:	2321      	movs	r3, #33	; 0x21
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f7f6 fde9 	bl	80007a4 <__aeabi_ddiv>
 8009bd2:	ec41 0b18 	vmov	d8, r0, r1
 8009bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8009bda:	eef0 0a68 	vmov.f32	s1, s17
 8009bde:	ecbd 8b02 	vpop	{d8}
 8009be2:	bd38      	pop	{r3, r4, r5, pc}

08009be4 <__ieee754_sqrt>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	ec55 4b10 	vmov	r4, r5, d0
 8009bec:	4e55      	ldr	r6, [pc, #340]	; (8009d44 <__ieee754_sqrt+0x160>)
 8009bee:	43ae      	bics	r6, r5
 8009bf0:	ee10 0a10 	vmov	r0, s0
 8009bf4:	ee10 3a10 	vmov	r3, s0
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	d110      	bne.n	8009c20 <__ieee754_sqrt+0x3c>
 8009bfe:	ee10 2a10 	vmov	r2, s0
 8009c02:	462b      	mov	r3, r5
 8009c04:	f7f6 fca4 	bl	8000550 <__aeabi_dmul>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fae8 	bl	80001e4 <__adddf3>
 8009c14:	4604      	mov	r4, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	ec45 4b10 	vmov	d0, r4, r5
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	dc10      	bgt.n	8009c46 <__ieee754_sqrt+0x62>
 8009c24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c28:	4330      	orrs	r0, r6
 8009c2a:	d0f5      	beq.n	8009c18 <__ieee754_sqrt+0x34>
 8009c2c:	b15d      	cbz	r5, 8009c46 <__ieee754_sqrt+0x62>
 8009c2e:	ee10 2a10 	vmov	r2, s0
 8009c32:	462b      	mov	r3, r5
 8009c34:	ee10 0a10 	vmov	r0, s0
 8009c38:	f7f6 fad2 	bl	80001e0 <__aeabi_dsub>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	f7f6 fdb0 	bl	80007a4 <__aeabi_ddiv>
 8009c44:	e7e6      	b.n	8009c14 <__ieee754_sqrt+0x30>
 8009c46:	1512      	asrs	r2, r2, #20
 8009c48:	d074      	beq.n	8009d34 <__ieee754_sqrt+0x150>
 8009c4a:	07d4      	lsls	r4, r2, #31
 8009c4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009c50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009c54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c58:	bf5e      	ittt	pl
 8009c5a:	0fda      	lsrpl	r2, r3, #31
 8009c5c:	005b      	lslpl	r3, r3, #1
 8009c5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009c62:	2400      	movs	r4, #0
 8009c64:	0fda      	lsrs	r2, r3, #31
 8009c66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009c6a:	107f      	asrs	r7, r7, #1
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	2516      	movs	r5, #22
 8009c70:	4620      	mov	r0, r4
 8009c72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009c76:	1886      	adds	r6, r0, r2
 8009c78:	428e      	cmp	r6, r1
 8009c7a:	bfde      	ittt	le
 8009c7c:	1b89      	suble	r1, r1, r6
 8009c7e:	18b0      	addle	r0, r6, r2
 8009c80:	18a4      	addle	r4, r4, r2
 8009c82:	0049      	lsls	r1, r1, #1
 8009c84:	3d01      	subs	r5, #1
 8009c86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009c8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c92:	d1f0      	bne.n	8009c76 <__ieee754_sqrt+0x92>
 8009c94:	462a      	mov	r2, r5
 8009c96:	f04f 0e20 	mov.w	lr, #32
 8009c9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009c9e:	4281      	cmp	r1, r0
 8009ca0:	eb06 0c05 	add.w	ip, r6, r5
 8009ca4:	dc02      	bgt.n	8009cac <__ieee754_sqrt+0xc8>
 8009ca6:	d113      	bne.n	8009cd0 <__ieee754_sqrt+0xec>
 8009ca8:	459c      	cmp	ip, r3
 8009caa:	d811      	bhi.n	8009cd0 <__ieee754_sqrt+0xec>
 8009cac:	f1bc 0f00 	cmp.w	ip, #0
 8009cb0:	eb0c 0506 	add.w	r5, ip, r6
 8009cb4:	da43      	bge.n	8009d3e <__ieee754_sqrt+0x15a>
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	db41      	blt.n	8009d3e <__ieee754_sqrt+0x15a>
 8009cba:	f100 0801 	add.w	r8, r0, #1
 8009cbe:	1a09      	subs	r1, r1, r0
 8009cc0:	459c      	cmp	ip, r3
 8009cc2:	bf88      	it	hi
 8009cc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009cc8:	eba3 030c 	sub.w	r3, r3, ip
 8009ccc:	4432      	add	r2, r6
 8009cce:	4640      	mov	r0, r8
 8009cd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009cd4:	f1be 0e01 	subs.w	lr, lr, #1
 8009cd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ce0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ce4:	d1db      	bne.n	8009c9e <__ieee754_sqrt+0xba>
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	d006      	beq.n	8009cf8 <__ieee754_sqrt+0x114>
 8009cea:	1c50      	adds	r0, r2, #1
 8009cec:	bf13      	iteet	ne
 8009cee:	3201      	addne	r2, #1
 8009cf0:	3401      	addeq	r4, #1
 8009cf2:	4672      	moveq	r2, lr
 8009cf4:	f022 0201 	bicne.w	r2, r2, #1
 8009cf8:	1063      	asrs	r3, r4, #1
 8009cfa:	0852      	lsrs	r2, r2, #1
 8009cfc:	07e1      	lsls	r1, r4, #31
 8009cfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d06:	bf48      	it	mi
 8009d08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009d10:	4614      	mov	r4, r2
 8009d12:	e781      	b.n	8009c18 <__ieee754_sqrt+0x34>
 8009d14:	0ad9      	lsrs	r1, r3, #11
 8009d16:	3815      	subs	r0, #21
 8009d18:	055b      	lsls	r3, r3, #21
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d0fa      	beq.n	8009d14 <__ieee754_sqrt+0x130>
 8009d1e:	02cd      	lsls	r5, r1, #11
 8009d20:	d50a      	bpl.n	8009d38 <__ieee754_sqrt+0x154>
 8009d22:	f1c2 0420 	rsb	r4, r2, #32
 8009d26:	fa23 f404 	lsr.w	r4, r3, r4
 8009d2a:	1e55      	subs	r5, r2, #1
 8009d2c:	4093      	lsls	r3, r2
 8009d2e:	4321      	orrs	r1, r4
 8009d30:	1b42      	subs	r2, r0, r5
 8009d32:	e78a      	b.n	8009c4a <__ieee754_sqrt+0x66>
 8009d34:	4610      	mov	r0, r2
 8009d36:	e7f0      	b.n	8009d1a <__ieee754_sqrt+0x136>
 8009d38:	0049      	lsls	r1, r1, #1
 8009d3a:	3201      	adds	r2, #1
 8009d3c:	e7ef      	b.n	8009d1e <__ieee754_sqrt+0x13a>
 8009d3e:	4680      	mov	r8, r0
 8009d40:	e7bd      	b.n	8009cbe <__ieee754_sqrt+0xda>
 8009d42:	bf00      	nop
 8009d44:	7ff00000 	.word	0x7ff00000

08009d48 <_init>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr

08009d54 <_fini>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	bf00      	nop
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr
