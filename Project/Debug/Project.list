
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007230  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e0  080073e0  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e8  080073e8  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  080073f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000138  08007528  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08007528  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012615  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f47  00000000  00000000  0003277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000238b  00000000  00000000  000367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013069  00000000  00000000  00038b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093520  00000000  00000000  0004bbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df0fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  000df14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000138 	.word	0x20000138
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073b0 	.word	0x080073b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000013c 	.word	0x2000013c
 80001d4:	080073b0 	.word	0x080073b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e58:	f3bf 8f4f 	dsb	sy
}
 8000e5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SystemReset+0x24>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <__NVIC_SystemReset+0x24>)
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_SystemReset+0x28>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <__NVIC_SystemReset+0x20>
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	05fa0004 	.word	0x05fa0004

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f002 fa82 	bl	8003390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f9d2 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 fc84 	bl	800179c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e94:	f000 fc2c 	bl	80016f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e98:	f000 fb3a 	bl	8001510 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e9c:	f000 fa98 	bl	80013d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ea0:	f000 fb8a 	bl	80015b8 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000ea4:	f000 fa30 	bl	8001308 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000ea8:	f000 fc4c 	bl	8001744 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8000eac:	f000 fbd2 	bl	8001654 <MX_TIM5_Init>
  MX_SPI3_Init();
 8000eb0:	f000 fa58 	bl	8001364 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f001 fca9 	bl	800280c <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000eba:	2104      	movs	r1, #4
 8000ebc:	48c0      	ldr	r0, [pc, #768]	; (80011c0 <main+0x340>)
 8000ebe:	f004 ffbd 	bl	8005e3c <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8000ec2:	48c0      	ldr	r0, [pc, #768]	; (80011c4 <main+0x344>)
 8000ec4:	f004 fda8 	bl	8005a18 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8000ec8:	48bf      	ldr	r0, [pc, #764]	; (80011c8 <main+0x348>)
 8000eca:	f004 fd4b 	bl	8005964 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	48bd      	ldr	r0, [pc, #756]	; (80011c8 <main+0x348>)
 8000ed2:	f004 fe5d 	bl	8005b90 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8000ed6:	48bd      	ldr	r0, [pc, #756]	; (80011cc <main+0x34c>)
 8000ed8:	f004 fd9e 	bl	8005a18 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8000edc:	4bbc      	ldr	r3, [pc, #752]	; (80011d0 <main+0x350>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fafd 	bl	80004e4 <__aeabi_ul2d>
 8000eea:	a3af      	add	r3, pc, #700	; (adr r3, 80011a8 <main+0x328>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fc58 	bl	80007a4 <__aeabi_ddiv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	49b6      	ldr	r1, [pc, #728]	; (80011d4 <main+0x354>)
 8000efa:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 8000efe:	4bb4      	ldr	r3, [pc, #720]	; (80011d0 <main+0x350>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff faec 	bl	80004e4 <__aeabi_ul2d>
 8000f0c:	a3a6      	add	r3, pc, #664	; (adr r3, 80011a8 <main+0x328>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fc47 	bl	80007a4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	49af      	ldr	r1, [pc, #700]	; (80011d8 <main+0x358>)
 8000f1c:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 8000f20:	4bab      	ldr	r3, [pc, #684]	; (80011d0 <main+0x350>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fadb 	bl	80004e4 <__aeabi_ul2d>
 8000f2e:	a39e      	add	r3, pc, #632	; (adr r3, 80011a8 <main+0x328>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fc36 	bl	80007a4 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	49a7      	ldr	r1, [pc, #668]	; (80011dc <main+0x35c>)
 8000f3e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 8000f42:	4ba3      	ldr	r3, [pc, #652]	; (80011d0 <main+0x350>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff faca 	bl	80004e4 <__aeabi_ul2d>
 8000f50:	a395      	add	r3, pc, #596	; (adr r3, 80011a8 <main+0x328>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fc25 	bl	80007a4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	49a0      	ldr	r1, [pc, #640]	; (80011e0 <main+0x360>)
 8000f60:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 8000f64:	4b9a      	ldr	r3, [pc, #616]	; (80011d0 <main+0x350>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fab9 	bl	80004e4 <__aeabi_ul2d>
 8000f72:	a38d      	add	r3, pc, #564	; (adr r3, 80011a8 <main+0x328>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fc14 	bl	80007a4 <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4998      	ldr	r1, [pc, #608]	; (80011e4 <main+0x364>)
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]

//		Test_Range();
		static uint64_t timestamp_traject = 0;
//		static uint64_t timestamp_pid = 0;

		int64_t GetTicku = micros();
 8000f86:	f001 ff25 	bl	8002dd4 <micros>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 2300 	strd	r2, r3, [r7]

		HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2104      	movs	r1, #4
 8000f96:	4894      	ldr	r0, [pc, #592]	; (80011e8 <main+0x368>)
 8000f98:	f002 fd3e 	bl	8003a18 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 8000f9c:	231e      	movs	r3, #30
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	4a92      	ldr	r2, [pc, #584]	; (80011ec <main+0x36c>)
 8000fa4:	4992      	ldr	r1, [pc, #584]	; (80011f0 <main+0x370>)
 8000fa6:	4893      	ldr	r0, [pc, #588]	; (80011f4 <main+0x374>)
 8000fa8:	f004 fa1f 	bl	80053ea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2104      	movs	r1, #4
 8000fb0:	488d      	ldr	r0, [pc, #564]	; (80011e8 <main+0x368>)
 8000fb2:	f002 fd31 	bl	8003a18 <HAL_GPIO_WritePin>

		switch (state_laser_test) {
 8000fb6:	4b90      	ldr	r3, [pc, #576]	; (80011f8 <main+0x378>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d841      	bhi.n	8001042 <main+0x1c2>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <main+0x144>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08001043 	.word	0x08001043
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000fef 	.word	0x08000fef
 8000fd0:	08000ffd 	.word	0x08000ffd
 8000fd4:	08001013 	.word	0x08001013
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	08001037 	.word	0x08001037
		case 0:
			break;
		case 1:
			EndEffector_Event(Test_Start);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 fc13 	bl	800280c <EndEffector_Event>
			state_laser_test = 0;
 8000fe6:	4b84      	ldr	r3, [pc, #528]	; (80011f8 <main+0x378>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
			break;
 8000fec:	e029      	b.n	8001042 <main+0x1c2>
		case 2:
			EndEffector_Event(Run_Mode);
 8000fee:	2006      	movs	r0, #6
 8000ff0:	f001 fc0c 	bl	800280c <EndEffector_Event>
			state_laser_test = 0;
 8000ff4:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <main+0x378>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
			break;
 8000ffa:	e022      	b.n	8001042 <main+0x1c2>
		case 3:
			EndEffector_Event(Pick);
 8000ffc:	2008      	movs	r0, #8
 8000ffe:	f001 fc05 	bl	800280c <EndEffector_Event>
			HAL_Delay(2000);
 8001002:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001006:	f002 fa35 	bl	8003474 <HAL_Delay>
			state_laser_test = 0;
 800100a:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <main+0x378>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
			break;
 8001010:	e017      	b.n	8001042 <main+0x1c2>
		case 4:
			EndEffector_Event(Place);
 8001012:	2009      	movs	r0, #9
 8001014:	f001 fbfa 	bl	800280c <EndEffector_Event>
			HAL_Delay(2000);
 8001018:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101c:	f002 fa2a 	bl	8003474 <HAL_Delay>
			state_laser_test = 0;
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <main+0x378>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
			break;
 8001026:	e00c      	b.n	8001042 <main+0x1c2>
		case 5:
			EndEffector_Event(Reset);
 8001028:	2003      	movs	r0, #3
 800102a:	f001 fbef 	bl	800280c <EndEffector_Event>
			state_laser_test = 0;
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <main+0x378>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
			break;
 8001034:	e005      	b.n	8001042 <main+0x1c2>

		case 6:
			EndEffector_Event(Test_Stop);
 8001036:	2002      	movs	r0, #2
 8001038:	f001 fbe8 	bl	800280c <EndEffector_Event>
			state_laser_test = 0;
 800103c:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <main+0x378>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		}

		switch (State) {
 8001042:	4b6e      	ldr	r3, [pc, #440]	; (80011fc <main+0x37c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b06      	cmp	r3, #6
 8001048:	f200 80a6 	bhi.w	8001198 <main+0x318>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <main+0x1d4>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001071 	.word	0x08001071
 8001058:	080010cd 	.word	0x080010cd
 800105c:	080010d3 	.word	0x080010d3
 8001060:	080010d9 	.word	0x080010d9
 8001064:	08001111 	.word	0x08001111
 8001068:	08001189 	.word	0x08001189
 800106c:	08001171 	.word	0x08001171
//			HAL_Delay(1000);
//			HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin, RESET);
//			HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin, RESET);
//			HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin, RESET);
//			HAL_Delay(1000);
			read_pos();
 8001070:	f001 fe20 	bl	8002cb4 <read_pos>
			photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4861      	ldr	r0, [pc, #388]	; (8001200 <main+0x380>)
 800107a:	f002 fcb5 	bl	80039e8 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <main+0x384>)
 8001084:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_1_Pin);
			photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8001086:	2104      	movs	r1, #4
 8001088:	485d      	ldr	r0, [pc, #372]	; (8001200 <main+0x380>)
 800108a:	f002 fcad 	bl	80039e8 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <main+0x388>)
 8001094:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_2_Pin);
			photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	485c      	ldr	r0, [pc, #368]	; (800120c <main+0x38c>)
 800109a:	f002 fca5 	bl	80039e8 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <main+0x390>)
 80010a4:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_3_Pin);
			emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 80010a6:	2108      	movs	r1, #8
 80010a8:	4858      	ldr	r0, [pc, #352]	; (800120c <main+0x38c>)
 80010aa:	f002 fc9d 	bl	80039e8 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <main+0x394>)
 80010b4:	601a      	str	r2, [r3, #0]
			go_next = 1;
 80010b6:	4b58      	ldr	r3, [pc, #352]	; (8001218 <main+0x398>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
			if (go_next == 1) {
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <main+0x398>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d164      	bne.n	800118e <main+0x30e>
				State = INIT_HOMING;
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <main+0x37c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80010ca:	e060      	b.n	800118e <main+0x30e>
		case INIT_HOMING:
			Init_Homing();
 80010cc:	f001 fd14 	bl	8002af8 <Init_Homing>
			break;
 80010d0:	e062      	b.n	8001198 <main+0x318>
		case CALIBRATE:
			JoyStickControl();
 80010d2:	f001 fc59 	bl	8002988 <JoyStickControl>
			break;
 80010d6:	e05f      	b.n	8001198 <main+0x318>
		case TRAJECT_GEN:
			Trajectory_Gen(pos_i, pos_f, 945, 4161);
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <main+0x39c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9df 	bl	80004a0 <__aeabi_f2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <main+0x3a0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9d8 	bl	80004a0 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	ed9f 3b2e 	vldr	d3, [pc, #184]	; 80011b0 <main+0x330>
 80010f8:	ed9f 2b2f 	vldr	d2, [pc, #188]	; 80011b8 <main+0x338>
 80010fc:	ec43 2b11 	vmov	d1, r2, r3
 8001100:	ec49 8b10 	vmov	d0, r8, r9
 8001104:	f000 fc0e 	bl	8001924 <Trajectory_Gen>
			State = PID_STATE;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <main+0x37c>)
 800110a:	2204      	movs	r2, #4
 800110c:	701a      	strb	r2, [r3, #0]
			break;
 800110e:	e043      	b.n	8001198 <main+0x318>
		case PID_STATE:
			if (GetTicku >= timestamp_traject) {
 8001110:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <main+0x3a4>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	4290      	cmp	r0, r2
 800111c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001120:	d31a      	bcc.n	8001158 <main+0x2d8>
				timestamp_traject = GetTicku + traject_us;
 8001122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <main+0x350>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	1884      	adds	r4, r0, r2
 800112e:	eb41 0503 	adc.w	r5, r1, r3
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <main+0x3a4>)
 8001134:	e9c3 4500 	strd	r4, r5, [r3]
				Trajectory_Eva();
 8001138:	f000 fcf0 	bl	8001b1c <Trajectory_Eva>
				read_pos();
 800113c:	f001 fdba 	bl	8002cb4 <read_pos>
				PID(x);
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <main+0x3a8>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fcb1 	bl	8000ab0 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	ee00 3a10 	vmov	s0, r3
 8001154:	f001 f918 	bl	8002388 <PID>
			}
			if (State_PID == 1) {
 8001158:	4b34      	ldr	r3, [pc, #208]	; (800122c <main+0x3ac>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d118      	bne.n	8001192 <main+0x312>
				motor(0, 1);
 8001160:	2101      	movs	r1, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f001 fd7c 	bl	8002c60 <motor>
				State = IDLE;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <main+0x37c>)
 800116a:	2206      	movs	r2, #6
 800116c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800116e:	e010      	b.n	8001192 <main+0x312>
		case IDLE:
			motor(0, 1);
 8001170:	2101      	movs	r1, #1
 8001172:	2000      	movs	r0, #0
 8001174:	f001 fd74 	bl	8002c60 <motor>
			if (State_PID == 0) {
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <main+0x3ac>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10a      	bne.n	8001196 <main+0x316>
				State = TRAJECT_GEN;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <main+0x37c>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001186:	e006      	b.n	8001196 <main+0x316>
		case EMERGENCY_LIMIT:
			Photo_IT();
 8001188:	f001 fd40 	bl	8002c0c <Photo_IT>
			break;
 800118c:	e004      	b.n	8001198 <main+0x318>
			break;
 800118e:	bf00      	nop
 8001190:	e002      	b.n	8001198 <main+0x318>
			break;
 8001192:	bf00      	nop
 8001194:	e000      	b.n	8001198 <main+0x318>
			break;
 8001196:	bf00      	nop
		}

		if (Re == 1) {
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <main+0x3b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	f47f aef2 	bne.w	8000f86 <main+0x106>
			NVIC_SystemReset();
 80011a2:	f7ff fe57 	bl	8000e54 <__NVIC_SystemReset>
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	412e8480 	.word	0x412e8480
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40b04100 	.word	0x40b04100
 80011b8:	00000000 	.word	0x00000000
 80011bc:	408d8800 	.word	0x408d8800
 80011c0:	20000248 	.word	0x20000248
 80011c4:	20000290 	.word	0x20000290
 80011c8:	20000200 	.word	0x20000200
 80011cc:	200002d8 	.word	0x200002d8
 80011d0:	20000070 	.word	0x20000070
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000010 	.word	0x20000010
 80011e0:	20000018 	.word	0x20000018
 80011e4:	20000020 	.word	0x20000020
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	20000450 	.word	0x20000450
 80011f0:	20000038 	.word	0x20000038
 80011f4:	200001a8 	.word	0x200001a8
 80011f8:	20000470 	.word	0x20000470
 80011fc:	2000049c 	.word	0x2000049c
 8001200:	40020400 	.word	0x40020400
 8001204:	20000488 	.word	0x20000488
 8001208:	2000048c 	.word	0x2000048c
 800120c:	40020800 	.word	0x40020800
 8001210:	20000490 	.word	0x20000490
 8001214:	20000494 	.word	0x20000494
 8001218:	2000047d 	.word	0x2000047d
 800121c:	20000474 	.word	0x20000474
 8001220:	20000478 	.word	0x20000478
 8001224:	200004a0 	.word	0x200004a0
 8001228:	20000410 	.word	0x20000410
 800122c:	2000006a 	.word	0x2000006a
 8001230:	2000047e 	.word	0x2000047e

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 ffce 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <SystemClock_Config+0xcc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <SystemClock_Config+0xd0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012a4:	2310      	movs	r3, #16
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b2:	2304      	movs	r3, #4
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fb74 	bl	80049a8 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012c6:	f001 fd9f 	bl	8002e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2302      	movs	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2102      	movs	r1, #2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fdd6 	bl	8004e98 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f2:	f001 fd89 	bl	8002e08 <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C2_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C2_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C2_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C2_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C2_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C2_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C2_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C2_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C2_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C2_Init+0x50>)
 8001346:	f002 fb99 	bl	8003a7c <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001350:	f001 fd5a 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000154 	.word	0x20000154
 800135c:	40005800 	.word	0x40005800
 8001360:	000186a0 	.word	0x000186a0

08001364 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_SPI3_Init+0x64>)
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <MX_SPI3_Init+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_SPI3_Init+0x64>)
 8001370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001374:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_SPI3_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_SPI3_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_SPI3_Init+0x64>)
 8001384:	2202      	movs	r2, #2
 8001386:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_SPI3_Init+0x64>)
 800138a:	2201      	movs	r2, #1
 800138c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_SPI3_Init+0x64>)
 8001390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001394:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_SPI3_Init+0x64>)
 8001398:	2238      	movs	r2, #56	; 0x38
 800139a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_SPI3_Init+0x64>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_SPI3_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_SPI3_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_SPI3_Init+0x64>)
 80013b0:	220a      	movs	r2, #10
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_SPI3_Init+0x64>)
 80013b6:	f003 ff8f 	bl	80052d8 <HAL_SPI_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013c0:	f001 fd22 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001a8 	.word	0x200001a8
 80013cc:	40003c00 	.word	0x40003c00

080013d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f005 feeb 	bl	80071e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <MX_TIM1_Init+0x138>)
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <MX_TIM1_Init+0x13c>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <MX_TIM1_Init+0x138>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <MX_TIM1_Init+0x138>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <MX_TIM1_Init+0x138>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <MX_TIM1_Init+0x138>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <MX_TIM1_Init+0x138>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <MX_TIM1_Init+0x138>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_TIM1_Init+0x138>)
 800143c:	f004 fa42 	bl	80058c4 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001446:	f001 fcdf 	bl	8002e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001454:	4619      	mov	r1, r3
 8001456:	482c      	ldr	r0, [pc, #176]	; (8001508 <MX_TIM1_Init+0x138>)
 8001458:	f004 ff48 	bl	80062ec <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001462:	f001 fcd1 	bl	8002e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001466:	4828      	ldr	r0, [pc, #160]	; (8001508 <MX_TIM1_Init+0x138>)
 8001468:	f004 fb38 	bl	8005adc <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001472:	f001 fcc9 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001482:	4619      	mov	r1, r3
 8001484:	4820      	ldr	r0, [pc, #128]	; (8001508 <MX_TIM1_Init+0x138>)
 8001486:	f005 faed 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001490:	f001 fcba 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4813      	ldr	r0, [pc, #76]	; (8001508 <MX_TIM1_Init+0x138>)
 80014ba:	f004 fe55 	bl	8006168 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014c4:	f001 fca0 	bl	8002e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM1_Init+0x138>)
 80014ec:	f005 fb28 	bl	8006b40 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014f6:	f001 fc87 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM1_Init+0x138>)
 80014fc:	f001 fdf6 	bl	80030ec <HAL_TIM_MspPostInit>

}
 8001500:	bf00      	nop
 8001502:	3758      	adds	r7, #88	; 0x58
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000200 	.word	0x20000200
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fe60 	bl	80071e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_TIM2_Init+0xa4>)
 800152e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_TIM2_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM2_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM2_Init+0xa4>)
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
 8001546:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM2_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM2_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001554:	2303      	movs	r3, #3
 8001556:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM2_Init+0xa4>)
 8001580:	f004 fbb6 	bl	8005cf0 <HAL_TIM_Encoder_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800158a:	f001 fc3d 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM2_Init+0xa4>)
 800159c:	f005 fa62 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015a6:	f001 fc2f 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000248 	.word	0x20000248

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM3_Init+0x94>)
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <MX_TIM3_Init+0x98>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM3_Init+0x94>)
 80015dc:	2253      	movs	r2, #83	; 0x53
 80015de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM3_Init+0x94>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_TIM3_Init+0x94>)
 80015e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80015ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_TIM3_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM3_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_TIM3_Init+0x94>)
 80015fc:	f004 f962 	bl	80058c4 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001606:	f001 fbff 	bl	8002e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM3_Init+0x94>)
 8001618:	f004 fe68 	bl	80062ec <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001622:	f001 fbf1 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_TIM3_Init+0x94>)
 8001634:	f005 fa16 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800163e:	f001 fbe3 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000290 	.word	0x20000290
 8001650:	40000400 	.word	0x40000400

08001654 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM5_Init+0x94>)
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <MX_TIM5_Init+0x98>)
 8001674:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM5_Init+0x94>)
 8001678:	2253      	movs	r2, #83	; 0x53
 800167a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM5_Init+0x94>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_TIM5_Init+0x94>)
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM5_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_TIM5_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_TIM5_Init+0x94>)
 8001698:	f004 f914 	bl	80058c4 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80016a2:	f001 fbb1 	bl	8002e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM5_Init+0x94>)
 80016b4:	f004 fe1a 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80016be:	f001 fba3 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM5_Init+0x94>)
 80016d0:	f005 f9c8 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80016da:	f001 fb95 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002d8 	.word	0x200002d8
 80016ec:	40000c00 	.word	0x40000c00

080016f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_USART2_UART_Init+0x4c>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <MX_USART2_UART_Init+0x50>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_USART2_UART_Init+0x4c>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_USART2_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_USART2_UART_Init+0x4c>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_USART2_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_USART2_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_USART2_UART_Init+0x4c>)
 8001728:	f005 fa70 	bl	8006c0c <HAL_UART_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001732:	f001 fb69 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000320 	.word	0x20000320
 8001740:	40004400 	.word	0x40004400

08001744 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_USART6_UART_Init+0x50>)
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <MX_USART6_UART_Init+0x54>)
 800174c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART6_UART_Init+0x50>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART6_UART_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART6_UART_Init+0x50>)
 8001780:	f005 fa44 	bl	8006c0c <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800178a:	f001 fb3d 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000364 	.word	0x20000364
 8001798:	40011400 	.word	0x40011400

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <MX_GPIO_Init+0x174>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a55      	ldr	r2, [pc, #340]	; (8001910 <MX_GPIO_Init+0x174>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <MX_GPIO_Init+0x174>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <MX_GPIO_Init+0x174>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <MX_GPIO_Init+0x174>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <MX_GPIO_Init+0x174>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b48      	ldr	r3, [pc, #288]	; (8001910 <MX_GPIO_Init+0x174>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <MX_GPIO_Init+0x174>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <MX_GPIO_Init+0x174>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <MX_GPIO_Init+0x174>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a40      	ldr	r2, [pc, #256]	; (8001910 <MX_GPIO_Init+0x174>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <MX_GPIO_Init+0x174>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <MX_GPIO_Init+0x174>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a39      	ldr	r2, [pc, #228]	; (8001910 <MX_GPIO_Init+0x174>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <MX_GPIO_Init+0x174>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Switch_Relay_1_Pin|Switch_Relay_2_Pin|Switch_Relay_3_Pin|DIR_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001844:	4833      	ldr	r0, [pc, #204]	; (8001914 <MX_GPIO_Init+0x178>)
 8001846:	f002 f8e7 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2104      	movs	r1, #4
 800184e:	4832      	ldr	r0, [pc, #200]	; (8001918 <MX_GPIO_Init+0x17c>)
 8001850:	f002 f8e2 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Emergency_Pin|Photoelectric_sensor_3_Pin;
 8001854:	f242 0348 	movw	r3, #8264	; 0x2048
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	482c      	ldr	r0, [pc, #176]	; (800191c <MX_GPIO_Init+0x180>)
 800186c:	f001 ff38 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Relay_1_Pin Switch_Relay_2_Pin Switch_Relay_3_Pin DIR_Pin */
  GPIO_InitStruct.Pin = Switch_Relay_1_Pin|Switch_Relay_2_Pin|Switch_Relay_3_Pin|DIR_Pin;
 8001870:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4822      	ldr	r0, [pc, #136]	; (8001914 <MX_GPIO_Init+0x178>)
 800188a:	f001 ff29 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_1_Pin */
  GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin|Photoelectric_sensor_1_Pin;
 800188e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001894:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	481e      	ldr	r0, [pc, #120]	; (8001920 <MX_GPIO_Init+0x184>)
 80018a6:	f001 ff1b 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JoyStick_SS_PIN_Pin */
  GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 80018aa:	2304      	movs	r3, #4
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4815      	ldr	r0, [pc, #84]	; (8001918 <MX_GPIO_Init+0x17c>)
 80018c2:	f001 ff0d 	bl	80036e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2008      	movs	r0, #8
 80018cc:	f001 fed1 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018d0:	2008      	movs	r0, #8
 80018d2:	f001 feea 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2009      	movs	r0, #9
 80018dc:	f001 fec9 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018e0:	2009      	movs	r0, #9
 80018e2:	f001 fee2 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2017      	movs	r0, #23
 80018ec:	f001 fec1 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018f0:	2017      	movs	r0, #23
 80018f2:	f001 feda 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2028      	movs	r0, #40	; 0x28
 80018fc:	f001 feb9 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001900:	2028      	movs	r0, #40	; 0x28
 8001902:	f001 fed2 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40020800 	.word	0x40020800
 8001920:	40020400 	.word	0x40020400

08001924 <Trajectory_Gen>:

/* USER CODE BEGIN 4 */
void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8001924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001928:	b088      	sub	sp, #32
 800192a:	af00      	add	r7, sp, #0
 800192c:	ed87 0b06 	vstr	d0, [r7, #24]
 8001930:	ed87 1b04 	vstr	d1, [r7, #16]
 8001934:	ed87 2b02 	vstr	d2, [r7, #8]
 8001938:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 800193c:	496d      	ldr	r1, [pc, #436]	; (8001af4 <Trajectory_Gen+0x1d0>)
 800193e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001942:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8001946:	496c      	ldr	r1, [pc, #432]	; (8001af8 <Trajectory_Gen+0x1d4>)
 8001948:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800194c:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8001950:	496a      	ldr	r1, [pc, #424]	; (8001afc <Trajectory_Gen+0x1d8>)
 8001952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001956:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 800195a:	4969      	ldr	r1, [pc, #420]	; (8001b00 <Trajectory_Gen+0x1dc>)
 800195c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
	deltaX = fabs(x_final - x_initial);
 8001964:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <Trajectory_Gen+0x1d4>)
 8001966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196a:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <Trajectory_Gen+0x1d0>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fc36 	bl	80001e0 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <Trajectory_Gen+0x1e0>)
 8001980:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8001984:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <Trajectory_Gen+0x1d4>)
 8001986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198a:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <Trajectory_Gen+0x1d0>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fc26 	bl	80001e0 <__aeabi_dsub>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7ff f864 	bl	8000a70 <__aeabi_dcmpgt>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <Trajectory_Gen+0x92>
		direct = 1;
 80019ae:	4b56      	ldr	r3, [pc, #344]	; (8001b08 <Trajectory_Gen+0x1e4>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e018      	b.n	80019e8 <Trajectory_Gen+0xc4>
	} else if (x_final - x_initial < 0) {
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <Trajectory_Gen+0x1d4>)
 80019b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <Trajectory_Gen+0x1d0>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fc0d 	bl	80001e0 <__aeabi_dsub>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f7ff f82d 	bl	8000a34 <__aeabi_dcmplt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <Trajectory_Gen+0xc4>
		direct = -1;
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <Trajectory_Gen+0x1e4>)
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <Trajectory_Gen+0x1d8>)
 80019ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <Trajectory_Gen+0x1dc>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fed6 	bl	80007a4 <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4943      	ldr	r1, [pc, #268]	; (8001b0c <Trajectory_Gen+0x1e8>)
 80019fe:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <Trajectory_Gen+0x1e0>)
 8001a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <Trajectory_Gen+0x1dc>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fec9 	bl	80007a4 <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	f005 fbe7 	bl	80071f4 <sqrt>
 8001a26:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2a:	eef0 7a60 	vmov.f32	s15, s1
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <Trajectory_Gen+0x1ec>)
 8001a30:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle <= t_acceleration) {
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <Trajectory_Gen+0x1ec>)
 8001a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <Trajectory_Gen+0x1e8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7ff f802 	bl	8000a48 <__aeabi_dcmple>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00f      	beq.n	8001a6a <Trajectory_Gen+0x146>
		t_final = 2 * (t_triangle);
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <Trajectory_Gen+0x1ec>)
 8001a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	f7fe fbc6 	bl	80001e4 <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	492d      	ldr	r1, [pc, #180]	; (8001b14 <Trajectory_Gen+0x1f0>)
 8001a5e:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <Trajectory_Gen+0x1f4>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
	} else if (t_triangle > t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8001a68:	e03e      	b.n	8001ae8 <Trajectory_Gen+0x1c4>
	} else if (t_triangle > t_acceleration) {
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <Trajectory_Gen+0x1ec>)
 8001a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <Trajectory_Gen+0x1e8>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fffb 	bl	8000a70 <__aeabi_dcmpgt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d100      	bne.n	8001a82 <Trajectory_Gen+0x15e>
}
 8001a80:	e032      	b.n	8001ae8 <Trajectory_Gen+0x1c4>
		t_final = (2 * t_acceleration)
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <Trajectory_Gen+0x1e8>)
 8001a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f7fe fbaa 	bl	80001e4 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4690      	mov	r8, r2
 8001a96:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <Trajectory_Gen+0x1e0>)
 8001a9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <Trajectory_Gen+0x1e8>)
 8001aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <Trajectory_Gen+0x1d8>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fd51 	bl	8000550 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fb93 	bl	80001e0 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <Trajectory_Gen+0x1d8>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fe6c 	bl	80007a4 <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fb86 	bl	80001e4 <__adddf3>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8001adc:	490d      	ldr	r1, [pc, #52]	; (8001b14 <Trajectory_Gen+0x1f0>)
 8001ade:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <Trajectory_Gen+0x1f4>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af2:	bf00      	nop
 8001af4:	200003b0 	.word	0x200003b0
 8001af8:	200003b8 	.word	0x200003b8
 8001afc:	200003c0 	.word	0x200003c0
 8001b00:	200003c8 	.word	0x200003c8
 8001b04:	200003d0 	.word	0x200003d0
 8001b08:	200003ac 	.word	0x200003ac
 8001b0c:	200003f8 	.word	0x200003f8
 8001b10:	20000408 	.word	0x20000408
 8001b14:	20000400 	.word	0x20000400
 8001b18:	200003a8 	.word	0x200003a8

08001b1c <Trajectory_Eva>:

void Trajectory_Eva() {
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 8001b22:	4ba3      	ldr	r3, [pc, #652]	; (8001db0 <Trajectory_Eva+0x294>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f000 81bf 	beq.w	8001eaa <Trajectory_Eva+0x38e>
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	f300 8413 	bgt.w	8002358 <Trajectory_Eva+0x83c>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 840f 	beq.w	8002356 <Trajectory_Eva+0x83a>
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <Trajectory_Eva+0x24>
			trajectory_type = 0;
		}
		break;
	}

}
 8001b3c:	f000 bc0c 	b.w	8002358 <Trajectory_Eva+0x83c>
		if (t_count <= t_triangle) {
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <Trajectory_Eva+0x298>)
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <Trajectory_Eva+0x29c>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe ff7c 	bl	8000a48 <__aeabi_dcmple>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8085 	beq.w	8001c62 <Trajectory_Eva+0x146>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8001b58:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc8d 	bl	800047c <__aeabi_i2d>
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <Trajectory_Eva+0x2a4>)
 8001b68:	f7fe fcf2 	bl	8000550 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	4b93      	ldr	r3, [pc, #588]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fce9 	bl	8000550 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4614      	mov	r4, r2
 8001b84:	461d      	mov	r5, r3
 8001b86:	4b90      	ldr	r3, [pc, #576]	; (8001dc8 <Trajectory_Eva+0x2ac>)
 8001b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <Trajectory_Eva+0x2ac>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fcdd 	bl	8000550 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fcd7 	bl	8000550 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <Trajectory_Eva+0x2b0>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fb18 	bl	80001e4 <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
			x = x_initial
 8001bb8:	4985      	ldr	r1, [pc, #532]	; (8001dd0 <Trajectory_Eva+0x2b4>)
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8001bbe:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <Trajectory_Eva+0x2ac>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcc1 	bl	8000550 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc4e 	bl	800047c <__aeabi_i2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fcb2 	bl	8000550 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4978      	ldr	r1, [pc, #480]	; (8001dd4 <Trajectory_Eva+0x2b8>)
 8001bf2:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8001bf6:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc3e 	bl	800047c <__aeabi_i2d>
 8001c00:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fca3 	bl	8000550 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4972      	ldr	r1, [pc, #456]	; (8001dd8 <Trajectory_Eva+0x2bc>)
 8001c10:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8001c14:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <Trajectory_Eva+0x2b4>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	4970      	ldr	r1, [pc, #448]	; (8001ddc <Trajectory_Eva+0x2c0>)
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8001c20:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <Trajectory_Eva+0x2b8>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	496e      	ldr	r1, [pc, #440]	; (8001de0 <Trajectory_Eva+0x2c4>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <Trajectory_Eva+0x2ac>)
 8001c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <Trajectory_Eva+0x2c8>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fad4 	bl	80001e4 <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4961      	ldr	r1, [pc, #388]	; (8001dc8 <Trajectory_Eva+0x2ac>)
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <Trajectory_Eva+0x298>)
 8001c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <Trajectory_Eva+0x2c8>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fac7 	bl	80001e4 <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4956      	ldr	r1, [pc, #344]	; (8001db4 <Trajectory_Eva+0x298>)
 8001c5c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001c60:	e37a      	b.n	8002358 <Trajectory_Eva+0x83c>
		} else if (t_count <= t_final) {
 8001c62:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <Trajectory_Eva+0x298>)
 8001c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c68:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <Trajectory_Eva+0x2cc>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe feeb 	bl	8000a48 <__aeabi_dcmple>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80bb 	beq.w	8001df0 <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <Trajectory_Eva+0x2c4>)
 8001c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c80:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fc63 	bl	8000550 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <Trajectory_Eva+0x2c0>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe faa4 	bl	80001e4 <__adddf3>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbe7 	bl	800047c <__aeabi_i2d>
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <Trajectory_Eva+0x2a4>)
 8001cb4:	f7fe fc4c 	bl	8000550 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc43 	bl	8000550 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fc3a 	bl	8000550 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fc31 	bl	8000550 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fa73 	bl	80001e0 <__aeabi_dsub>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <Trajectory_Eva+0x2b4>)
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <Trajectory_Eva+0x2c4>)
 8001d06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc1b 	bl	8000550 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4692      	mov	sl, r2
 8001d20:	469b      	mov	fp, r3
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fba8 	bl	800047c <__aeabi_i2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4650      	mov	r0, sl
 8001d32:	4659      	mov	r1, fp
 8001d34:	f7fe fc0c 	bl	8000550 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fa4e 	bl	80001e0 <__aeabi_dsub>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <Trajectory_Eva+0x2b8>)
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <Trajectory_Eva+0x2a8>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	4690      	mov	r8, r2
 8001d56:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <Trajectory_Eva+0x2a0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fb8c 	bl	800047c <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4640      	mov	r0, r8
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	f7fe fbf0 	bl	8000550 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4918      	ldr	r1, [pc, #96]	; (8001dd8 <Trajectory_Eva+0x2bc>)
 8001d76:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <Trajectory_Eva+0x2c8>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fa2d 	bl	80001e4 <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4917      	ldr	r1, [pc, #92]	; (8001dec <Trajectory_Eva+0x2d0>)
 8001d90:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <Trajectory_Eva+0x298>)
 8001d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <Trajectory_Eva+0x2c8>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fa20 	bl	80001e4 <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4902      	ldr	r1, [pc, #8]	; (8001db4 <Trajectory_Eva+0x298>)
 8001daa:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001dae:	e2d3      	b.n	8002358 <Trajectory_Eva+0x83c>
 8001db0:	200003a8 	.word	0x200003a8
 8001db4:	20000018 	.word	0x20000018
 8001db8:	20000408 	.word	0x20000408
 8001dbc:	200003ac 	.word	0x200003ac
 8001dc0:	3fe00000 	.word	0x3fe00000
 8001dc4:	200003c8 	.word	0x200003c8
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	200003b0 	.word	0x200003b0
 8001dd0:	20000410 	.word	0x20000410
 8001dd4:	20000418 	.word	0x20000418
 8001dd8:	20000420 	.word	0x20000420
 8001ddc:	200003d8 	.word	0x200003d8
 8001de0:	200003e8 	.word	0x200003e8
 8001de4:	20000020 	.word	0x20000020
 8001de8:	20000400 	.word	0x20000400
 8001dec:	20000008 	.word	0x20000008
			x = x_final;
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <Trajectory_Eva+0x4b8>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	4978      	ldr	r1, [pc, #480]	; (8001fd8 <Trajectory_Eva+0x4bc>)
 8001df8:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8001dfc:	4977      	ldr	r1, [pc, #476]	; (8001fdc <Trajectory_Eva+0x4c0>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = traject_us / 1000000;
 8001e0a:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <Trajectory_Eva+0x4c4>)
 8001e0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e10:	4a74      	ldr	r2, [pc, #464]	; (8001fe4 <Trajectory_Eva+0x4c8>)
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f7fe fe9b 	bl	8000b50 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fb5f 	bl	80004e4 <__aeabi_ul2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	496f      	ldr	r1, [pc, #444]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001e2c:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = traject_us / 1000000;
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <Trajectory_Eva+0x4c4>)
 8001e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e36:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <Trajectory_Eva+0x4c8>)
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	f7fe fe88 	bl	8000b50 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fb4c 	bl	80004e4 <__aeabi_ul2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4966      	ldr	r1, [pc, #408]	; (8001fec <Trajectory_Eva+0x4d0>)
 8001e52:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = traject_us / 1000000;
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <Trajectory_Eva+0x4c4>)
 8001e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5c:	4a61      	ldr	r2, [pc, #388]	; (8001fe4 <Trajectory_Eva+0x4c8>)
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	f7fe fe75 	bl	8000b50 <__aeabi_uldivmod>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fb39 	bl	80004e4 <__aeabi_ul2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	495e      	ldr	r1, [pc, #376]	; (8001ff0 <Trajectory_Eva+0x4d4>)
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = traject_us / 1000000;
 8001e7c:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <Trajectory_Eva+0x4c4>)
 8001e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <Trajectory_Eva+0x4c8>)
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	f7fe fe62 	bl	8000b50 <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fb26 	bl	80004e4 <__aeabi_ul2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4955      	ldr	r1, [pc, #340]	; (8001ff4 <Trajectory_Eva+0x4d8>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8001ea2:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <Trajectory_Eva+0x4dc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
		break;
 8001ea8:	e256      	b.n	8002358 <Trajectory_Eva+0x83c>
		if (t_count <= t_acceleration) {
 8001eaa:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <Trajectory_Eva+0x4d8>)
 8001eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <Trajectory_Eva+0x4e0>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fdc7 	bl	8000a48 <__aeabi_dcmple>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80af 	beq.w	8002020 <Trajectory_Eva+0x504>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <Trajectory_Eva+0x4e4>)
 8001ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <Trajectory_Eva+0x4e8>)
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	461d      	mov	r5, r3
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <Trajectory_Eva+0x4ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe facc 	bl	800047c <__aeabi_i2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe fb30 	bl	8000550 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe fb27 	bl	8000550 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fb1e 	bl	8000550 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <Trajectory_Eva+0x4f0>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe f95f 	bl	80001e4 <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	492b      	ldr	r1, [pc, #172]	; (8001fd8 <Trajectory_Eva+0x4bc>)
 8001f2c:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <Trajectory_Eva+0x4e4>)
 8001f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb08 	bl	8000550 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	461d      	mov	r5, r3
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <Trajectory_Eva+0x4ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa95 	bl	800047c <__aeabi_i2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe faf9 	bl	8000550 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	491e      	ldr	r1, [pc, #120]	; (8001fdc <Trajectory_Eva+0x4c0>)
 8001f64:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <Trajectory_Eva+0x4ec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa85 	bl	800047c <__aeabi_i2d>
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <Trajectory_Eva+0x4e4>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe faea 	bl	8000550 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4923      	ldr	r1, [pc, #140]	; (8002010 <Trajectory_Eva+0x4f4>)
 8001f82:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <Trajectory_Eva+0x4bc>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	4921      	ldr	r1, [pc, #132]	; (8002014 <Trajectory_Eva+0x4f8>)
 8001f8e:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <Trajectory_Eva+0x4c0>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	491f      	ldr	r1, [pc, #124]	; (8002018 <Trajectory_Eva+0x4fc>)
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <Trajectory_Eva+0x500>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe f91b 	bl	80001e4 <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <Trajectory_Eva+0x4cc>)
 8001fb4:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <Trajectory_Eva+0x4d8>)
 8001fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <Trajectory_Eva+0x500>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe f90e 	bl	80001e4 <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <Trajectory_Eva+0x4d8>)
 8001fce:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001fd2:	e1c1      	b.n	8002358 <Trajectory_Eva+0x83c>
 8001fd4:	200003b8 	.word	0x200003b8
 8001fd8:	20000410 	.word	0x20000410
 8001fdc:	20000418 	.word	0x20000418
 8001fe0:	20000070 	.word	0x20000070
 8001fe4:	000f4240 	.word	0x000f4240
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000018 	.word	0x20000018
 8001ff8:	200003a8 	.word	0x200003a8
 8001ffc:	200003f8 	.word	0x200003f8
 8002000:	200003c8 	.word	0x200003c8
 8002004:	3fe00000 	.word	0x3fe00000
 8002008:	200003ac 	.word	0x200003ac
 800200c:	200003b0 	.word	0x200003b0
 8002010:	20000420 	.word	0x20000420
 8002014:	200003d8 	.word	0x200003d8
 8002018:	200003e8 	.word	0x200003e8
 800201c:	20000020 	.word	0x20000020
		} else if (t_count <= t_final - t_acceleration) {
 8002020:	4b8e      	ldr	r3, [pc, #568]	; (800225c <Trajectory_Eva+0x740>)
 8002022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002026:	4b8e      	ldr	r3, [pc, #568]	; (8002260 <Trajectory_Eva+0x744>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe f8d8 	bl	80001e0 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <Trajectory_Eva+0x748>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fd0d 	bl	8000a5c <__aeabi_dcmpge>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d061      	beq.n	800210c <Trajectory_Eva+0x5f0>
			x = (v_final * t_Cons * direct) + x_final1;
 8002048:	4b87      	ldr	r3, [pc, #540]	; (8002268 <Trajectory_Eva+0x74c>)
 800204a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <Trajectory_Eva+0x750>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa7c 	bl	8000550 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4b83      	ldr	r3, [pc, #524]	; (8002270 <Trajectory_Eva+0x754>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa09 	bl	800047c <__aeabi_i2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe fa6d 	bl	8000550 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <Trajectory_Eva+0x758>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe f8ae 	bl	80001e4 <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	497a      	ldr	r1, [pc, #488]	; (8002278 <Trajectory_Eva+0x75c>)
 800208e:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 8002092:	4b77      	ldr	r3, [pc, #476]	; (8002270 <Trajectory_Eva+0x754>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9f0 	bl	800047c <__aeabi_i2d>
 800209c:	4b72      	ldr	r3, [pc, #456]	; (8002268 <Trajectory_Eva+0x74c>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fa55 	bl	8000550 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4974      	ldr	r1, [pc, #464]	; (800227c <Trajectory_Eva+0x760>)
 80020ac:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 80020b0:	4973      	ldr	r1, [pc, #460]	; (8002280 <Trajectory_Eva+0x764>)
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 80020be:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <Trajectory_Eva+0x75c>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	496f      	ldr	r1, [pc, #444]	; (8002284 <Trajectory_Eva+0x768>)
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <Trajectory_Eva+0x760>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	496d      	ldr	r1, [pc, #436]	; (8002288 <Trajectory_Eva+0x76c>)
 80020d2:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <Trajectory_Eva+0x750>)
 80020d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <Trajectory_Eva+0x770>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe f87f 	bl	80001e4 <__adddf3>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4960      	ldr	r1, [pc, #384]	; (800226c <Trajectory_Eva+0x750>)
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80020f0:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <Trajectory_Eva+0x748>)
 80020f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <Trajectory_Eva+0x770>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe f872 	bl	80001e4 <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4957      	ldr	r1, [pc, #348]	; (8002264 <Trajectory_Eva+0x748>)
 8002106:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800210a:	e125      	b.n	8002358 <Trajectory_Eva+0x83c>
		} else if (t_count <= t_final) {
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <Trajectory_Eva+0x748>)
 800210e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002112:	4b52      	ldr	r3, [pc, #328]	; (800225c <Trajectory_Eva+0x740>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fc96 	bl	8000a48 <__aeabi_dcmple>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80bc 	beq.w	800229c <Trajectory_Eva+0x780>
					x_final2 + (v_final2 * (t_DeAcce))
 8002124:	4b58      	ldr	r3, [pc, #352]	; (8002288 <Trajectory_Eva+0x76c>)
 8002126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <Trajectory_Eva+0x774>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa0e 	bl	8000550 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	4b51      	ldr	r3, [pc, #324]	; (8002284 <Trajectory_Eva+0x768>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe f84f 	bl	80001e4 <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4690      	mov	r8, r2
 800214c:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <Trajectory_Eva+0x754>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f992 	bl	800047c <__aeabi_i2d>
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <Trajectory_Eva+0x778>)
 800215e:	f7fe f9f7 	bl	8000550 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <Trajectory_Eva+0x77c>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f9ee 	bl	8000550 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4692      	mov	sl, r2
 800217a:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 800217c:	4b44      	ldr	r3, [pc, #272]	; (8002290 <Trajectory_Eva+0x774>)
 800217e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <Trajectory_Eva+0x774>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe f9e2 	bl	8000550 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4650      	mov	r0, sl
 8002192:	4659      	mov	r1, fp
 8002194:	f7fe f9dc 	bl	8000550 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 800219c:	4640      	mov	r0, r8
 800219e:	4649      	mov	r1, r9
 80021a0:	f7fe f81e 	bl	80001e0 <__aeabi_dsub>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
			x =
 80021a8:	4933      	ldr	r1, [pc, #204]	; (8002278 <Trajectory_Eva+0x75c>)
 80021aa:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 80021ae:	4b36      	ldr	r3, [pc, #216]	; (8002288 <Trajectory_Eva+0x76c>)
 80021b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <Trajectory_Eva+0x77c>)
 80021b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <Trajectory_Eva+0x774>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe f9c6 	bl	8000550 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4692      	mov	sl, r2
 80021ca:	469b      	mov	fp, r3
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <Trajectory_Eva+0x754>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f953 	bl	800047c <__aeabi_i2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4650      	mov	r0, sl
 80021dc:	4659      	mov	r1, fp
 80021de:	f7fe f9b7 	bl	8000550 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f7fd fff9 	bl	80001e0 <__aeabi_dsub>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <Trajectory_Eva+0x760>)
 80021f4:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <Trajectory_Eva+0x77c>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	4614      	mov	r4, r2
 8002200:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <Trajectory_Eva+0x754>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f937 	bl	800047c <__aeabi_i2d>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4620      	mov	r0, r4
 8002214:	4629      	mov	r1, r5
 8002216:	f7fe f99b 	bl	8000550 <__aeabi_dmul>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4918      	ldr	r1, [pc, #96]	; (8002280 <Trajectory_Eva+0x764>)
 8002220:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <Trajectory_Eva+0x774>)
 8002226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <Trajectory_Eva+0x770>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fd ffd8 	bl	80001e4 <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4915      	ldr	r1, [pc, #84]	; (8002290 <Trajectory_Eva+0x774>)
 800223a:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <Trajectory_Eva+0x748>)
 8002240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <Trajectory_Eva+0x770>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fd ffcb 	bl	80001e4 <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4904      	ldr	r1, [pc, #16]	; (8002264 <Trajectory_Eva+0x748>)
 8002254:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002258:	e07e      	b.n	8002358 <Trajectory_Eva+0x83c>
 800225a:	bf00      	nop
 800225c:	20000400 	.word	0x20000400
 8002260:	200003f8 	.word	0x200003f8
 8002264:	20000018 	.word	0x20000018
 8002268:	200003c0 	.word	0x200003c0
 800226c:	20000010 	.word	0x20000010
 8002270:	200003ac 	.word	0x200003ac
 8002274:	200003d8 	.word	0x200003d8
 8002278:	20000410 	.word	0x20000410
 800227c:	20000418 	.word	0x20000418
 8002280:	20000420 	.word	0x20000420
 8002284:	200003e0 	.word	0x200003e0
 8002288:	200003f0 	.word	0x200003f0
 800228c:	20000020 	.word	0x20000020
 8002290:	20000008 	.word	0x20000008
 8002294:	3fe00000 	.word	0x3fe00000
 8002298:	200003c8 	.word	0x200003c8
			x = x_final;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <Trajectory_Eva+0x844>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	4930      	ldr	r1, [pc, #192]	; (8002364 <Trajectory_Eva+0x848>)
 80022a4:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 80022a8:	492f      	ldr	r1, [pc, #188]	; (8002368 <Trajectory_Eva+0x84c>)
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = traject_us / 1000000;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <Trajectory_Eva+0x850>)
 80022b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <Trajectory_Eva+0x854>)
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	f7fe fc45 	bl	8000b50 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe f909 	bl	80004e4 <__aeabi_ul2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <Trajectory_Eva+0x858>)
 80022d8:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = traject_us / 1000000;
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <Trajectory_Eva+0x850>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <Trajectory_Eva+0x854>)
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f7fe fc32 	bl	8000b50 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe f8f6 	bl	80004e4 <__aeabi_ul2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	491e      	ldr	r1, [pc, #120]	; (8002378 <Trajectory_Eva+0x85c>)
 80022fe:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = traject_us / 1000000;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <Trajectory_Eva+0x850>)
 8002304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <Trajectory_Eva+0x854>)
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f7fe fc1f 	bl	8000b50 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe f8e3 	bl	80004e4 <__aeabi_ul2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4916      	ldr	r1, [pc, #88]	; (800237c <Trajectory_Eva+0x860>)
 8002324:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = traject_us / 1000000;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <Trajectory_Eva+0x850>)
 800232a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <Trajectory_Eva+0x854>)
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	f7fe fc0c 	bl	8000b50 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe f8d0 	bl	80004e4 <__aeabi_ul2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	490d      	ldr	r1, [pc, #52]	; (8002380 <Trajectory_Eva+0x864>)
 800234a:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <Trajectory_Eva+0x868>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
		break;
 8002354:	e000      	b.n	8002358 <Trajectory_Eva+0x83c>
		break;
 8002356:	bf00      	nop
}
 8002358:	bf00      	nop
 800235a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235e:	bf00      	nop
 8002360:	200003b8 	.word	0x200003b8
 8002364:	20000410 	.word	0x20000410
 8002368:	20000418 	.word	0x20000418
 800236c:	20000070 	.word	0x20000070
 8002370:	000f4240 	.word	0x000f4240
 8002374:	20000000 	.word	0x20000000
 8002378:	20000008 	.word	0x20000008
 800237c:	20000010 	.word	0x20000010
 8002380:	20000018 	.word	0x20000018
 8002384:	200003a8 	.word	0x200003a8

08002388 <PID>:

void PID(float setposition) {
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8002392:	4b9b      	ldr	r3, [pc, #620]	; (8002600 <PID+0x278>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a9b      	ldr	r2, [pc, #620]	; (8002604 <PID+0x27c>)
 8002398:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 800239a:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <PID+0x27c>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <PID+0x280>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023aa:	ee17 0a90 	vmov	r0, s15
 80023ae:	f7fe f877 	bl	80004a0 <__aeabi_f2d>
 80023b2:	4604      	mov	r4, r0
 80023b4:	460d      	mov	r5, r1
 80023b6:	4b95      	ldr	r3, [pc, #596]	; (800260c <PID+0x284>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe f890 	bl	80004e4 <__aeabi_ul2d>
 80023c4:	a388      	add	r3, pc, #544	; (adr r3, 80025e8 <PID+0x260>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f9eb 	bl	80007a4 <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fe f9e5 	bl	80007a4 <__aeabi_ddiv>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fb65 	bl	8000ab0 <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a89      	ldr	r2, [pc, #548]	; (8002610 <PID+0x288>)
 80023ea:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 80023ec:	4b85      	ldr	r3, [pc, #532]	; (8002604 <PID+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a85      	ldr	r2, [pc, #532]	; (8002608 <PID+0x280>)
 80023f2:	6013      	str	r3, [r2, #0]

	if (pos_f < 0) {
 80023f4:	4b87      	ldr	r3, [pc, #540]	; (8002614 <PID+0x28c>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d504      	bpl.n	800240e <PID+0x86>
		pos_f = 0;
 8002404:	4b83      	ldr	r3, [pc, #524]	; (8002614 <PID+0x28c>)
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e00c      	b.n	8002428 <PID+0xa0>
	} else if (pos_f > 700) {
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <PID+0x28c>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002618 <PID+0x290>
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	dd02      	ble.n	8002428 <PID+0xa0>
		pos_f = 700;
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <PID+0x28c>)
 8002424:	4a7d      	ldr	r2, [pc, #500]	; (800261c <PID+0x294>)
 8002426:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8002428:	4b75      	ldr	r3, [pc, #468]	; (8002600 <PID+0x278>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002436:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <PID+0x298>)
 8002438:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 800243c:	4b79      	ldr	r3, [pc, #484]	; (8002624 <PID+0x29c>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002628 <PID+0x2a0>
 8002446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	bfac      	ite	ge
 8002450:	2301      	movge	r3, #1
 8002452:	2300      	movlt	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f083 0301 	eor.w	r3, r3, #1
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d13f      	bne.n	80024e0 <PID+0x158>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <PID+0x298>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	bfac      	ite	ge
 8002470:	2301      	movge	r3, #1
 8002472:	2300      	movlt	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10f      	bne.n	80024a0 <PID+0x118>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <PID+0x2a4>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	bfac      	ite	ge
 8002490:	2301      	movge	r3, #1
 8002492:	2300      	movlt	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02a      	beq.n	80024f6 <PID+0x16e>
 80024a0:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <PID+0x298>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	bf4c      	ite	mi
 80024b0:	2301      	movmi	r3, #1
 80024b2:	2300      	movpl	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10f      	bne.n	80024e0 <PID+0x158>
 80024c0:	4b5a      	ldr	r3, [pc, #360]	; (800262c <PID+0x2a4>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	bf4c      	ite	mi
 80024d0:	2301      	movmi	r3, #1
 80024d2:	2300      	movpl	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <PID+0x16e>
		Intregral = Intregral + Error;
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <PID+0x2a4>)
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <PID+0x298>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <PID+0x2a4>)
 80024f2:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 80024f6:	4b4e      	ldr	r3, [pc, #312]	; (8002630 <PID+0x2a8>)
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	4b48      	ldr	r3, [pc, #288]	; (8002620 <PID+0x298>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <PID+0x298>)
 8002508:	edd3 6a00 	vldr	s13, [r3]
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <PID+0x2ac>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002516:	4b48      	ldr	r3, [pc, #288]	; (8002638 <PID+0x2b0>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <PID+0x2b4>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <PID+0x2a4>)
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <PID+0x2b8>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <PID+0x29c>)
 8002544:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8002548:	4b36      	ldr	r3, [pc, #216]	; (8002624 <PID+0x29c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd ffa7 	bl	80004a0 <__aeabi_f2d>
 8002552:	a327      	add	r3, pc, #156	; (adr r3, 80025f0 <PID+0x268>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe fa80 	bl	8000a5c <__aeabi_dcmpge>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <PID+0x1e2>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <PID+0x29c>)
 8002564:	4a37      	ldr	r2, [pc, #220]	; (8002644 <PID+0x2bc>)
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e00f      	b.n	800258a <PID+0x202>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <PID+0x29c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ff96 	bl	80004a0 <__aeabi_f2d>
 8002574:	a320      	add	r3, pc, #128	; (adr r3, 80025f8 <PID+0x270>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe fa65 	bl	8000a48 <__aeabi_dcmple>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <PID+0x202>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <PID+0x29c>)
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <PID+0x2c0>)
 8002588:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <PID+0x29c>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d503      	bpl.n	80025a2 <PID+0x21a>
		dir = -1;
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <PID+0x2c4>)
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e00a      	b.n	80025b8 <PID+0x230>
	} else if (Dutyfeedback > 0) {
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <PID+0x29c>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	dd02      	ble.n	80025b8 <PID+0x230>
		dir = 1;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <PID+0x2c4>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <PID+0x298>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	dd41      	ble.n	8002650 <PID+0x2c8>
		Dutyfeedback += 1 * Kp; //230
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <PID+0x29c>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <PID+0x2a8>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <PID+0x29c>)
 80025de:	edc3 7a00 	vstr	s15, [r3]
 80025e2:	e04a      	b.n	800267a <PID+0x2f2>
 80025e4:	f3af 8000 	nop.w
 80025e8:	00000000 	.word	0x00000000
 80025ec:	412e8480 	.word	0x412e8480
 80025f0:	66666666 	.word	0x66666666
 80025f4:	40e66666 	.word	0x40e66666
 80025f8:	66666666 	.word	0x66666666
 80025fc:	c0e66666 	.word	0xc0e66666
 8002600:	2000042c 	.word	0x2000042c
 8002604:	20000434 	.word	0x20000434
 8002608:	20000438 	.word	0x20000438
 800260c:	20000078 	.word	0x20000078
 8002610:	2000043c 	.word	0x2000043c
 8002614:	20000478 	.word	0x20000478
 8002618:	442f0000 	.word	0x442f0000
 800261c:	442f0000 	.word	0x442f0000
 8002620:	20000444 	.word	0x20000444
 8002624:	20000440 	.word	0x20000440
 8002628:	47800000 	.word	0x47800000
 800262c:	2000044c 	.word	0x2000044c
 8002630:	20000028 	.word	0x20000028
 8002634:	20000448 	.word	0x20000448
 8002638:	20000034 	.word	0x20000034
 800263c:	20000030 	.word	0x20000030
 8002640:	2000002c 	.word	0x2000002c
 8002644:	47333333 	.word	0x47333333
 8002648:	c7333333 	.word	0xc7333333
 800264c:	20000430 	.word	0x20000430
	} else if (Error < -1.0) {
 8002650:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <PID+0x440>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	d50a      	bpl.n	800267a <PID+0x2f2>
		Dutyfeedback -= 1 * Kp;
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <PID+0x444>)
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <PID+0x448>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002674:	4b55      	ldr	r3, [pc, #340]	; (80027cc <PID+0x444>)
 8002676:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <PID+0x444>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eef0 7ae7 	vabs.f32	s15, s15
 8002684:	4b51      	ldr	r3, [pc, #324]	; (80027cc <PID+0x444>)
 8002686:	edc3 7a00 	vstr	s15, [r3]

//	if(PosY != x){
//		State_PID = 1;
//		State = PID_TEST;
//	}
	motor(Dutyfeedback, dir);
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <PID+0x444>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <PID+0x44c>)
 8002696:	f993 3000 	ldrsb.w	r3, [r3]
 800269a:	4619      	mov	r1, r3
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f000 fade 	bl	8002c60 <motor>
	Last_Error = Error;
 80026a4:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <PID+0x440>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <PID+0x450>)
 80026aa:	6013      	str	r3, [r2, #0]
//	if (PosY >= pos_f * 1.01) {
//		overshoot_check = 1;
//	} pos_f >= PosY - 0.2 && pos_f <= PosY + 0.2

	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 80026ac:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <PID+0x454>)
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <PID+0x458>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd feee 	bl	80004a0 <__aeabi_f2d>
 80026c4:	a33c      	add	r3, pc, #240	; (adr r3, 80027b8 <PID+0x430>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fe f9bd 	bl	8000a48 <__aeabi_dcmple>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d100      	bne.n	80026d6 <PID+0x34e>
		}

	}

//	}
}
 80026d4:	e06b      	b.n	80027ae <PID+0x426>
	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <PID+0x454>)
 80026d8:	ed93 7a00 	vldr	s14, [r3]
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <PID+0x458>)
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e6:	ee17 0a90 	vmov	r0, s15
 80026ea:	f7fd fed9 	bl	80004a0 <__aeabi_f2d>
 80026ee:	a334      	add	r3, pc, #208	; (adr r3, 80027c0 <PID+0x438>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fe f9b2 	bl	8000a5c <__aeabi_dcmpge>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d100      	bne.n	8002700 <PID+0x378>
}
 80026fe:	e056      	b.n	80027ae <PID+0x426>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <PID+0x45c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
		Intregral = 0;
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <PID+0x460>)
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
		Dutyfeedback = 0;
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <PID+0x444>)
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
		v = 0;
 8002718:	4934      	ldr	r1, [pc, #208]	; (80027ec <PID+0x464>)
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
		a = 0;
 8002726:	4932      	ldr	r1, [pc, #200]	; (80027f0 <PID+0x468>)
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9c1 2300 	strd	r2, r3, [r1]
		pos_i = PosY;
 8002734:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <PID+0x458>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2e      	ldr	r2, [pc, #184]	; (80027f4 <PID+0x46c>)
 800273a:	6013      	str	r3, [r2, #0]
		if ((position_index + 2) % 2 == 0) {
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <PID+0x470>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3302      	adds	r3, #2
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <PID+0x3ca>
			state_laser_test = 3;
 800274a:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <PID+0x474>)
 800274c:	2203      	movs	r2, #3
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e00c      	b.n	800276c <PID+0x3e4>
		} else if ((position_index + 2) % 2 == 1) {
 8002752:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <PID+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3302      	adds	r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	bfb8      	it	lt
 8002760:	425b      	neglt	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <PID+0x3e4>
			state_laser_test = 4;
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <PID+0x474>)
 8002768:	2204      	movs	r2, #4
 800276a:	601a      	str	r2, [r3, #0]
		if (position_index < 17) {
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <PID+0x470>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b10      	cmp	r3, #16
 8002772:	dc13      	bgt.n	800279c <PID+0x414>
			position_index++;
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <PID+0x470>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <PID+0x470>)
 800277c:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <PID+0x470>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <PID+0x478>)
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <PID+0x454>)
 800278c:	6013      	str	r3, [r2, #0]
			State = TRAJECT_GEN;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <PID+0x47c>)
 8002790:	2203      	movs	r2, #3
 8002792:	701a      	strb	r2, [r3, #0]
			State_PID = 0;
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <PID+0x480>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
}
 800279a:	e008      	b.n	80027ae <PID+0x426>
			State_PID = 2;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <PID+0x480>)
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
			position_index = 0;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <PID+0x470>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
			State = INIT_HOMING;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <PID+0x47c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	9999999a 	.word	0x9999999a
 80027bc:	3fc99999 	.word	0x3fc99999
 80027c0:	9999999a 	.word	0x9999999a
 80027c4:	bfc99999 	.word	0xbfc99999
 80027c8:	20000444 	.word	0x20000444
 80027cc:	20000440 	.word	0x20000440
 80027d0:	20000028 	.word	0x20000028
 80027d4:	20000430 	.word	0x20000430
 80027d8:	20000448 	.word	0x20000448
 80027dc:	20000478 	.word	0x20000478
 80027e0:	2000042c 	.word	0x2000042c
 80027e4:	20000200 	.word	0x20000200
 80027e8:	2000044c 	.word	0x2000044c
 80027ec:	20000418 	.word	0x20000418
 80027f0:	20000420 	.word	0x20000420
 80027f4:	20000474 	.word	0x20000474
 80027f8:	20000498 	.word	0x20000498
 80027fc:	20000470 	.word	0x20000470
 8002800:	20000080 	.word	0x20000080
 8002804:	2000049c 	.word	0x2000049c
 8002808:	2000006a 	.word	0x2000006a

0800280c <EndEffector_Event>:

void EndEffector_Event(char EndEffector_State) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af02      	add	r7, sp, #8
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 8002816:	4b51      	ldr	r3, [pc, #324]	; (800295c <EndEffector_Event+0x150>)
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 8094 	bne.w	800294c <EndEffector_Event+0x140>
		switch (EndEffector_State) {
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2b0a      	cmp	r3, #10
 8002828:	f200 8093 	bhi.w	8002952 <EndEffector_Event+0x146>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <EndEffector_Event+0x28>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002951 	.word	0x08002951
 8002838:	08002861 	.word	0x08002861
 800283c:	08002879 	.word	0x08002879
 8002840:	08002891 	.word	0x08002891
 8002844:	080028a9 	.word	0x080028a9
 8002848:	080028c1 	.word	0x080028c1
 800284c:	080028d9 	.word	0x080028d9
 8002850:	080028f1 	.word	0x080028f1
 8002854:	08002909 	.word	0x08002909
 8002858:	08002921 	.word	0x08002921
 800285c:	08002939 	.word	0x08002939
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8002860:	f242 7310 	movw	r3, #10000	; 0x2710
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2302      	movs	r3, #2
 8002868:	4a3d      	ldr	r2, [pc, #244]	; (8002960 <EndEffector_Event+0x154>)
 800286a:	212a      	movs	r1, #42	; 0x2a
 800286c:	483b      	ldr	r0, [pc, #236]	; (800295c <EndEffector_Event+0x150>)
 800286e:	f001 fa49 	bl	8003d04 <HAL_I2C_Master_Transmit>
					2, 10000);
			EndEffector_State = Init;
 8002872:	2300      	movs	r3, #0
 8002874:	71fb      	strb	r3, [r7, #7]
			break;
 8002876:	e06c      	b.n	8002952 <EndEffector_Event+0x146>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 8002878:	f242 7310 	movw	r3, #10000	; 0x2710
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2302      	movs	r3, #2
 8002880:	4a38      	ldr	r2, [pc, #224]	; (8002964 <EndEffector_Event+0x158>)
 8002882:	212a      	movs	r1, #42	; 0x2a
 8002884:	4835      	ldr	r0, [pc, #212]	; (800295c <EndEffector_Event+0x150>)
 8002886:	f001 fa3d 	bl	8003d04 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800288a:	2300      	movs	r3, #0
 800288c:	71fb      	strb	r3, [r7, #7]
			break;
 800288e:	e060      	b.n	8002952 <EndEffector_Event+0x146>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 8002890:	f242 7310 	movw	r3, #10000	; 0x2710
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2304      	movs	r3, #4
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <EndEffector_Event+0x15c>)
 800289a:	212a      	movs	r1, #42	; 0x2a
 800289c:	482f      	ldr	r0, [pc, #188]	; (800295c <EndEffector_Event+0x150>)
 800289e:	f001 fa31 	bl	8003d04 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 80028a2:	2300      	movs	r3, #0
 80028a4:	71fb      	strb	r3, [r7, #7]
			break;
 80028a6:	e054      	b.n	8002952 <EndEffector_Event+0x146>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 80028a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2301      	movs	r3, #1
 80028b0:	4a2e      	ldr	r2, [pc, #184]	; (800296c <EndEffector_Event+0x160>)
 80028b2:	212a      	movs	r1, #42	; 0x2a
 80028b4:	4829      	ldr	r0, [pc, #164]	; (800295c <EndEffector_Event+0x150>)
 80028b6:	f001 fa25 	bl	8003d04 <HAL_I2C_Master_Transmit>
					1, 10000);
			EndEffector_State = Init;
 80028ba:	2300      	movs	r3, #0
 80028bc:	71fb      	strb	r3, [r7, #7]
			break;
 80028be:	e048      	b.n	8002952 <EndEffector_Event+0x146>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80028c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2304      	movs	r3, #4
 80028c8:	4a29      	ldr	r2, [pc, #164]	; (8002970 <EndEffector_Event+0x164>)
 80028ca:	212a      	movs	r1, #42	; 0x2a
 80028cc:	4823      	ldr	r0, [pc, #140]	; (800295c <EndEffector_Event+0x150>)
 80028ce:	f001 fa19 	bl	8003d04 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 10000);
			EndEffector_State = Init;
 80028d2:	2300      	movs	r3, #0
 80028d4:	71fb      	strb	r3, [r7, #7]
			break;
 80028d6:	e03c      	b.n	8002952 <EndEffector_Event+0x146>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 80028d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2302      	movs	r3, #2
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <EndEffector_Event+0x168>)
 80028e2:	212a      	movs	r1, #42	; 0x2a
 80028e4:	481d      	ldr	r0, [pc, #116]	; (800295c <EndEffector_Event+0x150>)
 80028e6:	f001 fa0d 	bl	8003d04 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 80028ea:	2300      	movs	r3, #0
 80028ec:	71fb      	strb	r3, [r7, #7]
			break;
 80028ee:	e030      	b.n	8002952 <EndEffector_Event+0x146>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80028f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2302      	movs	r3, #2
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <EndEffector_Event+0x16c>)
 80028fa:	212a      	movs	r1, #42	; 0x2a
 80028fc:	4817      	ldr	r0, [pc, #92]	; (800295c <EndEffector_Event+0x150>)
 80028fe:	f001 fa01 	bl	8003d04 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 10000);
			EndEffector_State = Init;
 8002902:	2300      	movs	r3, #0
 8002904:	71fb      	strb	r3, [r7, #7]
			break;
 8002906:	e024      	b.n	8002952 <EndEffector_Event+0x146>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 8002908:	f242 7310 	movw	r3, #10000	; 0x2710
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2302      	movs	r3, #2
 8002910:	4a1a      	ldr	r2, [pc, #104]	; (800297c <EndEffector_Event+0x170>)
 8002912:	212a      	movs	r1, #42	; 0x2a
 8002914:	4811      	ldr	r0, [pc, #68]	; (800295c <EndEffector_Event+0x150>)
 8002916:	f001 f9f5 	bl	8003d04 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800291a:	2300      	movs	r3, #0
 800291c:	71fb      	strb	r3, [r7, #7]
			break;
 800291e:	e018      	b.n	8002952 <EndEffector_Event+0x146>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 8002920:	f242 7310 	movw	r3, #10000	; 0x2710
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2302      	movs	r3, #2
 8002928:	4a15      	ldr	r2, [pc, #84]	; (8002980 <EndEffector_Event+0x174>)
 800292a:	212a      	movs	r1, #42	; 0x2a
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <EndEffector_Event+0x150>)
 800292e:	f001 f9e9 	bl	8003d04 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
			break;
 8002936:	e00c      	b.n	8002952 <EndEffector_Event+0x146>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 8002938:	f242 7310 	movw	r3, #10000	; 0x2710
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	4a10      	ldr	r2, [pc, #64]	; (8002984 <EndEffector_Event+0x178>)
 8002942:	212a      	movs	r1, #42	; 0x2a
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <EndEffector_Event+0x150>)
 8002946:	f001 fadb 	bl	8003f00 <HAL_I2C_Master_Receive>
					10000);
			break;
 800294a:	e002      	b.n	8002952 <EndEffector_Event+0x146>
		}

	}
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <EndEffector_Event+0x146>
			break;
 8002950:	bf00      	nop
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000154 	.word	0x20000154
 8002960:	20000048 	.word	0x20000048
 8002964:	2000004c 	.word	0x2000004c
 8002968:	20000050 	.word	0x20000050
 800296c:	20000054 	.word	0x20000054
 8002970:	20000058 	.word	0x20000058
 8002974:	2000005c 	.word	0x2000005c
 8002978:	20000060 	.word	0x20000060
 800297c:	20000064 	.word	0x20000064
 8002980:	20000068 	.word	0x20000068
 8002984:	2000046c 	.word	0x2000046c

08002988 <JoyStickControl>:
	y_final[7] = y_pre_final[1] + (20 * 3 * sin_zeta);
	x_final_joy[8] = x_pre_final[2] + (15 * 3 * sin_zeta);
	y_final[8] = y_pre_final[2] + (20 * 3 * sin_zeta);
}

void JoyStickControl() {
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0

	read_pos();
 800298c:	f000 f992 	bl	8002cb4 <read_pos>

	if (RX[3] == 0xFE && RX_last == 0xFF) { //Select Speed Button
 8002990:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <JoyStickControl+0x144>)
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	2bfe      	cmp	r3, #254	; 0xfe
 8002996:	d113      	bne.n	80029c0 <JoyStickControl+0x38>
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <JoyStickControl+0x148>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	d10f      	bne.n	80029c0 <JoyStickControl+0x38>
		if (state_motor == 1) {
 80029a0:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <JoyStickControl+0x14c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d103      	bne.n	80029b0 <JoyStickControl+0x28>
			state_motor = 0;
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <JoyStickControl+0x14c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80029ae:	e037      	b.n	8002a20 <JoyStickControl+0x98>
		} else if (state_motor == 0) {
 80029b0:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <JoyStickControl+0x14c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d133      	bne.n	8002a20 <JoyStickControl+0x98>
			state_motor = 1;
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <JoyStickControl+0x14c>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80029be:	e02f      	b.n	8002a20 <JoyStickControl+0x98>
		}
	} else if (RX[4] == 0xBF && button_last == 0xFF) { //X Button
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <JoyStickControl+0x144>)
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	2bbf      	cmp	r3, #191	; 0xbf
 80029c6:	d11c      	bne.n	8002a02 <JoyStickControl+0x7a>
 80029c8:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <JoyStickControl+0x150>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2bff      	cmp	r3, #255	; 0xff
 80029ce:	d118      	bne.n	8002a02 <JoyStickControl+0x7a>

		if (y_count >= 4) {
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <JoyStickControl+0x154>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d904      	bls.n	80029e2 <JoyStickControl+0x5a>
			motor(0, 0);
 80029d8:	2100      	movs	r1, #0
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f940 	bl	8002c60 <motor>
 80029e0:	e005      	b.n	80029ee <JoyStickControl+0x66>
		} else {
			y_count += 1;
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <JoyStickControl+0x154>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <JoyStickControl+0x154>)
 80029ec:	701a      	strb	r2, [r3, #0]
		}
		y_c[y_count] = PosY;
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <JoyStickControl+0x154>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <JoyStickControl+0x158>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	493a      	ldr	r1, [pc, #232]	; (8002ae4 <JoyStickControl+0x15c>)
 80029fa:	0083      	lsls	r3, r0, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e00f      	b.n	8002a22 <JoyStickControl+0x9a>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <JoyStickControl+0x144>)
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	2bef      	cmp	r3, #239	; 0xef
 8002a08:	d10b      	bne.n	8002a22 <JoyStickControl+0x9a>
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <JoyStickControl+0x150>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d107      	bne.n	8002a22 <JoyStickControl+0x9a>
		workState = 1;
 8002a12:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <JoyStickControl+0x160>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <JoyStickControl+0x164>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e000      	b.n	8002a22 <JoyStickControl+0x9a>
		if (state_motor == 1) {
 8002a20:	bf00      	nop
	}

	//motor speed Select
	switch (state_motor) {
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <JoyStickControl+0x14c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <JoyStickControl+0xa8>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d020      	beq.n	8002a70 <JoyStickControl+0xe8>
 8002a2e:	e042      	b.n	8002ab6 <JoyStickControl+0x12e>
	case 0:
		if (RX[3] == 0xFF) //Not be push
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <JoyStickControl+0x144>)
 8002a32:	78db      	ldrb	r3, [r3, #3]
 8002a34:	2bff      	cmp	r3, #255	; 0xff
 8002a36:	d104      	bne.n	8002a42 <JoyStickControl+0xba>
			motor(0, 1);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 f910 	bl	8002c60 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(fast, -1);
		else if (RX[3] == 0xBF) //Down
			motor(fast, 1);
		break;
 8002a40:	e036      	b.n	8002ab0 <JoyStickControl+0x128>
		else if (RX[3] == 0xEF) //UP
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <JoyStickControl+0x144>)
 8002a44:	78db      	ldrb	r3, [r3, #3]
 8002a46:	2bef      	cmp	r3, #239	; 0xef
 8002a48:	d107      	bne.n	8002a5a <JoyStickControl+0xd2>
			motor(fast, -1);
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <JoyStickControl+0x168>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f904 	bl	8002c60 <motor>
		break;
 8002a58:	e02a      	b.n	8002ab0 <JoyStickControl+0x128>
		else if (RX[3] == 0xBF) //Down
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <JoyStickControl+0x144>)
 8002a5c:	78db      	ldrb	r3, [r3, #3]
 8002a5e:	2bbf      	cmp	r3, #191	; 0xbf
 8002a60:	d126      	bne.n	8002ab0 <JoyStickControl+0x128>
			motor(fast, 1);
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <JoyStickControl+0x168>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f8f9 	bl	8002c60 <motor>
		break;
 8002a6e:	e01f      	b.n	8002ab0 <JoyStickControl+0x128>
	case 1:
		if (RX[3] == 0xFF) //Not be push
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <JoyStickControl+0x144>)
 8002a72:	78db      	ldrb	r3, [r3, #3]
 8002a74:	2bff      	cmp	r3, #255	; 0xff
 8002a76:	d104      	bne.n	8002a82 <JoyStickControl+0xfa>
			motor(0, 1);
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 f8f0 	bl	8002c60 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(slow, -1);
		else if (RX[3] == 0xBF) //Down
			motor(slow, 1);
		break;
 8002a80:	e018      	b.n	8002ab4 <JoyStickControl+0x12c>
		else if (RX[3] == 0xEF) //UP
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <JoyStickControl+0x144>)
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	2bef      	cmp	r3, #239	; 0xef
 8002a88:	d107      	bne.n	8002a9a <JoyStickControl+0x112>
			motor(slow, -1);
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <JoyStickControl+0x16c>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f8e4 	bl	8002c60 <motor>
		break;
 8002a98:	e00c      	b.n	8002ab4 <JoyStickControl+0x12c>
		else if (RX[3] == 0xBF) //Down
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <JoyStickControl+0x144>)
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	2bbf      	cmp	r3, #191	; 0xbf
 8002aa0:	d108      	bne.n	8002ab4 <JoyStickControl+0x12c>
			motor(slow, 1);
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <JoyStickControl+0x16c>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f8d9 	bl	8002c60 <motor>
		break;
 8002aae:	e001      	b.n	8002ab4 <JoyStickControl+0x12c>
		break;
 8002ab0:	bf00      	nop
 8002ab2:	e000      	b.n	8002ab6 <JoyStickControl+0x12e>
		break;
 8002ab4:	bf00      	nop
	//X-axis
	//		else if (RX[3] == 0x7F) //Left
	//			printf("Left \r\n");
	//		else if (RX[3] == 0xDF) //Right
	//			printf("Right \r\n");
	RX_last = RX[3];
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <JoyStickControl+0x144>)
 8002ab8:	78da      	ldrb	r2, [r3, #3]
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <JoyStickControl+0x148>)
 8002abc:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8002abe:	4b03      	ldr	r3, [pc, #12]	; (8002acc <JoyStickControl+0x144>)
 8002ac0:	791a      	ldrb	r2, [r3, #4]
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <JoyStickControl+0x150>)
 8002ac4:	701a      	strb	r2, [r3, #0]

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000450 	.word	0x20000450
 8002ad0:	20000468 	.word	0x20000468
 8002ad4:	2000046a 	.word	0x2000046a
 8002ad8:	20000469 	.word	0x20000469
 8002adc:	2000045b 	.word	0x2000045b
 8002ae0:	2000042c 	.word	0x2000042c
 8002ae4:	2000045c 	.word	0x2000045c
 8002ae8:	2000045a 	.word	0x2000045a
 8002aec:	2000049c 	.word	0x2000049c
 8002af0:	20000042 	.word	0x20000042
 8002af4:	20000044 	.word	0x20000044

08002af8 <Init_Homing>:

void Init_Homing() {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <Init_Homing+0xe0>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <Init_Homing+0x12>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d01a      	beq.n	8002b3e <Init_Homing+0x46>
		} else {
			motor(Max_Counter_PWM * 0.22, 1);
		}
		break;
	}
}
 8002b08:	e064      	b.n	8002bd4 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	4833      	ldr	r0, [pc, #204]	; (8002bdc <Init_Homing+0xe4>)
 8002b0e:	f000 ff6b 	bl	80039e8 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <Init_Homing+0x38>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <Init_Homing+0xe8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8002b20:	2101      	movs	r1, #1
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f89c 	bl	8002c60 <motor>
			state_homing = 1;
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <Init_Homing+0xe0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	801a      	strh	r2, [r3, #0]
		break;
 8002b2e:	e051      	b.n	8002bd4 <Init_Homing+0xdc>
			motor(Max_Counter_PWM * 0.3, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	f644 40cc 	movw	r0, #19660	; 0x4ccc
 8002b38:	f000 f892 	bl	8002c60 <motor>
		break;
 8002b3c:	e04a      	b.n	8002bd4 <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8002b3e:	2104      	movs	r1, #4
 8002b40:	4828      	ldr	r0, [pc, #160]	; (8002be4 <Init_Homing+0xec>)
 8002b42:	f000 ff51 	bl	80039e8 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13d      	bne.n	8002bc8 <Init_Homing+0xd0>
			motor(0, 1);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f886 	bl	8002c60 <motor>
			HAL_Delay(200);
 8002b54:	20c8      	movs	r0, #200	; 0xc8
 8002b56:	f000 fc8d 	bl	8003474 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 23893);
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <Init_Homing+0xe8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f645 5255 	movw	r2, #23893	; 0x5d55
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <Init_Homing+0xe8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <Init_Homing+0xf0>)
 8002b6e:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <Init_Homing+0xf0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fc81 	bl	800047c <__aeabi_i2d>
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <Init_Homing+0xf4>)
 8002b80:	f7fd fce6 	bl	8000550 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fd ff90 	bl	8000ab0 <__aeabi_d2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <Init_Homing+0xf8>)
 8002b94:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <Init_Homing+0xf8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <Init_Homing+0xfc>)
 8002b9c:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <Init_Homing+0x100>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <Init_Homing+0x104>)
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <Init_Homing+0x108>)
 8002bac:	6013      	str	r3, [r2, #0]
			State_PID = 2;
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <Init_Homing+0x10c>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <Init_Homing+0xe0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(Run_Mode);
 8002bba:	2006      	movs	r0, #6
 8002bbc:	f7ff fe26 	bl	800280c <EndEffector_Event>
			State = IDLE;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <Init_Homing+0x110>)
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	701a      	strb	r2, [r3, #0]
		break;
 8002bc6:	e004      	b.n	8002bd2 <Init_Homing+0xda>
			motor(Max_Counter_PWM * 0.22, 1);
 8002bc8:	2101      	movs	r1, #1
 8002bca:	f643 0051 	movw	r0, #14417	; 0x3851
 8002bce:	f000 f847 	bl	8002c60 <motor>
		break;
 8002bd2:	bf00      	nop
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200004a8 	.word	0x200004a8
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	20000248 	.word	0x20000248
 8002be4:	40020400 	.word	0x40020400
 8002be8:	20000428 	.word	0x20000428
 8002bec:	3f8e0000 	.word	0x3f8e0000
 8002bf0:	2000042c 	.word	0x2000042c
 8002bf4:	20000474 	.word	0x20000474
 8002bf8:	20000498 	.word	0x20000498
 8002bfc:	20000080 	.word	0x20000080
 8002c00:	20000478 	.word	0x20000478
 8002c04:	2000006a 	.word	0x2000006a
 8002c08:	2000049c 	.word	0x2000049c

08002c0c <Photo_IT>:
		}
		break;
	}
}

void Photo_IT() {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	switch (state_IT) {
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <Photo_IT+0x4c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <Photo_IT+0x12>
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d011      	beq.n	8002c40 <Photo_IT+0x34>
	case 1:
		Dutyfeedback = 0;
		motor(0, 1);
		break;
	}
}
 8002c1c:	e01a      	b.n	8002c54 <Photo_IT+0x48>
		if (state_IT == 0) {
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <Photo_IT+0x4c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <Photo_IT+0x46>
		} else if (state_IT == 1) {
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <Photo_IT+0x4c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d111      	bne.n	8002c52 <Photo_IT+0x46>
			Dutyfeedback = 0;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <Photo_IT+0x50>)
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
			motor(0, 1);
 8002c36:	2101      	movs	r1, #1
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f811 	bl	8002c60 <motor>
		break;
 8002c3e:	e008      	b.n	8002c52 <Photo_IT+0x46>
		Dutyfeedback = 0;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <Photo_IT+0x50>)
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
		motor(0, 1);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f000 f808 	bl	8002c60 <motor>
		break;
 8002c50:	e000      	b.n	8002c54 <Photo_IT+0x48>
		break;
 8002c52:	bf00      	nop
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2000047c 	.word	0x2000047c
 8002c5c:	20000440 	.word	0x20000440

08002c60 <motor>:

void motor(uint32_t speed, int DIR) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d10a      	bne.n	8002c88 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8002c72:	2201      	movs	r2, #1
 8002c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <motor+0x4c>)
 8002c7a:	f000 fecd 	bl	8003a18 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <motor+0x50>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 8002c86:	e00c      	b.n	8002ca2 <motor+0x42>
	} else if (DIR == 1) {
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d109      	bne.n	8002ca2 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <motor+0x4c>)
 8002c96:	f000 febf 	bl	8003a18 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <motor+0x50>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	20000200 	.word	0x20000200

08002cb4 <read_pos>:

void read_pos() {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <read_pos+0x3c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <read_pos+0x40>)
 8002cc2:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <read_pos+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fbd7 	bl	800047c <__aeabi_i2d>
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <read_pos+0x44>)
 8002cd4:	f7fd fc3c 	bl	8000550 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd fee6 	bl	8000ab0 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <read_pos+0x48>)
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000248 	.word	0x20000248
 8002cf4:	20000428 	.word	0x20000428
 8002cf8:	3f8e0000 	.word	0x3f8e0000
 8002cfc:	2000042c 	.word	0x2000042c

08002d00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Photoelectric_sensor_1_Pin) {
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d111      	bne.n	8002d36 <HAL_GPIO_EXTI_Callback+0x36>
		if (State == PID_STATE) {
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d10d      	bne.n	8002d36 <HAL_GPIO_EXTI_Callback+0x36>
			Dutyfeedback = 0;
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x94>)
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
		}

	}
	if (GPIO_Pin == Photoelectric_sensor_3_Pin) {
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d111      	bne.n	8002d60 <HAL_GPIO_EXTI_Callback+0x60>
		if (State == PID_STATE) {
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d10d      	bne.n	8002d60 <HAL_GPIO_EXTI_Callback+0x60>
			Dutyfeedback = 0;
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x94>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == Emergency_Pin) {
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d10d      	bne.n	8002d82 <HAL_GPIO_EXTI_Callback+0x82>
		Dutyfeedback = 0;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x94>)
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34
		state_IT = 1;
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
		State = EMERGENCY_LIMIT;
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d7e:	2205      	movs	r2, #5
 8002d80:	701a      	strb	r2, [r3, #0]
	}
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000049c 	.word	0x2000049c
 8002d94:	20000440 	.word	0x20000440
 8002d98:	20000200 	.word	0x20000200
 8002d9c:	2000047c 	.word	0x2000047c

08002da0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002da0:	b4b0      	push	{r4, r5, r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	1e54      	subs	r4, r2, #1
 8002db8:	f143 0500 	adc.w	r5, r3, #0
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002dbe:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bcb0      	pop	{r4, r5, r7}
 8002dca:	4770      	bx	lr
 8002dcc:	200002d8 	.word	0x200002d8
 8002dd0:	20000480 	.word	0x20000480

08002dd4 <micros>:

uint64_t micros() {
 8002dd4:	b4b0      	push	{r4, r5, r7}
 8002dd6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <micros+0x2c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2200      	movs	r2, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	4611      	mov	r1, r2
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <micros+0x30>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	1884      	adds	r4, r0, r2
 8002dec:	eb41 0503 	adc.w	r5, r1, r3
 8002df0:	4622      	mov	r2, r4
 8002df2:	462b      	mov	r3, r5
}
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bcb0      	pop	{r4, r5, r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	200002d8 	.word	0x200002d8
 8002e04:	20000480 	.word	0x20000480

08002e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e10:	e7fe      	b.n	8002e10 <Error_Handler+0x8>
	...

08002e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_MspInit+0x4c>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e52:	2007      	movs	r0, #7
 8002e54:	f000 fc02 	bl	800365c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800

08002e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_I2C_MspInit+0xa8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d13d      	bne.n	8002f02 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea8:	2312      	movs	r3, #18
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4815      	ldr	r0, [pc, #84]	; (8002f14 <HAL_I2C_MspInit+0xb0>)
 8002ec0:	f000 fc0e 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eca:	2312      	movs	r3, #18
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <HAL_I2C_MspInit+0xb0>)
 8002ee2:	f000 fbfd 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_I2C_MspInit+0xac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40005800 	.word	0x40005800
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020400 	.word	0x40020400

08002f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_SPI_MspInit+0x84>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d12c      	bne.n	8002f94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f84:	2306      	movs	r3, #6
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <HAL_SPI_MspInit+0x8c>)
 8002f90:	f000 fba6 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f94:	bf00      	nop
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40003c00 	.word	0x40003c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020800 	.word	0x40020800

08002fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_TIM_Base_MspInit+0xa8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002fd6:	e036      	b.n	8003046 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_TIM_Base_MspInit+0xb0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d116      	bne.n	8003010 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	201d      	movs	r0, #29
 8003004:	f000 fb35 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003008:	201d      	movs	r0, #29
 800300a:	f000 fb4e 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 800300e:	e01a      	b.n	8003046 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a11      	ldr	r2, [pc, #68]	; (800305c <HAL_TIM_Base_MspInit+0xb4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_TIM_Base_MspInit+0xac>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2032      	movs	r0, #50	; 0x32
 800303c:	f000 fb19 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003040:	2032      	movs	r0, #50	; 0x32
 8003042:	f000 fb32 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40010000 	.word	0x40010000
 8003054:	40023800 	.word	0x40023800
 8003058:	40000400 	.word	0x40000400
 800305c:	40000c00 	.word	0x40000c00

08003060 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d12b      	bne.n	80030da <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ba:	2303      	movs	r3, #3
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ca:	2301      	movs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	4619      	mov	r1, r3
 80030d4:	4804      	ldr	r0, [pc, #16]	; (80030e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80030d6:	f000 fb03 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000

080030ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_TIM_MspPostInit+0x68>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d11e      	bne.n	800314c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800312a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800313c:	2301      	movs	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	4619      	mov	r1, r3
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <HAL_TIM_MspPostInit+0x70>)
 8003148:	f000 faca 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40010000 	.word	0x40010000
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000

08003160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	; 0x30
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_UART_MspInit+0xe8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d12c      	bne.n	80031dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_UART_MspInit+0xec>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_UART_MspInit+0xec>)
 800318c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_UART_MspInit+0xec>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_UART_MspInit+0xec>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a29      	ldr	r2, [pc, #164]	; (800324c <HAL_UART_MspInit+0xec>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_UART_MspInit+0xec>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031ba:	230c      	movs	r3, #12
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c6:	2303      	movs	r3, #3
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ca:	2307      	movs	r3, #7
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	4619      	mov	r1, r3
 80031d4:	481e      	ldr	r0, [pc, #120]	; (8003250 <HAL_UART_MspInit+0xf0>)
 80031d6:	f000 fa83 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031da:	e031      	b.n	8003240 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_UART_MspInit+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12c      	bne.n	8003240 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_UART_MspInit+0xec>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_UART_MspInit+0xec>)
 80031f0:	f043 0320 	orr.w	r3, r3, #32
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_UART_MspInit+0xec>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_UART_MspInit+0xec>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_UART_MspInit+0xec>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_UART_MspInit+0xec>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800321e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003230:	2308      	movs	r3, #8
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <HAL_UART_MspInit+0xf0>)
 800323c:	f000 fa50 	bl	80036e0 <HAL_GPIO_Init>
}
 8003240:	bf00      	nop
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40004400 	.word	0x40004400
 800324c:	40023800 	.word	0x40023800
 8003250:	40020000 	.word	0x40020000
 8003254:	40011400 	.word	0x40011400

08003258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800325c:	e7fe      	b.n	800325c <NMI_Handler+0x4>

0800325e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler+0x4>

08003264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <MemManage_Handler+0x4>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <BusFault_Handler+0x4>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <UsageFault_Handler+0x4>

08003276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a4:	f000 f8c6 	bl	8003434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 80032b0:	2004      	movs	r0, #4
 80032b2:	f000 fbcb 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}

080032ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80032be:	2008      	movs	r0, #8
 80032c0:	f000 fbc4 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 80032cc:	2040      	movs	r0, #64	; 0x40
 80032ce:	f000 fbbd 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 80032d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032d6:	f000 fbb9 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <TIM3_IRQHandler+0x10>)
 80032e6:	f002 fe37 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000290 	.word	0x20000290

080032f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032fc:	f000 fba6 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM5_IRQHandler+0x10>)
 800330a:	f002 fe25 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200002d8 	.word	0x200002d8

08003318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <SystemInit+0x20>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <SystemInit+0x20>)
 8003324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800333c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003342:	490e      	ldr	r1, [pc, #56]	; (800337c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003348:	e002      	b.n	8003350 <LoopCopyDataInit>

0800334a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800334c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334e:	3304      	adds	r3, #4

08003350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003354:	d3f9      	bcc.n	800334a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003358:	4c0b      	ldr	r4, [pc, #44]	; (8003388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800335c:	e001      	b.n	8003362 <LoopFillZerobss>

0800335e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003360:	3204      	adds	r2, #4

08003362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003364:	d3fb      	bcc.n	800335e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003366:	f7ff ffd7 	bl	8003318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336a:	f003 ff17 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336e:	f7fd fd87 	bl	8000e80 <main>
  bx  lr    
 8003372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800337c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8003380:	080073f0 	.word	0x080073f0
  ldr r2, =_sbss
 8003384:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8003388:	200004b0 	.word	0x200004b0

0800338c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC_IRQHandler>
	...

08003390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_Init+0x40>)
 800339a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_Init+0x40>)
 80033a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_Init+0x40>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_Init+0x40>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 f94f 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033be:	2000      	movs	r0, #0
 80033c0:	f000 f808 	bl	80033d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c4:	f7ff fd26 	bl	8002e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00

080033d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x54>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_InitTick+0x58>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f967 	bl	80036c6 <HAL_SYSTICK_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e00e      	b.n	8003420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d80a      	bhi.n	800341e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003408:	2200      	movs	r2, #0
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f000 f92f 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003414:	4a06      	ldr	r2, [pc, #24]	; (8003430 <HAL_InitTick+0x5c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	200000c8 	.word	0x200000c8
 800342c:	200000d0 	.word	0x200000d0
 8003430:	200000cc 	.word	0x200000cc

08003434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_IncTick+0x20>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_IncTick+0x24>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4413      	add	r3, r2
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_IncTick+0x24>)
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200000d0 	.word	0x200000d0
 8003458:	200004ac 	.word	0x200004ac

0800345c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return uwTick;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_GetTick+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200004ac 	.word	0x200004ac

08003474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff ffee 	bl	800345c <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d005      	beq.n	800349a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_Delay+0x44>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800349a:	bf00      	nop
 800349c:	f7ff ffde 	bl	800345c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d8f7      	bhi.n	800349c <HAL_Delay+0x28>
  {
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000d0 	.word	0x200000d0

080034bc <__NVIC_SetPriorityGrouping>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff3e 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e159      	b.n	80039b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8148 	bne.w	80039aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a2 	beq.w	80039aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a56      	ldr	r2, [pc, #344]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_GPIO_Init+0x2ec>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_GPIO_Init+0x2f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x202>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a48      	ldr	r2, [pc, #288]	; (80039d4 <HAL_GPIO_Init+0x2f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x1fe>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_GPIO_Init+0x2f8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x1fa>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a46      	ldr	r2, [pc, #280]	; (80039dc <HAL_GPIO_Init+0x2fc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x1f6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a45      	ldr	r2, [pc, #276]	; (80039e0 <HAL_GPIO_Init+0x300>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x1f2>
 80038ce:	2304      	movs	r3, #4
 80038d0:	e008      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038d6:	2303      	movs	r3, #3
 80038d8:	e004      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038da:	2302      	movs	r3, #2
 80038dc:	e002      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038e2:	2300      	movs	r3, #0
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f002 0203 	and.w	r2, r2, #3
 80038ea:	0092      	lsls	r2, r2, #2
 80038ec:	4093      	lsls	r3, r2
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f4:	4935      	ldr	r1, [pc, #212]	; (80039cc <HAL_GPIO_Init+0x2ec>)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	3302      	adds	r3, #2
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003950:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_GPIO_Init+0x304>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	f67f aea2 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	887b      	ldrh	r3, [r7, #2]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e001      	b.n	8003a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
 8003a24:	4613      	mov	r3, r2
 8003a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a28:	787b      	ldrb	r3, [r7, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a34:	e003      	b.n	8003a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f948 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40013c00 	.word	0x40013c00

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e12b      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff f9de 	bl	8002e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f001 fbd2 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4a81      	ldr	r2, [pc, #516]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d807      	bhi.n	8003b00 <HAL_I2C_Init+0x84>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a80      	ldr	r2, [pc, #512]	; (8003cf4 <HAL_I2C_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e006      	b.n	8003b0e <HAL_I2C_Init+0x92>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_I2C_Init+0x27c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0e7      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a78      	ldr	r2, [pc, #480]	; (8003cfc <HAL_I2C_Init+0x280>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d802      	bhi.n	8003b50 <HAL_I2C_Init+0xd4>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	e009      	b.n	8003b64 <HAL_I2C_Init+0xe8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_I2C_Init+0x284>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	3301      	adds	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	495c      	ldr	r1, [pc, #368]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	d819      	bhi.n	8003bb8 <HAL_I2C_Init+0x13c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e59      	subs	r1, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b98:	400b      	ands	r3, r1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_I2C_Init+0x138>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e59      	subs	r1, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	e051      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e04f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_I2C_Init+0x168>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e012      	b.n	8003c0a <HAL_I2C_Init+0x18e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x196>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e022      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <HAL_I2C_Init+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e58      	subs	r0, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	e00f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	6809      	ldr	r1, [r1, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6911      	ldr	r1, [r2, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	000186a0 	.word	0x000186a0
 8003cf4:	001e847f 	.word	0x001e847f
 8003cf8:	003d08ff 	.word	0x003d08ff
 8003cfc:	431bde83 	.word	0x431bde83
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
 8003d14:	4613      	mov	r3, r2
 8003d16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7ff fba0 	bl	800345c <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 80e0 	bne.w	8003eec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	4970      	ldr	r1, [pc, #448]	; (8003ef8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fc58 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0d3      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2C_Master_Transmit+0x50>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0cc      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d007      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	; 0x21
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2210      	movs	r2, #16
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a50      	ldr	r2, [pc, #320]	; (8003efc <HAL_I2C_Master_Transmit+0x1f8>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fac2 	bl	800434c <I2C_MasterRequestWrite>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e08d      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de8:	e066      	b.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6a39      	ldr	r1, [r7, #32]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fcd2 	bl	8004798 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	6a39      	ldr	r1, [r7, #32]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fcc2 	bl	800481a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01a      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d194      	bne.n	8003dea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	817b      	strh	r3, [r7, #10]
 8003f10:	4613      	mov	r3, r2
 8003f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f14:	f7ff faa2 	bl	800345c <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	f040 820b 	bne.w	800433e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2319      	movs	r3, #25
 8003f2e:	2201      	movs	r2, #1
 8003f30:	497c      	ldr	r1, [pc, #496]	; (8004124 <HAL_I2C_Master_Receive+0x224>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fb5a 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e1fe      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_Master_Receive+0x50>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e1f7      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d007      	beq.n	8003f76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2222      	movs	r2, #34	; 0x22
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2210      	movs	r2, #16
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <HAL_I2C_Master_Receive+0x228>)
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fa46 	bl	8004450 <I2C_MasterRequestRead>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e1b8      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e18c      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b01      	cmp	r3, #1
 8004004:	d11b      	bne.n	800403e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e16c      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	2b02      	cmp	r3, #2
 8004044:	d11b      	bne.n	800407e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	e14c      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040a4:	e138      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	f200 80f1 	bhi.w	8004292 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d123      	bne.n	8004100 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fbed 	bl	800489c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e139      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040fe:	e10b      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b02      	cmp	r3, #2
 8004106:	d14e      	bne.n	80041a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2200      	movs	r2, #0
 8004110:	4906      	ldr	r1, [pc, #24]	; (800412c <HAL_I2C_Master_Receive+0x22c>)
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa6a 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e10e      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
 8004122:	bf00      	nop
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000
 800412c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a4:	e0b8      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	2200      	movs	r2, #0
 80041ae:	4966      	ldr	r1, [pc, #408]	; (8004348 <HAL_I2C_Master_Receive+0x448>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fa1b 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0bf      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2200      	movs	r2, #0
 800420a:	494f      	ldr	r1, [pc, #316]	; (8004348 <HAL_I2C_Master_Receive+0x448>)
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f9ed 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e091      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004290:	e042      	b.n	8004318 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fb00 	bl	800489c <I2C_WaitOnRXNEFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e04c      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d118      	bne.n	8004318 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	f47f aec2 	bne.w	80040a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3728      	adds	r7, #40	; 0x28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	00010004 	.word	0x00010004

0800434c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d006      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d003      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004374:	d108      	bne.n	8004388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e00b      	b.n	80043a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	2b12      	cmp	r3, #18
 800438e:	d107      	bne.n	80043a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f91d 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d103      	bne.n	80043d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e035      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043dc:	d108      	bne.n	80043f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e01b      	b.n	8004428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	11db      	asrs	r3, r3, #7
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0306 	and.w	r3, r3, #6
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f063 030f 	orn	r3, r3, #15
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <I2C_MasterRequestWrite+0xfc>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f943 	bl	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e010      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4907      	ldr	r1, [pc, #28]	; (800444c <I2C_MasterRequestWrite+0x100>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f933 	bl	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00010008 	.word	0x00010008
 800444c:	00010002 	.word	0x00010002

08004450 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d006      	beq.n	800448a <I2C_MasterRequestRead+0x3a>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d003      	beq.n	800448a <I2C_MasterRequestRead+0x3a>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004488:	d108      	bne.n	800449c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e00b      	b.n	80044b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b11      	cmp	r3, #17
 80044a2:	d107      	bne.n	80044b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f893 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044da:	d103      	bne.n	80044e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e079      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f0:	d108      	bne.n	8004504 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e05f      	b.n	80045c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004504:	897b      	ldrh	r3, [r7, #10]
 8004506:	11db      	asrs	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f063 030f 	orn	r3, r3, #15
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4930      	ldr	r1, [pc, #192]	; (80045e4 <I2C_MasterRequestRead+0x194>)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8b9 	bl	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e054      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4929      	ldr	r1, [pc, #164]	; (80045e8 <I2C_MasterRequestRead+0x198>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8a9 	bl	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e044      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f831 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d103      	bne.n	80045a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e017      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	11db      	asrs	r3, r3, #7
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0306 	and.w	r3, r3, #6
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f063 030e 	orn	r3, r3, #14
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <I2C_MasterRequestRead+0x198>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f865 	bl	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	00010008 	.word	0x00010008
 80045e8:	00010002 	.word	0x00010002

080045ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045fc:	e025      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d021      	beq.n	800464a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe ff29 	bl	800345c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d116      	bne.n	800464a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e023      	b.n	8004692 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d10d      	bne.n	8004670 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	43da      	mvns	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	e00c      	b.n	800468a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	429a      	cmp	r2, r3
 800468e:	d0b6      	beq.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a8:	e051      	b.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d123      	bne.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0204 	orr.w	r2, r3, #4
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e046      	b.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d021      	beq.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fe fea7 	bl	800345c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e020      	b.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10c      	bne.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e00b      	b.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d18d      	bne.n	80046aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a4:	e02d      	b.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8ce 	bl	8004948 <I2C_IsAcknowledgeFailed>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e02d      	b.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d021      	beq.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe fe4d 	bl	800345c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d116      	bne.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e007      	b.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d1ca      	bne.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004826:	e02d      	b.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f88d 	bl	8004948 <I2C_IsAcknowledgeFailed>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e02d      	b.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d021      	beq.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe fe0c 	bl	800345c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d1ca      	bne.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048a8:	e042      	b.n	8004930 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d119      	bne.n	80048ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0210 	mvn.w	r2, #16
 80048c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e029      	b.n	8004940 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fe fdb6 	bl	800345c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e007      	b.n	8004940 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d1b5      	bne.n	80048aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495e:	d11b      	bne.n	8004998 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004968:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e267      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d075      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c6:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d00c      	beq.n	80049ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d112      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049de:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ea:	d10b      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b7e      	ldr	r3, [pc, #504]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d05b      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x108>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d157      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e242      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d106      	bne.n	8004a1c <HAL_RCC_OscConfig+0x74>
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e01d      	b.n	8004a58 <HAL_RCC_OscConfig+0xb0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x98>
 8004a26:	4b70      	ldr	r3, [pc, #448]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6f      	ldr	r2, [pc, #444]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b6d      	ldr	r3, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6c      	ldr	r2, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e00b      	b.n	8004a58 <HAL_RCC_OscConfig+0xb0>
 8004a40:	4b69      	ldr	r3, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a68      	ldr	r2, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fcfc 	bl	800345c <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fe fcf8 	bl	800345c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e207      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0xc0>
 8004a86:	e014      	b.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fe fce8 	bl	800345c <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fe fce4 	bl	800345c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e1f3      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa2:	4b51      	ldr	r3, [pc, #324]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0xe8>
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d063      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004abe:	4b4a      	ldr	r3, [pc, #296]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d11c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b44      	ldr	r3, [pc, #272]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d116      	bne.n	8004b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_RCC_OscConfig+0x152>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e1c7      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afa:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4937      	ldr	r1, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	e03a      	b.n	8004b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b18:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCC_OscConfig+0x244>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fe fc9d 	bl	800345c <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b26:	f7fe fc99 	bl	800345c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1a8      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4925      	ldr	r1, [pc, #148]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]
 8004b58:	e015      	b.n	8004b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_OscConfig+0x244>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe fc7c 	bl	800345c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fe fc78 	bl	800345c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e187      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d036      	beq.n	8004c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_RCC_OscConfig+0x248>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fe fc5c 	bl	800345c <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba8:	f7fe fc58 	bl	800345c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e167      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x200>
 8004bc6:	e01b      	b.n	8004c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_OscConfig+0x248>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7fe fc45 	bl	800345c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	e00e      	b.n	8004bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd6:	f7fe fc41 	bl	800345c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d907      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e150      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470000 	.word	0x42470000
 8004bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ea      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8097 	beq.w	8004d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c12:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	4b7d      	ldr	r3, [pc, #500]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a7c      	ldr	r2, [pc, #496]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2e:	4b7a      	ldr	r3, [pc, #488]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3e:	4b77      	ldr	r3, [pc, #476]	; (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d118      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4a:	4b74      	ldr	r3, [pc, #464]	; (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	; (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c56:	f7fe fc01 	bl	800345c <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7fe fbfd 	bl	800345c <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e10c      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_OscConfig+0x474>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2ea>
 8004c84:	4b64      	ldr	r3, [pc, #400]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	4a63      	ldr	r2, [pc, #396]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c90:	e01c      	b.n	8004ccc <HAL_RCC_OscConfig+0x324>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x30c>
 8004c9a:	4b5f      	ldr	r3, [pc, #380]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a5e      	ldr	r2, [pc, #376]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	4b5c      	ldr	r3, [pc, #368]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a5b      	ldr	r2, [pc, #364]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0x324>
 8004cb4:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a57      	ldr	r2, [pc, #348]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc0:	4b55      	ldr	r3, [pc, #340]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a54      	ldr	r2, [pc, #336]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fe fbc2 	bl	800345c <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fe fbbe 	bl	800345c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0cb      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf2:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ee      	beq.n	8004cdc <HAL_RCC_OscConfig+0x334>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d00:	f7fe fbac 	bl	800345c <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fe fba8 	bl	800345c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0b5      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ee      	bne.n	8004d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d30:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a1 	beq.w	8004e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d46:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d05c      	beq.n	8004e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d141      	bne.n	8004dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe fb7c 	bl	800345c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fe fb78 	bl	800345c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e087      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	019b      	lsls	r3, r3, #6
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	491b      	ldr	r1, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7fe fb51 	bl	800345c <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fe fb4d 	bl	800345c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e05c      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x416>
 8004ddc:	e054      	b.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCC_OscConfig+0x478>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fe fb3a 	bl	800345c <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fe fb36 	bl	800345c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e045      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_RCC_OscConfig+0x470>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x444>
 8004e0a:	e03d      	b.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e038      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e24:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <HAL_RCC_OscConfig+0x4ec>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d028      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d121      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d11a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0cc      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b68      	ldr	r3, [pc, #416]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b63      	ldr	r3, [pc, #396]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eec:	4b59      	ldr	r3, [pc, #356]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f04:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a52      	ldr	r2, [pc, #328]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	494d      	ldr	r1, [pc, #308]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e067      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4934      	ldr	r1, [pc, #208]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f88:	f7fe fa68 	bl	800345c <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fe fa64 	bl	800345c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 020c 	and.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1eb      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20c      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4916      	ldr	r1, [pc, #88]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	490e      	ldr	r1, [pc, #56]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800501e:	f000 f821 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8005022:	4602      	mov	r2, r0
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	5ccb      	ldrb	r3, [r1, r3]
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe f9c8 	bl	80033d4 <HAL_InitTick>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023c00 	.word	0x40023c00
 8005054:	40023800 	.word	0x40023800
 8005058:	080073c8 	.word	0x080073c8
 800505c:	200000c8 	.word	0x200000c8
 8005060:	200000cc 	.word	0x200000cc

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b094      	sub	sp, #80	; 0x50
 800506a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	647b      	str	r3, [r7, #68]	; 0x44
 8005070:	2300      	movs	r3, #0
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	2300      	movs	r3, #0
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800507c:	4b79      	ldr	r3, [pc, #484]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d00d      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005088:	2b08      	cmp	r3, #8
 800508a:	f200 80e1 	bhi.w	8005250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x34>
 8005092:	2b04      	cmp	r3, #4
 8005094:	d003      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0x3a>
 8005096:	e0db      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005098:	4b73      	ldr	r3, [pc, #460]	; (8005268 <HAL_RCC_GetSysClockFreq+0x204>)
 800509a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800509c:	e0db      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800509e:	4b73      	ldr	r3, [pc, #460]	; (800526c <HAL_RCC_GetSysClockFreq+0x208>)
 80050a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050a2:	e0d8      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a4:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ae:	4b6d      	ldr	r3, [pc, #436]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d063      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ba:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	2200      	movs	r2, #0
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
 80050ce:	2300      	movs	r3, #0
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
 80050d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050d6:	4622      	mov	r2, r4
 80050d8:	462b      	mov	r3, r5
 80050da:	f04f 0000 	mov.w	r0, #0
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	0159      	lsls	r1, r3, #5
 80050e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e8:	0150      	lsls	r0, r2, #5
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4621      	mov	r1, r4
 80050f0:	1a51      	subs	r1, r2, r1
 80050f2:	6139      	str	r1, [r7, #16]
 80050f4:	4629      	mov	r1, r5
 80050f6:	eb63 0301 	sbc.w	r3, r3, r1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005108:	4659      	mov	r1, fp
 800510a:	018b      	lsls	r3, r1, #6
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005112:	4651      	mov	r1, sl
 8005114:	018a      	lsls	r2, r1, #6
 8005116:	4651      	mov	r1, sl
 8005118:	ebb2 0801 	subs.w	r8, r2, r1
 800511c:	4659      	mov	r1, fp
 800511e:	eb63 0901 	sbc.w	r9, r3, r1
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800512e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005136:	4690      	mov	r8, r2
 8005138:	4699      	mov	r9, r3
 800513a:	4623      	mov	r3, r4
 800513c:	eb18 0303 	adds.w	r3, r8, r3
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	462b      	mov	r3, r5
 8005144:	eb49 0303 	adc.w	r3, r9, r3
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005156:	4629      	mov	r1, r5
 8005158:	024b      	lsls	r3, r1, #9
 800515a:	4621      	mov	r1, r4
 800515c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005160:	4621      	mov	r1, r4
 8005162:	024a      	lsls	r2, r1, #9
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	2200      	movs	r2, #0
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
 800516e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005174:	f7fb fcec 	bl	8000b50 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	e058      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005182:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	2200      	movs	r2, #0
 800518a:	4618      	mov	r0, r3
 800518c:	4611      	mov	r1, r2
 800518e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	2300      	movs	r3, #0
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	f04f 0000 	mov.w	r0, #0
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	0159      	lsls	r1, r3, #5
 80051aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ae:	0150      	lsls	r0, r2, #5
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4641      	mov	r1, r8
 80051b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051ba:	4649      	mov	r1, r9
 80051bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051d4:	ebb2 040a 	subs.w	r4, r2, sl
 80051d8:	eb63 050b 	sbc.w	r5, r3, fp
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	00eb      	lsls	r3, r5, #3
 80051e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ea:	00e2      	lsls	r2, r4, #3
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	4643      	mov	r3, r8
 80051f2:	18e3      	adds	r3, r4, r3
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	464b      	mov	r3, r9
 80051f8:	eb45 0303 	adc.w	r3, r5, r3
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800520a:	4629      	mov	r1, r5
 800520c:	028b      	lsls	r3, r1, #10
 800520e:	4621      	mov	r1, r4
 8005210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005214:	4621      	mov	r1, r4
 8005216:	028a      	lsls	r2, r1, #10
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521e:	2200      	movs	r2, #0
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	61fa      	str	r2, [r7, #28]
 8005224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005228:	f7fb fc92 	bl	8000b50 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_GetSysClockFreq+0x200>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800524e:	e002      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetSysClockFreq+0x204>)
 8005252:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005258:	4618      	mov	r0, r3
 800525a:	3750      	adds	r7, #80	; 0x50
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800
 8005268:	00f42400 	.word	0x00f42400
 800526c:	007a1200 	.word	0x007a1200

08005270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCC_GetHCLKFreq+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	200000c8 	.word	0x200000c8

08005288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800528c:	f7ff fff0 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	0a9b      	lsrs	r3, r3, #10
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4903      	ldr	r1, [pc, #12]	; (80052ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	080073d8 	.word	0x080073d8

080052b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052b4:	f7ff ffdc 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0b5b      	lsrs	r3, r3, #13
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4903      	ldr	r1, [pc, #12]	; (80052d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40023800 	.word	0x40023800
 80052d4:	080073d8 	.word	0x080073d8

080052d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07b      	b.n	80053e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fa:	d009      	beq.n	8005310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
 8005302:	e005      	b.n	8005310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd fdf4 	bl	8002f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	ea42 0103 	orr.w	r1, r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0104 	and.w	r1, r3, #4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	f003 0210 	and.w	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b08c      	sub	sp, #48	; 0x30
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053f8:	2301      	movs	r3, #1
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x26>
 800540c:	2302      	movs	r3, #2
 800540e:	e18a      	b.n	8005726 <HAL_SPI_TransmitReceive+0x33c>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005418:	f7fe f820 	bl	800345c <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800542e:	887b      	ldrh	r3, [r7, #2]
 8005430:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005436:	2b01      	cmp	r3, #1
 8005438:	d00f      	beq.n	800545a <HAL_SPI_TransmitReceive+0x70>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005440:	d107      	bne.n	8005452 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <HAL_SPI_TransmitReceive+0x68>
 800544a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800544e:	2b04      	cmp	r3, #4
 8005450:	d003      	beq.n	800545a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005452:	2302      	movs	r3, #2
 8005454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005458:	e15b      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_SPI_TransmitReceive+0x82>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_TransmitReceive+0x82>
 8005466:	887b      	ldrh	r3, [r7, #2]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d103      	bne.n	8005474 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005472:	e14e      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b04      	cmp	r3, #4
 800547e:	d003      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2205      	movs	r2, #5
 8005484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	887a      	ldrh	r2, [r7, #2]
 800549e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	887a      	ldrh	r2, [r7, #2]
 80054b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d007      	beq.n	80054dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e4:	d178      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x10a>
 80054ee:	8b7b      	ldrh	r3, [r7, #26]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d166      	bne.n	80055c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005518:	e053      	b.n	80055c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b02      	cmp	r3, #2
 8005526:	d11b      	bne.n	8005560 <HAL_SPI_TransmitReceive+0x176>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x176>
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d113      	bne.n	8005560 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	1c9a      	adds	r2, r3, #2
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d119      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x1b8>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d014      	beq.n	80055a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	b292      	uxth	r2, r2
 8005584:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	1c9a      	adds	r2, r3, #2
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800559e:	2301      	movs	r3, #1
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055a2:	f7fd ff5b 	bl	800345c <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d807      	bhi.n	80055c2 <HAL_SPI_TransmitReceive+0x1d8>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d003      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055c0:	e0a7      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1a6      	bne.n	800551a <HAL_SPI_TransmitReceive+0x130>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1a1      	bne.n	800551a <HAL_SPI_TransmitReceive+0x130>
 80055d6:	e07c      	b.n	80056d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x1fc>
 80055e0:	8b7b      	ldrh	r3, [r7, #26]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d16b      	bne.n	80056be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800560c:	e057      	b.n	80056be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11c      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x26c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <HAL_SPI_TransmitReceive+0x26c>
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d114      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d119      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x2ae>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d014      	beq.n	8005698 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005694:	2301      	movs	r3, #1
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005698:	f7fd fee0 	bl	800345c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d803      	bhi.n	80056b0 <HAL_SPI_TransmitReceive+0x2c6>
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x2cc>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056bc:	e029      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1a2      	bne.n	800560e <HAL_SPI_TransmitReceive+0x224>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d19d      	bne.n	800560e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8b2 	bl	8005840 <SPI_EndRxTxTransaction>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056ee:	e010      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	e000      	b.n	8005712 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005710:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005726:	4618      	mov	r0, r3
 8005728:	3730      	adds	r7, #48	; 0x30
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005740:	f7fd fe8c 	bl	800345c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005750:	f7fd fe84 	bl	800345c <HAL_GetTick>
 8005754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005756:	4b39      	ldr	r3, [pc, #228]	; (800583c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	015b      	lsls	r3, r3, #5
 800575c:	0d1b      	lsrs	r3, r3, #20
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005766:	e054      	b.n	8005812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d050      	beq.n	8005812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005770:	f7fd fe74 	bl	800345c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	429a      	cmp	r2, r3
 800577e:	d902      	bls.n	8005786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d13d      	bne.n	8005802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579e:	d111      	bne.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a8:	d004      	beq.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b2:	d107      	bne.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d10f      	bne.n	80057ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e017      	b.n	8005832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3b01      	subs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d19b      	bne.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200000c8 	.word	0x200000c8

08005840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <SPI_EndRxTxTransaction+0x7c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <SPI_EndRxTxTransaction+0x80>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0d5b      	lsrs	r3, r3, #21
 8005858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586a:	d112      	bne.n	8005892 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff ff5a 	bl	8005730 <SPI_WaitFlagStateUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e00f      	b.n	80058b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3b01      	subs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d0f2      	beq.n	8005892 <SPI_EndRxTxTransaction+0x52>
 80058ac:	e000      	b.n	80058b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80058ae:	bf00      	nop
  }

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200000c8 	.word	0x200000c8
 80058c0:	165e9f81 	.word	0x165e9f81

080058c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e041      	b.n	800595a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fd fb5c 	bl	8002fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f000 fde2 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d001      	beq.n	800597c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e03c      	b.n	80059f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_TIM_Base_Start+0xa0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d018      	beq.n	80059c0 <HAL_TIM_Base_Start+0x5c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005996:	d013      	beq.n	80059c0 <HAL_TIM_Base_Start+0x5c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <HAL_TIM_Base_Start+0xa4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00e      	beq.n	80059c0 <HAL_TIM_Base_Start+0x5c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <HAL_TIM_Base_Start+0xa8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_TIM_Base_Start+0x5c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <HAL_TIM_Base_Start+0xac>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_TIM_Base_Start+0x5c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <HAL_TIM_Base_Start+0xb0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d111      	bne.n	80059e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d010      	beq.n	80059f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	e007      	b.n	80059f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40014000 	.word	0x40014000

08005a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e044      	b.n	8005aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d018      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d013      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIM_Base_Start_IT+0xb4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d111      	bne.n	8005aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d010      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	e007      	b.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40014000 	.word	0x40014000

08005adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e041      	b.n	8005b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f839 	bl	8005b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 fcd6 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <HAL_TIM_PWM_Start+0x24>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e022      	b.n	8005bfa <HAL_TIM_PWM_Start+0x6a>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d109      	bne.n	8005bce <HAL_TIM_PWM_Start+0x3e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	bf14      	ite	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	2300      	moveq	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	e015      	b.n	8005bfa <HAL_TIM_PWM_Start+0x6a>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d109      	bne.n	8005be8 <HAL_TIM_PWM_Start+0x58>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e008      	b.n	8005bfa <HAL_TIM_PWM_Start+0x6a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e068      	b.n	8005cd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x82>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	e013      	b.n	8005c3a <HAL_TIM_PWM_Start+0xaa>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_PWM_Start+0x92>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c20:	e00b      	b.n	8005c3a <HAL_TIM_PWM_Start+0xaa>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_PWM_Start+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	e003      	b.n	8005c3a <HAL_TIM_PWM_Start+0xaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fee8 	bl	8006a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <HAL_TIM_PWM_Start+0x14c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1d      	ldr	r2, [pc, #116]	; (8005cdc <HAL_TIM_PWM_Start+0x14c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x10e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d013      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x10e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_TIM_PWM_Start+0x150>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x10e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <HAL_TIM_PWM_Start+0x154>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x10e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_TIM_PWM_Start+0x158>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x10e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a14      	ldr	r2, [pc, #80]	; (8005cec <HAL_TIM_PWM_Start+0x15c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d111      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d010      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	e007      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40014000 	.word	0x40014000

08005cf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e097      	b.n	8005e34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fd f9a1 	bl	8003060 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f000 fbc1 	bl	80064cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	4313      	orrs	r3, r2
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d90:	f023 030c 	bic.w	r3, r3, #12
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	4313      	orrs	r3, r2
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	031b      	lsls	r3, r3, #12
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	4313      	orrs	r3, r2
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d110      	bne.n	8005e8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e72:	7b7b      	ldrb	r3, [r7, #13]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e069      	b.n	8005f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e8c:	e031      	b.n	8005ef2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d110      	bne.n	8005eb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d102      	bne.n	8005ea0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e9a:	7b3b      	ldrb	r3, [r7, #12]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d001      	beq.n	8005ea4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e055      	b.n	8005f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb4:	e01d      	b.n	8005ef2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d108      	bne.n	8005ece <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec2:	7b7b      	ldrb	r3, [r7, #13]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d102      	bne.n	8005ece <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec8:	7b3b      	ldrb	r3, [r7, #12]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e03e      	b.n	8005f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_TIM_Encoder_Start+0xc4>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d008      	beq.n	8005f10 <HAL_TIM_Encoder_Start+0xd4>
 8005efe:	e00f      	b.n	8005f20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fd85 	bl	8006a18 <TIM_CCxChannelCmd>
      break;
 8005f0e:	e016      	b.n	8005f3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	2104      	movs	r1, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fd7d 	bl	8006a18 <TIM_CCxChannelCmd>
      break;
 8005f1e:	e00e      	b.n	8005f3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fd75 	bl	8006a18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2201      	movs	r2, #1
 8005f34:	2104      	movs	r1, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fd6e 	bl	8006a18 <TIM_CCxChannelCmd>
      break;
 8005f3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0202 	mvn.w	r2, #2
 8005f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa77 	bl	800648e <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa69 	bl	800647a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa7a 	bl	80064a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0204 	mvn.w	r2, #4
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa4d 	bl	800648e <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa3f 	bl	800647a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa50 	bl	80064a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b08      	cmp	r3, #8
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0208 	mvn.w	r2, #8
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa23 	bl	800648e <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa15 	bl	800647a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa26 	bl	80064a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d122      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b10      	cmp	r3, #16
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0210 	mvn.w	r2, #16
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2208      	movs	r2, #8
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9f9 	bl	800648e <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9eb 	bl	800647a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9fc 	bl	80064a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10e      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0201 	mvn.w	r2, #1
 80060d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fc fe62 	bl	8002da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b80      	cmp	r3, #128	; 0x80
 80060e8:	d10e      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fd78 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d10e      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d107      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9c1 	bl	80064b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b20      	cmp	r3, #32
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0220 	mvn.w	r2, #32
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd42 	bl	8006be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006182:	2302      	movs	r3, #2
 8006184:	e0ae      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b0c      	cmp	r3, #12
 8006192:	f200 809f 	bhi.w	80062d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061d1 	.word	0x080061d1
 80061a0:	080062d5 	.word	0x080062d5
 80061a4:	080062d5 	.word	0x080062d5
 80061a8:	080062d5 	.word	0x080062d5
 80061ac:	08006211 	.word	0x08006211
 80061b0:	080062d5 	.word	0x080062d5
 80061b4:	080062d5 	.word	0x080062d5
 80061b8:	080062d5 	.word	0x080062d5
 80061bc:	08006253 	.word	0x08006253
 80061c0:	080062d5 	.word	0x080062d5
 80061c4:	080062d5 	.word	0x080062d5
 80061c8:	080062d5 	.word	0x080062d5
 80061cc:	08006293 	.word	0x08006293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f9f8 	bl	80065cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0208 	orr.w	r2, r2, #8
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0204 	bic.w	r2, r2, #4
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	619a      	str	r2, [r3, #24]
      break;
 800620e:	e064      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fa3e 	bl	8006698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	021a      	lsls	r2, r3, #8
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	619a      	str	r2, [r3, #24]
      break;
 8006250:	e043      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa89 	bl	8006770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0208 	orr.w	r2, r2, #8
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0204 	bic.w	r2, r2, #4
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	61da      	str	r2, [r3, #28]
      break;
 8006290:	e023      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fad3 	bl	8006844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69d9      	ldr	r1, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	021a      	lsls	r2, r3, #8
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	61da      	str	r2, [r3, #28]
      break;
 80062d2:	e002      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e0b4      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x186>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800632e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006340:	d03e      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006346:	f200 8087 	bhi.w	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634e:	f000 8086 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x172>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	d87f      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b70      	cmp	r3, #112	; 0x70
 800635a:	d01a      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0xa6>
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d87b      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d050      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x11a>
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d877      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b50      	cmp	r3, #80	; 0x50
 800636a:	d03c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xfa>
 800636c:	2b50      	cmp	r3, #80	; 0x50
 800636e:	d873      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d058      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x13a>
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d86f      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	d064      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 800637c:	2b30      	cmp	r3, #48	; 0x30
 800637e:	d86b      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d060      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d867      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d05c      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	2b10      	cmp	r3, #16
 800638e:	d05a      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	e062      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6899      	ldr	r1, [r3, #8]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f000 fb19 	bl	80069d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	609a      	str	r2, [r3, #8]
      break;
 80063be:	e04f      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f000 fb02 	bl	80069d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e2:	609a      	str	r2, [r3, #8]
      break;
 80063e4:	e03c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fa76 	bl	80068e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2150      	movs	r1, #80	; 0x50
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 facf 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006404:	e02c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	f000 fa95 	bl	8006942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2160      	movs	r1, #96	; 0x60
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fabf 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006424:	e01c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	461a      	mov	r2, r3
 8006434:	f000 fa56 	bl	80068e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	4618      	mov	r0, r3
 8006440:	f000 faaf 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006444:	e00c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f000 faa6 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006456:	e003      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e000      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800645e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <TIM_Base_SetConfig+0xe4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00f      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d00b      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a31      	ldr	r2, [pc, #196]	; (80065b4 <TIM_Base_SetConfig+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <TIM_Base_SetConfig+0xec>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	; (80065bc <TIM_Base_SetConfig+0xf0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <TIM_Base_SetConfig+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d017      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <TIM_Base_SetConfig+0xe8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <TIM_Base_SetConfig+0xec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a20      	ldr	r2, [pc, #128]	; (80065bc <TIM_Base_SetConfig+0xf0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <TIM_Base_SetConfig+0xf4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <TIM_Base_SetConfig+0xf8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <TIM_Base_SetConfig+0xfc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d108      	bne.n	8006568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <TIM_Base_SetConfig+0xe4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d103      	bne.n	800659c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	615a      	str	r2, [r3, #20]
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40014400 	.word	0x40014400
 80065c8:	40014800 	.word	0x40014800

080065cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <TIM_OC1_SetConfig+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0308 	bic.w	r3, r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <TIM_OC1_SetConfig+0xc8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40010000 	.word	0x40010000

08006698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0210 	bic.w	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0320 	bic.w	r3, r3, #32
 80066e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1e      	ldr	r2, [pc, #120]	; (800676c <TIM_OC2_SetConfig+0xd4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10d      	bne.n	8006714 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <TIM_OC2_SetConfig+0xd4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d113      	bne.n	8006744 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000

08006770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <TIM_OC3_SetConfig+0xd0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10d      	bne.n	80067ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <TIM_OC3_SetConfig+0xd0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40010000 	.word	0x40010000

08006844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800688e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	031b      	lsls	r3, r3, #12
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a10      	ldr	r2, [pc, #64]	; (80068e0 <TIM_OC4_SetConfig+0x9c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d109      	bne.n	80068b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000

080068e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 030a 	bic.w	r3, r3, #10
 8006920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0210 	bic.w	r2, r3, #16
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800697e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	f043 0307 	orr.w	r3, r3, #7
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	021a      	lsls	r2, r3, #8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	401a      	ands	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a50:	431a      	orrs	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e050      	b.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d018      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d013      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10c      	bne.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40000400 	.word	0x40000400
 8006b34:	40000800 	.word	0x40000800
 8006b38:	40000c00 	.word	0x40000c00
 8006b3c:	40014000 	.word	0x40014000

08006b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e03d      	b.n	8006bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03f      	b.n	8006c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fc fa94 	bl	8003160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f829 	bl	8006ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cac:	b0c0      	sub	sp, #256	; 0x100
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	68d9      	ldr	r1, [r3, #12]
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	ea40 0301 	orr.w	r3, r0, r1
 8006cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d00:	f021 010c 	bic.w	r1, r1, #12
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d22:	6999      	ldr	r1, [r3, #24]
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	ea40 0301 	orr.w	r3, r0, r1
 8006d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b8f      	ldr	r3, [pc, #572]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d005      	beq.n	8006d48 <UART_SetConfig+0xa0>
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b8d      	ldr	r3, [pc, #564]	; (8006f78 <UART_SetConfig+0x2d0>)
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d104      	bne.n	8006d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fe fab2 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d50:	e003      	b.n	8006d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d52:	f7fe fa99 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8006d56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	f040 810c 	bne.w	8006f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	1891      	adds	r1, r2, r2
 8006d80:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d82:	415b      	adcs	r3, r3
 8006d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	eb12 0801 	adds.w	r8, r2, r1
 8006d90:	4629      	mov	r1, r5
 8006d92:	eb43 0901 	adc.w	r9, r3, r1
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006daa:	4690      	mov	r8, r2
 8006dac:	4699      	mov	r9, r3
 8006dae:	4623      	mov	r3, r4
 8006db0:	eb18 0303 	adds.w	r3, r8, r3
 8006db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006db8:	462b      	mov	r3, r5
 8006dba:	eb49 0303 	adc.w	r3, r9, r3
 8006dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	18db      	adds	r3, r3, r3
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
 8006ddc:	4613      	mov	r3, r2
 8006dde:	eb42 0303 	adc.w	r3, r2, r3
 8006de2:	657b      	str	r3, [r7, #84]	; 0x54
 8006de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dec:	f7f9 feb0 	bl	8000b50 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4b61      	ldr	r3, [pc, #388]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006df6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	011c      	lsls	r4, r3, #4
 8006dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	1891      	adds	r1, r2, r2
 8006e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e18:	415b      	adcs	r3, r3
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e20:	4641      	mov	r1, r8
 8006e22:	eb12 0a01 	adds.w	sl, r2, r1
 8006e26:	4649      	mov	r1, r9
 8006e28:	eb43 0b01 	adc.w	fp, r3, r1
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e40:	4692      	mov	sl, r2
 8006e42:	469b      	mov	fp, r3
 8006e44:	4643      	mov	r3, r8
 8006e46:	eb1a 0303 	adds.w	r3, sl, r3
 8006e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	eb4b 0303 	adc.w	r3, fp, r3
 8006e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	18db      	adds	r3, r3, r3
 8006e70:	643b      	str	r3, [r7, #64]	; 0x40
 8006e72:	4613      	mov	r3, r2
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e82:	f7f9 fe65 	bl	8000b50 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2264      	movs	r2, #100	; 0x64
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	1acb      	subs	r3, r1, r3
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eb0:	441c      	add	r4, r3
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	1891      	adds	r1, r2, r2
 8006eca:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	1851      	adds	r1, r2, r1
 8006ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8006eda:	4649      	mov	r1, r9
 8006edc:	414b      	adcs	r3, r1
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006eec:	4659      	mov	r1, fp
 8006eee:	00cb      	lsls	r3, r1, #3
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	00ca      	lsls	r2, r1, #3
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	4642      	mov	r2, r8
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f08:	464b      	mov	r3, r9
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f28:	460b      	mov	r3, r1
 8006f2a:	18db      	adds	r3, r3, r3
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2e:	4613      	mov	r3, r2
 8006f30:	eb42 0303 	adc.w	r3, r2, r3
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f3e:	f7f9 fe07 	bl	8000b50 <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006f48:	fba3 1302 	umull	r1, r3, r3, r2
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	2164      	movs	r1, #100	; 0x64
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	3332      	adds	r3, #50	; 0x32
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	f003 0207 	and.w	r2, r3, #7
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4422      	add	r2, r4
 8006f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f70:	e105      	b.n	800717e <UART_SetConfig+0x4d6>
 8006f72:	bf00      	nop
 8006f74:	40011000 	.word	0x40011000
 8006f78:	40011400 	.word	0x40011400
 8006f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f92:	4642      	mov	r2, r8
 8006f94:	464b      	mov	r3, r9
 8006f96:	1891      	adds	r1, r2, r2
 8006f98:	6239      	str	r1, [r7, #32]
 8006f9a:	415b      	adcs	r3, r3
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	eb43 0501 	adc.w	r5, r3, r1
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	00eb      	lsls	r3, r5, #3
 8006fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fba:	00e2      	lsls	r2, r4, #3
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	4643      	mov	r3, r8
 8006fc2:	18e3      	adds	r3, r4, r3
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fc8:	464b      	mov	r3, r9
 8006fca:	eb45 0303 	adc.w	r3, r5, r3
 8006fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	f04f 0300 	mov.w	r3, #0
 8006fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fee:	4629      	mov	r1, r5
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	008a      	lsls	r2, r1, #2
 8006ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007000:	f7f9 fda6 	bl	8000b50 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b60      	ldr	r3, [pc, #384]	; (800718c <UART_SetConfig+0x4e4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800701c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	61b9      	str	r1, [r7, #24]
 800702c:	415b      	adcs	r3, r3
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6139      	str	r1, [r7, #16]
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007068:	464b      	mov	r3, r9
 800706a:	460a      	mov	r2, r1
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	67bb      	str	r3, [r7, #120]	; 0x78
 800707e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800708c:	4649      	mov	r1, r9
 800708e:	008b      	lsls	r3, r1, #2
 8007090:	4641      	mov	r1, r8
 8007092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007096:	4641      	mov	r1, r8
 8007098:	008a      	lsls	r2, r1, #2
 800709a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800709e:	f7f9 fd57 	bl	8000b50 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <UART_SetConfig+0x4e4>)
 80070a8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	2164      	movs	r1, #100	; 0x64
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	3332      	adds	r3, #50	; 0x32
 80070ba:	4a34      	ldr	r2, [pc, #208]	; (800718c <UART_SetConfig+0x4e4>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c6:	441c      	add	r4, r3
 80070c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070cc:	2200      	movs	r2, #0
 80070ce:	673b      	str	r3, [r7, #112]	; 0x70
 80070d0:	677a      	str	r2, [r7, #116]	; 0x74
 80070d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070d6:	4642      	mov	r2, r8
 80070d8:	464b      	mov	r3, r9
 80070da:	1891      	adds	r1, r2, r2
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	415b      	adcs	r3, r3
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070e6:	4641      	mov	r1, r8
 80070e8:	1851      	adds	r1, r2, r1
 80070ea:	6039      	str	r1, [r7, #0]
 80070ec:	4649      	mov	r1, r9
 80070ee:	414b      	adcs	r3, r1
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070fe:	4659      	mov	r1, fp
 8007100:	00cb      	lsls	r3, r1, #3
 8007102:	4651      	mov	r1, sl
 8007104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007108:	4651      	mov	r1, sl
 800710a:	00ca      	lsls	r2, r1, #3
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	4603      	mov	r3, r0
 8007112:	4642      	mov	r2, r8
 8007114:	189b      	adds	r3, r3, r2
 8007116:	66bb      	str	r3, [r7, #104]	; 0x68
 8007118:	464b      	mov	r3, r9
 800711a:	460a      	mov	r2, r1
 800711c:	eb42 0303 	adc.w	r3, r2, r3
 8007120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	663b      	str	r3, [r7, #96]	; 0x60
 800712c:	667a      	str	r2, [r7, #100]	; 0x64
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800713a:	4649      	mov	r1, r9
 800713c:	008b      	lsls	r3, r1, #2
 800713e:	4641      	mov	r1, r8
 8007140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007144:	4641      	mov	r1, r8
 8007146:	008a      	lsls	r2, r1, #2
 8007148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800714c:	f7f9 fd00 	bl	8000b50 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <UART_SetConfig+0x4e4>)
 8007156:	fba3 1302 	umull	r1, r3, r3, r2
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	2164      	movs	r1, #100	; 0x64
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	3332      	adds	r3, #50	; 0x32
 8007168:	4a08      	ldr	r2, [pc, #32]	; (800718c <UART_SetConfig+0x4e4>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4422      	add	r2, r4
 800717c:	609a      	str	r2, [r3, #8]
}
 800717e:	bf00      	nop
 8007180:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007184:	46bd      	mov	sp, r7
 8007186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800718a:	bf00      	nop
 800718c:	51eb851f 	.word	0x51eb851f

08007190 <__errno>:
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <__errno+0x8>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200000d4 	.word	0x200000d4

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4d0d      	ldr	r5, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1b64      	subs	r4, r4, r5
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2600      	movs	r6, #0
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4d0b      	ldr	r5, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f000 f8fe 	bl	80073b0 <_init>
 80071b4:	1b64      	subs	r4, r4, r5
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2600      	movs	r6, #0
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c4:	4798      	blx	r3
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ce:	4798      	blx	r3
 80071d0:	3601      	adds	r6, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	080073e8 	.word	0x080073e8
 80071d8:	080073e8 	.word	0x080073e8
 80071dc:	080073e8 	.word	0x080073e8
 80071e0:	080073ec 	.word	0x080073ec

080071e4 <memset>:
 80071e4:	4402      	add	r2, r0
 80071e6:	4603      	mov	r3, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <sqrt>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	ed2d 8b02 	vpush	{d8}
 80071fa:	ec55 4b10 	vmov	r4, r5, d0
 80071fe:	f000 f825 	bl	800724c <__ieee754_sqrt>
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	eeb0 8a40 	vmov.f32	s16, s0
 800720e:	eef0 8a60 	vmov.f32	s17, s1
 8007212:	f7f9 fc37 	bl	8000a84 <__aeabi_dcmpun>
 8007216:	b990      	cbnz	r0, 800723e <sqrt+0x4a>
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 fc08 	bl	8000a34 <__aeabi_dcmplt>
 8007224:	b158      	cbz	r0, 800723e <sqrt+0x4a>
 8007226:	f7ff ffb3 	bl	8007190 <__errno>
 800722a:	2321      	movs	r3, #33	; 0x21
 800722c:	6003      	str	r3, [r0, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	2300      	movs	r3, #0
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 fab5 	bl	80007a4 <__aeabi_ddiv>
 800723a:	ec41 0b18 	vmov	d8, r0, r1
 800723e:	eeb0 0a48 	vmov.f32	s0, s16
 8007242:	eef0 0a68 	vmov.f32	s1, s17
 8007246:	ecbd 8b02 	vpop	{d8}
 800724a:	bd38      	pop	{r3, r4, r5, pc}

0800724c <__ieee754_sqrt>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	ec55 4b10 	vmov	r4, r5, d0
 8007254:	4e55      	ldr	r6, [pc, #340]	; (80073ac <__ieee754_sqrt+0x160>)
 8007256:	43ae      	bics	r6, r5
 8007258:	ee10 0a10 	vmov	r0, s0
 800725c:	ee10 3a10 	vmov	r3, s0
 8007260:	462a      	mov	r2, r5
 8007262:	4629      	mov	r1, r5
 8007264:	d110      	bne.n	8007288 <__ieee754_sqrt+0x3c>
 8007266:	ee10 2a10 	vmov	r2, s0
 800726a:	462b      	mov	r3, r5
 800726c:	f7f9 f970 	bl	8000550 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4620      	mov	r0, r4
 8007276:	4629      	mov	r1, r5
 8007278:	f7f8 ffb4 	bl	80001e4 <__adddf3>
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	ec45 4b10 	vmov	d0, r4, r5
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	2d00      	cmp	r5, #0
 800728a:	dc10      	bgt.n	80072ae <__ieee754_sqrt+0x62>
 800728c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007290:	4330      	orrs	r0, r6
 8007292:	d0f5      	beq.n	8007280 <__ieee754_sqrt+0x34>
 8007294:	b15d      	cbz	r5, 80072ae <__ieee754_sqrt+0x62>
 8007296:	ee10 2a10 	vmov	r2, s0
 800729a:	462b      	mov	r3, r5
 800729c:	ee10 0a10 	vmov	r0, s0
 80072a0:	f7f8 ff9e 	bl	80001e0 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	f7f9 fa7c 	bl	80007a4 <__aeabi_ddiv>
 80072ac:	e7e6      	b.n	800727c <__ieee754_sqrt+0x30>
 80072ae:	1512      	asrs	r2, r2, #20
 80072b0:	d074      	beq.n	800739c <__ieee754_sqrt+0x150>
 80072b2:	07d4      	lsls	r4, r2, #31
 80072b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80072b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80072bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072c0:	bf5e      	ittt	pl
 80072c2:	0fda      	lsrpl	r2, r3, #31
 80072c4:	005b      	lslpl	r3, r3, #1
 80072c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80072ca:	2400      	movs	r4, #0
 80072cc:	0fda      	lsrs	r2, r3, #31
 80072ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80072d2:	107f      	asrs	r7, r7, #1
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	2516      	movs	r5, #22
 80072d8:	4620      	mov	r0, r4
 80072da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072de:	1886      	adds	r6, r0, r2
 80072e0:	428e      	cmp	r6, r1
 80072e2:	bfde      	ittt	le
 80072e4:	1b89      	suble	r1, r1, r6
 80072e6:	18b0      	addle	r0, r6, r2
 80072e8:	18a4      	addle	r4, r4, r2
 80072ea:	0049      	lsls	r1, r1, #1
 80072ec:	3d01      	subs	r5, #1
 80072ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80072f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80072f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072fa:	d1f0      	bne.n	80072de <__ieee754_sqrt+0x92>
 80072fc:	462a      	mov	r2, r5
 80072fe:	f04f 0e20 	mov.w	lr, #32
 8007302:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007306:	4281      	cmp	r1, r0
 8007308:	eb06 0c05 	add.w	ip, r6, r5
 800730c:	dc02      	bgt.n	8007314 <__ieee754_sqrt+0xc8>
 800730e:	d113      	bne.n	8007338 <__ieee754_sqrt+0xec>
 8007310:	459c      	cmp	ip, r3
 8007312:	d811      	bhi.n	8007338 <__ieee754_sqrt+0xec>
 8007314:	f1bc 0f00 	cmp.w	ip, #0
 8007318:	eb0c 0506 	add.w	r5, ip, r6
 800731c:	da43      	bge.n	80073a6 <__ieee754_sqrt+0x15a>
 800731e:	2d00      	cmp	r5, #0
 8007320:	db41      	blt.n	80073a6 <__ieee754_sqrt+0x15a>
 8007322:	f100 0801 	add.w	r8, r0, #1
 8007326:	1a09      	subs	r1, r1, r0
 8007328:	459c      	cmp	ip, r3
 800732a:	bf88      	it	hi
 800732c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007330:	eba3 030c 	sub.w	r3, r3, ip
 8007334:	4432      	add	r2, r6
 8007336:	4640      	mov	r0, r8
 8007338:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800733c:	f1be 0e01 	subs.w	lr, lr, #1
 8007340:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007348:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800734c:	d1db      	bne.n	8007306 <__ieee754_sqrt+0xba>
 800734e:	430b      	orrs	r3, r1
 8007350:	d006      	beq.n	8007360 <__ieee754_sqrt+0x114>
 8007352:	1c50      	adds	r0, r2, #1
 8007354:	bf13      	iteet	ne
 8007356:	3201      	addne	r2, #1
 8007358:	3401      	addeq	r4, #1
 800735a:	4672      	moveq	r2, lr
 800735c:	f022 0201 	bicne.w	r2, r2, #1
 8007360:	1063      	asrs	r3, r4, #1
 8007362:	0852      	lsrs	r2, r2, #1
 8007364:	07e1      	lsls	r1, r4, #31
 8007366:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800736a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800736e:	bf48      	it	mi
 8007370:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007374:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007378:	4614      	mov	r4, r2
 800737a:	e781      	b.n	8007280 <__ieee754_sqrt+0x34>
 800737c:	0ad9      	lsrs	r1, r3, #11
 800737e:	3815      	subs	r0, #21
 8007380:	055b      	lsls	r3, r3, #21
 8007382:	2900      	cmp	r1, #0
 8007384:	d0fa      	beq.n	800737c <__ieee754_sqrt+0x130>
 8007386:	02cd      	lsls	r5, r1, #11
 8007388:	d50a      	bpl.n	80073a0 <__ieee754_sqrt+0x154>
 800738a:	f1c2 0420 	rsb	r4, r2, #32
 800738e:	fa23 f404 	lsr.w	r4, r3, r4
 8007392:	1e55      	subs	r5, r2, #1
 8007394:	4093      	lsls	r3, r2
 8007396:	4321      	orrs	r1, r4
 8007398:	1b42      	subs	r2, r0, r5
 800739a:	e78a      	b.n	80072b2 <__ieee754_sqrt+0x66>
 800739c:	4610      	mov	r0, r2
 800739e:	e7f0      	b.n	8007382 <__ieee754_sqrt+0x136>
 80073a0:	0049      	lsls	r1, r1, #1
 80073a2:	3201      	adds	r2, #1
 80073a4:	e7ef      	b.n	8007386 <__ieee754_sqrt+0x13a>
 80073a6:	4680      	mov	r8, r0
 80073a8:	e7bd      	b.n	8007326 <__ieee754_sqrt+0xda>
 80073aa:	bf00      	nop
 80073ac:	7ff00000 	.word	0x7ff00000

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
