
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a55c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a764  0800a764  000202f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a76c  0800a76c  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0800a774  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  200002f8  0800aa68  000202f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  0800aa68  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017699  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c83  00000000  00000000  000379bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a37  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186f3  00000000  00000000  000554d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f27  00000000  00000000  0006dbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102af1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  00102b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f8 	.word	0x200002f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6dc 	.word	0x0800a6dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002fc 	.word	0x200002fc
 80001d4:	0800a6dc 	.word	0x0800a6dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <read_pos>:
	SENSOR_CHECK,
} State ;

extern int homing;

void read_pos() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <read_pos+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <read_pos+0x40>)
 8000e62:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <read_pos+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb07 	bl	800047c <__aeabi_i2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <read_pos+0x44>)
 8000e74:	f7ff fb6c 	bl	8000550 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe16 	bl	8000ab0 <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <read_pos+0x48>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000544 	.word	0x20000544
 8000e94:	2000100c 	.word	0x2000100c
 8000e98:	3f8e0000 	.word	0x3f8e0000
 8000e9c:	20001010 	.word	0x20001010

08000ea0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d10a      	bne.n	8000ec8 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <motor+0x4c>)
 8000eba:	f004 fba9 	bl	8005610 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <motor+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	}
}
 8000ec6:	e00c      	b.n	8000ee2 <motor+0x42>
	} else if (DIR == 1) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <motor+0x4c>)
 8000ed6:	f004 fb9b 	bl	8005610 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <motor+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	20000490 	.word	0x20000490

08000ef4 <Init_Homing>:

void Init_Homing() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <Init_Homing+0xcc>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <Init_Homing+0x12>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d01b      	beq.n	8000f3c <Init_Homing+0x48>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f04:	e059      	b.n	8000fba <Init_Homing+0xc6>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <Init_Homing+0xd0>)
 8000f0c:	f004 fb68 	bl	80055e0 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <Init_Homing+0x3a>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <Init_Homing+0xd4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ffbd 	bl	8000ea0 <motor>
			state_homing = 1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <Init_Homing+0xcc>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	801a      	strh	r2, [r3, #0]
		break;
 8000f2c:	e045      	b.n	8000fba <Init_Homing+0xc6>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f36:	f7ff ffb3 	bl	8000ea0 <motor>
		break;
 8000f3a:	e03e      	b.n	8000fba <Init_Homing+0xc6>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <Init_Homing+0xd0>)
 8000f40:	f004 fb4e 	bl	80055e0 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d131      	bne.n	8000fae <Init_Homing+0xba>
			motor(0, 1);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffa7 	bl	8000ea0 <motor>
			HAL_Delay(400);
 8000f52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f56:	f003 fc7b 	bl	8004850 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <Init_Homing+0xd4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <Init_Homing+0xd4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <Init_Homing+0xd8>)
 8000f6c:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <Init_Homing+0xd8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa82 	bl	800047c <__aeabi_i2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <Init_Homing+0xdc>)
 8000f7e:	f7ff fae7 	bl	8000550 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd91 	bl	8000ab0 <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <Init_Homing+0xe0>)
 8000f92:	6013      	str	r3, [r2, #0]
			y_axis_Moving_Status = 0;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <Init_Homing+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	841a      	strh	r2, [r3, #32]
			state_homing = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <Init_Homing+0xcc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f000 fbe3 	bl	800176c <EndEffector_Event>
			State = IDLE;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <Init_Homing+0xe8>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
		break;
 8000fac:	e004      	b.n	8000fb8 <Init_Homing+0xc4>
			motor(Max_Counter_PWM * 0.18, 1);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	f642 6014 	movw	r0, #11796	; 0x2e14
 8000fb4:	f7ff ff74 	bl	8000ea0 <motor>
		break;
 8000fb8:	bf00      	nop
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000314 	.word	0x20000314
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	20000544 	.word	0x20000544
 8000fcc:	2000100c 	.word	0x2000100c
 8000fd0:	3f8e0000 	.word	0x3f8e0000
 8000fd4:	20001010 	.word	0x20001010
 8000fd8:	20000e68 	.word	0x20000e68
 8000fdc:	20000270 	.word	0x20000270

08000fe0 <Joy_Homing>:

void Joy_Homing() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <Joy_Homing+0xb8>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <Joy_Homing+0x12>
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d017      	beq.n	8001020 <Joy_Homing+0x40>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000ff0:	e04f      	b.n	8001092 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff6:	4829      	ldr	r0, [pc, #164]	; (800109c <Joy_Homing+0xbc>)
 8000ff8:	f004 faf2 	bl	80055e0 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d107      	bne.n	8001012 <Joy_Homing+0x32>
			motor(0, 1);
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ff4b 	bl	8000ea0 <motor>
			state_homing = 1;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <Joy_Homing+0xb8>)
 800100c:	2201      	movs	r2, #1
 800100e:	801a      	strh	r2, [r3, #0]
		break;
 8001010:	e03f      	b.n	8001092 <Joy_Homing+0xb2>
			motor(Max_Counter_PWM * 0.25, -1);
 8001012:	f04f 31ff 	mov.w	r1, #4294967295
 8001016:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800101a:	f7ff ff41 	bl	8000ea0 <motor>
		break;
 800101e:	e038      	b.n	8001092 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8001020:	2104      	movs	r1, #4
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <Joy_Homing+0xbc>)
 8001024:	f004 fadc 	bl	80055e0 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d12b      	bne.n	8001086 <Joy_Homing+0xa6>
			motor(0, 1);
 800102e:	2101      	movs	r1, #1
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ff35 	bl	8000ea0 <motor>
			HAL_Delay(400);
 8001036:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800103a:	f003 fc09 	bl	8004850 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <Joy_Homing+0xc0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <Joy_Homing+0xc0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	461a      	mov	r2, r3
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <Joy_Homing+0xc4>)
 8001050:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <Joy_Homing+0xc4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa10 	bl	800047c <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <Joy_Homing+0xc8>)
 8001062:	f7ff fa75 	bl	8000550 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd1f 	bl	8000ab0 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <Joy_Homing+0xcc>)
 8001076:	6013      	str	r3, [r2, #0]
			homing = 0;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <Joy_Homing+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
			state_homing = 0;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Joy_Homing+0xb8>)
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
		break;
 8001084:	e004      	b.n	8001090 <Joy_Homing+0xb0>
			motor(Max_Counter_PWM * 0.18, 1);
 8001086:	2101      	movs	r1, #1
 8001088:	f642 6014 	movw	r0, #11796	; 0x2e14
 800108c:	f7ff ff08 	bl	8000ea0 <motor>
		break;
 8001090:	bf00      	nop
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000316 	.word	0x20000316
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000544 	.word	0x20000544
 80010a4:	2000100c 	.word	0x2000100c
 80010a8:	3f8e0000 	.word	0x3f8e0000
 80010ac:	20001010 	.word	0x20001010
 80010b0:	200003e0 	.word	0x200003e0

080010b4 <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <modbus_1t5_Timeout+0x1c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	751a      	strb	r2, [r3, #20]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000318 	.word	0x20000318

080010d4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <modbus_3t5_Timeout+0x1c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	755a      	strb	r2, [r3, #21]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000318 	.word	0x20000318

080010f4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <modbus_UART_Recived+0x60>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <modbus_UART_Recived+0x60>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800110e:	1c59      	adds	r1, r3, #1
 8001110:	b289      	uxth	r1, r1
 8001112:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001116:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800111a:	d210      	bcs.n	800113e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <modbus_UART_Recived+0x60>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68d8      	ldr	r0, [r3, #12]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <modbus_UART_Recived+0x60>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <modbus_UART_Recived+0x60>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800112e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001132:	4413      	add	r3, r2
 8001134:	3302      	adds	r3, #2
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f008 f819 	bl	8009170 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <modbus_UART_Recived+0x60>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000318 	.word	0x20000318

08001158 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <Modbus_init+0x9c>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <Modbus_init+0x9c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <Modbus_init+0x9c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <Modbus_init+0xa0>)
 8001178:	2114      	movs	r1, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f007 f9aa 	bl	80084d4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <Modbus_init+0x9c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <Modbus_init+0xa4>)
 8001188:	210e      	movs	r1, #14
 800118a:	4618      	mov	r0, r3
 800118c:	f007 f9a2 	bl	80084d4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <Modbus_init+0x9c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <Modbus_init+0xa8>)
 8001198:	2103      	movs	r1, #3
 800119a:	4618      	mov	r0, r3
 800119c:	f007 ff40 	bl	8009020 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <Modbus_init+0x9c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68d8      	ldr	r0, [r3, #12]
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <Modbus_init+0x9c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <Modbus_init+0x9c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011b2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80011b6:	4413      	add	r3, r2
 80011b8:	3302      	adds	r3, #2
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f007 ffd7 	bl	8009170 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <Modbus_init+0x9c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10c      	bne.n	80011ec <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <Modbus_init+0x9c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fa25 	bl	8007628 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <Modbus_init+0x9c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fc64 	bl	8007ab4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000318 	.word	0x20000318
 80011f8:	080010b5 	.word	0x080010b5
 80011fc:	080010d5 	.word	0x080010d5
 8001200:	080010f5 	.word	0x080010f5

08001204 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001218:	e013      	b.n	8001242 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	4053      	eors	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <CRC16+0x64>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	4053      	eors	r3, r2
 8001236:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <CRC16+0x68>)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001242:	883b      	ldrh	r3, [r7, #0]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	803a      	strh	r2, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e6      	bne.n	800121a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	b29b      	uxth	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000100 	.word	0x20000100
 800126c:	20000000 	.word	0x20000000

08001270 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e1b      	ldrb	r3, [r3, #24]
 800127c:	3b01      	subs	r3, #1
 800127e:	2b03      	cmp	r3, #3
 8001280:	d80a      	bhi.n	8001298 <Modbus_Protocal_Worker+0x28>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <Modbus_Protocal_Worker+0x18>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	080012a3 	.word	0x080012a3
 800128c:	08001443 	.word	0x08001443
 8001290:	0800132f 	.word	0x0800132f
 8001294:	08001355 	.word	0x08001355
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001298:	4b78      	ldr	r3, [pc, #480]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	761a      	strb	r2, [r3, #24]
		break;
 80012a0:	e0e8      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80012ae:	f000 f9dd 	bl	800166c <Modbus_Emission>
 80012b2:	e01c      	b.n	80012ee <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80012b4:	4b71      	ldr	r3, [pc, #452]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	7d9b      	ldrb	r3, [r3, #22]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d017      	beq.n	80012ee <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012be:	4b6f      	ldr	r3, [pc, #444]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80012ce:	4b6b      	ldr	r3, [pc, #428]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2203      	movs	r2, #3
 80012ec:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	f040 80b3 	bne.w	8001466 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001300:	4b5e      	ldr	r3, [pc, #376]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68d8      	ldr	r0, [r3, #12]
 8001310:	4b5a      	ldr	r3, [pc, #360]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b59      	ldr	r3, [pc, #356]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800131c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001320:	4413      	add	r3, r2
 8001322:	3302      	adds	r3, #2
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f007 ff22 	bl	8009170 <HAL_UART_Receive_IT>
		}
		break;
 800132c:	e09b      	b.n	8001466 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	7d1b      	ldrb	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8098 	beq.w	800146a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001342:	4b4e      	ldr	r3, [pc, #312]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	22fe      	movs	r2, #254	; 0xfe
 8001348:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800134a:	4b4c      	ldr	r3, [pc, #304]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2204      	movs	r2, #4
 8001350:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001352:	e08a      	b.n	800146a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001354:	4b49      	ldr	r3, [pc, #292]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	7d9b      	ldrb	r3, [r3, #22]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	22ff      	movs	r2, #255	; 0xff
 8001370:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800137a:	f113 0f02 	cmn.w	r3, #2
 800137e:	d150      	bne.n	8001422 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001398:	3b02      	subs	r3, #2
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff ff31 	bl	8001204 <CRC16>
 80013a2:	4603      	mov	r3, r0
 80013a4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013a6:	793a      	ldrb	r2, [r7, #4]
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013b4:	3b02      	subs	r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10c      	bne.n	80013da <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c0:	797a      	ldrb	r2, [r7, #5]
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013ce:	3b01      	subs	r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d004      	beq.n	80013e4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	75da      	strb	r2, [r3, #23]
				break;
 80013e2:	e047      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d113      	bne.n	800141e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001406:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001410:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001412:	461a      	mov	r2, r3
 8001414:	f009 f86e 	bl	800a4f4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001418:	f000 f910 	bl	800163c <Modbus_frame_response>
 800141c:	e001      	b.n	8001422 <Modbus_Protocal_Worker+0x1b2>
				break;
 800141e:	bf00      	nop
					}
		break;


	}
}
 8001420:	e028      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	7d5b      	ldrb	r3, [r3, #21]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4618      	mov	r0, r3
 800143c:	f007 ff46 	bl	80092cc <HAL_UART_AbortReceive>
		break;
 8001440:	e015      	b.n	800146e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b20      	cmp	r3, #32
 8001450:	d10f      	bne.n	8001472 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <Modbus_Protocal_Worker+0x20c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	761a      	strb	r2, [r3, #24]
		break;
 8001464:	e005      	b.n	8001472 <Modbus_Protocal_Worker+0x202>
		break;
 8001466:	bf00      	nop
 8001468:	e004      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
		break;
 800146a:	bf00      	nop
 800146c:	e002      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
		break;
 800146e:	bf00      	nop
 8001470:	e000      	b.n	8001474 <Modbus_Protocal_Worker+0x204>
		break;
 8001472:	bf00      	nop
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000318 	.word	0x20000318

08001480 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <modbusWrite1Register+0x80>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	7e9b      	ldrb	r3, [r3, #26]
 800148c:	b29b      	uxth	r3, r3
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <modbusWrite1Register+0x80>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	7edb      	ldrb	r3, [r3, #27]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <modbusWrite1Register+0x80>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d903      	bls.n	80014b2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f000 f8a4 	bl	80015f8 <ModbusErrorReply>
			 return;
 80014b0:	e023      	b.n	80014fa <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <modbusWrite1Register+0x80>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <modbusWrite1Register+0x80>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	440b      	add	r3, r1
 80014c2:	7f12      	ldrb	r2, [r2, #28]
 80014c4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <modbusWrite1Register+0x80>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <modbusWrite1Register+0x80>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	440b      	add	r3, r1
 80014d6:	7f52      	ldrb	r2, [r2, #29]
 80014d8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <modbusWrite1Register+0x80>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <modbusWrite1Register+0x80>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80014e8:	2208      	movs	r2, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	f009 f802 	bl	800a4f4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <modbusWrite1Register+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2205      	movs	r2, #5
 80014f6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000318 	.word	0x20000318

08001504 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <modbusRead1Register+0xf0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	7f1b      	ldrb	r3, [r3, #28]
 8001510:	b29b      	uxth	r3, r3
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <modbusRead1Register+0xf0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	7f5b      	ldrb	r3, [r3, #29]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <modbusRead1Register+0xf0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	7e9b      	ldrb	r3, [r3, #26]
 8001528:	b29b      	uxth	r3, r3
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <modbusRead1Register+0xf0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	7edb      	ldrb	r3, [r3, #27]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <modbusRead1Register+0x42>
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2b7d      	cmp	r3, #125	; 0x7d
 8001544:	d903      	bls.n	800154e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f856 	bl	80015f8 <ModbusErrorReply>
		 return;
 800154c:	e04e      	b.n	80015ec <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800154e:	88ba      	ldrh	r2, [r7, #4]
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <modbusRead1Register+0xf0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d808      	bhi.n	800156c <modbusRead1Register+0x68>
 800155a:	88ba      	ldrh	r2, [r7, #4]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4413      	add	r3, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <modbusRead1Register+0xf0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d903      	bls.n	8001574 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800156c:	2002      	movs	r0, #2
 800156e:	f000 f843 	bl	80015f8 <ModbusErrorReply>
		 return;
 8001572:	e03b      	b.n	80015ec <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <modbusRead1Register+0xf0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <modbusRead1Register+0xf0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0052      	lsls	r2, r2, #1
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800158e:	2400      	movs	r4, #0
 8001590:	e020      	b.n	80015d4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <modbusRead1Register+0xf0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	4423      	add	r3, r4
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	18d1      	adds	r1, r2, r3
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <modbusRead1Register+0xf0>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	1c63      	adds	r3, r4, #1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	7849      	ldrb	r1, [r1, #1]
 80015aa:	4413      	add	r3, r2
 80015ac:	460a      	mov	r2, r1
 80015ae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <modbusRead1Register+0xf0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	4423      	add	r3, r4
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <modbusRead1Register+0xf0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	0063      	lsls	r3, r4, #1
 80015c6:	3303      	adds	r3, #3
 80015c8:	7809      	ldrb	r1, [r1, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	460a      	mov	r2, r1
 80015ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80015d2:	3401      	adds	r4, #1
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	429c      	cmp	r4, r3
 80015d8:	dbdb      	blt.n	8001592 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	3301      	adds	r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <modbusRead1Register+0xf0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000318 	.word	0x20000318

080015f8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <ModbusErrorReply+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	7e5a      	ldrb	r2, [r3, #25]
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <ModbusErrorReply+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <ModbusErrorReply+0x40>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <ModbusErrorReply+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000318 	.word	0x20000318

0800163c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <Modbus_frame_response+0x2c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d004      	beq.n	8001654 <Modbus_frame_response+0x18>
 800164a:	2b06      	cmp	r3, #6
 800164c:	d105      	bne.n	800165a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800164e:	f7ff ff17 	bl	8001480 <modbusWrite1Register>
		break;
 8001652:	e006      	b.n	8001662 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001654:	f7ff ff56 	bl	8001504 <modbusRead1Register>
		break;
 8001658:	e003      	b.n	8001662 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff ffcc 	bl	80015f8 <ModbusErrorReply>
		break;
 8001660:	bf00      	nop

	}
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000318 	.word	0x20000318

0800166c <Modbus_Emission>:

void Modbus_Emission()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b20      	cmp	r3, #32
 8001680:	d15e      	bne.n	8001740 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <Modbus_Emission+0xfc>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <Modbus_Emission+0xfc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001698:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <Modbus_Emission+0xfc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <Modbus_Emission+0xfc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80016aa:	461a      	mov	r2, r3
 80016ac:	f008 ff22 	bl	800a4f4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <Modbus_Emission+0xfc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <Modbus_Emission+0xfc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3203      	adds	r2, #3
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <Modbus_Emission+0xfc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <Modbus_Emission+0xfc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016d6:	3b02      	subs	r3, #2
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f7ff fd92 	bl	8001204 <CRC16>
 80016e0:	4603      	mov	r3, r0
 80016e2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <Modbus_Emission+0xfc>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <Modbus_Emission+0xfc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80016f0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016f2:	7939      	ldrb	r1, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	460a      	mov	r2, r1
 80016f8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <Modbus_Emission+0xfc>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <Modbus_Emission+0xfc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001708:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800170a:	7979      	ldrb	r1, [r7, #5]
 800170c:	4413      	add	r3, r2
 800170e:	460a      	mov	r2, r1
 8001710:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <Modbus_Emission+0xfc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b20      	cmp	r3, #32
 8001722:	d10d      	bne.n	8001740 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <Modbus_Emission+0xfc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <Modbus_Emission+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <Modbus_Emission+0xfc>)
 8001734:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001736:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800173a:	461a      	mov	r2, r3
 800173c:	f007 fd48 	bl	80091d0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <Modbus_Emission+0xfc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <Modbus_Emission+0xfc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <Modbus_Emission+0xfc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <Modbus_Emission+0xfc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000318 	.word	0x20000318

0800176c <EndEffector_Event>:
	Pick,
	Place,
	Read,
} EndEffector_State;

void EndEffector_Event(char EndEffector_State) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <EndEffector_Event+0x14c>)
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b20      	cmp	r3, #32
 8001780:	f040 8092 	bne.w	80018a8 <EndEffector_Event+0x13c>
		switch (EndEffector_State) {
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	f200 8091 	bhi.w	80018ae <EndEffector_Event+0x142>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <EndEffector_Event+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080018ad 	.word	0x080018ad
 8001798:	080017c1 	.word	0x080017c1
 800179c:	080017d7 	.word	0x080017d7
 80017a0:	080017ed 	.word	0x080017ed
 80017a4:	08001803 	.word	0x08001803
 80017a8:	08001819 	.word	0x08001819
 80017ac:	0800182f 	.word	0x0800182f
 80017b0:	08001845 	.word	0x08001845
 80017b4:	0800185b 	.word	0x0800185b
 80017b8:	08001879 	.word	0x08001879
 80017bc:	08001897 	.word	0x08001897
		case Init:
			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	4a3d      	ldr	r2, [pc, #244]	; (80018bc <EndEffector_Event+0x150>)
 80017c8:	212a      	movs	r1, #42	; 0x2a
 80017ca:	483b      	ldr	r0, [pc, #236]	; (80018b8 <EndEffector_Event+0x14c>)
 80017cc:	f004 f896 	bl	80058fc <HAL_I2C_Master_Transmit>
					2, timeout);
			EndEffector_State = Init;
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
			break;
 80017d4:	e06b      	b.n	80018ae <EndEffector_Event+0x142>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2302      	movs	r3, #2
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <EndEffector_Event+0x154>)
 80017de:	212a      	movs	r1, #42	; 0x2a
 80017e0:	4835      	ldr	r0, [pc, #212]	; (80018b8 <EndEffector_Event+0x14c>)
 80017e2:	f004 f88b 	bl	80058fc <HAL_I2C_Master_Transmit>
			timeout);
			EndEffector_State = Init;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
			break;
 80017ea:	e060      	b.n	80018ae <EndEffector_Event+0x142>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 80017ec:	2364      	movs	r3, #100	; 0x64
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2304      	movs	r3, #4
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <EndEffector_Event+0x158>)
 80017f4:	212a      	movs	r1, #42	; 0x2a
 80017f6:	4830      	ldr	r0, [pc, #192]	; (80018b8 <EndEffector_Event+0x14c>)
 80017f8:	f004 f880 	bl	80058fc <HAL_I2C_Master_Transmit>
			timeout);
			EndEffector_State = Init;
 80017fc:	2300      	movs	r3, #0
 80017fe:	71fb      	strb	r3, [r7, #7]
			break;
 8001800:	e055      	b.n	80018ae <EndEffector_Event+0x142>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <EndEffector_Event+0x15c>)
 800180a:	212a      	movs	r1, #42	; 0x2a
 800180c:	482a      	ldr	r0, [pc, #168]	; (80018b8 <EndEffector_Event+0x14c>)
 800180e:	f004 f875 	bl	80058fc <HAL_I2C_Master_Transmit>
					1, timeout);
			EndEffector_State = Init;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
			break;
 8001816:	e04a      	b.n	80018ae <EndEffector_Event+0x142>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2304      	movs	r3, #4
 800181e:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <EndEffector_Event+0x160>)
 8001820:	212a      	movs	r1, #42	; 0x2a
 8001822:	4825      	ldr	r0, [pc, #148]	; (80018b8 <EndEffector_Event+0x14c>)
 8001824:	f004 f86a 	bl	80058fc <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, timeout);
			EndEffector_State = Init;
 8001828:	2300      	movs	r3, #0
 800182a:	71fb      	strb	r3, [r7, #7]
			break;
 800182c:	e03f      	b.n	80018ae <EndEffector_Event+0x142>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <EndEffector_Event+0x164>)
 8001836:	212a      	movs	r1, #42	; 0x2a
 8001838:	481f      	ldr	r0, [pc, #124]	; (80018b8 <EndEffector_Event+0x14c>)
 800183a:	f004 f85f 	bl	80058fc <HAL_I2C_Master_Transmit>
			timeout);
			EndEffector_State = Init;
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
			break;
 8001842:	e034      	b.n	80018ae <EndEffector_Event+0x142>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <EndEffector_Event+0x168>)
 800184c:	212a      	movs	r1, #42	; 0x2a
 800184e:	481a      	ldr	r0, [pc, #104]	; (80018b8 <EndEffector_Event+0x14c>)
 8001850:	f004 f854 	bl	80058fc <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, timeout);
			EndEffector_State = Init;
 8001854:	2300      	movs	r3, #0
 8001856:	71fb      	strb	r3, [r7, #7]
			break;
 8001858:	e029      	b.n	80018ae <EndEffector_Event+0x142>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 800185a:	2364      	movs	r3, #100	; 0x64
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2302      	movs	r3, #2
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <EndEffector_Event+0x16c>)
 8001862:	212a      	movs	r1, #42	; 0x2a
 8001864:	4814      	ldr	r0, [pc, #80]	; (80018b8 <EndEffector_Event+0x14c>)
 8001866:	f004 f849 	bl	80058fc <HAL_I2C_Master_Transmit>
			timeout);
			HAL_Delay(2000);
 800186a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800186e:	f002 ffef 	bl	8004850 <HAL_Delay>
			EndEffector_State = Init;
 8001872:	2300      	movs	r3, #0
 8001874:	71fb      	strb	r3, [r7, #7]
			break;
 8001876:	e01a      	b.n	80018ae <EndEffector_Event+0x142>
		case Place:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2302      	movs	r3, #2
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <EndEffector_Event+0x170>)
 8001880:	212a      	movs	r1, #42	; 0x2a
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <EndEffector_Event+0x14c>)
 8001884:	f004 f83a 	bl	80058fc <HAL_I2C_Master_Transmit>
			timeout);
			HAL_Delay(2000);
 8001888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800188c:	f002 ffe0 	bl	8004850 <HAL_Delay>
			EndEffector_State = Init;
 8001890:	2300      	movs	r3, #0
 8001892:	71fb      	strb	r3, [r7, #7]
			break;
 8001894:	e00b      	b.n	80018ae <EndEffector_Event+0x142>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 8001896:	2364      	movs	r3, #100	; 0x64
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <EndEffector_Event+0x174>)
 800189e:	212a      	movs	r1, #42	; 0x2a
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <EndEffector_Event+0x14c>)
 80018a2:	f004 f929 	bl	8005af8 <HAL_I2C_Master_Receive>
			timeout);
			break;
 80018a6:	e002      	b.n	80018ae <EndEffector_Event+0x142>
		}

	}
 80018a8:	bf00      	nop
 80018aa:	e000      	b.n	80018ae <EndEffector_Event+0x142>
			break;
 80018ac:	bf00      	nop
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003e4 	.word	0x200003e4
 80018bc:	20000200 	.word	0x20000200
 80018c0:	20000204 	.word	0x20000204
 80018c4:	20000208 	.word	0x20000208
 80018c8:	2000020c 	.word	0x2000020c
 80018cc:	20000210 	.word	0x20000210
 80018d0:	20000214 	.word	0x20000214
 80018d4:	20000218 	.word	0x20000218
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	20000220 	.word	0x20000220
 80018e0:	2000031c 	.word	0x2000031c

080018e4 <JoyStickControl>:

extern float Place_Point_Y[9];
extern float Place_Point_X[9];

int homing = 0;
void JoyStickControl() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af02      	add	r7, sp, #8

	read_pos();
 80018ea:	f7ff fab3 	bl	8000e54 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2104      	movs	r1, #4
 80018f2:	48a5      	ldr	r0, [pc, #660]	; (8001b88 <JoyStickControl+0x2a4>)
 80018f4:	f003 fe8c 	bl	8005610 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 80018f8:	231e      	movs	r3, #30
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	230a      	movs	r3, #10
 80018fe:	4aa3      	ldr	r2, [pc, #652]	; (8001b8c <JoyStickControl+0x2a8>)
 8001900:	49a3      	ldr	r1, [pc, #652]	; (8001b90 <JoyStickControl+0x2ac>)
 8001902:	48a4      	ldr	r0, [pc, #656]	; (8001b94 <JoyStickControl+0x2b0>)
 8001904:	f005 fb6d 	bl	8006fe2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 8001908:	2201      	movs	r2, #1
 800190a:	2104      	movs	r1, #4
 800190c:	489e      	ldr	r0, [pc, #632]	; (8001b88 <JoyStickControl+0x2a4>)
 800190e:	f003 fe7f 	bl	8005610 <HAL_GPIO_WritePin>
	// O 0xdf   0x7f
	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 8001912:	4b9e      	ldr	r3, [pc, #632]	; (8001b8c <JoyStickControl+0x2a8>)
 8001914:	791b      	ldrb	r3, [r3, #4]
 8001916:	2bfe      	cmp	r3, #254	; 0xfe
 8001918:	d114      	bne.n	8001944 <JoyStickControl+0x60>
 800191a:	4b9f      	ldr	r3, [pc, #636]	; (8001b98 <JoyStickControl+0x2b4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d110      	bne.n	8001944 <JoyStickControl+0x60>
		if (state_motor == 1) {
 8001922:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <JoyStickControl+0x2b8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d103      	bne.n	8001932 <JoyStickControl+0x4e>
			state_motor = 0;
 800192a:	4b9c      	ldr	r3, [pc, #624]	; (8001b9c <JoyStickControl+0x2b8>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001930:	e0dc      	b.n	8001aec <JoyStickControl+0x208>
		} else if (state_motor == 0) {
 8001932:	4b9a      	ldr	r3, [pc, #616]	; (8001b9c <JoyStickControl+0x2b8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80d8 	bne.w	8001aec <JoyStickControl+0x208>
			state_motor = 1;
 800193c:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <JoyStickControl+0x2b8>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001942:	e0d3      	b.n	8001aec <JoyStickControl+0x208>
		}
	} else if (RX[4] == 0xbf && button_last == 0xFF) { //X Button
 8001944:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <JoyStickControl+0x2a8>)
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	2bbf      	cmp	r3, #191	; 0xbf
 800194a:	d134      	bne.n	80019b6 <JoyStickControl+0xd2>
 800194c:	4b94      	ldr	r3, [pc, #592]	; (8001ba0 <JoyStickControl+0x2bc>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2bff      	cmp	r3, #255	; 0xff
 8001952:	d130      	bne.n	80019b6 <JoyStickControl+0xd2>

		y_c[count] = PosY;
 8001954:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	4618      	mov	r0, r3
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <JoyStickControl+0x2c4>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4992      	ldr	r1, [pc, #584]	; (8001bac <JoyStickControl+0x2c8>)
 8001962:	0083      	lsls	r3, r0, #2
 8001964:	440b      	add	r3, r1
 8001966:	601a      	str	r2, [r3, #0]
		x_c[count] = x_axis_Actual_Position/ 10;
 8001968:	4b91      	ldr	r3, [pc, #580]	; (8001bb0 <JoyStickControl+0x2cc>)
 800196a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800196e:	4a91      	ldr	r2, [pc, #580]	; (8001bb4 <JoyStickControl+0x2d0>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	b29b      	uxth	r3, r3
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <JoyStickControl+0x2c0>)
 800197e:	f993 3000 	ldrsb.w	r3, [r3]
 8001982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001986:	4a8c      	ldr	r2, [pc, #560]	; (8001bb8 <JoyStickControl+0x2d4>)
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	edc3 7a00 	vstr	s15, [r3]
		count += 1;
 8001990:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001992:	f993 3000 	ldrsb.w	r3, [r3]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	b25a      	sxtb	r2, r3
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019a0:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 80019a2:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019a4:	f993 3000 	ldrsb.w	r3, [r3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f340 80a0 	ble.w	8001aee <JoyStickControl+0x20a>
			count = 2;
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 80019b4:	e09b      	b.n	8001aee <JoyStickControl+0x20a>
		}
	}

	else if (RX[4] == 0x7f && button_last == 0xFF) { // Delete Button
 80019b6:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <JoyStickControl+0x2a8>)
 80019b8:	791b      	ldrb	r3, [r3, #4]
 80019ba:	2b7f      	cmp	r3, #127	; 0x7f
 80019bc:	d127      	bne.n	8001a0e <JoyStickControl+0x12a>
 80019be:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <JoyStickControl+0x2bc>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d123      	bne.n	8001a0e <JoyStickControl+0x12a>

		y_c[count] = 0;
 80019c6:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019c8:	f993 3000 	ldrsb.w	r3, [r3]
 80019cc:	4a77      	ldr	r2, [pc, #476]	; (8001bac <JoyStickControl+0x2c8>)
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
		x_c[count] = 0;
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019da:	f993 3000 	ldrsb.w	r3, [r3]
 80019de:	4a76      	ldr	r2, [pc, #472]	; (8001bb8 <JoyStickControl+0x2d4>)
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
		count -= 1;
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019ec:	f993 3000 	ldrsb.w	r3, [r3]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	b25a      	sxtb	r2, r3
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019fa:	701a      	strb	r2, [r3, #0]
		if (count <= 0) {
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <JoyStickControl+0x2c0>)
 80019fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc73      	bgt.n	8001aee <JoyStickControl+0x20a>
			count = 0;
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
		if (count <= 0) {
 8001a0c:	e06f      	b.n	8001aee <JoyStickControl+0x20a>
		}
	} else if (RX[4] == 0xdf && button_last == 0xFF) { // Delete Button
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <JoyStickControl+0x2a8>)
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	2bdf      	cmp	r3, #223	; 0xdf
 8001a14:	d15e      	bne.n	8001ad4 <JoyStickControl+0x1f0>
 8001a16:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <JoyStickControl+0x2bc>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d15a      	bne.n	8001ad4 <JoyStickControl+0x1f0>
		Calculate_Position(x_c[0], x_c[1], x_c[2], y_c[0], y_c[1], y_c[2]);
 8001a1e:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <JoyStickControl+0x2d4>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <JoyStickControl+0x2d4>)
 8001a26:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <JoyStickControl+0x2d4>)
 8001a2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <JoyStickControl+0x2c8>)
 8001a32:	ed93 6a00 	vldr	s12, [r3]
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <JoyStickControl+0x2c8>)
 8001a38:	edd3 5a01 	vldr	s11, [r3, #4]
 8001a3c:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <JoyStickControl+0x2c8>)
 8001a3e:	ed93 5a02 	vldr	s10, [r3, #8]
 8001a42:	eef0 2a45 	vmov.f32	s5, s10
 8001a46:	eeb0 2a65 	vmov.f32	s4, s11
 8001a4a:	eef0 1a46 	vmov.f32	s3, s12
 8001a4e:	eeb0 1a66 	vmov.f32	s2, s13
 8001a52:	eef0 0a47 	vmov.f32	s1, s14
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	f000 f92b 	bl	8001cb4 <Calculate_Position>

		if (TRAY_STATUS == PICK) {
 8001a5e:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <JoyStickControl+0x2d8>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <JoyStickControl+0x19e>

			memcpy(Pick_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001a66:	2225      	movs	r2, #37	; 0x25
 8001a68:	4955      	ldr	r1, [pc, #340]	; (8001bc0 <JoyStickControl+0x2dc>)
 8001a6a:	4856      	ldr	r0, [pc, #344]	; (8001bc4 <JoyStickControl+0x2e0>)
 8001a6c:	f008 fd42 	bl	800a4f4 <memcpy>
			memcpy(Pick_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001a70:	2225      	movs	r2, #37	; 0x25
 8001a72:	4955      	ldr	r1, [pc, #340]	; (8001bc8 <JoyStickControl+0x2e4>)
 8001a74:	4855      	ldr	r0, [pc, #340]	; (8001bcc <JoyStickControl+0x2e8>)
 8001a76:	f008 fd3d 	bl	800a4f4 <memcpy>

			count = 0;
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e010      	b.n	8001aa4 <JoyStickControl+0x1c0>
		} else if (TRAY_STATUS == PLACE) {
 8001a82:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <JoyStickControl+0x2d8>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <JoyStickControl+0x1c0>
			memcpy(Place_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001a8a:	2225      	movs	r2, #37	; 0x25
 8001a8c:	494c      	ldr	r1, [pc, #304]	; (8001bc0 <JoyStickControl+0x2dc>)
 8001a8e:	4850      	ldr	r0, [pc, #320]	; (8001bd0 <JoyStickControl+0x2ec>)
 8001a90:	f008 fd30 	bl	800a4f4 <memcpy>
			memcpy(Place_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001a94:	2225      	movs	r2, #37	; 0x25
 8001a96:	494c      	ldr	r1, [pc, #304]	; (8001bc8 <JoyStickControl+0x2e4>)
 8001a98:	484e      	ldr	r0, [pc, #312]	; (8001bd4 <JoyStickControl+0x2f0>)
 8001a9a:	f008 fd2b 	bl	800a4f4 <memcpy>
			count = 0;
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
//
//			Place_Tray_Origin_x= -500;
//			Place_Tray_Origin_y= -2000;
//			Place_Tray_Origin_Orientation= 9000;;

		memset(x_c, 0, sizeof(x_c));
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4843      	ldr	r0, [pc, #268]	; (8001bb8 <JoyStickControl+0x2d4>)
 8001aaa:	f008 fd31 	bl	800a510 <memset>
		memset(y_c, 0, sizeof(y_c));
 8001aae:	220c      	movs	r2, #12
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	483e      	ldr	r0, [pc, #248]	; (8001bac <JoyStickControl+0x2c8>)
 8001ab4:	f008 fd2c 	bl	800a510 <memset>

		y_axis_Moving_Status= 0;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	841a      	strh	r2, [r3, #32]
		State = IDLE;
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <JoyStickControl+0x2f4>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	701a      	strb	r2, [r3, #0]
		count = 0;
 8001ac4:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <JoyStickControl+0x2c0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

		motor(0, 0);
 8001aca:	2100      	movs	r1, #0
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff f9e7 	bl	8000ea0 <motor>
 8001ad2:	e00c      	b.n	8001aee <JoyStickControl+0x20a>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <JoyStickControl+0x2a8>)
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	2bef      	cmp	r3, #239	; 0xef
 8001ada:	d108      	bne.n	8001aee <JoyStickControl+0x20a>
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <JoyStickControl+0x2bc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2bff      	cmp	r3, #255	; 0xff
 8001ae2:	d104      	bne.n	8001aee <JoyStickControl+0x20a>
		homing = 1;
 8001ae4:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <JoyStickControl+0x2f8>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e000      	b.n	8001aee <JoyStickControl+0x20a>
		if (state_motor == 1) {
 8001aec:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <JoyStickControl+0x2b8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <JoyStickControl+0x218>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d074      	beq.n	8001be4 <JoyStickControl+0x300>
 8001afa:	e0ba      	b.n	8001c72 <JoyStickControl+0x38e>
	case 0:
		if (RX[3] == 0xfe) { //Not be push
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <JoyStickControl+0x2a8>)
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	2bfe      	cmp	r3, #254	; 0xfe
 8001b02:	d108      	bne.n	8001b16 <JoyStickControl+0x232>
			motor(0, 1);
 8001b04:	2101      	movs	r1, #1
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff f9ca 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		else if (RX[3] == 0xde) { //right
			x_axis_Moving_Status = 4;
			motor(0, 1);
		}

		break;
 8001b14:	e0ac      	b.n	8001c70 <JoyStickControl+0x38c>
		else if (RX[3] == 0xee) { //UP
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <JoyStickControl+0x2a8>)
 8001b18:	78db      	ldrb	r3, [r3, #3]
 8001b1a:	2bee      	cmp	r3, #238	; 0xee
 8001b1c:	d10a      	bne.n	8001b34 <JoyStickControl+0x250>
			x_axis_Moving_Status= 0;
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, 1);
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <JoyStickControl+0x2fc>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f9b7 	bl	8000ea0 <motor>
		break;
 8001b32:	e09d      	b.n	8001c70 <JoyStickControl+0x38c>
		else if (RX[3] == 0xbe) { //Down
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <JoyStickControl+0x2a8>)
 8001b36:	78db      	ldrb	r3, [r3, #3]
 8001b38:	2bbe      	cmp	r3, #190	; 0xbe
 8001b3a:	d10b      	bne.n	8001b54 <JoyStickControl+0x270>
			x_axis_Moving_Status= 0;
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, -1);
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <JoyStickControl+0x2fc>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f9a7 	bl	8000ea0 <motor>
		break;
 8001b52:	e08d      	b.n	8001c70 <JoyStickControl+0x38c>
		else if (RX[3] == 0x7e) { //left
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <JoyStickControl+0x2a8>)
 8001b56:	78db      	ldrb	r3, [r3, #3]
 8001b58:	2b7e      	cmp	r3, #126	; 0x7e
 8001b5a:	d108      	bne.n	8001b6e <JoyStickControl+0x28a>
			x_axis_Moving_Status = 8;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001b5e:	2208      	movs	r2, #8
 8001b60:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff f99a 	bl	8000ea0 <motor>
		break;
 8001b6c:	e080      	b.n	8001c70 <JoyStickControl+0x38c>
		else if (RX[3] == 0xde) { //right
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <JoyStickControl+0x2a8>)
 8001b70:	78db      	ldrb	r3, [r3, #3]
 8001b72:	2bde      	cmp	r3, #222	; 0xde
 8001b74:	d17c      	bne.n	8001c70 <JoyStickControl+0x38c>
			x_axis_Moving_Status = 4;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <JoyStickControl+0x2cc>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff f98d 	bl	8000ea0 <motor>
		break;
 8001b86:	e073      	b.n	8001c70 <JoyStickControl+0x38c>
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	20000320 	.word	0x20000320
 8001b90:	20000224 	.word	0x20000224
 8001b94:	20000438 	.word	0x20000438
 8001b98:	2000032b 	.word	0x2000032b
 8001b9c:	2000032a 	.word	0x2000032a
 8001ba0:	2000032c 	.word	0x2000032c
 8001ba4:	2000032d 	.word	0x2000032d
 8001ba8:	20001010 	.word	0x20001010
 8001bac:	20000330 	.word	0x20000330
 8001bb0:	20000e68 	.word	0x20000e68
 8001bb4:	cccccccd 	.word	0xcccccccd
 8001bb8:	2000033c 	.word	0x2000033c
 8001bbc:	200010aa 	.word	0x200010aa
 8001bc0:	20000394 	.word	0x20000394
 8001bc4:	20001038 	.word	0x20001038
 8001bc8:	200003b8 	.word	0x200003b8
 8001bcc:	20001014 	.word	0x20001014
 8001bd0:	20001080 	.word	0x20001080
 8001bd4:	2000105c 	.word	0x2000105c
 8001bd8:	20000270 	.word	0x20000270
 8001bdc:	200003e0 	.word	0x200003e0
 8001be0:	2000022e 	.word	0x2000022e

		case 1:
		if (RX[3] == 0xfe) { //Not be push
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <JoyStickControl+0x3b8>)
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	2bfe      	cmp	r3, #254	; 0xfe
 8001bea:	d108      	bne.n	8001bfe <JoyStickControl+0x31a>
			motor(0, 1);
 8001bec:	2101      	movs	r1, #1
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff f956 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <JoyStickControl+0x3bc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001bfc:	e039      	b.n	8001c72 <JoyStickControl+0x38e>
		}
		else if (RX[3] == 0xee) { //UP
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	2bee      	cmp	r3, #238	; 0xee
 8001c04:	d10a      	bne.n	8001c1c <JoyStickControl+0x338>
			x_axis_Moving_Status= 0;
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <JoyStickControl+0x3bc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, 1);
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <JoyStickControl+0x3c0>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f943 	bl	8000ea0 <motor>
 8001c1a:	e02a      	b.n	8001c72 <JoyStickControl+0x38e>
		}
		else if (RX[3] == 0xbe) { //Down
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c1e:	78db      	ldrb	r3, [r3, #3]
 8001c20:	2bbe      	cmp	r3, #190	; 0xbe
 8001c22:	d10b      	bne.n	8001c3c <JoyStickControl+0x358>
			x_axis_Moving_Status= 0;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <JoyStickControl+0x3bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, -1);
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <JoyStickControl+0x3c0>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f933 	bl	8000ea0 <motor>
 8001c3a:	e01a      	b.n	8001c72 <JoyStickControl+0x38e>
		}
		else if (RX[3] == 0x7e) { //left
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c3e:	78db      	ldrb	r3, [r3, #3]
 8001c40:	2b7e      	cmp	r3, #126	; 0x7e
 8001c42:	d108      	bne.n	8001c56 <JoyStickControl+0x372>
			x_axis_Moving_Status = 8;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <JoyStickControl+0x3bc>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff f926 	bl	8000ea0 <motor>
 8001c54:	e00d      	b.n	8001c72 <JoyStickControl+0x38e>
		}
		else if (RX[3] == 0xde) { //right
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	2bde      	cmp	r3, #222	; 0xde
 8001c5c:	d109      	bne.n	8001c72 <JoyStickControl+0x38e>
			x_axis_Moving_Status = 4;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <JoyStickControl+0x3bc>)
 8001c60:	2204      	movs	r2, #4
 8001c62:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001c66:	2101      	movs	r1, #1
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff f919 	bl	8000ea0 <motor>
 8001c6e:	e000      	b.n	8001c72 <JoyStickControl+0x38e>
		break;
 8001c70:	bf00      	nop
		}

	}

	switch (homing) {
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <JoyStickControl+0x3c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <JoyStickControl+0x3a0>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d103      	bne.n	8001c86 <JoyStickControl+0x3a2>
	case 0:
		break;
	case 1:
		Joy_Homing();
 8001c7e:	f7ff f9af 	bl	8000fe0 <Joy_Homing>
		break;
 8001c82:	e000      	b.n	8001c86 <JoyStickControl+0x3a2>
		break;
 8001c84:	bf00      	nop
	}

	RX_last = RX[4];
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c88:	791a      	ldrb	r2, [r3, #4]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <JoyStickControl+0x3c8>)
 8001c8c:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <JoyStickControl+0x3b8>)
 8001c90:	791a      	ldrb	r2, [r3, #4]
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <JoyStickControl+0x3cc>)
 8001c94:	701a      	strb	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000320 	.word	0x20000320
 8001ca0:	20000e68 	.word	0x20000e68
 8001ca4:	20000230 	.word	0x20000230
 8001ca8:	200003e0 	.word	0x200003e0
 8001cac:	2000032b 	.word	0x2000032b
 8001cb0:	2000032c 	.word	0x2000032c

08001cb4 <Calculate_Position>:

void Calculate_Position(float x_c1, float x_c2, float x_c3, float y_c1,
		float y_c2, float y_c3) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cbe:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cc2:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cc6:	edc7 1a02 	vstr	s3, [r7, #8]
 8001cca:	ed87 2a01 	vstr	s4, [r7, #4]
 8001cce:	edc7 2a00 	vstr	s5, [r7]
	int i = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
//Parameter use in Equation
//Trigonometry
	float a = x_c2 - x_c1;
 8001cd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float b = y_c2 - y_c1;
 8001ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float c = sqrt((a * a) + (b * b));
 8001cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cfa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	ee17 0a90 	vmov	r0, s15
 8001d0e:	f7fe fbc7 	bl	80004a0 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ec43 2b10 	vmov	d0, r2, r3
 8001d1a:	f008 fc01 	bl	800a520 <sqrt>
 8001d1e:	ec53 2b10 	vmov	r2, r3, d0
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fec3 	bl	8000ab0 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	623b      	str	r3, [r7, #32]
//float cos_zeta = a / c;
	float sin_zeta = b / c;
 8001d2e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3a:	edc7 7a07 	vstr	s15, [r7, #28]
//Calculate
	for (i = 0; i < 3; i++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d42:	e09b      	b.n	8001e7c <Calculate_Position+0x1c8>
		q = floor((i + 1) / 3);
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	3301      	adds	r3, #1
 8001d48:	4aa4      	ldr	r2, [pc, #656]	; (8001fdc <Calculate_Position+0x328>)
 8001d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4e:	17db      	asrs	r3, r3, #31
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fb92 	bl	800047c <__aeabi_i2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe fea6 	bl	8000ab0 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a9e      	ldr	r2, [pc, #632]	; (8001fe0 <Calculate_Position+0x32c>)
 8001d68:	6013      	str	r3, [r2, #0]
		imod3 = (i + 1) % 3;
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	1c59      	adds	r1, r3, #1
 8001d6e:	4b9b      	ldr	r3, [pc, #620]	; (8001fdc <Calculate_Position+0x328>)
 8001d70:	fb83 3201 	smull	r3, r2, r3, r1
 8001d74:	17cb      	asrs	r3, r1, #31
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	1aca      	subs	r2, r1, r3
 8001d80:	4b98      	ldr	r3, [pc, #608]	; (8001fe4 <Calculate_Position+0x330>)
 8001d82:	601a      	str	r2, [r3, #0]
		//Position of hole then not rotation
		x_pre_final[i] = x_c1 + (50 - (20 * ((2 - (2 * q)) / (imod3 + q))));
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <Calculate_Position+0x32c>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d96:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <Calculate_Position+0x330>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <Calculate_Position+0x32c>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001fe8 <Calculate_Position+0x334>
 8001dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	4a88      	ldr	r2, [pc, #544]	; (8001fec <Calculate_Position+0x338>)
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
		y_pre_final[i] = y_c[0] - (40 - (15 * ((2 - (2 * q)) / (imod3 + q))));
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <Calculate_Position+0x33c>)
 8001dd6:	ed93 7a00 	vldr	s14, [r3]
 8001dda:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <Calculate_Position+0x32c>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001de4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001de8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001dec:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <Calculate_Position+0x330>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <Calculate_Position+0x32c>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e06:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001e0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e0e:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001ff4 <Calculate_Position+0x340>
 8001e12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <Calculate_Position+0x344>)
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	edc3 7a00 	vstr	s15, [r3]
		//Position when rotation 25
		x_final_joy[i] = x_pre_final[i] + (15 * sin_zeta);
 8001e26:	4a71      	ldr	r2, [pc, #452]	; (8001fec <Calculate_Position+0x338>)
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e36:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001e3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e42:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <Calculate_Position+0x348>)
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	edc3 7a00 	vstr	s15, [r3]
		y_final_joy[i] = y_pre_final[i] + (20 * sin_zeta);
 8001e4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <Calculate_Position+0x344>)
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	ed93 7a00 	vldr	s14, [r3]
 8001e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e5e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	4a65      	ldr	r2, [pc, #404]	; (8002000 <Calculate_Position+0x34c>)
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++) {
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	3301      	adds	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f77f af60 	ble.w	8001d44 <Calculate_Position+0x90>
	}
//Second Row
	x_final_joy[3] = x_pre_final[0] + (15 * 2 * sin_zeta);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <Calculate_Position+0x338>)
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e8e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001e92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <Calculate_Position+0x348>)
 8001e9c:	edc3 7a03 	vstr	s15, [r3, #12]
	y_final_joy[3] = y_pre_final[0] + (20 * 2 * sin_zeta);
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <Calculate_Position+0x344>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eaa:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001ff4 <Calculate_Position+0x340>
 8001eae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <Calculate_Position+0x34c>)
 8001eb8:	edc3 7a03 	vstr	s15, [r3, #12]

	x_final_joy[4] = x_pre_final[1] + (15 * 2 * sin_zeta);
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <Calculate_Position+0x338>)
 8001ebe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001eca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <Calculate_Position+0x348>)
 8001ed4:	edc3 7a04 	vstr	s15, [r3, #16]
	y_final_joy[4] = y_pre_final[1] + (20 * 2 * sin_zeta);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <Calculate_Position+0x344>)
 8001eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ede:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001ff4 <Calculate_Position+0x340>
 8001ee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <Calculate_Position+0x34c>)
 8001ef0:	edc3 7a04 	vstr	s15, [r3, #16]

	x_final_joy[5] = x_pre_final[2] + (15 * 2 * sin_zeta);
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <Calculate_Position+0x338>)
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001efe:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001f02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <Calculate_Position+0x348>)
 8001f0c:	edc3 7a05 	vstr	s15, [r3, #20]
	y_final_joy[5] = y_pre_final[2] + (20 * 2 * sin_zeta);
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <Calculate_Position+0x344>)
 8001f12:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f1a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001ff4 <Calculate_Position+0x340>
 8001f1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <Calculate_Position+0x34c>)
 8001f28:	edc3 7a05 	vstr	s15, [r3, #20]
//Third Row
	x_final_joy[6] = x_pre_final[0] + (15 * 3 * sin_zeta);
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <Calculate_Position+0x338>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f36:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002004 <Calculate_Position+0x350>
 8001f3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <Calculate_Position+0x348>)
 8001f44:	edc3 7a06 	vstr	s15, [r3, #24]
	y_final_joy[6] = y_pre_final[0] + (20 * 3 * sin_zeta);
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <Calculate_Position+0x344>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f52:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002008 <Calculate_Position+0x354>
 8001f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <Calculate_Position+0x34c>)
 8001f60:	edc3 7a06 	vstr	s15, [r3, #24]

	x_final_joy[7] = x_pre_final[1] + (15 * 3 * sin_zeta);
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <Calculate_Position+0x338>)
 8001f66:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f6e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002004 <Calculate_Position+0x350>
 8001f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <Calculate_Position+0x348>)
 8001f7c:	edc3 7a07 	vstr	s15, [r3, #28]
	y_final_joy[7] = y_pre_final[1] + (20 * 3 * sin_zeta);
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <Calculate_Position+0x344>)
 8001f82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f8a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002008 <Calculate_Position+0x354>
 8001f8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <Calculate_Position+0x34c>)
 8001f98:	edc3 7a07 	vstr	s15, [r3, #28]

	x_final_joy[8] = x_pre_final[2] + (15 * 3 * sin_zeta);
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <Calculate_Position+0x338>)
 8001f9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fa6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002004 <Calculate_Position+0x350>
 8001faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <Calculate_Position+0x348>)
 8001fb4:	edc3 7a08 	vstr	s15, [r3, #32]
	y_final_joy[8] = y_pre_final[2] + (20 * 3 * sin_zeta);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <Calculate_Position+0x344>)
 8001fba:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fc2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002008 <Calculate_Position+0x354>
 8001fc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <Calculate_Position+0x34c>)
 8001fd0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	55555556 	.word	0x55555556
 8001fe0:	200003dc 	.word	0x200003dc
 8001fe4:	20000348 	.word	0x20000348
 8001fe8:	42480000 	.word	0x42480000
 8001fec:	2000034c 	.word	0x2000034c
 8001ff0:	20000330 	.word	0x20000330
 8001ff4:	42200000 	.word	0x42200000
 8001ff8:	20000370 	.word	0x20000370
 8001ffc:	20000394 	.word	0x20000394
 8002000:	200003b8 	.word	0x200003b8
 8002004:	42340000 	.word	0x42340000
 8002008:	42700000 	.word	0x42700000

0800200c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002010:	f3bf 8f4f 	dsb	sy
}
 8002014:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <__NVIC_SystemReset+0x24>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800201e:	4904      	ldr	r1, [pc, #16]	; (8002030 <__NVIC_SystemReset+0x24>)
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_SystemReset+0x28>)
 8002022:	4313      	orrs	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002026:	f3bf 8f4f 	dsb	sy
}
 800202a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <__NVIC_SystemReset+0x20>
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	05fa0004 	.word	0x05fa0004

08002038 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b0a0      	sub	sp, #128	; 0x80
 800203e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002040:	f002 fb94 	bl	800476c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002044:	f000 fda8 	bl	8002b98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002048:	f001 f8ce 	bl	80031e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800204c:	f001 f8ac 	bl	80031a8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002050:	f001 f852 	bl	80030f8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002054:	f000 ff0c 	bl	8002e70 <MX_TIM2_Init>
	MX_TIM1_Init();
 8002058:	f000 fe6a 	bl	8002d30 <MX_TIM1_Init>
	MX_TIM3_Init();
 800205c:	f000 ff5c 	bl	8002f18 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8002060:	f001 f876 	bl	8003150 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8002064:	f000 ffa6 	bl	8002fb4 <MX_TIM5_Init>
	MX_SPI3_Init();
 8002068:	f000 fe2c 	bl	8002cc4 <MX_SPI3_Init>
	MX_TIM11_Init();
 800206c:	f000 fff0 	bl	8003050 <MX_TIM11_Init>
	MX_I2C2_Init();
 8002070:	f000 fdfa 	bl	8002c68 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8002074:	2003      	movs	r0, #3
 8002076:	f7ff fb79 	bl	800176c <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800207a:	2104      	movs	r1, #4
 800207c:	48ac      	ldr	r0, [pc, #688]	; (8002330 <main+0x2f8>)
 800207e:	f005 fe33 	bl	8007ce8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002082:	48ac      	ldr	r0, [pc, #688]	; (8002334 <main+0x2fc>)
 8002084:	f005 fad0 	bl	8007628 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002088:	48ab      	ldr	r0, [pc, #684]	; (8002338 <main+0x300>)
 800208a:	f005 fa73 	bl	8007574 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800208e:	2100      	movs	r1, #0
 8002090:	48a9      	ldr	r0, [pc, #676]	; (8002338 <main+0x300>)
 8002092:	f005 fbf7 	bl	8007884 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8002096:	48a9      	ldr	r0, [pc, #676]	; (800233c <main+0x304>)
 8002098:	f005 fac6 	bl	8007628 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 800209c:	4ba8      	ldr	r3, [pc, #672]	; (8002340 <main+0x308>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fa1d 	bl	80004e4 <__aeabi_ul2d>
 80020aa:	a39f      	add	r3, pc, #636	; (adr r3, 8002328 <main+0x2f0>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fb78 	bl	80007a4 <__aeabi_ddiv>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	4ba1      	ldr	r3, [pc, #644]	; (8002344 <main+0x30c>)
 80020be:	e9c3 0100 	strd	r0, r1, [r3]
	t_DeAcce = traject_us / 1000000.00;
 80020c2:	4b9f      	ldr	r3, [pc, #636]	; (8002340 <main+0x308>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fa0a 	bl	80004e4 <__aeabi_ul2d>
 80020d0:	a395      	add	r3, pc, #596	; (adr r3, 8002328 <main+0x2f0>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fb65 	bl	80007a4 <__aeabi_ddiv>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4b99      	ldr	r3, [pc, #612]	; (8002348 <main+0x310>)
 80020e4:	e9c3 0100 	strd	r0, r1, [r3]
	t_Cons = traject_us / 1000000.00;
 80020e8:	4b95      	ldr	r3, [pc, #596]	; (8002340 <main+0x308>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe f9f7 	bl	80004e4 <__aeabi_ul2d>
 80020f6:	a38c      	add	r3, pc, #560	; (adr r3, 8002328 <main+0x2f0>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fb52 	bl	80007a4 <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	4b90      	ldr	r3, [pc, #576]	; (800234c <main+0x314>)
 800210a:	e9c3 0100 	strd	r0, r1, [r3]
	t_count = traject_us / 1000000.00;
 800210e:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <main+0x308>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe f9e4 	bl	80004e4 <__aeabi_ul2d>
 800211c:	a382      	add	r3, pc, #520	; (adr r3, 8002328 <main+0x2f0>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fb3f 	bl	80007a4 <__aeabi_ddiv>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <main+0x318>)
 8002130:	e9c3 0100 	strd	r0, r1, [r3]
	t_diff = traject_us / 1000000.00;
 8002134:	4b82      	ldr	r3, [pc, #520]	; (8002340 <main+0x308>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe f9d1 	bl	80004e4 <__aeabi_ul2d>
 8002142:	a379      	add	r3, pc, #484	; (adr r3, 8002328 <main+0x2f0>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fb2c 	bl	80007a4 <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <main+0x31c>)
 8002156:	e9c3 0100 	strd	r0, r1, [r3]

	hmodbus.huart = &huart2;
 800215a:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <main+0x320>)
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <main+0x324>)
 800215e:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim11;
 8002160:	4a7d      	ldr	r2, [pc, #500]	; (8002358 <main+0x320>)
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <main+0x328>)
 8002164:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8002166:	4a7c      	ldr	r2, [pc, #496]	; (8002358 <main+0x320>)
 8002168:	2315      	movs	r3, #21
 800216a:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 800216c:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <main+0x320>)
 800216e:	23c8      	movs	r3, #200	; 0xc8
 8002170:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8002172:	497c      	ldr	r1, [pc, #496]	; (8002364 <main+0x32c>)
 8002174:	4878      	ldr	r0, [pc, #480]	; (8002358 <main+0x320>)
 8002176:	f7fe ffef 	bl	8001158 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 800217a:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <main+0x330>)
 800217c:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8002180:	461c      	mov	r4, r3
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	602b      	str	r3, [r5, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <main+0x334>)
 800218c:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8002190:	461c      	mov	r4, r3
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	602b      	str	r3, [r5, #0]
			.LaserOn = 1, .GripperPower = 2, .GripperPicking = 6,
			.GripperPlacing = 10 };

	struct yaxisMovingStatusBit yaxisMovingStatusData =
 800219a:	4b75      	ldr	r3, [pc, #468]	; (8002370 <main+0x338>)
 800219c:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80021a0:	461c      	mov	r4, r3
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021aa:	e885 0003 	stmia.w	r5, {r0, r1}
			{ .JogPick = 1, .JogPlease = 2, .Home = 4, .GoPick = 8, .GoPlace =
					16, .Gopoint = 32 };

	struct xaxisMovingStatusBit xaxisMovingStatusData = { .Home = 1, .Run = 2,
 80021ae:	4b71      	ldr	r3, [pc, #452]	; (8002374 <main+0x33c>)
 80021b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.JogLeft = 4, .JogRight = 8 };

	x_axis_Actual_Position= 0;
 80021ba:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <main+0x32c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	x_axis_Target_Speed= 2500;
 80021c2:	4a68      	ldr	r2, [pc, #416]	; (8002364 <main+0x32c>)
 80021c4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021c8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	x_axis_Target_Acceleration_Time= 2;
 80021cc:	4a65      	ldr	r2, [pc, #404]	; (8002364 <main+0x32c>)
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	while (1) {

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		static uint64_t timestamp_Endeffecter = 0;
		int64_t GetTicku = micros();
 80021d4:	f001 f8d8 	bl	8003388 <micros>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

		Modbus_Protocal_Worker();
 80021e0:	f7ff f846 	bl	8001270 <Modbus_Protocal_Worker>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 80021e4:	f002 fb28 	bl	8004838 <HAL_GetTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2200      	movs	r2, #0
 80021ec:	4698      	mov	r8, r3
 80021ee:	4691      	mov	r9, r2
 80021f0:	4b61      	ldr	r3, [pc, #388]	; (8002378 <main+0x340>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	4590      	cmp	r8, r2
 80021f8:	eb79 0303 	sbcs.w	r3, r9, r3
 80021fc:	d323      	bcc.n	8002246 <main+0x20e>
			timestamp_heartbeat = HAL_GetTick() + 200;
 80021fe:	f002 fb1b 	bl	8004838 <HAL_GetTick>
 8002202:	4603      	mov	r3, r0
 8002204:	33c8      	adds	r3, #200	; 0xc8
 8002206:	2200      	movs	r2, #0
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	627a      	str	r2, [r7, #36]	; 0x24
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <main+0x340>)
 800220e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002212:	e9c3 1200 	strd	r1, r2, [r3]

			Heartbeat_Protocol= 22881;
 8002216:	4a53      	ldr	r2, [pc, #332]	; (8002364 <main+0x32c>)
 8002218:	f645 1361 	movw	r3, #22881	; 0x5961
 800221c:	8013      	strh	r3, [r2, #0]

			y_axis_Actual_Position= (int32_t)(PosY* 10);
 800221e:	4b57      	ldr	r3, [pc, #348]	; (800237c <main+0x344>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002230:	ee17 3a90 	vmov	r3, s15
 8002234:	b29b      	uxth	r3, r3
 8002236:	4a4b      	ldr	r2, [pc, #300]	; (8002364 <main+0x32c>)
 8002238:	8453      	strh	r3, [r2, #34]	; 0x22
			y_axis_Actual_Speed= 0;
 800223a:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <main+0x32c>)
 800223c:	2300      	movs	r3, #0
 800223e:	8493      	strh	r3, [r2, #36]	; 0x24
			y_axis_Actual_Acceleration= 0;
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <main+0x32c>)
 8002242:	2300      	movs	r3, #0
 8002244:	84d3      	strh	r3, [r2, #38]	; 0x26
//		case 6:
//			EndEffector_Event(Test_Stop);
//			state_laser_test = 0;
//		}

		switch (State) {
 8002246:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <main+0x348>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b08      	cmp	r3, #8
 800224c:	f200 846e 	bhi.w	8002b2c <main+0xaf4>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <main+0x220>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	0800227d 	.word	0x0800227d
 800225c:	08002287 	.word	0x08002287
 8002260:	080022a1 	.word	0x080022a1
 8002264:	0800252d 	.word	0x0800252d
 8002268:	08002533 	.word	0x08002533
 800226c:	08002689 	.word	0x08002689
 8002270:	08002539 	.word	0x08002539
 8002274:	08002a33 	.word	0x08002a33
 8002278:	08002a3b 	.word	0x08002a3b

		case INIT:
			State = INIT_HOMING;
 800227c:	4a40      	ldr	r2, [pc, #256]	; (8002380 <main+0x348>)
 800227e:	2301      	movs	r3, #1
 8002280:	7013      	strb	r3, [r2, #0]
			break;
 8002282:	f000 bc53 	b.w	8002b2c <main+0xaf4>

		case INIT_HOMING:
			y_axis_Moving_Status= yaxisMovingStatusData.Home;
 8002286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002288:	b29b      	uxth	r3, r3
 800228a:	4a36      	ldr	r2, [pc, #216]	; (8002364 <main+0x32c>)
 800228c:	8413      	strh	r3, [r2, #32]
			x_axis_Moving_Status = xaxisMovingStatusData.Home;
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	b29b      	uxth	r3, r3
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <main+0x32c>)
 8002294:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
			Init_Homing();
 8002298:	f7fe fe2c 	bl	8000ef4 <Init_Homing>

			break;
 800229c:	f000 bc46 	b.w	8002b2c <main+0xaf4>

			case IDLE: //HOME

			if (HAL_GetTick() >= timestamp_Endeffecter) {
 80022a0:	f002 faca 	bl	8004838 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2200      	movs	r2, #0
 80022a8:	469a      	mov	sl, r3
 80022aa:	4693      	mov	fp, r2
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <main+0x34c>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	4592      	cmp	sl, r2
 80022b4:	eb7b 0303 	sbcs.w	r3, fp, r3
 80022b8:	d373      	bcc.n	80023a2 <main+0x36a>
				timestamp_Endeffecter = HAL_GetTick() + 200;
 80022ba:	f002 fabd 	bl	8004838 <HAL_GetTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	33c8      	adds	r3, #200	; 0xc8
 80022c2:	2200      	movs	r2, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	61fa      	str	r2, [r7, #28]
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <main+0x34c>)
 80022ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022ce:	e9c3 1200 	strd	r1, r2, [r3]
				if (End_Effector_Status == EndEffectorStatusData.LaserOn) {
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <main+0x32c>)
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022da:	429a      	cmp	r2, r3
 80022dc:	d103      	bne.n	80022e6 <main+0x2ae>
					EndEffector_Event(Test_Start);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff fa44 	bl	800176c <EndEffector_Event>
 80022e4:	e012      	b.n	800230c <main+0x2d4>
				} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <main+0x32c>)
 80022e8:	889b      	ldrh	r3, [r3, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d103      	bne.n	80022fa <main+0x2c2>
					EndEffector_Event(Test_Stop);
 80022f2:	2002      	movs	r0, #2
 80022f4:	f7ff fa3a 	bl	800176c <EndEffector_Event>
 80022f8:	e008      	b.n	800230c <main+0x2d4>
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <main+0x32c>)
 80022fc:	889b      	ldrh	r3, [r3, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002302:	429a      	cmp	r2, r3
 8002304:	d102      	bne.n	800230c <main+0x2d4>
					EndEffector_Event(Run_Mode);
 8002306:	2006      	movs	r0, #6
 8002308:	f7ff fa30 	bl	800176c <EndEffector_Event>
				}

				if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <main+0x32c>)
 800230e:	889b      	ldrh	r3, [r3, #4]
 8002310:	461a      	mov	r2, r3
 8002312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002314:	429a      	cmp	r2, r3
 8002316:	d137      	bne.n	8002388 <main+0x350>
//					EndEffector_Event(Run_Mode);
					EndEffector_Event(Pick);
 8002318:	2008      	movs	r0, #8
 800231a:	f7ff fa27 	bl	800176c <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 800231e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002320:	b29b      	uxth	r3, r3
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <main+0x32c>)
 8002324:	8093      	strh	r3, [r2, #4]
 8002326:	e03c      	b.n	80023a2 <main+0x36a>
 8002328:	00000000 	.word	0x00000000
 800232c:	412e8480 	.word	0x412e8480
 8002330:	20000544 	.word	0x20000544
 8002334:	200005f8 	.word	0x200005f8
 8002338:	20000490 	.word	0x20000490
 800233c:	200006ac 	.word	0x200006ac
 8002340:	20000238 	.word	0x20000238
 8002344:	20000248 	.word	0x20000248
 8002348:	20000250 	.word	0x20000250
 800234c:	20000258 	.word	0x20000258
 8002350:	20000260 	.word	0x20000260
 8002354:	20000268 	.word	0x20000268
 8002358:	20000990 	.word	0x20000990
 800235c:	20000814 	.word	0x20000814
 8002360:	20000760 	.word	0x20000760
 8002364:	20000e68 	.word	0x20000e68
 8002368:	0800a6f4 	.word	0x0800a6f4
 800236c:	0800a708 	.word	0x0800a708
 8002370:	0800a71c 	.word	0x0800a71c
 8002374:	0800a734 	.word	0x0800a734
 8002378:	200010b0 	.word	0x200010b0
 800237c:	20001010 	.word	0x20001010
 8002380:	20000270 	.word	0x20000270
 8002384:	200010b8 	.word	0x200010b8
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 8002388:	4baf      	ldr	r3, [pc, #700]	; (8002648 <main+0x610>)
 800238a:	889b      	ldrh	r3, [r3, #4]
 800238c:	461a      	mov	r2, r3
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <main+0x36a>
//					EndEffector_Event(Run_Mode);
					EndEffector_Event(Place);
 8002394:	2009      	movs	r0, #9
 8002396:	f7ff f9e9 	bl	800176c <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 800239a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239c:	b29b      	uxth	r3, r3
 800239e:	4aaa      	ldr	r2, [pc, #680]	; (8002648 <main+0x610>)
 80023a0:	8093      	strh	r3, [r2, #4]
				}
			}

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 80023a2:	4ba9      	ldr	r3, [pc, #676]	; (8002648 <main+0x610>)
 80023a4:	885b      	ldrh	r3, [r3, #2]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d114      	bne.n	80023d8 <main+0x3a0>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4aa5      	ldr	r2, [pc, #660]	; (8002648 <main+0x610>)
 80023b4:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff f9d8 	bl	800176c <EndEffector_Event>
				Base_System_Status = 0;
 80023bc:	4aa2      	ldr	r2, [pc, #648]	; (8002648 <main+0x610>)
 80023be:	2300      	movs	r3, #0
 80023c0:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPick;
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4aa0      	ldr	r2, [pc, #640]	; (8002648 <main+0x610>)
 80023c8:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PICK;
 80023ca:	4aa0      	ldr	r2, [pc, #640]	; (800264c <main+0x614>)
 80023cc:	2300      	movs	r3, #0
 80023ce:	7013      	strb	r3, [r2, #0]
				State = SETPICKTRAY;
 80023d0:	4a9f      	ldr	r2, [pc, #636]	; (8002650 <main+0x618>)
 80023d2:	2303      	movs	r3, #3
 80023d4:	7013      	strb	r3, [r2, #0]
 80023d6:	e019      	b.n	800240c <main+0x3d4>
			} else if(Base_System_Status == BaseSystemStatusData.SetPlaceTray) {
 80023d8:	4b9b      	ldr	r3, [pc, #620]	; (8002648 <main+0x610>)
 80023da:	885b      	ldrh	r3, [r3, #2]
 80023dc:	461a      	mov	r2, r3
 80023de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d113      	bne.n	800240c <main+0x3d4>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80023e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4a97      	ldr	r2, [pc, #604]	; (8002648 <main+0x610>)
 80023ea:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7ff f9bd 	bl	800176c <EndEffector_Event>
				Base_System_Status = 0;
 80023f2:	4a95      	ldr	r2, [pc, #596]	; (8002648 <main+0x610>)
 80023f4:	2300      	movs	r3, #0
 80023f6:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPlease;
 80023f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4a92      	ldr	r2, [pc, #584]	; (8002648 <main+0x610>)
 80023fe:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PLACE;
 8002400:	4a92      	ldr	r2, [pc, #584]	; (800264c <main+0x614>)
 8002402:	2301      	movs	r3, #1
 8002404:	7013      	strb	r3, [r2, #0]
				State = SETPLACETRAY;
 8002406:	4a92      	ldr	r2, [pc, #584]	; (8002650 <main+0x618>)
 8002408:	2304      	movs	r3, #4
 800240a:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.RunPointMode) {
 800240c:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <main+0x610>)
 800240e:	885b      	ldrh	r3, [r3, #2]
 8002410:	461a      	mov	r2, r3
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	429a      	cmp	r2, r3
 8002416:	d169      	bne.n	80024ec <main+0x4b4>
				Base_System_Status = 0;
 8002418:	4a8b      	ldr	r2, [pc, #556]	; (8002648 <main+0x610>)
 800241a:	2300      	movs	r3, #0
 800241c:	8053      	strh	r3, [r2, #2]
//				EndEffector_Event(Run_Mode);
				x_axis_Target_Position = Goal_Point_x;
 800241e:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <main+0x610>)
 8002420:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002424:	4a88      	ldr	r2, [pc, #544]	; (8002648 <main+0x610>)
 8002426:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	b29b      	uxth	r3, r3
 800242e:	4a86      	ldr	r2, [pc, #536]	; (8002648 <main+0x610>)
 8002430:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
				HAL_Delay(250);
 8002434:	20fa      	movs	r0, #250	; 0xfa
 8002436:	f002 fa0b 	bl	8004850 <HAL_Delay>
				pos_i = PosY;
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <main+0x61c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <main+0x620>)
 8002440:	601a      	str	r2, [r3, #0]

				if(Goal_Point_y >= 0 && Goal_Point_y <= 3500) {
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <main+0x610>)
 8002444:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8002448:	f640 53ac 	movw	r3, #3500	; 0xdac
 800244c:	429a      	cmp	r2, r3
 800244e:	d80e      	bhi.n	800246e <main+0x436>
					pos_f = (float)Goal_Point_y/10;
 8002450:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <main+0x610>)
 8002452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <main+0x624>)
 8002468:	edc3 7a00 	vstr	s15, [r3]
 800246c:	e01e      	b.n	80024ac <main+0x474>
				} else if(Goal_Point_y >= 65535-3500 && Goal_Point_y <= 65535) {
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <main+0x610>)
 8002470:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8002474:	f24f 2352 	movw	r3, #62034	; 0xf252
 8002478:	429a      	cmp	r2, r3
 800247a:	d917      	bls.n	80024ac <main+0x474>
					pos_f = -(float)(65536%Goal_Point_y)/10;
 800247c:	4b72      	ldr	r3, [pc, #456]	; (8002648 <main+0x610>)
 800247e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002482:	4619      	mov	r1, r3
 8002484:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002488:	fb92 f3f1 	sdiv	r3, r2, r1
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	eeb1 7a67 	vneg.f32	s14, s15
 800249e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80024a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <main+0x624>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]
				}

				Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <main+0x620>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fd fff5 	bl	80004a0 <__aeabi_f2d>
 80024b6:	4604      	mov	r4, r0
 80024b8:	460d      	mov	r5, r1
 80024ba:	4b68      	ldr	r3, [pc, #416]	; (800265c <main+0x624>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd ffee 	bl	80004a0 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	ed9f 3b57 	vldr	d3, [pc, #348]	; 8002628 <main+0x5f0>
 80024cc:	ed9f 2b58 	vldr	d2, [pc, #352]	; 8002630 <main+0x5f8>
 80024d0:	ec43 2b11 	vmov	d1, r2, r3
 80024d4:	ec45 4b10 	vmov	d0, r4, r5
 80024d8:	f001 f92e 	bl	8003738 <Trajectory_Gen>
				y_axis_Moving_Status = yaxisMovingStatusData.Gopoint;
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4a59      	ldr	r2, [pc, #356]	; (8002648 <main+0x610>)
 80024e2:	8413      	strh	r3, [r2, #32]
				State = RUNPOINTMODE;
 80024e4:	4a5a      	ldr	r2, [pc, #360]	; (8002650 <main+0x618>)
 80024e6:	2306      	movs	r3, #6
 80024e8:	7013      	strb	r3, [r2, #0]
 80024ea:	e011      	b.n	8002510 <main+0x4d8>

			} else if(Base_System_Status == BaseSystemStatusData.RunTrayMode) {
 80024ec:	4b56      	ldr	r3, [pc, #344]	; (8002648 <main+0x610>)
 80024ee:	885b      	ldrh	r3, [r3, #2]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10b      	bne.n	8002510 <main+0x4d8>
				Base_System_Status = 0;
 80024f8:	4a53      	ldr	r2, [pc, #332]	; (8002648 <main+0x610>)
 80024fa:	2300      	movs	r3, #0
 80024fc:	8053      	strh	r3, [r2, #2]
				position_index = 0;
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <main+0x628>)
 8002500:	2300      	movs	r3, #0
 8002502:	6013      	str	r3, [r2, #0]
				State = RUNTRAYMODE;
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <main+0x618>)
 8002506:	2305      	movs	r3, #5
 8002508:	7013      	strb	r3, [r2, #0]
				State_RUNTRAYMODE = GOPICK;
 800250a:	4a56      	ldr	r2, [pc, #344]	; (8002664 <main+0x62c>)
 800250c:	2300      	movs	r3, #0
 800250e:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.Home) {
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <main+0x610>)
 8002512:	885b      	ldrh	r3, [r3, #2]
 8002514:	461a      	mov	r2, r3
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8304 	bne.w	8002b26 <main+0xaee>
				Base_System_Status = 0;
 800251e:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <main+0x610>)
 8002520:	2300      	movs	r3, #0
 8002522:	8053      	strh	r3, [r2, #2]
				State = INIT_HOMING;
 8002524:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <main+0x618>)
 8002526:	2301      	movs	r3, #1
 8002528:	7013      	strb	r3, [r2, #0]
			}
			break;
 800252a:	e2fc      	b.n	8002b26 <main+0xaee>

			case SETPICKTRAY:
			JoyStickControl();
 800252c:	f7ff f9da 	bl	80018e4 <JoyStickControl>

			break;
 8002530:	e2fc      	b.n	8002b2c <main+0xaf4>

			case SETPLACETRAY:
			JoyStickControl();
 8002532:	f7ff f9d7 	bl	80018e4 <JoyStickControl>
			break;
 8002536:	e2f9      	b.n	8002b2c <main+0xaf4>

			case RUNPOINTMODE:
			if (GetTicku >= timestamp_traject) {
 8002538:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <main+0x630>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	4290      	cmp	r0, r2
 8002544:	eb71 0303 	sbcs.w	r3, r1, r3
 8002548:	d31f      	bcc.n	800258a <main+0x552>
				timestamp_traject = GetTicku + traject_us;
 800254a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <main+0x634>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	1884      	adds	r4, r0, r2
 8002556:	613c      	str	r4, [r7, #16]
 8002558:	eb41 0303 	adc.w	r3, r1, r3
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	4b42      	ldr	r3, [pc, #264]	; (8002668 <main+0x630>)
 8002560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002564:	e9c3 1200 	strd	r1, r2, [r3]
				Trajectory_Eva();
 8002568:	f001 fa3a 	bl	80039e0 <Trajectory_Eva>
				read_pos();
 800256c:	f7fe fc72 	bl	8000e54 <read_pos>
				PID(x);
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <main+0x638>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fa99 	bl	8000ab0 <__aeabi_d2f>
 800257e:	4603      	mov	r3, r0
 8002580:	ee00 3a10 	vmov	s0, r3
 8002584:	f000 ff3c 	bl	8003400 <PID>
				pos_i = PosY;
				y_axis_Moving_Status = 0;

				State = IDLE;
			}
			break;
 8002588:	e2d0      	b.n	8002b2c <main+0xaf4>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <main+0x624>)
 800258c:	ed93 7a00 	vldr	s14, [r3]
 8002590:	4b30      	ldr	r3, [pc, #192]	; (8002654 <main+0x61c>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	ee17 0a90 	vmov	r0, s15
 800259e:	f7fd ff7f 	bl	80004a0 <__aeabi_f2d>
 80025a2:	a325      	add	r3, pc, #148	; (adr r3, 8002638 <main+0x600>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe fa4e 	bl	8000a48 <__aeabi_dcmple>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d100      	bne.n	80025b4 <main+0x57c>
			break;
 80025b2:	e2bb      	b.n	8002b2c <main+0xaf4>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <main+0x624>)
 80025b6:	ed93 7a00 	vldr	s14, [r3]
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <main+0x61c>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ff6a 	bl	80004a0 <__aeabi_f2d>
 80025cc:	a31c      	add	r3, pc, #112	; (adr r3, 8002640 <main+0x608>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe fa43 	bl	8000a5c <__aeabi_dcmpge>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <main+0x5a6>
			break;
 80025dc:	e2a6      	b.n	8002b2c <main+0xaf4>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <main+0x63c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2300      	movs	r3, #0
 80025e4:	6353      	str	r3, [r2, #52]	; 0x34
				Intregral = 0;
 80025e6:	4a24      	ldr	r2, [pc, #144]	; (8002678 <main+0x640>)
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	6013      	str	r3, [r2, #0]
				Dutyfeedback = 0;
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <main+0x644>)
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	6013      	str	r3, [r2, #0]
				v = 0;
 80025f6:	4922      	ldr	r1, [pc, #136]	; (8002680 <main+0x648>)
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
				a = 0;
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <main+0x64c>)
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9c1 2300 	strd	r2, r3, [r1]
				pos_i = PosY;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <main+0x61c>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <main+0x620>)
 8002618:	601a      	str	r2, [r3, #0]
				y_axis_Moving_Status = 0;
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <main+0x610>)
 800261c:	2300      	movs	r3, #0
 800261e:	8413      	strh	r3, [r2, #32]
				State = IDLE;
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <main+0x618>)
 8002622:	2302      	movs	r3, #2
 8002624:	7013      	strb	r3, [r2, #0]
			break;
 8002626:	e281      	b.n	8002b2c <main+0xaf4>
 8002628:	00000000 	.word	0x00000000
 800262c:	40b04100 	.word	0x40b04100
 8002630:	00000000 	.word	0x00000000
 8002634:	408d8800 	.word	0x408d8800
 8002638:	9999999a 	.word	0x9999999a
 800263c:	3fc99999 	.word	0x3fc99999
 8002640:	9999999a 	.word	0x9999999a
 8002644:	bfc99999 	.word	0xbfc99999
 8002648:	20000e68 	.word	0x20000e68
 800264c:	200010aa 	.word	0x200010aa
 8002650:	20000270 	.word	0x20000270
 8002654:	20001010 	.word	0x20001010
 8002658:	2000095c 	.word	0x2000095c
 800265c:	20000960 	.word	0x20000960
 8002660:	200010a4 	.word	0x200010a4
 8002664:	200010a8 	.word	0x200010a8
 8002668:	200010c0 	.word	0x200010c0
 800266c:	20000238 	.word	0x20000238
 8002670:	20000968 	.word	0x20000968
 8002674:	20000490 	.word	0x20000490
 8002678:	20000984 	.word	0x20000984
 800267c:	20000980 	.word	0x20000980
 8002680:	20000970 	.word	0x20000970
 8002684:	20000978 	.word	0x20000978

			case RUNTRAYMODE:
			switch (State_RUNTRAYMODE) {
 8002688:	4baf      	ldr	r3, [pc, #700]	; (8002948 <main+0x910>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <main+0x660>
 8002690:	2b01      	cmp	r3, #1
 8002692:	f000 80d0 	beq.w	8002836 <main+0x7fe>
					break;
				}
				break;
			}

			break;
 8002696:	e249      	b.n	8002b2c <main+0xaf4>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPick;
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	b29b      	uxth	r3, r3
 800269c:	4aab      	ldr	r2, [pc, #684]	; (800294c <main+0x914>)
 800269e:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 80026a0:	4bab      	ldr	r3, [pc, #684]	; (8002950 <main+0x918>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <main+0x676>
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d03c      	beq.n	8002726 <main+0x6ee>
				break;
 80026ac:	e1c0      	b.n	8002a30 <main+0x9f8>
					pos_i = PosY;
 80026ae:	4ba9      	ldr	r3, [pc, #676]	; (8002954 <main+0x91c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4ba9      	ldr	r3, [pc, #676]	; (8002958 <main+0x920>)
 80026b4:	601a      	str	r2, [r3, #0]
					pos_f = Pick_Point_Y[position_index];
 80026b6:	4ba9      	ldr	r3, [pc, #676]	; (800295c <main+0x924>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4aa9      	ldr	r2, [pc, #676]	; (8002960 <main+0x928>)
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4ba8      	ldr	r3, [pc, #672]	; (8002964 <main+0x92c>)
 80026c4:	601a      	str	r2, [r3, #0]
					x_axis_Target_Position = Pick_Point_X[position_index];
 80026c6:	4ba5      	ldr	r3, [pc, #660]	; (800295c <main+0x924>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4aa7      	ldr	r2, [pc, #668]	; (8002968 <main+0x930>)
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4a9b      	ldr	r2, [pc, #620]	; (800294c <main+0x914>)
 80026e0:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 80026e4:	4b9c      	ldr	r3, [pc, #624]	; (8002958 <main+0x920>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fed9 	bl	80004a0 <__aeabi_f2d>
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	4b9c      	ldr	r3, [pc, #624]	; (8002964 <main+0x92c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fed2 	bl	80004a0 <__aeabi_f2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	ed9f 3b89 	vldr	d3, [pc, #548]	; 8002928 <main+0x8f0>
 8002704:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 8002930 <main+0x8f8>
 8002708:	ec43 2b11 	vmov	d1, r2, r3
 800270c:	ec45 4b10 	vmov	d0, r4, r5
 8002710:	f001 f812 	bl	8003738 <Trajectory_Gen>
					x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	b29b      	uxth	r3, r3
 8002718:	4a8c      	ldr	r2, [pc, #560]	; (800294c <main+0x914>)
 800271a:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
					State_Control = TRAJECTEVA_PID;
 800271e:	4a8c      	ldr	r2, [pc, #560]	; (8002950 <main+0x918>)
 8002720:	2301      	movs	r3, #1
 8002722:	7013      	strb	r3, [r2, #0]
					break;
 8002724:	e086      	b.n	8002834 <main+0x7fc>
					if (GetTicku >= timestamp_traject) {
 8002726:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800272a:	4b90      	ldr	r3, [pc, #576]	; (800296c <main+0x934>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	4290      	cmp	r0, r2
 8002732:	eb71 0303 	sbcs.w	r3, r1, r3
 8002736:	d31f      	bcc.n	8002778 <main+0x740>
						timestamp_traject = GetTicku + traject_us;
 8002738:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800273c:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <main+0x938>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	1884      	adds	r4, r0, r2
 8002744:	60bc      	str	r4, [r7, #8]
 8002746:	eb41 0303 	adc.w	r3, r1, r3
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b87      	ldr	r3, [pc, #540]	; (800296c <main+0x934>)
 800274e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002752:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002756:	f001 f943 	bl	80039e0 <Trajectory_Eva>
						read_pos();
 800275a:	f7fe fb7b 	bl	8000e54 <read_pos>
						PID(x);
 800275e:	4b85      	ldr	r3, [pc, #532]	; (8002974 <main+0x93c>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe f9a2 	bl	8000ab0 <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	ee00 3a10 	vmov	s0, r3
 8002772:	f000 fe45 	bl	8003400 <PID>
					break;
 8002776:	e05c      	b.n	8002832 <main+0x7fa>
					} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 8002778:	4b7a      	ldr	r3, [pc, #488]	; (8002964 <main+0x92c>)
 800277a:	ed93 7a00 	vldr	s14, [r3]
 800277e:	4b75      	ldr	r3, [pc, #468]	; (8002954 <main+0x91c>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	ee17 0a90 	vmov	r0, s15
 800278c:	f7fd fe88 	bl	80004a0 <__aeabi_f2d>
 8002790:	a369      	add	r3, pc, #420	; (adr r3, 8002938 <main+0x900>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fe f957 	bl	8000a48 <__aeabi_dcmple>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d100      	bne.n	80027a2 <main+0x76a>
					break;
 80027a0:	e047      	b.n	8002832 <main+0x7fa>
					} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 80027a2:	4b70      	ldr	r3, [pc, #448]	; (8002964 <main+0x92c>)
 80027a4:	ed93 7a00 	vldr	s14, [r3]
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <main+0x91c>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b2:	ee17 0a90 	vmov	r0, s15
 80027b6:	f7fd fe73 	bl	80004a0 <__aeabi_f2d>
 80027ba:	a361      	add	r3, pc, #388	; (adr r3, 8002940 <main+0x908>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fe f94c 	bl	8000a5c <__aeabi_dcmpge>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d100      	bne.n	80027cc <main+0x794>
					break;
 80027ca:	e032      	b.n	8002832 <main+0x7fa>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <main+0x940>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2300      	movs	r3, #0
 80027d2:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 80027d4:	4a69      	ldr	r2, [pc, #420]	; (800297c <main+0x944>)
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 80027dc:	4a68      	ldr	r2, [pc, #416]	; (8002980 <main+0x948>)
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	6013      	str	r3, [r2, #0]
						v = 0;
 80027e4:	4967      	ldr	r1, [pc, #412]	; (8002984 <main+0x94c>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 80027f2:	4965      	ldr	r1, [pc, #404]	; (8002988 <main+0x950>)
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9c1 2300 	strd	r2, r3, [r1]
						EndEffector_Event(Pick);
 8002800:	2008      	movs	r0, #8
 8002802:	f7fe ffb3 	bl	800176c <EndEffector_Event>
						pos_i = PosY;
 8002806:	4b53      	ldr	r3, [pc, #332]	; (8002954 <main+0x91c>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <main+0x920>)
 800280c:	601a      	str	r2, [r3, #0]
						pos_i = PosY;
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <main+0x91c>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <main+0x920>)
 8002814:	601a      	str	r2, [r3, #0]
						pos_f = Place_Point_Y[position_index];
 8002816:	4b51      	ldr	r3, [pc, #324]	; (800295c <main+0x924>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5c      	ldr	r2, [pc, #368]	; (800298c <main+0x954>)
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b50      	ldr	r3, [pc, #320]	; (8002964 <main+0x92c>)
 8002824:	601a      	str	r2, [r3, #0]
						State_Control = TRAJECTGEN;
 8002826:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <main+0x918>)
 8002828:	2300      	movs	r3, #0
 800282a:	7013      	strb	r3, [r2, #0]
						State_RUNTRAYMODE = GOPLACE;
 800282c:	4a46      	ldr	r2, [pc, #280]	; (8002948 <main+0x910>)
 800282e:	2301      	movs	r3, #1
 8002830:	7013      	strb	r3, [r2, #0]
					break;
 8002832:	bf00      	nop
				break;
 8002834:	e0fc      	b.n	8002a30 <main+0x9f8>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPlace;
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002838:	b29b      	uxth	r3, r3
 800283a:	4a44      	ldr	r2, [pc, #272]	; (800294c <main+0x914>)
 800283c:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 800283e:	4b44      	ldr	r3, [pc, #272]	; (8002950 <main+0x918>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <main+0x814>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d030      	beq.n	80028ac <main+0x874>
				break;
 800284a:	e0f0      	b.n	8002a2e <main+0x9f6>
					x_axis_Target_Position= Place_Point_X[position_index];
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <main+0x924>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <main+0x958>)
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285e:	ee17 3a90 	vmov	r3, s15
 8002862:	b29b      	uxth	r3, r3
 8002864:	4a39      	ldr	r2, [pc, #228]	; (800294c <main+0x914>)
 8002866:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <main+0x920>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe16 	bl	80004a0 <__aeabi_f2d>
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <main+0x92c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe0f 	bl	80004a0 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8002928 <main+0x8f0>
 800288a:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8002930 <main+0x8f8>
 800288e:	ec43 2b11 	vmov	d1, r2, r3
 8002892:	ec45 4b10 	vmov	d0, r4, r5
 8002896:	f000 ff4f 	bl	8003738 <Trajectory_Gen>
					x_axis_Moving_Status = xaxisMovingStatusData.Run;
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	b29b      	uxth	r3, r3
 800289e:	4a2b      	ldr	r2, [pc, #172]	; (800294c <main+0x914>)
 80028a0:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
					State_Control = TRAJECTEVA_PID;
 80028a4:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <main+0x918>)
 80028a6:	2301      	movs	r3, #1
 80028a8:	7013      	strb	r3, [r2, #0]
					break;
 80028aa:	e0c0      	b.n	8002a2e <main+0x9f6>
					if (GetTicku >= timestamp_traject) {
 80028ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <main+0x934>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	4290      	cmp	r0, r2
 80028b8:	eb71 0303 	sbcs.w	r3, r1, r3
 80028bc:	d31f      	bcc.n	80028fe <main+0x8c6>
						timestamp_traject = GetTicku + traject_us;
 80028be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <main+0x938>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	1884      	adds	r4, r0, r2
 80028ca:	603c      	str	r4, [r7, #0]
 80028cc:	eb41 0303 	adc.w	r3, r1, r3
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <main+0x934>)
 80028d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028d8:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 80028dc:	f001 f880 	bl	80039e0 <Trajectory_Eva>
						read_pos();
 80028e0:	f7fe fab8 	bl	8000e54 <read_pos>
						PID(x);
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <main+0x93c>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f8df 	bl	8000ab0 <__aeabi_d2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	ee00 3a10 	vmov	s0, r3
 80028f8:	f000 fd82 	bl	8003400 <PID>
					break;
 80028fc:	e096      	b.n	8002a2c <main+0x9f4>
					} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <main+0x92c>)
 8002900:	ed93 7a00 	vldr	s14, [r3]
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <main+0x91c>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290e:	ee17 0a90 	vmov	r0, s15
 8002912:	f7fd fdc5 	bl	80004a0 <__aeabi_f2d>
 8002916:	a308      	add	r3, pc, #32	; (adr r3, 8002938 <main+0x900>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fe f894 	bl	8000a48 <__aeabi_dcmple>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d136      	bne.n	8002994 <main+0x95c>
					break;
 8002926:	e081      	b.n	8002a2c <main+0x9f4>
 8002928:	00000000 	.word	0x00000000
 800292c:	40b04100 	.word	0x40b04100
 8002930:	00000000 	.word	0x00000000
 8002934:	408d8800 	.word	0x408d8800
 8002938:	9999999a 	.word	0x9999999a
 800293c:	3fc99999 	.word	0x3fc99999
 8002940:	9999999a 	.word	0x9999999a
 8002944:	bfc99999 	.word	0xbfc99999
 8002948:	200010a8 	.word	0x200010a8
 800294c:	20000e68 	.word	0x20000e68
 8002950:	200010a9 	.word	0x200010a9
 8002954:	20001010 	.word	0x20001010
 8002958:	2000095c 	.word	0x2000095c
 800295c:	200010a4 	.word	0x200010a4
 8002960:	20001014 	.word	0x20001014
 8002964:	20000960 	.word	0x20000960
 8002968:	20001038 	.word	0x20001038
 800296c:	200010c0 	.word	0x200010c0
 8002970:	20000238 	.word	0x20000238
 8002974:	20000968 	.word	0x20000968
 8002978:	20000490 	.word	0x20000490
 800297c:	20000984 	.word	0x20000984
 8002980:	20000980 	.word	0x20000980
 8002984:	20000970 	.word	0x20000970
 8002988:	20000978 	.word	0x20000978
 800298c:	2000105c 	.word	0x2000105c
 8002990:	20001080 	.word	0x20001080
					} else if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2 ) {
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <main+0xb10>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <main+0xb14>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fd7a 	bl	80004a0 <__aeabi_f2d>
 80029ac:	a364      	add	r3, pc, #400	; (adr r3, 8002b40 <main+0xb08>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fe f853 	bl	8000a5c <__aeabi_dcmpge>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d100      	bne.n	80029be <main+0x986>
					break;
 80029bc:	e036      	b.n	8002a2c <main+0x9f4>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <main+0xb18>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 80029c6:	4a63      	ldr	r2, [pc, #396]	; (8002b54 <main+0xb1c>)
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 80029ce:	4a62      	ldr	r2, [pc, #392]	; (8002b58 <main+0xb20>)
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	6013      	str	r3, [r2, #0]
						v = 0;
 80029d6:	4961      	ldr	r1, [pc, #388]	; (8002b5c <main+0xb24>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 80029e4:	495e      	ldr	r1, [pc, #376]	; (8002b60 <main+0xb28>)
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9c1 2300 	strd	r2, r3, [r1]
						EndEffector_Event(Place);
 80029f2:	2009      	movs	r0, #9
 80029f4:	f7fe feba 	bl	800176c <EndEffector_Event>
						pos_i = PosY;
 80029f8:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <main+0xb14>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <main+0xb2c>)
 80029fe:	601a      	str	r2, [r3, #0]
						if(position_index < 8) {
 8002a00:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <main+0xb30>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	dc0b      	bgt.n	8002a20 <main+0x9e8>
							position_index++;
 8002a08:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <main+0xb30>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <main+0xb30>)
 8002a10:	601a      	str	r2, [r3, #0]
							State_Control = TRAJECTGEN;
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <main+0xb34>)
 8002a14:	2300      	movs	r3, #0
 8002a16:	7013      	strb	r3, [r2, #0]
							State_RUNTRAYMODE = GOPICK;
 8002a18:	4a55      	ldr	r2, [pc, #340]	; (8002b70 <main+0xb38>)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	7013      	strb	r3, [r2, #0]
					break;
 8002a1e:	e005      	b.n	8002a2c <main+0x9f4>
							y_axis_Moving_Status = 0;
 8002a20:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <main+0xb3c>)
 8002a22:	2300      	movs	r3, #0
 8002a24:	8413      	strh	r3, [r2, #32]
							State = IDLE;
 8002a26:	4a54      	ldr	r2, [pc, #336]	; (8002b78 <main+0xb40>)
 8002a28:	2302      	movs	r3, #2
 8002a2a:	7013      	strb	r3, [r2, #0]
					break;
 8002a2c:	bf00      	nop
				break;
 8002a2e:	bf00      	nop
			break;
 8002a30:	e07c      	b.n	8002b2c <main+0xaf4>

			case EMERGENCY_LIMIT:
			state_IT = 1;
 8002a32:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <main+0xb44>)
 8002a34:	2301      	movs	r3, #1
 8002a36:	7013      	strb	r3, [r2, #0]
			break;
 8002a38:	e078      	b.n	8002b2c <main+0xaf4>

			case SENSOR_CHECK:
			read_pos();
 8002a3a:	f7fe fa0b 	bl	8000e54 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,Photoelectric_sensor_1_Pin);
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	484f      	ldr	r0, [pc, #316]	; (8002b80 <main+0xb48>)
 8002a42:	f002 fdcd 	bl	80055e0 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <main+0xb4c>)
 8002a4c:	601a      	str	r2, [r3, #0]
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,Photoelectric_sensor_2_Pin);
 8002a4e:	2104      	movs	r1, #4
 8002a50:	484d      	ldr	r0, [pc, #308]	; (8002b88 <main+0xb50>)
 8002a52:	f002 fdc5 	bl	80055e0 <HAL_GPIO_ReadPin>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <main+0xb4c>)
 8002a5c:	605a      	str	r2, [r3, #4]
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,Photoelectric_sensor_3_Pin);
 8002a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a62:	4849      	ldr	r0, [pc, #292]	; (8002b88 <main+0xb50>)
 8002a64:	f002 fdbc 	bl	80055e0 <HAL_GPIO_ReadPin>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <main+0xb4c>)
 8002a6e:	609a      	str	r2, [r3, #8]
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port,Emergency_Pin);
 8002a70:	2108      	movs	r1, #8
 8002a72:	4843      	ldr	r0, [pc, #268]	; (8002b80 <main+0xb48>)
 8002a74:	f002 fdb4 	bl	80055e0 <HAL_GPIO_ReadPin>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <main+0xb4c>)
 8002a7e:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 8002a80:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <main+0xb4c>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10f      	bne.n	8002aa8 <main+0xa70>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2140      	movs	r1, #64	; 0x40
 8002a8c:	483f      	ldr	r0, [pc, #252]	; (8002b8c <main+0xb54>)
 8002a8e:	f002 fdbf 	bl	8005610 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002a92:	2200      	movs	r2, #0
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	483d      	ldr	r0, [pc, #244]	; (8002b8c <main+0xb54>)
 8002a98:	f002 fdba 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	483a      	ldr	r0, [pc, #232]	; (8002b8c <main+0xb54>)
 8002aa2:	f002 fdb5 	bl	8005610 <HAL_GPIO_WritePin>
 8002aa6:	e036      	b.n	8002b16 <main+0xade>
						RESET);
			} else if (GPIO_test.ramp == 2) {
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <main+0xb4c>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d10f      	bne.n	8002ad0 <main+0xa98>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	4835      	ldr	r0, [pc, #212]	; (8002b8c <main+0xb54>)
 8002ab6:	f002 fdab 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002aba:	2201      	movs	r2, #1
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	4833      	ldr	r0, [pc, #204]	; (8002b8c <main+0xb54>)
 8002ac0:	f002 fda6 	bl	8005610 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	4830      	ldr	r0, [pc, #192]	; (8002b8c <main+0xb54>)
 8002aca:	f002 fda1 	bl	8005610 <HAL_GPIO_WritePin>
 8002ace:	e022      	b.n	8002b16 <main+0xade>
						RESET);
			} else if (GPIO_test.ramp == 3) {
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <main+0xb4c>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d10f      	bne.n	8002af8 <main+0xac0>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2140      	movs	r1, #64	; 0x40
 8002adc:	482b      	ldr	r0, [pc, #172]	; (8002b8c <main+0xb54>)
 8002ade:	f002 fd97 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	4829      	ldr	r0, [pc, #164]	; (8002b8c <main+0xb54>)
 8002ae8:	f002 fd92 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002aec:	2201      	movs	r2, #1
 8002aee:	2120      	movs	r1, #32
 8002af0:	4826      	ldr	r0, [pc, #152]	; (8002b8c <main+0xb54>)
 8002af2:	f002 fd8d 	bl	8005610 <HAL_GPIO_WritePin>
 8002af6:	e00e      	b.n	8002b16 <main+0xade>
						SET);
			} else {
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002af8:	2200      	movs	r2, #0
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	4823      	ldr	r0, [pc, #140]	; (8002b8c <main+0xb54>)
 8002afe:	f002 fd87 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002b02:	2200      	movs	r2, #0
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	4821      	ldr	r0, [pc, #132]	; (8002b8c <main+0xb54>)
 8002b08:	f002 fd82 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2120      	movs	r1, #32
 8002b10:	481e      	ldr	r0, [pc, #120]	; (8002b8c <main+0xb54>)
 8002b12:	f002 fd7d 	bl	8005610 <HAL_GPIO_WritePin>
						RESET);
			}
			if(go_next == 1 ) {
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <main+0xb58>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <main+0xaf2>
				State = INIT;
 8002b1e:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <main+0xb40>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	7013      	strb	r3, [r2, #0]
			}

			break;
 8002b24:	e001      	b.n	8002b2a <main+0xaf2>
			break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <main+0xaf4>
			break;
 8002b2a:	bf00      	nop
		}

		if (Re == 1) {
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <main+0xb5c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f47f ab4f 	bne.w	80021d4 <main+0x19c>
			NVIC_SystemReset();
 8002b36:	f7ff fa69 	bl	800200c <__NVIC_SystemReset>
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w
 8002b40:	9999999a 	.word	0x9999999a
 8002b44:	bfc99999 	.word	0xbfc99999
 8002b48:	20000960 	.word	0x20000960
 8002b4c:	20001010 	.word	0x20001010
 8002b50:	20000490 	.word	0x20000490
 8002b54:	20000984 	.word	0x20000984
 8002b58:	20000980 	.word	0x20000980
 8002b5c:	20000970 	.word	0x20000970
 8002b60:	20000978 	.word	0x20000978
 8002b64:	2000095c 	.word	0x2000095c
 8002b68:	200010a4 	.word	0x200010a4
 8002b6c:	200010a9 	.word	0x200010a9
 8002b70:	200010a8 	.word	0x200010a8
 8002b74:	20000e68 	.word	0x20000e68
 8002b78:	20000270 	.word	0x20000270
 8002b7c:	20000964 	.word	0x20000964
 8002b80:	40020800 	.word	0x40020800
 8002b84:	20000ff8 	.word	0x20000ff8
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	20000965 	.word	0x20000965
 8002b94:	20000966 	.word	0x20000966

08002b98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b094      	sub	sp, #80	; 0x50
 8002b9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	2230      	movs	r2, #48	; 0x30
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f007 fcb2 	bl	800a510 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <SystemClock_Config+0xc8>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <SystemClock_Config+0xc8>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6413      	str	r3, [r2, #64]	; 0x40
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <SystemClock_Config+0xc8>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <SystemClock_Config+0xcc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <SystemClock_Config+0xcc>)
 8002be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <SystemClock_Config+0xcc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002c0c:	2364      	movs	r3, #100	; 0x64
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c10:	2302      	movs	r3, #2
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c14:	2304      	movs	r3, #4
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fcbf 	bl	80065a0 <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x94>
		Error_Handler();
 8002c28:	f000 fbe2 	bl	80033f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	2302      	movs	r3, #2
 8002c32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 ff21 	bl	8006a90 <HAL_RCC_ClockConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0xc0>
		Error_Handler();
 8002c54:	f000 fbcc 	bl	80033f0 <Error_Handler>
	}
}
 8002c58:	bf00      	nop
 8002c5a:	3750      	adds	r7, #80	; 0x50
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000

08002c68 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c6e:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <MX_I2C2_Init+0x54>)
 8002c70:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <MX_I2C2_Init+0x58>)
 8002c76:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c8a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca6:	f002 fce5 	bl	8005674 <HAL_I2C_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002cb0:	f000 fb9e 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200003e4 	.word	0x200003e4
 8002cbc:	40005800 	.word	0x40005800
 8002cc0:	000186a0 	.word	0x000186a0

08002cc4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <MX_SPI3_Init+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cd4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cf8:	2238      	movs	r2, #56	; 0x38
 8002cfa:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002d10:	220a      	movs	r2, #10
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <MX_SPI3_Init+0x64>)
 8002d16:	f004 f8db 	bl	8006ed0 <HAL_SPI_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_SPI3_Init+0x60>
		Error_Handler();
 8002d20:	f000 fb66 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000438 	.word	0x20000438
 8002d2c:	40003c00 	.word	0x40003c00

08002d30 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b096      	sub	sp, #88	; 0x58
 8002d34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	615a      	str	r2, [r3, #20]
 8002d60:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2220      	movs	r2, #32
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f007 fbd1 	bl	800a510 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d70:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <MX_TIM1_Init+0x13c>)
 8002d72:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002d74:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d86:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002d9a:	4833      	ldr	r0, [pc, #204]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002d9c:	f004 fb8e 	bl	80074bc <HAL_TIM_Base_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002da6:	f000 fb23 	bl	80033f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002db4:	4619      	mov	r1, r3
 8002db6:	482c      	ldr	r0, [pc, #176]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002db8:	f005 fa6a 	bl	8008290 <HAL_TIM_ConfigClockSource>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM1_Init+0x96>
		Error_Handler();
 8002dc2:	f000 fb15 	bl	80033f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002dc6:	4828      	ldr	r0, [pc, #160]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002dc8:	f004 fcf6 	bl	80077b8 <HAL_TIM_PWM_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8002dd2:	f000 fb0d 	bl	80033f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002dde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de2:	4619      	mov	r1, r3
 8002de4:	4820      	ldr	r0, [pc, #128]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002de6:	f005 ffe3 	bl	8008db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002df0:	f000 fafe 	bl	80033f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df4:	2360      	movs	r3, #96	; 0x60
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	2200      	movs	r2, #0
 8002e16:	4619      	mov	r1, r3
 8002e18:	4813      	ldr	r0, [pc, #76]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002e1a:	f005 f977 	bl	800810c <HAL_TIM_PWM_ConfigChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8002e24:	f000 fae4 	bl	80033f0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e40:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4807      	ldr	r0, [pc, #28]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002e4c:	f006 f81e 	bl	8008e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8002e56:	f000 facb 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002e5a:	4803      	ldr	r0, [pc, #12]	; (8002e68 <MX_TIM1_Init+0x138>)
 8002e5c:	f001 fad8 	bl	8004410 <HAL_TIM_MspPostInit>

}
 8002e60:	bf00      	nop
 8002e62:	3758      	adds	r7, #88	; 0x58
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000490 	.word	0x20000490
 8002e6c:	40010000 	.word	0x40010000

08002e70 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f007 fb46 	bl	800a510 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e92:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	4619      	mov	r1, r3
 8002ede:	480d      	ldr	r0, [pc, #52]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002ee0:	f004 fe4e 	bl	8007b80 <HAL_TIM_Encoder_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002eea:	f000 fa81 	bl	80033f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4806      	ldr	r0, [pc, #24]	; (8002f14 <MX_TIM2_Init+0xa4>)
 8002efc:	f005 ff58 	bl	8008db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002f06:	f000 fa73 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	3730      	adds	r7, #48	; 0x30
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000544 	.word	0x20000544

08002f18 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <MX_TIM3_Init+0x98>)
 8002f38:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f3c:	2263      	movs	r2, #99	; 0x63
 8002f3e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f48:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f4c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002f5a:	4814      	ldr	r0, [pc, #80]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f5c:	f004 faae 	bl	80074bc <HAL_TIM_Base_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM3_Init+0x52>
		Error_Handler();
 8002f66:	f000 fa43 	bl	80033f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	4619      	mov	r1, r3
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f78:	f005 f98a 	bl	8008290 <HAL_TIM_ConfigClockSource>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002f82:	f000 fa35 	bl	80033f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4619      	mov	r1, r3
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <MX_TIM3_Init+0x94>)
 8002f94:	f005 ff0c 	bl	8008db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002f9e:	f000 fa27 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200005f8 	.word	0x200005f8
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MX_TIM5_Init+0x94>)
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <MX_TIM5_Init+0x98>)
 8002fd4:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_TIM5_Init+0x94>)
 8002fd8:	2263      	movs	r2, #99	; 0x63
 8002fda:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_TIM5_Init+0x94>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_TIM5_Init+0x94>)
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_TIM5_Init+0x94>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_TIM5_Init+0x94>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <MX_TIM5_Init+0x94>)
 8002ff8:	f004 fa60 	bl	80074bc <HAL_TIM_Base_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM5_Init+0x52>
		Error_Handler();
 8003002:	f000 f9f5 	bl	80033f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4619      	mov	r1, r3
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_TIM5_Init+0x94>)
 8003014:	f005 f93c 	bl	8008290 <HAL_TIM_ConfigClockSource>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM5_Init+0x6e>
		Error_Handler();
 800301e:	f000 f9e7 	bl	80033f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800302a:	463b      	mov	r3, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	; (8003048 <MX_TIM5_Init+0x94>)
 8003030:	f005 febe 	bl	8008db0 <HAL_TIMEx_MasterConfigSynchronization>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800303a:	f000 f9d9 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200006ac 	.word	0x200006ac
 800304c:	40000c00 	.word	0x40000c00

08003050 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	615a      	str	r2, [r3, #20]
 8003066:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_TIM11_Init+0xa0>)
 800306a:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <MX_TIM11_Init+0xa4>)
 800306c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <MX_TIM11_Init+0xa0>)
 8003070:	2263      	movs	r2, #99	; 0x63
 8003072:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <MX_TIM11_Init+0xa0>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <MX_TIM11_Init+0xa0>)
 800307c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003080:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <MX_TIM11_Init+0xa0>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <MX_TIM11_Init+0xa0>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800308e:	4818      	ldr	r0, [pc, #96]	; (80030f0 <MX_TIM11_Init+0xa0>)
 8003090:	f004 fa14 	bl	80074bc <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM11_Init+0x4e>
		Error_Handler();
 800309a:	f000 f9a9 	bl	80033f0 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 800309e:	4814      	ldr	r0, [pc, #80]	; (80030f0 <MX_TIM11_Init+0xa0>)
 80030a0:	f004 fb24 	bl	80076ec <HAL_TIM_OC_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM11_Init+0x5e>
		Error_Handler();
 80030aa:	f000 f9a1 	bl	80033f0 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 80030ae:	2108      	movs	r1, #8
 80030b0:	480f      	ldr	r0, [pc, #60]	; (80030f0 <MX_TIM11_Init+0xa0>)
 80030b2:	f004 fc97 	bl	80079e4 <HAL_TIM_OnePulse_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM11_Init+0x70>
		Error_Handler();
 80030bc:	f000 f998 	bl	80033f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80030c0:	2310      	movs	r3, #16
 80030c2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 80030c4:	f240 5399 	movw	r3, #1433	; 0x599
 80030c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2200      	movs	r2, #0
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_TIM11_Init+0xa0>)
 80030da:	f004 ffbb 	bl	8008054 <HAL_TIM_OC_ConfigChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80030e4:	f000 f984 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000760 	.word	0x20000760
 80030f4:	40014800 	.word	0x40014800

080030f8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <MX_USART2_UART_Init+0x50>)
 80030fe:	4a13      	ldr	r2, [pc, #76]	; (800314c <MX_USART2_UART_Init+0x54>)
 8003100:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003104:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003108:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <MX_USART2_UART_Init+0x50>)
 800310c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003110:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <MX_USART2_UART_Init+0x50>)
 800311a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003122:	220c      	movs	r2, #12
 8003124:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <MX_USART2_UART_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003134:	f005 ff1a 	bl	8008f6c <HAL_UART_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 800313e:	f000 f957 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000814 	.word	0x20000814
 800314c:	40004400 	.word	0x40004400

08003150 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <MX_USART6_UART_Init+0x54>)
 8003158:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 800315c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003160:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 8003164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003168:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 8003172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003176:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 800317a:	220c      	movs	r2, #12
 800317c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_USART6_UART_Init+0x50>)
 800318c:	f005 feee 	bl	8008f6c <HAL_UART_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 8003196:	f000 f92b 	bl	80033f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000888 	.word	0x20000888
 80031a4:	40011400 	.word	0x40011400

080031a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_DMA_Init+0x3c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <MX_DMA_Init+0x3c>)
 80031b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_DMA_Init+0x3c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2011      	movs	r0, #17
 80031d0:	f001 fc3d 	bl	8004a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031d4:	2011      	movs	r0, #17
 80031d6:	f001 fc56 	bl	8004a86 <HAL_NVIC_EnableIRQ>

}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b56      	ldr	r3, [pc, #344]	; (800335c <MX_GPIO_Init+0x174>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a55      	ldr	r2, [pc, #340]	; (800335c <MX_GPIO_Init+0x174>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b53      	ldr	r3, [pc, #332]	; (800335c <MX_GPIO_Init+0x174>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <MX_GPIO_Init+0x174>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a4e      	ldr	r2, [pc, #312]	; (800335c <MX_GPIO_Init+0x174>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b4c      	ldr	r3, [pc, #304]	; (800335c <MX_GPIO_Init+0x174>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	4b48      	ldr	r3, [pc, #288]	; (800335c <MX_GPIO_Init+0x174>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a47      	ldr	r2, [pc, #284]	; (800335c <MX_GPIO_Init+0x174>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <MX_GPIO_Init+0x174>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <MX_GPIO_Init+0x174>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a40      	ldr	r2, [pc, #256]	; (800335c <MX_GPIO_Init+0x174>)
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <MX_GPIO_Init+0x174>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4b3a      	ldr	r3, [pc, #232]	; (800335c <MX_GPIO_Init+0x174>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a39      	ldr	r2, [pc, #228]	; (800335c <MX_GPIO_Init+0x174>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <MX_GPIO_Init+0x174>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800328a:	2200      	movs	r2, #0
 800328c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8003290:	4833      	ldr	r0, [pc, #204]	; (8003360 <MX_GPIO_Init+0x178>)
 8003292:	f002 f9bd 	bl	8005610 <HAL_GPIO_WritePin>
			Switch_Relay_3_Pin | Switch_Relay_1_Pin | Switch_Relay_2_Pin
					| DIR_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 8003296:	2200      	movs	r2, #0
 8003298:	2104      	movs	r1, #4
 800329a:	4832      	ldr	r0, [pc, #200]	; (8003364 <MX_GPIO_Init+0x17c>)
 800329c:	f002 f9b8 	bl	8005610 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_1_Pin;
 80032a0:	f242 0348 	movw	r3, #8264	; 0x2048
 80032a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	482c      	ldr	r0, [pc, #176]	; (8003368 <MX_GPIO_Init+0x180>)
 80032b8:	f002 f80e 	bl	80052d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_3_Pin | Switch_Relay_1_Pin
 80032bc:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80032c0:	617b      	str	r3, [r7, #20]
			| Switch_Relay_2_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4619      	mov	r1, r3
 80032d4:	4822      	ldr	r0, [pc, #136]	; (8003360 <MX_GPIO_Init+0x178>)
 80032d6:	f001 ffff 	bl	80052d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 80032da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032de:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	481e      	ldr	r0, [pc, #120]	; (800336c <MX_GPIO_Init+0x184>)
 80032f2:	f001 fff1 	bl	80052d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 80032f6:	2304      	movs	r3, #4
 80032f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	4815      	ldr	r0, [pc, #84]	; (8003364 <MX_GPIO_Init+0x17c>)
 800330e:	f001 ffe3 	bl	80052d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	2100      	movs	r1, #0
 8003316:	2008      	movs	r0, #8
 8003318:	f001 fb99 	bl	8004a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800331c:	2008      	movs	r0, #8
 800331e:	f001 fbb2 	bl	8004a86 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003322:	2200      	movs	r2, #0
 8003324:	2100      	movs	r1, #0
 8003326:	2009      	movs	r0, #9
 8003328:	f001 fb91 	bl	8004a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800332c:	2009      	movs	r0, #9
 800332e:	f001 fbaa 	bl	8004a86 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	2017      	movs	r0, #23
 8003338:	f001 fb89 	bl	8004a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800333c:	2017      	movs	r0, #23
 800333e:	f001 fba2 	bl	8004a86 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2028      	movs	r0, #40	; 0x28
 8003348:	f001 fb81 	bl	8004a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800334c:	2028      	movs	r0, #40	; 0x28
 800334e:	f001 fb9a 	bl	8004a86 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	; 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40020800 	.word	0x40020800
 800336c:	40020400 	.word	0x40020400

08003370 <HAL_GPIO_EXTI_Callback>:
		motor(0, 1);
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <micros>:

uint64_t micros() {
 8003388:	b4b0      	push	{r4, r5, r7}
 800338a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <micros+0x2c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2200      	movs	r2, #0
 8003394:	4618      	mov	r0, r3
 8003396:	4611      	mov	r1, r2
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <micros+0x30>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	1884      	adds	r4, r0, r2
 80033a0:	eb41 0503 	adc.w	r5, r1, r3
 80033a4:	4622      	mov	r2, r4
 80033a6:	462b      	mov	r3, r5
}
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bcb0      	pop	{r4, r5, r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	200006ac 	.word	0x200006ac
 80033b8:	20000988 	.word	0x20000988

080033bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033bc:	b4b0      	push	{r4, r5, r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	1e54      	subs	r4, r2, #1
 80033d4:	f143 0500 	adc.w	r5, r3, #0
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80033da:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bcb0      	pop	{r4, r5, r7}
 80033e6:	4770      	bx	lr
 80033e8:	200006ac 	.word	0x200006ac
 80033ec:	20000988 	.word	0x20000988

080033f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033f4:	b672      	cpsid	i
}
 80033f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80033f8:	e7fe      	b.n	80033f8 <Error_Handler+0x8>
 80033fa:	0000      	movs	r0, r0
 80033fc:	0000      	movs	r0, r0
	...

08003400 <PID>:
	RUNPOINTMODE,
	EMERGENCY_LIMIT,
	SENSOR_CHECK,
} State ;

void PID(float setposition) {
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 800340a:	4bb5      	ldr	r3, [pc, #724]	; (80036e0 <PID+0x2e0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4ab5      	ldr	r2, [pc, #724]	; (80036e4 <PID+0x2e4>)
 8003410:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 8003412:	4bb4      	ldr	r3, [pc, #720]	; (80036e4 <PID+0x2e4>)
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	4bb3      	ldr	r3, [pc, #716]	; (80036e8 <PID+0x2e8>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003422:	ee17 0a90 	vmov	r0, s15
 8003426:	f7fd f83b 	bl	80004a0 <__aeabi_f2d>
 800342a:	4604      	mov	r4, r0
 800342c:	460d      	mov	r5, r1
 800342e:	4baf      	ldr	r3, [pc, #700]	; (80036ec <PID+0x2ec>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f7fd f854 	bl	80004e4 <__aeabi_ul2d>
 800343c:	a3a2      	add	r3, pc, #648	; (adr r3, 80036c8 <PID+0x2c8>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd f9af 	bl	80007a4 <__aeabi_ddiv>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd f9a9 	bl	80007a4 <__aeabi_ddiv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f7fd fb29 	bl	8000ab0 <__aeabi_d2f>
 800345e:	4603      	mov	r3, r0
 8003460:	4aa3      	ldr	r2, [pc, #652]	; (80036f0 <PID+0x2f0>)
 8003462:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8003464:	4b9f      	ldr	r3, [pc, #636]	; (80036e4 <PID+0x2e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a9f      	ldr	r2, [pc, #636]	; (80036e8 <PID+0x2e8>)
 800346a:	6013      	str	r3, [r2, #0]

	if (pos_f < -350) {
 800346c:	4ba1      	ldr	r3, [pc, #644]	; (80036f4 <PID+0x2f4>)
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80036f8 <PID+0x2f8>
 8003476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d503      	bpl.n	8003488 <PID+0x88>
		pos_f = -350;
 8003480:	4b9c      	ldr	r3, [pc, #624]	; (80036f4 <PID+0x2f4>)
 8003482:	4a9e      	ldr	r2, [pc, #632]	; (80036fc <PID+0x2fc>)
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e00c      	b.n	80034a2 <PID+0xa2>
	} else if (pos_f > 350) {
 8003488:	4b9a      	ldr	r3, [pc, #616]	; (80036f4 <PID+0x2f4>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003700 <PID+0x300>
 8003492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	dd02      	ble.n	80034a2 <PID+0xa2>
		pos_f = 350;
 800349c:	4b95      	ldr	r3, [pc, #596]	; (80036f4 <PID+0x2f4>)
 800349e:	4a99      	ldr	r2, [pc, #612]	; (8003704 <PID+0x304>)
 80034a0:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 80034a2:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <PID+0x2e0>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	4b95      	ldr	r3, [pc, #596]	; (8003708 <PID+0x308>)
 80034b2:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 80034b6:	4b95      	ldr	r3, [pc, #596]	; (800370c <PID+0x30c>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003710 <PID+0x310>
 80034c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	bfac      	ite	ge
 80034ca:	2301      	movge	r3, #1
 80034cc:	2300      	movlt	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d13f      	bne.n	800355a <PID+0x15a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 80034da:	4b8b      	ldr	r3, [pc, #556]	; (8003708 <PID+0x308>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	bfac      	ite	ge
 80034ea:	2301      	movge	r3, #1
 80034ec:	2300      	movlt	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <PID+0x11a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 80034fa:	4b86      	ldr	r3, [pc, #536]	; (8003714 <PID+0x314>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003508:	bfac      	ite	ge
 800350a:	2301      	movge	r3, #1
 800350c:	2300      	movlt	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f083 0301 	eor.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <PID+0x170>
 800351a:	4b7b      	ldr	r3, [pc, #492]	; (8003708 <PID+0x308>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	bf4c      	ite	mi
 800352a:	2301      	movmi	r3, #1
 800352c:	2300      	movpl	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <PID+0x15a>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <PID+0x314>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	bf4c      	ite	mi
 800354a:	2301      	movmi	r3, #1
 800354c:	2300      	movpl	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f083 0301 	eor.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <PID+0x170>
		Intregral = Intregral + Error;
 800355a:	4b6e      	ldr	r3, [pc, #440]	; (8003714 <PID+0x314>)
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	4b69      	ldr	r3, [pc, #420]	; (8003708 <PID+0x308>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <PID+0x314>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8003570:	4b69      	ldr	r3, [pc, #420]	; (8003718 <PID+0x318>)
 8003572:	ed93 7a00 	vldr	s14, [r3]
 8003576:	4b64      	ldr	r3, [pc, #400]	; (8003708 <PID+0x308>)
 8003578:	edd3 7a00 	vldr	s15, [r3]
 800357c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003580:	4b61      	ldr	r3, [pc, #388]	; (8003708 <PID+0x308>)
 8003582:	edd3 6a00 	vldr	s13, [r3]
 8003586:	4b65      	ldr	r3, [pc, #404]	; (800371c <PID+0x31c>)
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003590:	4b63      	ldr	r3, [pc, #396]	; (8003720 <PID+0x320>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800359a:	4b62      	ldr	r3, [pc, #392]	; (8003724 <PID+0x324>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <PID+0x314>)
 80035aa:	edd3 6a00 	vldr	s13, [r3]
 80035ae:	4b5e      	ldr	r3, [pc, #376]	; (8003728 <PID+0x328>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b8:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <PID+0x30c>)
 80035be:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 80035c2:	4b52      	ldr	r3, [pc, #328]	; (800370c <PID+0x30c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ff6a 	bl	80004a0 <__aeabi_f2d>
 80035cc:	a340      	add	r3, pc, #256	; (adr r3, 80036d0 <PID+0x2d0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd fa43 	bl	8000a5c <__aeabi_dcmpge>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <PID+0x1e4>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <PID+0x30c>)
 80035de:	4a53      	ldr	r2, [pc, #332]	; (800372c <PID+0x32c>)
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e00f      	b.n	8003604 <PID+0x204>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 80035e4:	4b49      	ldr	r3, [pc, #292]	; (800370c <PID+0x30c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ff59 	bl	80004a0 <__aeabi_f2d>
 80035ee:	a33a      	add	r3, pc, #232	; (adr r3, 80036d8 <PID+0x2d8>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd fa28 	bl	8000a48 <__aeabi_dcmple>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <PID+0x204>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <PID+0x30c>)
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <PID+0x330>)
 8003602:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <PID+0x30c>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	d503      	bpl.n	800361c <PID+0x21c>
		dir = -1;
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <PID+0x334>)
 8003616:	22ff      	movs	r2, #255	; 0xff
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e00a      	b.n	8003632 <PID+0x232>
	} else if (Dutyfeedback > 0) {
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <PID+0x30c>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	dd02      	ble.n	8003632 <PID+0x232>
		dir = 1;
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <PID+0x334>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 8003632:	4b35      	ldr	r3, [pc, #212]	; (8003708 <PID+0x308>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800363c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd0b      	ble.n	800365e <PID+0x25e>
		Dutyfeedback += 1 * Kp; //230
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <PID+0x30c>)
 8003648:	ed93 7a00 	vldr	s14, [r3]
 800364c:	4b32      	ldr	r3, [pc, #200]	; (8003718 <PID+0x318>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <PID+0x30c>)
 8003658:	edc3 7a00 	vstr	s15, [r3]
 800365c:	e014      	b.n	8003688 <PID+0x288>
	} else if (Error < -1.0) {
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <PID+0x308>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d50a      	bpl.n	8003688 <PID+0x288>
		Dutyfeedback -= 1 * Kp;
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <PID+0x30c>)
 8003674:	ed93 7a00 	vldr	s14, [r3]
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <PID+0x318>)
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <PID+0x30c>)
 8003684:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <PID+0x30c>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	eef0 7ae7 	vabs.f32	s15, s15
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <PID+0x30c>)
 8003694:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <PID+0x30c>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <PID+0x334>)
 80036a4:	f993 3000 	ldrsb.w	r3, [r3]
 80036a8:	4619      	mov	r1, r3
 80036aa:	ee17 0a90 	vmov	r0, s15
 80036ae:	f7fd fbf7 	bl	8000ea0 <motor>
	Last_Error = Error;
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <PID+0x308>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	; (800371c <PID+0x31c>)
 80036b8:	6013      	str	r3, [r2, #0]
//			State = INIT_HOMING;
//		}

//	}

}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	f3af 8000 	nop.w
 80036c8:	00000000 	.word	0x00000000
 80036cc:	412e8480 	.word	0x412e8480
 80036d0:	66666666 	.word	0x66666666
 80036d4:	40e66666 	.word	0x40e66666
 80036d8:	66666666 	.word	0x66666666
 80036dc:	c0e66666 	.word	0xc0e66666
 80036e0:	20001010 	.word	0x20001010
 80036e4:	200010cc 	.word	0x200010cc
 80036e8:	200010d0 	.word	0x200010d0
 80036ec:	20000240 	.word	0x20000240
 80036f0:	200010d4 	.word	0x200010d4
 80036f4:	20000960 	.word	0x20000960
 80036f8:	c3af0000 	.word	0xc3af0000
 80036fc:	c3af0000 	.word	0xc3af0000
 8003700:	43af0000 	.word	0x43af0000
 8003704:	43af0000 	.word	0x43af0000
 8003708:	200010d8 	.word	0x200010d8
 800370c:	20000980 	.word	0x20000980
 8003710:	47800000 	.word	0x47800000
 8003714:	20000984 	.word	0x20000984
 8003718:	20000274 	.word	0x20000274
 800371c:	200010dc 	.word	0x200010dc
 8003720:	20000280 	.word	0x20000280
 8003724:	2000027c 	.word	0x2000027c
 8003728:	20000278 	.word	0x20000278
 800372c:	47333333 	.word	0x47333333
 8003730:	c7333333 	.word	0xc7333333
 8003734:	200010c8 	.word	0x200010c8

08003738 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8003738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800373c:	b088      	sub	sp, #32
 800373e:	af00      	add	r7, sp, #0
 8003740:	ed87 0b06 	vstr	d0, [r7, #24]
 8003744:	ed87 1b04 	vstr	d1, [r7, #16]
 8003748:	ed87 2b02 	vstr	d2, [r7, #8]
 800374c:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8003750:	4993      	ldr	r1, [pc, #588]	; (80039a0 <Trajectory_Gen+0x268>)
 8003752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003756:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 800375a:	4992      	ldr	r1, [pc, #584]	; (80039a4 <Trajectory_Gen+0x26c>)
 800375c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003760:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8003764:	4990      	ldr	r1, [pc, #576]	; (80039a8 <Trajectory_Gen+0x270>)
 8003766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376a:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 800376e:	498f      	ldr	r1, [pc, #572]	; (80039ac <Trajectory_Gen+0x274>)
 8003770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003774:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8003778:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <Trajectory_Gen+0x278>)
 800377a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800377e:	4a8d      	ldr	r2, [pc, #564]	; (80039b4 <Trajectory_Gen+0x27c>)
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f7fd f9e4 	bl	8000b50 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fc fea8 	bl	80004e4 <__aeabi_ul2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4987      	ldr	r1, [pc, #540]	; (80039b8 <Trajectory_Gen+0x280>)
 800379a:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 800379e:	4b84      	ldr	r3, [pc, #528]	; (80039b0 <Trajectory_Gen+0x278>)
 80037a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a4:	4a83      	ldr	r2, [pc, #524]	; (80039b4 <Trajectory_Gen+0x27c>)
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f7fd f9d1 	bl	8000b50 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fc fe95 	bl	80004e4 <__aeabi_ul2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	497f      	ldr	r1, [pc, #508]	; (80039bc <Trajectory_Gen+0x284>)
 80037c0:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 80037c4:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <Trajectory_Gen+0x278>)
 80037c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ca:	4a7a      	ldr	r2, [pc, #488]	; (80039b4 <Trajectory_Gen+0x27c>)
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	f7fd f9be 	bl	8000b50 <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fc fe82 	bl	80004e4 <__aeabi_ul2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4976      	ldr	r1, [pc, #472]	; (80039c0 <Trajectory_Gen+0x288>)
 80037e6:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 80037ea:	4b71      	ldr	r3, [pc, #452]	; (80039b0 <Trajectory_Gen+0x278>)
 80037ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f0:	4a70      	ldr	r2, [pc, #448]	; (80039b4 <Trajectory_Gen+0x27c>)
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f7fd f9ab 	bl	8000b50 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fc fe6f 	bl	80004e4 <__aeabi_ul2d>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	496e      	ldr	r1, [pc, #440]	; (80039c4 <Trajectory_Gen+0x28c>)
 800380c:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8003810:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <Trajectory_Gen+0x26c>)
 8003812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <Trajectory_Gen+0x268>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fce0 	bl	80001e0 <__aeabi_dsub>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4614      	mov	r4, r2
 8003826:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800382a:	4b67      	ldr	r3, [pc, #412]	; (80039c8 <Trajectory_Gen+0x290>)
 800382c:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <Trajectory_Gen+0x26c>)
 8003832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003836:	4b5a      	ldr	r3, [pc, #360]	; (80039a0 <Trajectory_Gen+0x268>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fcd0 	bl	80001e0 <__aeabi_dsub>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f7fd f90e 	bl	8000a70 <__aeabi_dcmpgt>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <Trajectory_Gen+0x12a>
		direct = 1;
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <Trajectory_Gen+0x294>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e018      	b.n	8003894 <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <Trajectory_Gen+0x26c>)
 8003864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003868:	4b4d      	ldr	r3, [pc, #308]	; (80039a0 <Trajectory_Gen+0x268>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fcb7 	bl	80001e0 <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f7fd f8d7 	bl	8000a34 <__aeabi_dcmplt>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <Trajectory_Gen+0x15c>
		direct = -1;
 800388c:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <Trajectory_Gen+0x294>)
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8003894:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <Trajectory_Gen+0x270>)
 8003896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <Trajectory_Gen+0x274>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc ff80 	bl	80007a4 <__aeabi_ddiv>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4949      	ldr	r1, [pc, #292]	; (80039d0 <Trajectory_Gen+0x298>)
 80038aa:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <Trajectory_Gen+0x290>)
 80038b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038b4:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <Trajectory_Gen+0x274>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f7fc ff73 	bl	80007a4 <__aeabi_ddiv>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	ec43 2b17 	vmov	d7, r2, r3
 80038c6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ca:	eef0 0a67 	vmov.f32	s1, s15
 80038ce:	f006 fe27 	bl	800a520 <sqrt>
 80038d2:	eeb0 7a40 	vmov.f32	s14, s0
 80038d6:	eef0 7a60 	vmov.f32	s15, s1
 80038da:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <Trajectory_Gen+0x29c>)
 80038dc:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 80038e0:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <Trajectory_Gen+0x29c>)
 80038e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e6:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <Trajectory_Gen+0x298>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fd f8a2 	bl	8000a34 <__aeabi_dcmplt>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00f      	beq.n	8003916 <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <Trajectory_Gen+0x29c>)
 80038f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	f7fc fc70 	bl	80001e4 <__adddf3>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4933      	ldr	r1, [pc, #204]	; (80039d8 <Trajectory_Gen+0x2a0>)
 800390a:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 800390e:	4b33      	ldr	r3, [pc, #204]	; (80039dc <Trajectory_Gen+0x2a4>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8003914:	e03e      	b.n	8003994 <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <Trajectory_Gen+0x29c>)
 8003918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <Trajectory_Gen+0x298>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f7fd f89b 	bl	8000a5c <__aeabi_dcmpge>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <Trajectory_Gen+0x1f6>
}
 800392c:	e032      	b.n	8003994 <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <Trajectory_Gen+0x298>)
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	f7fc fc54 	bl	80001e4 <__adddf3>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4690      	mov	r8, r2
 8003942:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <Trajectory_Gen+0x290>)
 8003946:	e9d3 4500 	ldrd	r4, r5, [r3]
 800394a:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <Trajectory_Gen+0x298>)
 800394c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <Trajectory_Gen+0x270>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fdfb 	bl	8000550 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4620      	mov	r0, r4
 8003960:	4629      	mov	r1, r5
 8003962:	f7fc fc3d 	bl	80001e0 <__aeabi_dsub>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <Trajectory_Gen+0x270>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f7fc ff16 	bl	80007a4 <__aeabi_ddiv>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	f7fc fc30 	bl	80001e4 <__adddf3>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8003988:	4913      	ldr	r1, [pc, #76]	; (80039d8 <Trajectory_Gen+0x2a0>)
 800398a:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <Trajectory_Gen+0x2a4>)
 8003990:	2202      	movs	r2, #2
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	bf00      	nop
 8003996:	3720      	adds	r7, #32
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800399e:	bf00      	nop
 80039a0:	200010e8 	.word	0x200010e8
 80039a4:	200010f0 	.word	0x200010f0
 80039a8:	200010f8 	.word	0x200010f8
 80039ac:	20001100 	.word	0x20001100
 80039b0:	20000238 	.word	0x20000238
 80039b4:	000f4240 	.word	0x000f4240
 80039b8:	20000248 	.word	0x20000248
 80039bc:	20000250 	.word	0x20000250
 80039c0:	20000258 	.word	0x20000258
 80039c4:	20000260 	.word	0x20000260
 80039c8:	20001108 	.word	0x20001108
 80039cc:	200010e4 	.word	0x200010e4
 80039d0:	20001130 	.word	0x20001130
 80039d4:	20001140 	.word	0x20001140
 80039d8:	20001138 	.word	0x20001138
 80039dc:	200010e0 	.word	0x200010e0

080039e0 <Trajectory_Eva>:

void Trajectory_Eva() {
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 80039e6:	4ba3      	ldr	r3, [pc, #652]	; (8003c74 <Trajectory_Eva+0x294>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f000 8173 	beq.w	8003cd6 <Trajectory_Eva+0x2f6>
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f300 835e 	bgt.w	80040b2 <Trajectory_Eva+0x6d2>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 835a 	beq.w	80040b0 <Trajectory_Eva+0x6d0>
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d000      	beq.n	8003a02 <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8003a00:	e357      	b.n	80040b2 <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 8003a02:	4b9d      	ldr	r3, [pc, #628]	; (8003c78 <Trajectory_Eva+0x298>)
 8003a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a08:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <Trajectory_Eva+0x29c>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fd f81b 	bl	8000a48 <__aeabi_dcmple>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8085 	beq.w	8003b24 <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8003a1a:	4b99      	ldr	r3, [pc, #612]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fd2c 	bl	800047c <__aeabi_i2d>
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	4b96      	ldr	r3, [pc, #600]	; (8003c84 <Trajectory_Eva+0x2a4>)
 8003a2a:	f7fc fd91 	bl	8000550 <__aeabi_dmul>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4b94      	ldr	r3, [pc, #592]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f7fc fd88 	bl	8000550 <__aeabi_dmul>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4614      	mov	r4, r2
 8003a46:	461d      	mov	r5, r3
 8003a48:	4b90      	ldr	r3, [pc, #576]	; (8003c8c <Trajectory_Eva+0x2ac>)
 8003a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a4e:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <Trajectory_Eva+0x2ac>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fd7c 	bl	8000550 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7fc fd76 	bl	8000550 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <Trajectory_Eva+0x2b0>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fbb7 	bl	80001e4 <__adddf3>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
			x = x_initial
 8003a7a:	4986      	ldr	r1, [pc, #536]	; (8003c94 <Trajectory_Eva+0x2b4>)
 8003a7c:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8003a80:	4b81      	ldr	r3, [pc, #516]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a86:	4b81      	ldr	r3, [pc, #516]	; (8003c8c <Trajectory_Eva+0x2ac>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fd60 	bl	8000550 <__aeabi_dmul>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4b79      	ldr	r3, [pc, #484]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fced 	bl	800047c <__aeabi_i2d>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7fc fd51 	bl	8000550 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4979      	ldr	r1, [pc, #484]	; (8003c98 <Trajectory_Eva+0x2b8>)
 8003ab4:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003ab8:	4b71      	ldr	r3, [pc, #452]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fc fcdd 	bl	800047c <__aeabi_i2d>
 8003ac2:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fd42 	bl	8000550 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4972      	ldr	r1, [pc, #456]	; (8003c9c <Trajectory_Eva+0x2bc>)
 8003ad2:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8003ad6:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <Trajectory_Eva+0x2b4>)
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	4970      	ldr	r1, [pc, #448]	; (8003ca0 <Trajectory_Eva+0x2c0>)
 8003ade:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8003ae2:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <Trajectory_Eva+0x2b8>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	496e      	ldr	r1, [pc, #440]	; (8003ca4 <Trajectory_Eva+0x2c4>)
 8003aea:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8003aee:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <Trajectory_Eva+0x2ac>)
 8003af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003af4:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <Trajectory_Eva+0x2c8>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fb73 	bl	80001e4 <__adddf3>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4962      	ldr	r1, [pc, #392]	; (8003c8c <Trajectory_Eva+0x2ac>)
 8003b04:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003b08:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <Trajectory_Eva+0x298>)
 8003b0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <Trajectory_Eva+0x2c8>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fb66 	bl	80001e4 <__adddf3>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4956      	ldr	r1, [pc, #344]	; (8003c78 <Trajectory_Eva+0x298>)
 8003b1e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003b22:	e2c6      	b.n	80040b2 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 8003b24:	4b54      	ldr	r3, [pc, #336]	; (8003c78 <Trajectory_Eva+0x298>)
 8003b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b2a:	4b60      	ldr	r3, [pc, #384]	; (8003cac <Trajectory_Eva+0x2cc>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc ff8a 	bl	8000a48 <__aeabi_dcmple>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80bc 	beq.w	8003cb4 <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <Trajectory_Eva+0x2c4>)
 8003b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f7fc fd02 	bl	8000550 <__aeabi_dmul>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <Trajectory_Eva+0x2c0>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fb43 	bl	80001e4 <__adddf3>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4614      	mov	r4, r2
 8003b64:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fc86 	bl	800047c <__aeabi_i2d>
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <Trajectory_Eva+0x2a4>)
 8003b76:	f7fc fceb 	bl	8000550 <__aeabi_dmul>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc fce2 	bl	8000550 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f7fc fcd9 	bl	8000550 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fcd0 	bl	8000550 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fb12 	bl	80001e0 <__aeabi_dsub>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8003bc0:	4934      	ldr	r1, [pc, #208]	; (8003c94 <Trajectory_Eva+0x2b4>)
 8003bc2:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <Trajectory_Eva+0x2c4>)
 8003bc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fcba 	bl	8000550 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4692      	mov	sl, r2
 8003be2:	469b      	mov	fp, r3
 8003be4:	4b26      	ldr	r3, [pc, #152]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fc47 	bl	800047c <__aeabi_i2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	f7fc fcab 	bl	8000550 <__aeabi_dmul>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc faed 	bl	80001e0 <__aeabi_dsub>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4923      	ldr	r1, [pc, #140]	; (8003c98 <Trajectory_Eva+0x2b8>)
 8003c0c:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <Trajectory_Eva+0x2a8>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	4690      	mov	r8, r2
 8003c18:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <Trajectory_Eva+0x2a0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc2b 	bl	800047c <__aeabi_i2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc fc8f 	bl	8000550 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4919      	ldr	r1, [pc, #100]	; (8003c9c <Trajectory_Eva+0x2bc>)
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <Trajectory_Eva+0x2c8>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f7fc facc 	bl	80001e4 <__adddf3>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4917      	ldr	r1, [pc, #92]	; (8003cb0 <Trajectory_Eva+0x2d0>)
 8003c52:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <Trajectory_Eva+0x298>)
 8003c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <Trajectory_Eva+0x2c8>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f7fc fabf 	bl	80001e4 <__adddf3>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4903      	ldr	r1, [pc, #12]	; (8003c78 <Trajectory_Eva+0x298>)
 8003c6c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003c70:	e21f      	b.n	80040b2 <Trajectory_Eva+0x6d2>
 8003c72:	bf00      	nop
 8003c74:	200010e0 	.word	0x200010e0
 8003c78:	20000260 	.word	0x20000260
 8003c7c:	20001140 	.word	0x20001140
 8003c80:	200010e4 	.word	0x200010e4
 8003c84:	3fe00000 	.word	0x3fe00000
 8003c88:	20001100 	.word	0x20001100
 8003c8c:	20000248 	.word	0x20000248
 8003c90:	200010e8 	.word	0x200010e8
 8003c94:	20000968 	.word	0x20000968
 8003c98:	20000970 	.word	0x20000970
 8003c9c:	20000978 	.word	0x20000978
 8003ca0:	20001110 	.word	0x20001110
 8003ca4:	20001120 	.word	0x20001120
 8003ca8:	20000268 	.word	0x20000268
 8003cac:	20001138 	.word	0x20001138
 8003cb0:	20000250 	.word	0x20000250
			x = x_final;
 8003cb4:	4b8e      	ldr	r3, [pc, #568]	; (8003ef0 <Trajectory_Eva+0x510>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	498e      	ldr	r1, [pc, #568]	; (8003ef4 <Trajectory_Eva+0x514>)
 8003cbc:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8003cc0:	498d      	ldr	r1, [pc, #564]	; (8003ef8 <Trajectory_Eva+0x518>)
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8003cce:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <Trajectory_Eva+0x51c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
		break;
 8003cd4:	e1ed      	b.n	80040b2 <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 8003cd6:	4b8a      	ldr	r3, [pc, #552]	; (8003f00 <Trajectory_Eva+0x520>)
 8003cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cdc:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <Trajectory_Eva+0x524>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc feb1 	bl	8000a48 <__aeabi_dcmple>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8089 	beq.w	8003e00 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8003cee:	4b86      	ldr	r3, [pc, #536]	; (8003f08 <Trajectory_Eva+0x528>)
 8003cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	4b84      	ldr	r3, [pc, #528]	; (8003f0c <Trajectory_Eva+0x52c>)
 8003cfa:	f7fc fc29 	bl	8000550 <__aeabi_dmul>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	461d      	mov	r5, r3
 8003d06:	4b82      	ldr	r3, [pc, #520]	; (8003f10 <Trajectory_Eva+0x530>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fbb6 	bl	800047c <__aeabi_i2d>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4620      	mov	r0, r4
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7fc fc1a 	bl	8000550 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	4b7b      	ldr	r3, [pc, #492]	; (8003f14 <Trajectory_Eva+0x534>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc11 	bl	8000550 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4b77      	ldr	r3, [pc, #476]	; (8003f14 <Trajectory_Eva+0x534>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc fc08 	bl	8000550 <__aeabi_dmul>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <Trajectory_Eva+0x538>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fa49 	bl	80001e4 <__adddf3>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4967      	ldr	r1, [pc, #412]	; (8003ef4 <Trajectory_Eva+0x514>)
 8003d58:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <Trajectory_Eva+0x528>)
 8003d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d62:	4b6c      	ldr	r3, [pc, #432]	; (8003f14 <Trajectory_Eva+0x534>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc fbf2 	bl	8000550 <__aeabi_dmul>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <Trajectory_Eva+0x530>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fb7f 	bl	800047c <__aeabi_i2d>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4620      	mov	r0, r4
 8003d84:	4629      	mov	r1, r5
 8003d86:	f7fc fbe3 	bl	8000550 <__aeabi_dmul>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	495a      	ldr	r1, [pc, #360]	; (8003ef8 <Trajectory_Eva+0x518>)
 8003d90:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003d94:	4b5e      	ldr	r3, [pc, #376]	; (8003f10 <Trajectory_Eva+0x530>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fb6f 	bl	800047c <__aeabi_i2d>
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <Trajectory_Eva+0x528>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f7fc fbd4 	bl	8000550 <__aeabi_dmul>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	495b      	ldr	r1, [pc, #364]	; (8003f1c <Trajectory_Eva+0x53c>)
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <Trajectory_Eva+0x514>)
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	4959      	ldr	r1, [pc, #356]	; (8003f20 <Trajectory_Eva+0x540>)
 8003dba:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <Trajectory_Eva+0x518>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	4957      	ldr	r1, [pc, #348]	; (8003f24 <Trajectory_Eva+0x544>)
 8003dc6:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8003dca:	4b52      	ldr	r3, [pc, #328]	; (8003f14 <Trajectory_Eva+0x534>)
 8003dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dd0:	4b55      	ldr	r3, [pc, #340]	; (8003f28 <Trajectory_Eva+0x548>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f7fc fa05 	bl	80001e4 <__adddf3>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	494d      	ldr	r1, [pc, #308]	; (8003f14 <Trajectory_Eva+0x534>)
 8003de0:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <Trajectory_Eva+0x520>)
 8003de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dea:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <Trajectory_Eva+0x548>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc f9f8 	bl	80001e4 <__adddf3>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4941      	ldr	r1, [pc, #260]	; (8003f00 <Trajectory_Eva+0x520>)
 8003dfa:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003dfe:	e158      	b.n	80040b2 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <Trajectory_Eva+0x54c>)
 8003e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <Trajectory_Eva+0x524>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc f9e8 	bl	80001e0 <__aeabi_dsub>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <Trajectory_Eva+0x520>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fe1d 	bl	8000a5c <__aeabi_dcmpge>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 808b 	beq.w	8003f40 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 8003e2a:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <Trajectory_Eva+0x550>)
 8003e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e30:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <Trajectory_Eva+0x554>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f7fc fb8b 	bl	8000550 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4614      	mov	r4, r2
 8003e40:	461d      	mov	r5, r3
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <Trajectory_Eva+0x530>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc fb18 	bl	800047c <__aeabi_i2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fb7c 	bl	8000550 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <Trajectory_Eva+0x540>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f7fc f9bd 	bl	80001e4 <__adddf3>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4921      	ldr	r1, [pc, #132]	; (8003ef4 <Trajectory_Eva+0x514>)
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 8003e74:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <Trajectory_Eva+0x530>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc faff 	bl	800047c <__aeabi_i2d>
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <Trajectory_Eva+0x550>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc fb64 	bl	8000550 <__aeabi_dmul>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <Trajectory_Eva+0x518>)
 8003e8e:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 8003e92:	4922      	ldr	r1, [pc, #136]	; (8003f1c <Trajectory_Eva+0x53c>)
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <Trajectory_Eva+0x514>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	4924      	ldr	r1, [pc, #144]	; (8003f38 <Trajectory_Eva+0x558>)
 8003ea8:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <Trajectory_Eva+0x518>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	4922      	ldr	r1, [pc, #136]	; (8003f3c <Trajectory_Eva+0x55c>)
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <Trajectory_Eva+0x554>)
 8003eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <Trajectory_Eva+0x548>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc f98e 	bl	80001e4 <__adddf3>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4919      	ldr	r1, [pc, #100]	; (8003f34 <Trajectory_Eva+0x554>)
 8003ece:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <Trajectory_Eva+0x520>)
 8003ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <Trajectory_Eva+0x548>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc f981 	bl	80001e4 <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4906      	ldr	r1, [pc, #24]	; (8003f00 <Trajectory_Eva+0x520>)
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003eec:	e0e1      	b.n	80040b2 <Trajectory_Eva+0x6d2>
 8003eee:	bf00      	nop
 8003ef0:	200010f0 	.word	0x200010f0
 8003ef4:	20000968 	.word	0x20000968
 8003ef8:	20000970 	.word	0x20000970
 8003efc:	200010e0 	.word	0x200010e0
 8003f00:	20000260 	.word	0x20000260
 8003f04:	20001130 	.word	0x20001130
 8003f08:	20001100 	.word	0x20001100
 8003f0c:	3fe00000 	.word	0x3fe00000
 8003f10:	200010e4 	.word	0x200010e4
 8003f14:	20000248 	.word	0x20000248
 8003f18:	200010e8 	.word	0x200010e8
 8003f1c:	20000978 	.word	0x20000978
 8003f20:	20001110 	.word	0x20001110
 8003f24:	20001120 	.word	0x20001120
 8003f28:	20000268 	.word	0x20000268
 8003f2c:	20001138 	.word	0x20001138
 8003f30:	200010f8 	.word	0x200010f8
 8003f34:	20000258 	.word	0x20000258
 8003f38:	20001118 	.word	0x20001118
 8003f3c:	20001128 	.word	0x20001128
		} else if (t_count <= t_final) {
 8003f40:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <Trajectory_Eva+0x6d8>)
 8003f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <Trajectory_Eva+0x6dc>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f7fc fd7c 	bl	8000a48 <__aeabi_dcmple>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 809b 	beq.w	800408e <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <Trajectory_Eva+0x6e0>)
 8003f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f5e:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <Trajectory_Eva+0x6e4>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc faf4 	bl	8000550 <__aeabi_dmul>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4b55      	ldr	r3, [pc, #340]	; (80040c8 <Trajectory_Eva+0x6e8>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f7fc f935 	bl	80001e4 <__adddf3>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 8003f82:	4b52      	ldr	r3, [pc, #328]	; (80040cc <Trajectory_Eva+0x6ec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fa78 	bl	800047c <__aeabi_i2d>
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <Trajectory_Eva+0x6f0>)
 8003f92:	f7fc fadd 	bl	8000550 <__aeabi_dmul>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <Trajectory_Eva+0x6f4>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc fad4 	bl	8000550 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4692      	mov	sl, r2
 8003fae:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8003fb0:	4b44      	ldr	r3, [pc, #272]	; (80040c4 <Trajectory_Eva+0x6e4>)
 8003fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fb6:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <Trajectory_Eva+0x6e4>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f7fc fac8 	bl	8000550 <__aeabi_dmul>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f7fc fac2 	bl	8000550 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	f7fc f904 	bl	80001e0 <__aeabi_dsub>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
			x =
 8003fdc:	493e      	ldr	r1, [pc, #248]	; (80040d8 <Trajectory_Eva+0x6f8>)
 8003fde:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <Trajectory_Eva+0x6e0>)
 8003fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <Trajectory_Eva+0x6f4>)
 8003fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fee:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <Trajectory_Eva+0x6e4>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc faac 	bl	8000550 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4692      	mov	sl, r2
 8003ffe:	469b      	mov	fp, r3
 8004000:	4b32      	ldr	r3, [pc, #200]	; (80040cc <Trajectory_Eva+0x6ec>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fa39 	bl	800047c <__aeabi_i2d>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4650      	mov	r0, sl
 8004010:	4659      	mov	r1, fp
 8004012:	f7fc fa9d 	bl	8000550 <__aeabi_dmul>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4640      	mov	r0, r8
 800401c:	4649      	mov	r1, r9
 800401e:	f7fc f8df 	bl	80001e0 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	492d      	ldr	r1, [pc, #180]	; (80040dc <Trajectory_Eva+0x6fc>)
 8004028:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 800402c:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <Trajectory_Eva+0x6f4>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	4614      	mov	r4, r2
 8004034:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <Trajectory_Eva+0x6ec>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa1d 	bl	800047c <__aeabi_i2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc fa81 	bl	8000550 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4923      	ldr	r1, [pc, #140]	; (80040e0 <Trajectory_Eva+0x700>)
 8004054:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <Trajectory_Eva+0x6e4>)
 800405a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <Trajectory_Eva+0x704>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc f8be 	bl	80001e4 <__adddf3>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4915      	ldr	r1, [pc, #84]	; (80040c4 <Trajectory_Eva+0x6e4>)
 800406e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <Trajectory_Eva+0x6d8>)
 8004074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <Trajectory_Eva+0x704>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc f8b1 	bl	80001e4 <__adddf3>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	490c      	ldr	r1, [pc, #48]	; (80040b8 <Trajectory_Eva+0x6d8>)
 8004088:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800408c:	e011      	b.n	80040b2 <Trajectory_Eva+0x6d2>
			x = x_final;
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <Trajectory_Eva+0x708>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	4910      	ldr	r1, [pc, #64]	; (80040d8 <Trajectory_Eva+0x6f8>)
 8004096:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 800409a:	4910      	ldr	r1, [pc, #64]	; (80040dc <Trajectory_Eva+0x6fc>)
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <Trajectory_Eva+0x70c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
		break;
 80040ae:	e000      	b.n	80040b2 <Trajectory_Eva+0x6d2>
		break;
 80040b0:	bf00      	nop
}
 80040b2:	bf00      	nop
 80040b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b8:	20000260 	.word	0x20000260
 80040bc:	20001138 	.word	0x20001138
 80040c0:	20001128 	.word	0x20001128
 80040c4:	20000250 	.word	0x20000250
 80040c8:	20001118 	.word	0x20001118
 80040cc:	200010e4 	.word	0x200010e4
 80040d0:	3fe00000 	.word	0x3fe00000
 80040d4:	20001100 	.word	0x20001100
 80040d8:	20000968 	.word	0x20000968
 80040dc:	20000970 	.word	0x20000970
 80040e0:	20000978 	.word	0x20000978
 80040e4:	20000268 	.word	0x20000268
 80040e8:	200010f0 	.word	0x200010f0
 80040ec:	200010e0 	.word	0x200010e0

080040f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_MspInit+0x4c>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	4a0f      	ldr	r2, [pc, #60]	; (800413c <HAL_MspInit+0x4c>)
 8004100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004104:	6453      	str	r3, [r2, #68]	; 0x44
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_MspInit+0x4c>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_MspInit+0x4c>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <HAL_MspInit+0x4c>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_MspInit+0x4c>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800412e:	2007      	movs	r0, #7
 8004130:	f000 fc82 	bl	8004a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <HAL_I2C_MspInit+0xa4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d13c      	bne.n	80041dc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800417e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004184:	2312      	movs	r3, #18
 8004186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004190:	2304      	movs	r3, #4
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	4814      	ldr	r0, [pc, #80]	; (80041ec <HAL_I2C_MspInit+0xac>)
 800419c:	f001 f89c 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041a0:	2308      	movs	r3, #8
 80041a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041a4:	2312      	movs	r3, #18
 80041a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80041b0:	2309      	movs	r3, #9
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	480c      	ldr	r0, [pc, #48]	; (80041ec <HAL_I2C_MspInit+0xac>)
 80041bc:	f001 f88c 	bl	80052d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 80041ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_I2C_MspInit+0xa8>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40005800 	.word	0x40005800
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40020400 	.word	0x40020400

080041f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_SPI_MspInit+0x84>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12c      	bne.n	800426c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <HAL_SPI_MspInit+0x88>)
 800421c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800424a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800424e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004258:	2303      	movs	r3, #3
 800425a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800425c:	2306      	movs	r3, #6
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	4619      	mov	r1, r3
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <HAL_SPI_MspInit+0x8c>)
 8004268:	f001 f836 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800426c:	bf00      	nop
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40003c00 	.word	0x40003c00
 8004278:	40023800 	.word	0x40023800
 800427c:	40020800 	.word	0x40020800

08004280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a38      	ldr	r2, [pc, #224]	; (8004370 <HAL_TIM_Base_MspInit+0xf0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d116      	bne.n	80042c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4a36      	ldr	r2, [pc, #216]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6453      	str	r3, [r2, #68]	; 0x44
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	201a      	movs	r0, #26
 80042b4:	f000 fbcb 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80042b8:	201a      	movs	r0, #26
 80042ba:	f000 fbe4 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80042be:	e052      	b.n	8004366 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <HAL_TIM_Base_MspInit+0xf8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d116      	bne.n	80042f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2100      	movs	r1, #0
 80042ea:	201d      	movs	r0, #29
 80042ec:	f000 fbaf 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042f0:	201d      	movs	r0, #29
 80042f2:	f000 fbc8 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 80042f6:	e036      	b.n	8004366 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <HAL_TIM_Base_MspInit+0xfc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d116      	bne.n	8004330 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 800430c:	f043 0308 	orr.w	r3, r3, #8
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	2100      	movs	r1, #0
 8004322:	2032      	movs	r0, #50	; 0x32
 8004324:	f000 fb93 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004328:	2032      	movs	r0, #50	; 0x32
 800432a:	f000 fbac 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 800432e:	e01a      	b.n	8004366 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIM_Base_MspInit+0x100>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d115      	bne.n	8004366 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_TIM_Base_MspInit+0xf4>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	201a      	movs	r0, #26
 800435c:	f000 fb77 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004360:	201a      	movs	r0, #26
 8004362:	f000 fb90 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40023800 	.word	0x40023800
 8004378:	40000400 	.word	0x40000400
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40014800 	.word	0x40014800

08004384 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d12b      	bne.n	80043fe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_TIM_Encoder_MspInit+0x84>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043de:	2303      	movs	r3, #3
 80043e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	2300      	movs	r3, #0
 80043ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	4619      	mov	r1, r3
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <HAL_TIM_Encoder_MspInit+0x88>)
 80043fa:	f000 ff6d 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043fe:	bf00      	nop
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40020000 	.word	0x40020000

08004410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a12      	ldr	r2, [pc, #72]	; (8004478 <HAL_TIM_MspPostInit+0x68>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d11e      	bne.n	8004470 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_TIM_MspPostInit+0x6c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <HAL_TIM_MspPostInit+0x6c>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_TIM_MspPostInit+0x6c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800444e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004460:	2301      	movs	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4619      	mov	r1, r3
 800446a:	4805      	ldr	r0, [pc, #20]	; (8004480 <HAL_TIM_MspPostInit+0x70>)
 800446c:	f000 ff34 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004470:	bf00      	nop
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40010000 	.word	0x40010000
 800447c:	40023800 	.word	0x40023800
 8004480:	40020000 	.word	0x40020000

08004484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a4d      	ldr	r2, [pc, #308]	; (80045d8 <HAL_UART_MspInit+0x154>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d162      	bne.n	800456c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	4b45      	ldr	r3, [pc, #276]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a44      	ldr	r2, [pc, #272]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b42      	ldr	r3, [pc, #264]	; (80045dc <HAL_UART_MspInit+0x158>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044de:	230c      	movs	r3, #12
 80044e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ea:	2303      	movs	r3, #3
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044ee:	2307      	movs	r3, #7
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	4839      	ldr	r0, [pc, #228]	; (80045e0 <HAL_UART_MspInit+0x15c>)
 80044fa:	f000 feed 	bl	80052d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004500:	4a39      	ldr	r2, [pc, #228]	; (80045e8 <HAL_UART_MspInit+0x164>)
 8004502:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004504:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <HAL_UART_MspInit+0x160>)
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004514:	2200      	movs	r2, #0
 8004516:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_UART_MspInit+0x160>)
 800451a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800451e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004520:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004522:	2200      	movs	r2, #0
 8004524:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004526:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004528:	2200      	movs	r2, #0
 800452a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_UART_MspInit+0x160>)
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004534:	2200      	movs	r2, #0
 8004536:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004538:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_UART_MspInit+0x160>)
 800453a:	2200      	movs	r2, #0
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800453e:	4829      	ldr	r0, [pc, #164]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004540:	f000 fabc 	bl	8004abc <HAL_DMA_Init>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800454a:	f7fe ff51 	bl	80033f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004552:	635a      	str	r2, [r3, #52]	; 0x34
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_UART_MspInit+0x160>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800455a:	2200      	movs	r2, #0
 800455c:	2100      	movs	r1, #0
 800455e:	2026      	movs	r0, #38	; 0x26
 8004560:	f000 fa75 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004564:	2026      	movs	r0, #38	; 0x26
 8004566:	f000 fa8e 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800456a:	e031      	b.n	80045d0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_UART_MspInit+0x168>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d12c      	bne.n	80045d0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_UART_MspInit+0x158>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <HAL_UART_MspInit+0x158>)
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	6453      	str	r3, [r2, #68]	; 0x44
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_UART_MspInit+0x158>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_UART_MspInit+0x158>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <HAL_UART_MspInit+0x158>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6313      	str	r3, [r2, #48]	; 0x30
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <HAL_UART_MspInit+0x158>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80045ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80045b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b4:	2302      	movs	r3, #2
 80045b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045bc:	2303      	movs	r3, #3
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045c0:	2308      	movs	r3, #8
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c4:	f107 031c 	add.w	r3, r7, #28
 80045c8:	4619      	mov	r1, r3
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <HAL_UART_MspInit+0x15c>)
 80045cc:	f000 fe84 	bl	80052d8 <HAL_GPIO_Init>
}
 80045d0:	bf00      	nop
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	200008fc 	.word	0x200008fc
 80045e8:	400260a0 	.word	0x400260a0
 80045ec:	40011400 	.word	0x40011400

080045f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045f4:	e7fe      	b.n	80045f4 <NMI_Handler+0x4>

080045f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045fa:	e7fe      	b.n	80045fa <HardFault_Handler+0x4>

080045fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <MemManage_Handler+0x4>

08004602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004606:	e7fe      	b.n	8004606 <BusFault_Handler+0x4>

08004608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800460c:	e7fe      	b.n	800460c <UsageFault_Handler+0x4>

0800460e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800463c:	f000 f8e8 	bl	8004810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}

08004644 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8004648:	2004      	movs	r0, #4
 800464a:	f000 fffb 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}

08004652 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8004656:	2008      	movs	r0, #8
 8004658:	f000 fff4 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}

08004660 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <DMA1_Stream6_IRQHandler+0x10>)
 8004666:	f000 fbc1 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200008fc 	.word	0x200008fc

08004674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8004678:	2040      	movs	r0, #64	; 0x40
 800467a:	f000 ffe3 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 800467e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004682:	f000 ffdf 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004690:	4803      	ldr	r0, [pc, #12]	; (80046a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004692:	f003 fbb7 	bl	8007e04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004696:	4803      	ldr	r0, [pc, #12]	; (80046a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004698:	f003 fbb4 	bl	8007e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000490 	.word	0x20000490
 80046a4:	20000760 	.word	0x20000760

080046a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046ac:	4802      	ldr	r0, [pc, #8]	; (80046b8 <TIM3_IRQHandler+0x10>)
 80046ae:	f003 fba9 	bl	8007e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200005f8 	.word	0x200005f8

080046bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <USART2_IRQHandler+0x10>)
 80046c2:	f004 fea7 	bl	8009414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000814 	.word	0x20000814

080046d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80046d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046d8:	f000 ffb4 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}

080046e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <TIM5_IRQHandler+0x10>)
 80046e6:	f003 fb8d 	bl	8007e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200006ac 	.word	0x200006ac

080046f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <SystemInit+0x20>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	4a05      	ldr	r2, [pc, #20]	; (8004714 <SystemInit+0x20>)
 8004700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800471c:	480d      	ldr	r0, [pc, #52]	; (8004754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800471e:	490e      	ldr	r1, [pc, #56]	; (8004758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004720:	4a0e      	ldr	r2, [pc, #56]	; (800475c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004724:	e002      	b.n	800472c <LoopCopyDataInit>

08004726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800472a:	3304      	adds	r3, #4

0800472c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800472c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800472e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004730:	d3f9      	bcc.n	8004726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004732:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004734:	4c0b      	ldr	r4, [pc, #44]	; (8004764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004738:	e001      	b.n	800473e <LoopFillZerobss>

0800473a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800473a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800473c:	3204      	adds	r2, #4

0800473e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800473e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004740:	d3fb      	bcc.n	800473a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004742:	f7ff ffd7 	bl	80046f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004746:	f005 feb1 	bl	800a4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800474a:	f7fd fc75 	bl	8002038 <main>
  bx  lr    
 800474e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004758:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800475c:	0800a774 	.word	0x0800a774
  ldr r2, =_sbss
 8004760:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8004764:	2000114c 	.word	0x2000114c

08004768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004768:	e7fe      	b.n	8004768 <ADC_IRQHandler>
	...

0800476c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <HAL_Init+0x40>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <HAL_Init+0x40>)
 8004776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800477a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_Init+0x40>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <HAL_Init+0x40>)
 8004782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <HAL_Init+0x40>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a07      	ldr	r2, [pc, #28]	; (80047ac <HAL_Init+0x40>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004794:	2003      	movs	r0, #3
 8004796:	f000 f94f 	bl	8004a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800479a:	2000      	movs	r0, #0
 800479c:	f000 f808 	bl	80047b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a0:	f7ff fca6 	bl	80040f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023c00 	.word	0x40023c00

080047b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_InitTick+0x54>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_InitTick+0x58>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4619      	mov	r1, r3
 80047c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f967 	bl	8004aa2 <HAL_SYSTICK_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e00e      	b.n	80047fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b0f      	cmp	r3, #15
 80047e2:	d80a      	bhi.n	80047fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e4:	2200      	movs	r2, #0
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f000 f92f 	bl	8004a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f0:	4a06      	ldr	r2, [pc, #24]	; (800480c <HAL_InitTick+0x5c>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000284 	.word	0x20000284
 8004808:	2000028c 	.word	0x2000028c
 800480c:	20000288 	.word	0x20000288

08004810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_IncTick+0x20>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_IncTick+0x24>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4413      	add	r3, r2
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_IncTick+0x24>)
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000028c 	.word	0x2000028c
 8004834:	20001148 	.word	0x20001148

08004838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return uwTick;
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <HAL_GetTick+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20001148 	.word	0x20001148

08004850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7ff ffee 	bl	8004838 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d005      	beq.n	8004876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_Delay+0x44>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004876:	bf00      	nop
 8004878:	f7ff ffde 	bl	8004838 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d8f7      	bhi.n	8004878 <HAL_Delay+0x28>
  {
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000028c 	.word	0x2000028c

08004898 <__NVIC_SetPriorityGrouping>:
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ca:	4a04      	ldr	r2, [pc, #16]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60d3      	str	r3, [r2, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_GetPriorityGrouping>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <__NVIC_GetPriorityGrouping+0x18>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 0307 	and.w	r3, r3, #7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_EnableIRQ>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	; (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_SetPriority>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db0a      	blt.n	8004962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	490c      	ldr	r1, [pc, #48]	; (8004984 <__NVIC_SetPriority+0x4c>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	440b      	add	r3, r1
 800495c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004960:	e00a      	b.n	8004978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4908      	ldr	r1, [pc, #32]	; (8004988 <__NVIC_SetPriority+0x50>)
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3b04      	subs	r3, #4
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	440b      	add	r3, r1
 8004976:	761a      	strb	r2, [r3, #24]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000e100 	.word	0xe000e100
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <NVIC_EncodePriority>:
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf28      	it	cs
 80049aa:	2304      	movcs	r3, #4
 80049ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d902      	bls.n	80049bc <NVIC_EncodePriority+0x30>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3b03      	subs	r3, #3
 80049ba:	e000      	b.n	80049be <NVIC_EncodePriority+0x32>
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	401a      	ands	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	43d9      	mvns	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	4313      	orrs	r3, r2
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3724      	adds	r7, #36	; 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d301      	bcc.n	8004a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a06:	2301      	movs	r3, #1
 8004a08:	e00f      	b.n	8004a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <SysTick_Config+0x40>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a12:	210f      	movs	r1, #15
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	f7ff ff8e 	bl	8004938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <SysTick_Config+0x40>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <SysTick_Config+0x40>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	e000e010 	.word	0xe000e010

08004a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff29 	bl	8004898 <__NVIC_SetPriorityGrouping>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	4603      	mov	r3, r0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a60:	f7ff ff3e 	bl	80048e0 <__NVIC_GetPriorityGrouping>
 8004a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff8e 	bl	800498c <NVIC_EncodePriority>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff5d 	bl	8004938 <__NVIC_SetPriority>
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff31 	bl	80048fc <__NVIC_EnableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ffa2 	bl	80049f4 <SysTick_Config>
 8004ab0:	4603      	mov	r3, r0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ac8:	f7ff feb6 	bl	8004838 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e099      	b.n	8004c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af8:	e00f      	b.n	8004b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004afa:	f7ff fe9d 	bl	8004838 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d908      	bls.n	8004b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e078      	b.n	8004c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e8      	bne.n	8004afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <HAL_DMA_Init+0x158>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d107      	bne.n	8004b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0307 	bic.w	r3, r3, #7
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d117      	bne.n	8004bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb0d 	bl	80051e0 <DMA_CheckFifoParam>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2240      	movs	r2, #64	; 0x40
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e016      	b.n	8004c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fac4 	bl	8005174 <DMA_CalcBaseAndBitshift>
 8004bec:	4603      	mov	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	223f      	movs	r2, #63	; 0x3f
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	f010803f 	.word	0xf010803f

08004c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_DMA_Start_IT+0x26>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e040      	b.n	8004cc0 <HAL_DMA_Start_IT+0xa8>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d12f      	bne.n	8004cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa56 	bl	8005118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	223f      	movs	r2, #63	; 0x3f
 8004c72:	409a      	lsls	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0216 	orr.w	r2, r2, #22
 8004c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e005      	b.n	8004cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cd6:	f7ff fdaf 	bl	8004838 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d008      	beq.n	8004cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e052      	b.n	8004da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0216 	bic.w	r2, r2, #22
 8004d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_DMA_Abort+0x62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0208 	bic.w	r2, r2, #8
 8004d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4a:	e013      	b.n	8004d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d4c:	f7ff fd74 	bl	8004838 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d90c      	bls.n	8004d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e015      	b.n	8004da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e4      	bne.n	8004d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	223f      	movs	r2, #63	; 0x3f
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d004      	beq.n	8004dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e00c      	b.n	8004de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2205      	movs	r2, #5
 8004dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004df8:	4b8e      	ldr	r3, [pc, #568]	; (8005034 <HAL_DMA_IRQHandler+0x248>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a8e      	ldr	r2, [pc, #568]	; (8005038 <HAL_DMA_IRQHandler+0x24c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	2208      	movs	r2, #8
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	2208      	movs	r2, #8
 8004e46:	409a      	lsls	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	2204      	movs	r2, #4
 8004e94:	409a      	lsls	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2210      	movs	r2, #16
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d043      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03c      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d018      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d024      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e01f      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01b      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
 8004f2c:	e016      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0208 	bic.w	r2, r2, #8
 8004f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	2220      	movs	r2, #32
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 808f 	beq.w	800508c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8087 	beq.w	800508c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	2220      	movs	r2, #32
 8004f84:	409a      	lsls	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d136      	bne.n	8005004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0216 	bic.w	r2, r2, #22
 8004fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x1da>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	223f      	movs	r2, #63	; 0x3f
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d07e      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
        }
        return;
 8005002:	e079      	b.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	2b00      	cmp	r3, #0
 8005026:	d031      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
 8005030:	e02c      	b.n	800508c <HAL_DMA_IRQHandler+0x2a0>
 8005032:	bf00      	nop
 8005034:	20000284 	.word	0x20000284
 8005038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d023      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
 800504c:	e01e      	b.n	800508c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0210 	bic.w	r2, r2, #16
 800506a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	2b00      	cmp	r3, #0
 8005092:	d032      	beq.n	80050fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2205      	movs	r2, #5
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d307      	bcc.n	80050d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f2      	bne.n	80050b8 <HAL_DMA_IRQHandler+0x2cc>
 80050d2:	e000      	b.n	80050d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
 80050f6:	e000      	b.n	80050fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80050f8:	bf00      	nop
    }
  }
}
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d108      	bne.n	8005158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005156:	e007      	b.n	8005168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3b10      	subs	r3, #16
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <DMA_CalcBaseAndBitshift+0x68>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d909      	bls.n	80051b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	659a      	str	r2, [r3, #88]	; 0x58
 80051b4:	e007      	b.n	80051c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	aaaaaaab 	.word	0xaaaaaaab
 80051dc:	0800a75c 	.word	0x0800a75c

080051e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11f      	bne.n	800523a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d856      	bhi.n	80052ae <DMA_CheckFifoParam+0xce>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <DMA_CheckFifoParam+0x28>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	0800522b 	.word	0x0800522b
 8005210:	08005219 	.word	0x08005219
 8005214:	080052af 	.word	0x080052af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d046      	beq.n	80052b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005228:	e043      	b.n	80052b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005232:	d140      	bne.n	80052b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005238:	e03d      	b.n	80052b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	d121      	bne.n	8005288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d837      	bhi.n	80052ba <DMA_CheckFifoParam+0xda>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <DMA_CheckFifoParam+0x70>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005261 	.word	0x08005261
 8005254:	08005267 	.word	0x08005267
 8005258:	08005261 	.word	0x08005261
 800525c:	08005279 	.word	0x08005279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e030      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d025      	beq.n	80052be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005276:	e022      	b.n	80052be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005280:	d11f      	bne.n	80052c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005286:	e01c      	b.n	80052c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d903      	bls.n	8005296 <DMA_CheckFifoParam+0xb6>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d003      	beq.n	800529c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005294:	e018      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      break;
 800529a:	e015      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      break;
 80052ac:	e00b      	b.n	80052c6 <DMA_CheckFifoParam+0xe6>
      break;
 80052ae:	bf00      	nop
 80052b0:	e00a      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b2:	bf00      	nop
 80052b4:	e008      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b6:	bf00      	nop
 80052b8:	e006      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ba:	bf00      	nop
 80052bc:	e004      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c6:	bf00      	nop
    }
  } 
  
  return status; 
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e159      	b.n	80055a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052f4:	2201      	movs	r2, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	f040 8148 	bne.w	80055a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d005      	beq.n	800532a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005326:	2b02      	cmp	r3, #2
 8005328:	d130      	bne.n	800538c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	2203      	movs	r2, #3
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005360:	2201      	movs	r2, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 0201 	and.w	r2, r3, #1
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b03      	cmp	r3, #3
 8005396:	d017      	beq.n	80053c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	2203      	movs	r2, #3
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d123      	bne.n	800541c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	08da      	lsrs	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3208      	adds	r2, #8
 80053dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	220f      	movs	r2, #15
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	08da      	lsrs	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3208      	adds	r2, #8
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2203      	movs	r2, #3
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0203 	and.w	r2, r3, #3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80a2 	beq.w	80055a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b57      	ldr	r3, [pc, #348]	; (80055c0 <HAL_GPIO_Init+0x2e8>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <HAL_GPIO_Init+0x2e8>)
 8005468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_GPIO_Init+0x2e8>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547a:	4a52      	ldr	r2, [pc, #328]	; (80055c4 <HAL_GPIO_Init+0x2ec>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	220f      	movs	r2, #15
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a49      	ldr	r2, [pc, #292]	; (80055c8 <HAL_GPIO_Init+0x2f0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d019      	beq.n	80054da <HAL_GPIO_Init+0x202>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a48      	ldr	r2, [pc, #288]	; (80055cc <HAL_GPIO_Init+0x2f4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_GPIO_Init+0x1fe>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a47      	ldr	r2, [pc, #284]	; (80055d0 <HAL_GPIO_Init+0x2f8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00d      	beq.n	80054d2 <HAL_GPIO_Init+0x1fa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a46      	ldr	r2, [pc, #280]	; (80055d4 <HAL_GPIO_Init+0x2fc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <HAL_GPIO_Init+0x1f6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a45      	ldr	r2, [pc, #276]	; (80055d8 <HAL_GPIO_Init+0x300>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_GPIO_Init+0x1f2>
 80054c6:	2304      	movs	r3, #4
 80054c8:	e008      	b.n	80054dc <HAL_GPIO_Init+0x204>
 80054ca:	2307      	movs	r3, #7
 80054cc:	e006      	b.n	80054dc <HAL_GPIO_Init+0x204>
 80054ce:	2303      	movs	r3, #3
 80054d0:	e004      	b.n	80054dc <HAL_GPIO_Init+0x204>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e002      	b.n	80054dc <HAL_GPIO_Init+0x204>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_GPIO_Init+0x204>
 80054da:	2300      	movs	r3, #0
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	f002 0203 	and.w	r2, r2, #3
 80054e2:	0092      	lsls	r2, r2, #2
 80054e4:	4093      	lsls	r3, r2
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ec:	4935      	ldr	r1, [pc, #212]	; (80055c4 <HAL_GPIO_Init+0x2ec>)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	3302      	adds	r3, #2
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054fa:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_GPIO_Init+0x304>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800551e:	4a2f      	ldr	r2, [pc, #188]	; (80055dc <HAL_GPIO_Init+0x304>)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005524:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <HAL_GPIO_Init+0x304>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005548:	4a24      	ldr	r2, [pc, #144]	; (80055dc <HAL_GPIO_Init+0x304>)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <HAL_GPIO_Init+0x304>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005572:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <HAL_GPIO_Init+0x304>)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005578:	4b18      	ldr	r3, [pc, #96]	; (80055dc <HAL_GPIO_Init+0x304>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800559c:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <HAL_GPIO_Init+0x304>)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	f67f aea2 	bls.w	80052f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3724      	adds	r7, #36	; 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40013800 	.word	0x40013800
 80055c8:	40020000 	.word	0x40020000
 80055cc:	40020400 	.word	0x40020400
 80055d0:	40020800 	.word	0x40020800
 80055d4:	40020c00 	.word	0x40020c00
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40013c00 	.word	0x40013c00

080055e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	887b      	ldrh	r3, [r7, #2]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e001      	b.n	8005602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800562c:	e003      	b.n	8005636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	041a      	lsls	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	619a      	str	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800565a:	4a05      	ldr	r2, [pc, #20]	; (8005670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fd fe84 	bl	8003370 <HAL_GPIO_EXTI_Callback>
  }
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40013c00 	.word	0x40013c00

08005674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e12b      	b.n	80058de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fe fd50 	bl	8004140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056d8:	f001 fbd2 	bl	8006e80 <HAL_RCC_GetPCLK1Freq>
 80056dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4a81      	ldr	r2, [pc, #516]	; (80058e8 <HAL_I2C_Init+0x274>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d807      	bhi.n	80056f8 <HAL_I2C_Init+0x84>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a80      	ldr	r2, [pc, #512]	; (80058ec <HAL_I2C_Init+0x278>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	bf94      	ite	ls
 80056f0:	2301      	movls	r3, #1
 80056f2:	2300      	movhi	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e006      	b.n	8005706 <HAL_I2C_Init+0x92>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a7d      	ldr	r2, [pc, #500]	; (80058f0 <HAL_I2C_Init+0x27c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bf94      	ite	ls
 8005700:	2301      	movls	r3, #1
 8005702:	2300      	movhi	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0e7      	b.n	80058de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a78      	ldr	r2, [pc, #480]	; (80058f4 <HAL_I2C_Init+0x280>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	0c9b      	lsrs	r3, r3, #18
 8005718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4a6a      	ldr	r2, [pc, #424]	; (80058e8 <HAL_I2C_Init+0x274>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d802      	bhi.n	8005748 <HAL_I2C_Init+0xd4>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3301      	adds	r3, #1
 8005746:	e009      	b.n	800575c <HAL_I2C_Init+0xe8>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	4a69      	ldr	r2, [pc, #420]	; (80058f8 <HAL_I2C_Init+0x284>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	099b      	lsrs	r3, r3, #6
 800575a:	3301      	adds	r3, #1
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	430b      	orrs	r3, r1
 8005762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800576e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	495c      	ldr	r1, [pc, #368]	; (80058e8 <HAL_I2C_Init+0x274>)
 8005778:	428b      	cmp	r3, r1
 800577a:	d819      	bhi.n	80057b0 <HAL_I2C_Init+0x13c>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	1e59      	subs	r1, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	fbb1 f3f3 	udiv	r3, r1, r3
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005790:	400b      	ands	r3, r1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_I2C_Init+0x138>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e59      	subs	r1, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a4:	3301      	adds	r3, #1
 80057a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057aa:	e051      	b.n	8005850 <HAL_I2C_Init+0x1dc>
 80057ac:	2304      	movs	r3, #4
 80057ae:	e04f      	b.n	8005850 <HAL_I2C_Init+0x1dc>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d111      	bne.n	80057dc <HAL_I2C_Init+0x168>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e58      	subs	r0, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	440b      	add	r3, r1
 80057c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e012      	b.n	8005802 <HAL_I2C_Init+0x18e>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1e58      	subs	r0, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	0099      	lsls	r1, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Init+0x196>
 8005806:	2301      	movs	r3, #1
 8005808:	e022      	b.n	8005850 <HAL_I2C_Init+0x1dc>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10e      	bne.n	8005830 <HAL_I2C_Init+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1e58      	subs	r0, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	440b      	add	r3, r1
 8005820:	fbb0 f3f3 	udiv	r3, r0, r3
 8005824:	3301      	adds	r3, #1
 8005826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582e:	e00f      	b.n	8005850 <HAL_I2C_Init+0x1dc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	1e58      	subs	r0, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6859      	ldr	r1, [r3, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	0099      	lsls	r1, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	fbb0 f3f3 	udiv	r3, r0, r3
 8005846:	3301      	adds	r3, #1
 8005848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	6809      	ldr	r1, [r1, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800587e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6911      	ldr	r1, [r2, #16]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68d2      	ldr	r2, [r2, #12]
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	430b      	orrs	r3, r1
 8005892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	000186a0 	.word	0x000186a0
 80058ec:	001e847f 	.word	0x001e847f
 80058f0:	003d08ff 	.word	0x003d08ff
 80058f4:	431bde83 	.word	0x431bde83
 80058f8:	10624dd3 	.word	0x10624dd3

080058fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	461a      	mov	r2, r3
 8005908:	460b      	mov	r3, r1
 800590a:	817b      	strh	r3, [r7, #10]
 800590c:	4613      	mov	r3, r2
 800590e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005910:	f7fe ff92 	bl	8004838 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	f040 80e0 	bne.w	8005ae4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2319      	movs	r3, #25
 800592a:	2201      	movs	r2, #1
 800592c:	4970      	ldr	r1, [pc, #448]	; (8005af0 <HAL_I2C_Master_Transmit+0x1f4>)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fc58 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
 800593c:	e0d3      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_I2C_Master_Transmit+0x50>
 8005948:	2302      	movs	r3, #2
 800594a:	e0cc      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d007      	beq.n	8005972 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005980:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2210      	movs	r2, #16
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	893a      	ldrh	r2, [r7, #8]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a50      	ldr	r2, [pc, #320]	; (8005af4 <HAL_I2C_Master_Transmit+0x1f8>)
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059b4:	8979      	ldrh	r1, [r7, #10]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fac2 	bl	8005f44 <I2C_MasterRequestWrite>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e08d      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80059e0:	e066      	b.n	8005ab0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	6a39      	ldr	r1, [r7, #32]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fcd2 	bl	8006390 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d107      	bne.n	8005a0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e06b      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d11b      	bne.n	8005a84 <HAL_I2C_Master_Transmit+0x188>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d017      	beq.n	8005a84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	6a39      	ldr	r1, [r7, #32]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fcc2 	bl	8006412 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d107      	bne.n	8005aac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e01a      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d194      	bne.n	80059e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	00100002 	.word	0x00100002
 8005af4:	ffff0000 	.word	0xffff0000

08005af8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08c      	sub	sp, #48	; 0x30
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	461a      	mov	r2, r3
 8005b04:	460b      	mov	r3, r1
 8005b06:	817b      	strh	r3, [r7, #10]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b0c:	f7fe fe94 	bl	8004838 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	f040 820b 	bne.w	8005f36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2319      	movs	r3, #25
 8005b26:	2201      	movs	r2, #1
 8005b28:	497c      	ldr	r1, [pc, #496]	; (8005d1c <HAL_I2C_Master_Receive+0x224>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fb5a 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	e1fe      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_I2C_Master_Receive+0x50>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e1f7      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d007      	beq.n	8005b6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2222      	movs	r2, #34	; 0x22
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2210      	movs	r2, #16
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	893a      	ldrh	r2, [r7, #8]
 8005b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a5c      	ldr	r2, [pc, #368]	; (8005d20 <HAL_I2C_Master_Receive+0x228>)
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bb0:	8979      	ldrh	r1, [r7, #10]
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fa46 	bl	8006048 <I2C_MasterRequestRead>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e1b8      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d113      	bne.n	8005bf6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	623b      	str	r3, [r7, #32]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e18c      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11b      	bne.n	8005c36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e16c      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d11b      	bne.n	8005c76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	e14c      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c9c:	e138      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	f200 80f1 	bhi.w	8005e8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d123      	bne.n	8005cf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fbed 	bl	8006494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e139      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cf6:	e10b      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d14e      	bne.n	8005d9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <HAL_I2C_Master_Receive+0x22c>)
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fa6a 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e10e      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
 8005d1a:	bf00      	nop
 8005d1c:	00100002 	.word	0x00100002
 8005d20:	ffff0000 	.word	0xffff0000
 8005d24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d9c:	e0b8      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	4966      	ldr	r1, [pc, #408]	; (8005f40 <HAL_I2C_Master_Receive+0x448>)
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fa1b 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0bf      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2200      	movs	r2, #0
 8005e02:	494f      	ldr	r1, [pc, #316]	; (8005f40 <HAL_I2C_Master_Receive+0x448>)
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f9ed 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e091      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e88:	e042      	b.n	8005f10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fb00 	bl	8006494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e04c      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d118      	bne.n	8005f10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f aec2 	bne.w	8005c9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
  }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3728      	adds	r7, #40	; 0x28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	00010004 	.word	0x00010004

08005f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	460b      	mov	r3, r1
 8005f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d006      	beq.n	8005f6e <I2C_MasterRequestWrite+0x2a>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d003      	beq.n	8005f6e <I2C_MasterRequestWrite+0x2a>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f6c:	d108      	bne.n	8005f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e00b      	b.n	8005f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	2b12      	cmp	r3, #18
 8005f86:	d107      	bne.n	8005f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f91d 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d103      	bne.n	8005fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e035      	b.n	8006038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd4:	d108      	bne.n	8005fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fe4:	611a      	str	r2, [r3, #16]
 8005fe6:	e01b      	b.n	8006020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fe8:	897b      	ldrh	r3, [r7, #10]
 8005fea:	11db      	asrs	r3, r3, #7
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0306 	and.w	r3, r3, #6
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f063 030f 	orn	r3, r3, #15
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	490e      	ldr	r1, [pc, #56]	; (8006040 <I2C_MasterRequestWrite+0xfc>)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f943 	bl	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e010      	b.n	8006038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4907      	ldr	r1, [pc, #28]	; (8006044 <I2C_MasterRequestWrite+0x100>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f933 	bl	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	00010008 	.word	0x00010008
 8006044:	00010002 	.word	0x00010002

08006048 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	460b      	mov	r3, r1
 8006056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800606c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d006      	beq.n	8006082 <I2C_MasterRequestRead+0x3a>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d003      	beq.n	8006082 <I2C_MasterRequestRead+0x3a>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006080:	d108      	bne.n	8006094 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e00b      	b.n	80060ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	2b11      	cmp	r3, #17
 800609a:	d107      	bne.n	80060ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f893 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d2:	d103      	bne.n	80060dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e079      	b.n	80061d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e8:	d108      	bne.n	80060fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060ea:	897b      	ldrh	r3, [r7, #10]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	611a      	str	r2, [r3, #16]
 80060fa:	e05f      	b.n	80061bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060fc:	897b      	ldrh	r3, [r7, #10]
 80060fe:	11db      	asrs	r3, r3, #7
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f063 030f 	orn	r3, r3, #15
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4930      	ldr	r1, [pc, #192]	; (80061dc <I2C_MasterRequestRead+0x194>)
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f8b9 	bl	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e054      	b.n	80061d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4929      	ldr	r1, [pc, #164]	; (80061e0 <I2C_MasterRequestRead+0x198>)
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f8a9 	bl	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e044      	b.n	80061d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f831 	bl	80061e4 <I2C_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006196:	d103      	bne.n	80061a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e017      	b.n	80061d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80061a4:	897b      	ldrh	r3, [r7, #10]
 80061a6:	11db      	asrs	r3, r3, #7
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f063 030e 	orn	r3, r3, #14
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	4907      	ldr	r1, [pc, #28]	; (80061e0 <I2C_MasterRequestRead+0x198>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f865 	bl	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	00010008 	.word	0x00010008
 80061e0:	00010002 	.word	0x00010002

080061e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061f4:	e025      	b.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d021      	beq.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fe fb1b 	bl	8004838 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d116      	bne.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e023      	b.n	800628a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10d      	bne.n	8006268 <I2C_WaitOnFlagUntilTimeout+0x84>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	43da      	mvns	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	e00c      	b.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	43da      	mvns	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4013      	ands	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	429a      	cmp	r2, r3
 8006286:	d0b6      	beq.n	80061f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a0:	e051      	b.n	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d123      	bne.n	80062fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f043 0204 	orr.w	r2, r3, #4
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e046      	b.n	8006388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d021      	beq.n	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006302:	f7fe fa99 	bl	8004838 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d116      	bne.n	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e020      	b.n	8006388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10c      	bne.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	e00b      	b.n	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	43da      	mvns	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d18d      	bne.n	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800639c:	e02d      	b.n	80063fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f8ce 	bl	8006540 <I2C_IsAcknowledgeFailed>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02d      	b.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d021      	beq.n	80063fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fe fa3f 	bl	8004838 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d116      	bne.n	80063fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0220 	orr.w	r2, r3, #32
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e007      	b.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d1ca      	bne.n	800639e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800641e:	e02d      	b.n	800647c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f88d 	bl	8006540 <I2C_IsAcknowledgeFailed>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e02d      	b.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006436:	d021      	beq.n	800647c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006438:	f7fe f9fe 	bl	8004838 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	429a      	cmp	r2, r3
 8006446:	d302      	bcc.n	800644e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d116      	bne.n	800647c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e007      	b.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d1ca      	bne.n	8006420 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a0:	e042      	b.n	8006528 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d119      	bne.n	80064e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0210 	mvn.w	r2, #16
 80064b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e029      	b.n	8006538 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e4:	f7fe f9a8 	bl	8004838 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d116      	bne.n	8006528 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e007      	b.n	8006538 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d1b5      	bne.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006556:	d11b      	bne.n	8006590 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006560:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e267      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d075      	beq.n	80066aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065be:	4b88      	ldr	r3, [pc, #544]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d00c      	beq.n	80065e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ca:	4b85      	ldr	r3, [pc, #532]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d112      	bne.n	80065fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065d6:	4b82      	ldr	r3, [pc, #520]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065e2:	d10b      	bne.n	80065fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e4:	4b7e      	ldr	r3, [pc, #504]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d05b      	beq.n	80066a8 <HAL_RCC_OscConfig+0x108>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d157      	bne.n	80066a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e242      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d106      	bne.n	8006614 <HAL_RCC_OscConfig+0x74>
 8006606:	4b76      	ldr	r3, [pc, #472]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a75      	ldr	r2, [pc, #468]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e01d      	b.n	8006650 <HAL_RCC_OscConfig+0xb0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0x98>
 800661e:	4b70      	ldr	r3, [pc, #448]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a6f      	ldr	r2, [pc, #444]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b6d      	ldr	r3, [pc, #436]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6c      	ldr	r2, [pc, #432]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0xb0>
 8006638:	4b69      	ldr	r3, [pc, #420]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a68      	ldr	r2, [pc, #416]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a65      	ldr	r2, [pc, #404]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800664a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fe f8ee 	bl	8004838 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006660:	f7fe f8ea 	bl	8004838 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e207      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0xc0>
 800667e:	e014      	b.n	80066aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006680:	f7fe f8da 	bl	8004838 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006688:	f7fe f8d6 	bl	8004838 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b64      	cmp	r3, #100	; 0x64
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e1f3      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	4b51      	ldr	r3, [pc, #324]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0xe8>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d063      	beq.n	800677e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066b6:	4b4a      	ldr	r3, [pc, #296]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c2:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d11c      	bne.n	8006708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ce:	4b44      	ldr	r3, [pc, #272]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066da:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCC_OscConfig+0x152>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e1c7      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	4937      	ldr	r1, [pc, #220]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006706:	e03a      	b.n	800677e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006710:	4b34      	ldr	r3, [pc, #208]	; (80067e4 <HAL_RCC_OscConfig+0x244>)
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006716:	f7fe f88f 	bl	8004838 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800671e:	f7fe f88b 	bl	8004838 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e1a8      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	4b2b      	ldr	r3, [pc, #172]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673c:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4925      	ldr	r1, [pc, #148]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
 8006750:	e015      	b.n	800677e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006752:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <HAL_RCC_OscConfig+0x244>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fe f86e 	bl	8004838 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006760:	f7fe f86a 	bl	8004838 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e187      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d036      	beq.n	80067f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d016      	beq.n	80067c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <HAL_RCC_OscConfig+0x248>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fe f84e 	bl	8004838 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a0:	f7fe f84a 	bl	8004838 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e167      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <HAL_RCC_OscConfig+0x240>)
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x200>
 80067be:	e01b      	b.n	80067f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <HAL_RCC_OscConfig+0x248>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c6:	f7fe f837 	bl	8004838 <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067cc:	e00e      	b.n	80067ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ce:	f7fe f833 	bl	8004838 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d907      	bls.n	80067ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e150      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	42470000 	.word	0x42470000
 80067e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ec:	4b88      	ldr	r3, [pc, #544]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80067ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1ea      	bne.n	80067ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8097 	beq.w	8006934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4b81      	ldr	r3, [pc, #516]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	4b7d      	ldr	r3, [pc, #500]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a7c      	ldr	r2, [pc, #496]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b7a      	ldr	r3, [pc, #488]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006836:	4b77      	ldr	r3, [pc, #476]	; (8006a14 <HAL_RCC_OscConfig+0x474>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d118      	bne.n	8006874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006842:	4b74      	ldr	r3, [pc, #464]	; (8006a14 <HAL_RCC_OscConfig+0x474>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	; (8006a14 <HAL_RCC_OscConfig+0x474>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684e:	f7fd fff3 	bl	8004838 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006856:	f7fd ffef 	bl	8004838 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e10c      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006868:	4b6a      	ldr	r3, [pc, #424]	; (8006a14 <HAL_RCC_OscConfig+0x474>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d106      	bne.n	800688a <HAL_RCC_OscConfig+0x2ea>
 800687c:	4b64      	ldr	r3, [pc, #400]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4a63      	ldr	r2, [pc, #396]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	6713      	str	r3, [r2, #112]	; 0x70
 8006888:	e01c      	b.n	80068c4 <HAL_RCC_OscConfig+0x324>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b05      	cmp	r3, #5
 8006890:	d10c      	bne.n	80068ac <HAL_RCC_OscConfig+0x30c>
 8006892:	4b5f      	ldr	r3, [pc, #380]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	4a5e      	ldr	r2, [pc, #376]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006898:	f043 0304 	orr.w	r3, r3, #4
 800689c:	6713      	str	r3, [r2, #112]	; 0x70
 800689e:	4b5c      	ldr	r3, [pc, #368]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4a5b      	ldr	r2, [pc, #364]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	6713      	str	r3, [r2, #112]	; 0x70
 80068aa:	e00b      	b.n	80068c4 <HAL_RCC_OscConfig+0x324>
 80068ac:	4b58      	ldr	r3, [pc, #352]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b0:	4a57      	ldr	r2, [pc, #348]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	6713      	str	r3, [r2, #112]	; 0x70
 80068b8:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068bc:	4a54      	ldr	r2, [pc, #336]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068be:	f023 0304 	bic.w	r3, r3, #4
 80068c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d015      	beq.n	80068f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fd ffb4 	bl	8004838 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068d4:	f7fd ffb0 	bl	8004838 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e0cb      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ea:	4b49      	ldr	r3, [pc, #292]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0ee      	beq.n	80068d4 <HAL_RCC_OscConfig+0x334>
 80068f6:	e014      	b.n	8006922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f8:	f7fd ff9e 	bl	8004838 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fe:	e00a      	b.n	8006916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006900:	f7fd ff9a 	bl	8004838 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	f241 3288 	movw	r2, #5000	; 0x1388
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e0b5      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006916:	4b3e      	ldr	r3, [pc, #248]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ee      	bne.n	8006900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d105      	bne.n	8006934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 800692e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80a1 	beq.w	8006a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800693e:	4b34      	ldr	r3, [pc, #208]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 030c 	and.w	r3, r3, #12
 8006946:	2b08      	cmp	r3, #8
 8006948:	d05c      	beq.n	8006a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d141      	bne.n	80069d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006952:	4b31      	ldr	r3, [pc, #196]	; (8006a18 <HAL_RCC_OscConfig+0x478>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006958:	f7fd ff6e 	bl	8004838 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006960:	f7fd ff6a 	bl	8004838 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e087      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	019b      	lsls	r3, r3, #6
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	3b01      	subs	r3, #1
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	491b      	ldr	r1, [pc, #108]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <HAL_RCC_OscConfig+0x478>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ae:	f7fd ff43 	bl	8004838 <HAL_GetTick>
 80069b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b4:	e008      	b.n	80069c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b6:	f7fd ff3f 	bl	8004838 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e05c      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f0      	beq.n	80069b6 <HAL_RCC_OscConfig+0x416>
 80069d4:	e054      	b.n	8006a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <HAL_RCC_OscConfig+0x478>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fd ff2c 	bl	8004838 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fd ff28 	bl	8004838 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e045      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_OscConfig+0x470>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x444>
 8006a02:	e03d      	b.n	8006a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e038      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40007000 	.word	0x40007000
 8006a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a1c:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <HAL_RCC_OscConfig+0x4ec>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d028      	beq.n	8006a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d121      	bne.n	8006a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d11a      	bne.n	8006a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d111      	bne.n	8006a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d001      	beq.n	8006a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800

08006a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0cc      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa4:	4b68      	ldr	r3, [pc, #416]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d90c      	bls.n	8006acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab2:	4b65      	ldr	r3, [pc, #404]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aba:	4b63      	ldr	r3, [pc, #396]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0b8      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d020      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ae4:	4b59      	ldr	r3, [pc, #356]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006afc:	4b53      	ldr	r3, [pc, #332]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4a52      	ldr	r2, [pc, #328]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b08:	4b50      	ldr	r3, [pc, #320]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	494d      	ldr	r1, [pc, #308]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d044      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2e:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d119      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e07f      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d003      	beq.n	8006b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4e:	4b3f      	ldr	r3, [pc, #252]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e06f      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5e:	4b3b      	ldr	r3, [pc, #236]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e067      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b6e:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 0203 	bic.w	r2, r3, #3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4934      	ldr	r1, [pc, #208]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b80:	f7fd fe5a 	bl	8004838 <HAL_GetTick>
 8006b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b88:	f7fd fe56 	bl	8004838 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e04f      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9e:	4b2b      	ldr	r3, [pc, #172]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 020c 	and.w	r2, r3, #12
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d1eb      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb0:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20c      	bcs.n	8006bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bbe:	4b22      	ldr	r3, [pc, #136]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e032      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be4:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4916      	ldr	r1, [pc, #88]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c02:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	490e      	ldr	r1, [pc, #56]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c16:	f000 f821 	bl	8006c5c <HAL_RCC_GetSysClockFreq>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	490a      	ldr	r1, [pc, #40]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006c28:	5ccb      	ldrb	r3, [r1, r3]
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	4a09      	ldr	r2, [pc, #36]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fdba 	bl	80047b0 <HAL_InitTick>

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40023c00 	.word	0x40023c00
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	0800a744 	.word	0x0800a744
 8006c54:	20000284 	.word	0x20000284
 8006c58:	20000288 	.word	0x20000288

08006c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c60:	b094      	sub	sp, #80	; 0x50
 8006c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	647b      	str	r3, [r7, #68]	; 0x44
 8006c68:	2300      	movs	r3, #0
 8006c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c74:	4b79      	ldr	r3, [pc, #484]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 030c 	and.w	r3, r3, #12
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d00d      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x40>
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	f200 80e1 	bhi.w	8006e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x34>
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c8e:	e0db      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c90:	4b73      	ldr	r3, [pc, #460]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c94:	e0db      	b.n	8006e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c96:	4b73      	ldr	r3, [pc, #460]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c9a:	e0d8      	b.n	8006e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c9c:	4b6f      	ldr	r3, [pc, #444]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ca6:	4b6d      	ldr	r3, [pc, #436]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d063      	beq.n	8006d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb2:	4b6a      	ldr	r3, [pc, #424]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	099b      	lsrs	r3, r3, #6
 8006cb8:	2200      	movs	r2, #0
 8006cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f04f 0100 	mov.w	r1, #0
 8006cda:	0159      	lsls	r1, r3, #5
 8006cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce0:	0150      	lsls	r0, r2, #5
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	1a51      	subs	r1, r2, r1
 8006cea:	6139      	str	r1, [r7, #16]
 8006cec:	4629      	mov	r1, r5
 8006cee:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d00:	4659      	mov	r1, fp
 8006d02:	018b      	lsls	r3, r1, #6
 8006d04:	4651      	mov	r1, sl
 8006d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	018a      	lsls	r2, r1, #6
 8006d0e:	4651      	mov	r1, sl
 8006d10:	ebb2 0801 	subs.w	r8, r2, r1
 8006d14:	4659      	mov	r1, fp
 8006d16:	eb63 0901 	sbc.w	r9, r3, r1
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d2e:	4690      	mov	r8, r2
 8006d30:	4699      	mov	r9, r3
 8006d32:	4623      	mov	r3, r4
 8006d34:	eb18 0303 	adds.w	r3, r8, r3
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	eb49 0303 	adc.w	r3, r9, r3
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d4e:	4629      	mov	r1, r5
 8006d50:	024b      	lsls	r3, r1, #9
 8006d52:	4621      	mov	r1, r4
 8006d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d58:	4621      	mov	r1, r4
 8006d5a:	024a      	lsls	r2, r1, #9
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d62:	2200      	movs	r2, #0
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d6c:	f7f9 fef0 	bl	8000b50 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4613      	mov	r3, r2
 8006d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d78:	e058      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7a:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	099b      	lsrs	r3, r3, #6
 8006d80:	2200      	movs	r2, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	4611      	mov	r1, r2
 8006d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d8a:	623b      	str	r3, [r7, #32]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	f04f 0000 	mov.w	r0, #0
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	0159      	lsls	r1, r3, #5
 8006da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da6:	0150      	lsls	r0, r2, #5
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4641      	mov	r1, r8
 8006dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8006dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	00eb      	lsls	r3, r5, #3
 8006dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de2:	00e2      	lsls	r2, r4, #3
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	4643      	mov	r3, r8
 8006dea:	18e3      	adds	r3, r4, r3
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	464b      	mov	r3, r9
 8006df0:	eb45 0303 	adc.w	r3, r5, r3
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e02:	4629      	mov	r1, r5
 8006e04:	028b      	lsls	r3, r1, #10
 8006e06:	4621      	mov	r1, r4
 8006e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	028a      	lsls	r2, r1, #10
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e16:	2200      	movs	r2, #0
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	61fa      	str	r2, [r7, #28]
 8006e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e20:	f7f9 fe96 	bl	8000b50 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4613      	mov	r3, r2
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	3301      	adds	r3, #1
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e46:	e002      	b.n	8006e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3750      	adds	r7, #80	; 0x50
 8006e54:	46bd      	mov	sp, r7
 8006e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	00f42400 	.word	0x00f42400
 8006e64:	007a1200 	.word	0x007a1200

08006e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e6c:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000284 	.word	0x20000284

08006e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e84:	f7ff fff0 	bl	8006e68 <HAL_RCC_GetHCLKFreq>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	0a9b      	lsrs	r3, r3, #10
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	4903      	ldr	r1, [pc, #12]	; (8006ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e96:	5ccb      	ldrb	r3, [r1, r3]
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	0800a754 	.word	0x0800a754

08006ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006eac:	f7ff ffdc 	bl	8006e68 <HAL_RCC_GetHCLKFreq>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	0b5b      	lsrs	r3, r3, #13
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	4903      	ldr	r1, [pc, #12]	; (8006ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ebe:	5ccb      	ldrb	r3, [r1, r3]
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	0800a754 	.word	0x0800a754

08006ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07b      	b.n	8006fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef2:	d009      	beq.n	8006f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	61da      	str	r2, [r3, #28]
 8006efa:	e005      	b.n	8006f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fd f964 	bl	80041f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	ea42 0103 	orr.w	r1, r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	0c1b      	lsrs	r3, r3, #16
 8006fa6:	f003 0104 	and.w	r1, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	f003 0210 	and.w	r2, r3, #16
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x26>
 8007004:	2302      	movs	r3, #2
 8007006:	e18a      	b.n	800731e <HAL_SPI_TransmitReceive+0x33c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007010:	f7fd fc12 	bl	8004838 <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800701c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800702a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702e:	2b01      	cmp	r3, #1
 8007030:	d00f      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007038:	d107      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
 8007042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007046:	2b04      	cmp	r3, #4
 8007048:	d003      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007050:	e15b      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 800705e:	887b      	ldrh	r3, [r7, #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800706a:	e14e      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b04      	cmp	r3, #4
 8007076:	d003      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2205      	movs	r2, #5
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	887a      	ldrh	r2, [r7, #2]
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	887a      	ldrh	r2, [r7, #2]
 8007096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	887a      	ldrh	r2, [r7, #2]
 80070a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d007      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d178      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x10a>
 80070e6:	8b7b      	ldrh	r3, [r7, #26]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d166      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e053      	b.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d11b      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d016      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d113      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	1c9a      	adds	r2, r3, #2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d119      	bne.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	b292      	uxth	r2, r2
 800717c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007196:	2301      	movs	r3, #1
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800719a:	f7fd fb4d 	bl	8004838 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d807      	bhi.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d003      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071b8:	e0a7      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1a6      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1a1      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071ce:	e07c      	b.n	80072ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_TransmitReceive+0x1fc>
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d16b      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007204:	e057      	b.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d11c      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d017      	beq.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d114      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d119      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d014      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800728c:	2301      	movs	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007290:	f7fd fad2 	bl	8004838 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729c:	429a      	cmp	r2, r3
 800729e:	d803      	bhi.n	80072a8 <HAL_SPI_TransmitReceive+0x2c6>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d102      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x2cc>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072b4:	e029      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1a2      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d19d      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f8b2 	bl	8007438 <SPI_EndRxTxTransaction>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80072e6:	e010      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e000      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800731a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800731e:	4618      	mov	r0, r3
 8007320:	3730      	adds	r7, #48	; 0x30
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007338:	f7fd fa7e 	bl	8004838 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	4413      	add	r3, r2
 8007346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007348:	f7fd fa76 	bl	8004838 <HAL_GetTick>
 800734c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800734e:	4b39      	ldr	r3, [pc, #228]	; (8007434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	015b      	lsls	r3, r3, #5
 8007354:	0d1b      	lsrs	r3, r3, #20
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800735e:	e054      	b.n	800740a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d050      	beq.n	800740a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007368:	f7fd fa66 	bl	8004838 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	429a      	cmp	r2, r3
 8007376:	d902      	bls.n	800737e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d13d      	bne.n	80073fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800738c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007396:	d111      	bne.n	80073bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a0:	d004      	beq.n	80073ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073aa:	d107      	bne.n	80073bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c4:	d10f      	bne.n	80073e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e017      	b.n	800742a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3b01      	subs	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4013      	ands	r3, r2
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	bf0c      	ite	eq
 800741a:	2301      	moveq	r3, #1
 800741c:	2300      	movne	r3, #0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	429a      	cmp	r2, r3
 8007426:	d19b      	bne.n	8007360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000284 	.word	0x20000284

08007438 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <SPI_EndRxTxTransaction+0x7c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <SPI_EndRxTxTransaction+0x80>)
 800744a:	fba2 2303 	umull	r2, r3, r2, r3
 800744e:	0d5b      	lsrs	r3, r3, #21
 8007450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007454:	fb02 f303 	mul.w	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007462:	d112      	bne.n	800748a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	2180      	movs	r1, #128	; 0x80
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff ff5a 	bl	8007328 <SPI_WaitFlagStateUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f043 0220 	orr.w	r2, r3, #32
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e00f      	b.n	80074aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	3b01      	subs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d0f2      	beq.n	800748a <SPI_EndRxTxTransaction+0x52>
 80074a4:	e000      	b.n	80074a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80074a6:	bf00      	nop
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000284 	.word	0x20000284
 80074b8:	165e9f81 	.word	0x165e9f81

080074bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e04c      	b.n	8007568 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d111      	bne.n	80074fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fc0c 	bl	8008d00 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <HAL_TIM_Base_Init+0xb4>)
 80074f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f001 f929 	bl	8008768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08004281 	.word	0x08004281

08007574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d001      	beq.n	800758c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e03c      	b.n	8007606 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <HAL_TIM_Base_Start+0xa0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d018      	beq.n	80075d0 <HAL_TIM_Base_Start+0x5c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a6:	d013      	beq.n	80075d0 <HAL_TIM_Base_Start+0x5c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_TIM_Base_Start+0xa4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00e      	beq.n	80075d0 <HAL_TIM_Base_Start+0x5c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a19      	ldr	r2, [pc, #100]	; (800761c <HAL_TIM_Base_Start+0xa8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <HAL_TIM_Base_Start+0x5c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_TIM_Base_Start+0xac>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_TIM_Base_Start+0x5c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a16      	ldr	r2, [pc, #88]	; (8007624 <HAL_TIM_Base_Start+0xb0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d111      	bne.n	80075f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b06      	cmp	r3, #6
 80075e0:	d010      	beq.n	8007604 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f2:	e007      	b.n	8007604 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	40014000 	.word	0x40014000

08007628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e044      	b.n	80076ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d013      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <HAL_TIM_Base_Start_IT+0xb4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d111      	bne.n	80076b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d010      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	e007      	b.n	80076c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40014000 	.word	0x40014000

080076ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e04c      	b.n	8007798 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d111      	bne.n	800772e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 faf4 	bl	8008d00 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <HAL_TIM_OC_Init+0xb4>)
 8007724:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f001 f811 	bl	8008768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	080077a5 	.word	0x080077a5

080077a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e04c      	b.n	8007864 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d111      	bne.n	80077fa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fa8e 	bl	8008d00 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d102      	bne.n	80077f2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1f      	ldr	r2, [pc, #124]	; (800786c <HAL_TIM_PWM_Init+0xb4>)
 80077f0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f000 ffab 	bl	8008768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	08007871 	.word	0x08007871

08007870 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <HAL_TIM_PWM_Start+0x24>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e022      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d109      	bne.n	80078c2 <HAL_TIM_PWM_Start+0x3e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e015      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d109      	bne.n	80078dc <HAL_TIM_PWM_Start+0x58>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e008      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e068      	b.n	80079c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_PWM_Start+0x82>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007904:	e013      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d104      	bne.n	8007916 <HAL_TIM_PWM_Start+0x92>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007914:	e00b      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d104      	bne.n	8007926 <HAL_TIM_PWM_Start+0xa2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007924:	e003      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2201      	movs	r2, #1
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f9bc 	bl	8008cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a23      	ldr	r2, [pc, #140]	; (80079d0 <HAL_TIM_PWM_Start+0x14c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d107      	bne.n	8007956 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1d      	ldr	r2, [pc, #116]	; (80079d0 <HAL_TIM_PWM_Start+0x14c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d013      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <HAL_TIM_PWM_Start+0x150>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <HAL_TIM_PWM_Start+0x154>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a16      	ldr	r2, [pc, #88]	; (80079dc <HAL_TIM_PWM_Start+0x158>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <HAL_TIM_PWM_Start+0x15c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d111      	bne.n	80079b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d010      	beq.n	80079c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	e007      	b.n	80079c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40014000 	.word	0x40014000

080079e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e04c      	b.n	8007a92 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d111      	bne.n	8007a28 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f977 	bl	8008d00 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	; (8007a9c <HAL_TIM_OnePulse_Init+0xb8>)
 8007a1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f000 fe94 	bl	8008768 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0208 	bic.w	r2, r2, #8
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08007aa1 	.word	0x08007aa1

08007aa0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007acc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ad4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007adc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d108      	bne.n	8007af6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d105      	bne.n	8007af6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aea:	7b7b      	ldrb	r3, [r7, #13]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d102      	bne.n	8007af6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007af0:	7b3b      	ldrb	r3, [r7, #12]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d001      	beq.n	8007afa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e03b      	b.n	8007b72 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0202 	orr.w	r2, r2, #2
 8007b28:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0204 	orr.w	r2, r2, #4
 8007b38:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f8b6 	bl	8008cb4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2104      	movs	r1, #4
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f8af 	bl	8008cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d107      	bne.n	8007b70 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000

08007b80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0a2      	b.n	8007cda <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d111      	bne.n	8007bc4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f8a9 	bl	8008d00 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a4a      	ldr	r2, [pc, #296]	; (8007ce4 <HAL_TIM_Encoder_Init+0x164>)
 8007bba:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bda:	f023 0307 	bic.w	r3, r3, #7
 8007bde:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f000 fdbc 	bl	8008768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c36:	f023 030c 	bic.w	r3, r3, #12
 8007c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	4313      	orrs	r3, r2
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	011a      	lsls	r2, r3, #4
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	4313      	orrs	r3, r2
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	08004385 	.word	0x08004385

08007ce8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d110      	bne.n	8007d3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d102      	bne.n	8007d24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d1e:	7b7b      	ldrb	r3, [r7, #13]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e069      	b.n	8007dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d38:	e031      	b.n	8007d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d110      	bne.n	8007d62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d102      	bne.n	8007d4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d46:	7b3b      	ldrb	r3, [r7, #12]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d001      	beq.n	8007d50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e055      	b.n	8007dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d60:	e01d      	b.n	8007d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d108      	bne.n	8007d7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d105      	bne.n	8007d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d6e:	7b7b      	ldrb	r3, [r7, #13]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d102      	bne.n	8007d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d74:	7b3b      	ldrb	r3, [r7, #12]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d001      	beq.n	8007d7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e03e      	b.n	8007dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_TIM_Encoder_Start+0xc4>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d008      	beq.n	8007dbc <HAL_TIM_Encoder_Start+0xd4>
 8007daa:	e00f      	b.n	8007dcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 ff7d 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007dba:	e016      	b.n	8007dea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 ff75 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007dca:	e00e      	b.n	8007dea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 ff6d 	bl	8008cb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2201      	movs	r2, #1
 8007de0:	2104      	movs	r1, #4
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 ff66 	bl	8008cb4 <TIM_CCxChannelCmd>
      break;
 8007de8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d128      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d121      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0202 	mvn.w	r2, #2
 8007e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
 8007e50:	e009      	b.n	8007e66 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d128      	bne.n	8007ecc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d121      	bne.n	8007ecc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0204 	mvn.w	r2, #4
 8007e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
 8007eb0:	e009      	b.n	8007ec6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d128      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d121      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0208 	mvn.w	r2, #8
 8007ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
 8007f10:	e009      	b.n	8007f26 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d128      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d121      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0210 	mvn.w	r2, #16
 8007f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2208      	movs	r2, #8
 8007f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
 8007f70:	e009      	b.n	8007f86 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d110      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d109      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0201 	mvn.w	r2, #1
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d110      	bne.n	8007fec <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d109      	bne.n	8007fec <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b40      	cmp	r3, #64	; 0x40
 8007ff8:	d110      	bne.n	800801c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d109      	bne.n	800801c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b20      	cmp	r3, #32
 8008028:	d110      	bne.n	800804c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b20      	cmp	r3, #32
 8008036:	d109      	bne.n	800804c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0220 	mvn.w	r2, #32
 8008040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_TIM_OC_ConfigChannel+0x1e>
 800806e:	2302      	movs	r3, #2
 8008070:	e048      	b.n	8008104 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b0c      	cmp	r3, #12
 800807e:	d839      	bhi.n	80080f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080080f5 	.word	0x080080f5
 8008090:	080080f5 	.word	0x080080f5
 8008094:	080080f5 	.word	0x080080f5
 8008098:	080080cb 	.word	0x080080cb
 800809c:	080080f5 	.word	0x080080f5
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	080080f5 	.word	0x080080f5
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080080f5 	.word	0x080080f5
 80080b0:	080080f5 	.word	0x080080f5
 80080b4:	080080f5 	.word	0x080080f5
 80080b8:	080080e7 	.word	0x080080e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fbd0 	bl	8008868 <TIM_OC1_SetConfig>
      break;
 80080c8:	e017      	b.n	80080fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fc2f 	bl	8008934 <TIM_OC2_SetConfig>
      break;
 80080d6:	e010      	b.n	80080fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fc94 	bl	8008a0c <TIM_OC3_SetConfig>
      break;
 80080e4:	e009      	b.n	80080fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fcf7 	bl	8008ae0 <TIM_OC4_SetConfig>
      break;
 80080f2:	e002      	b.n	80080fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
      break;
 80080f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008126:	2302      	movs	r3, #2
 8008128:	e0ae      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b0c      	cmp	r3, #12
 8008136:	f200 809f 	bhi.w	8008278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008175 	.word	0x08008175
 8008144:	08008279 	.word	0x08008279
 8008148:	08008279 	.word	0x08008279
 800814c:	08008279 	.word	0x08008279
 8008150:	080081b5 	.word	0x080081b5
 8008154:	08008279 	.word	0x08008279
 8008158:	08008279 	.word	0x08008279
 800815c:	08008279 	.word	0x08008279
 8008160:	080081f7 	.word	0x080081f7
 8008164:	08008279 	.word	0x08008279
 8008168:	08008279 	.word	0x08008279
 800816c:	08008279 	.word	0x08008279
 8008170:	08008237 	.word	0x08008237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fb74 	bl	8008868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0208 	orr.w	r2, r2, #8
 800818e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0204 	bic.w	r2, r2, #4
 800819e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6999      	ldr	r1, [r3, #24]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	619a      	str	r2, [r3, #24]
      break;
 80081b2:	e064      	b.n	800827e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fbba 	bl	8008934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6999      	ldr	r1, [r3, #24]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	021a      	lsls	r2, r3, #8
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	619a      	str	r2, [r3, #24]
      break;
 80081f4:	e043      	b.n	800827e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fc05 	bl	8008a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0208 	orr.w	r2, r2, #8
 8008210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0204 	bic.w	r2, r2, #4
 8008220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69d9      	ldr	r1, [r3, #28]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	61da      	str	r2, [r3, #28]
      break;
 8008234:	e023      	b.n	800827e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fc4f 	bl	8008ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69d9      	ldr	r1, [r3, #28]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	021a      	lsls	r2, r3, #8
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	61da      	str	r2, [r3, #28]
      break;
 8008276:	e002      	b.n	800827e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
      break;
 800827c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_TIM_ConfigClockSource+0x1c>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e0b4      	b.n	8008416 <HAL_TIM_ConfigClockSource+0x186>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e4:	d03e      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0xd4>
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ea:	f200 8087 	bhi.w	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 80082ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f2:	f000 8086 	beq.w	8008402 <HAL_TIM_ConfigClockSource+0x172>
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	d87f      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 80082fc:	2b70      	cmp	r3, #112	; 0x70
 80082fe:	d01a      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0xa6>
 8008300:	2b70      	cmp	r3, #112	; 0x70
 8008302:	d87b      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 8008304:	2b60      	cmp	r3, #96	; 0x60
 8008306:	d050      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x11a>
 8008308:	2b60      	cmp	r3, #96	; 0x60
 800830a:	d877      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 800830c:	2b50      	cmp	r3, #80	; 0x50
 800830e:	d03c      	beq.n	800838a <HAL_TIM_ConfigClockSource+0xfa>
 8008310:	2b50      	cmp	r3, #80	; 0x50
 8008312:	d873      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b40      	cmp	r3, #64	; 0x40
 8008316:	d058      	beq.n	80083ca <HAL_TIM_ConfigClockSource+0x13a>
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d86f      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d064      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x15a>
 8008320:	2b30      	cmp	r3, #48	; 0x30
 8008322:	d86b      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b20      	cmp	r3, #32
 8008326:	d060      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x15a>
 8008328:	2b20      	cmp	r3, #32
 800832a:	d867      	bhi.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d05c      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x15a>
 8008330:	2b10      	cmp	r3, #16
 8008332:	d05a      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x15a>
 8008334:	e062      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6899      	ldr	r1, [r3, #8]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f000 fc95 	bl	8008c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	609a      	str	r2, [r3, #8]
      break;
 8008362:	e04f      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6899      	ldr	r1, [r3, #8]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f000 fc7e 	bl	8008c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008386:	609a      	str	r2, [r3, #8]
      break;
 8008388:	e03c      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	f000 fbf2 	bl	8008b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2150      	movs	r1, #80	; 0x50
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fc4b 	bl	8008c3e <TIM_ITRx_SetConfig>
      break;
 80083a8:	e02c      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f000 fc11 	bl	8008bde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2160      	movs	r1, #96	; 0x60
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fc3b 	bl	8008c3e <TIM_ITRx_SetConfig>
      break;
 80083c8:	e01c      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6859      	ldr	r1, [r3, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f000 fbd2 	bl	8008b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2140      	movs	r1, #64	; 0x40
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fc2b 	bl	8008c3e <TIM_ITRx_SetConfig>
      break;
 80083e8:	e00c      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f000 fc22 	bl	8008c3e <TIM_ITRx_SetConfig>
      break;
 80083fa:	e003      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008400:	e000      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	460b      	mov	r3, r1
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e135      	b.n	800875c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_RegisterCallback+0x2a>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e12e      	b.n	800875c <HAL_TIM_RegisterCallback+0x288>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	f040 80ba 	bne.w	8008688 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b1a      	cmp	r3, #26
 8008518:	f200 80b3 	bhi.w	8008682 <HAL_TIM_RegisterCallback+0x1ae>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_TIM_RegisterCallback+0x50>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008591 	.word	0x08008591
 8008528:	08008599 	.word	0x08008599
 800852c:	080085a1 	.word	0x080085a1
 8008530:	080085a9 	.word	0x080085a9
 8008534:	080085b1 	.word	0x080085b1
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085c1 	.word	0x080085c1
 8008540:	080085c9 	.word	0x080085c9
 8008544:	080085d1 	.word	0x080085d1
 8008548:	080085d9 	.word	0x080085d9
 800854c:	080085e1 	.word	0x080085e1
 8008550:	080085e9 	.word	0x080085e9
 8008554:	080085f1 	.word	0x080085f1
 8008558:	080085f9 	.word	0x080085f9
 800855c:	08008601 	.word	0x08008601
 8008560:	0800860b 	.word	0x0800860b
 8008564:	08008615 	.word	0x08008615
 8008568:	0800861f 	.word	0x0800861f
 800856c:	08008629 	.word	0x08008629
 8008570:	08008633 	.word	0x08008633
 8008574:	0800863d 	.word	0x0800863d
 8008578:	08008647 	.word	0x08008647
 800857c:	08008651 	.word	0x08008651
 8008580:	0800865b 	.word	0x0800865b
 8008584:	08008665 	.word	0x08008665
 8008588:	0800866f 	.word	0x0800866f
 800858c:	08008679 	.word	0x08008679
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008596:	e0dc      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800859e:	e0d8      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80085a6:	e0d4      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80085ae:	e0d0      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80085b6:	e0cc      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80085be:	e0c8      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80085c6:	e0c4      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80085ce:	e0c0      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80085d6:	e0bc      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80085de:	e0b8      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80085e6:	e0b4      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80085ee:	e0b0      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80085f6:	e0ac      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80085fe:	e0a8      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008608:	e0a3      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008612:	e09e      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800861c:	e099      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008626:	e094      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008630:	e08f      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800863a:	e08a      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008644:	e085      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800864e:	e080      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008658:	e07b      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008662:	e076      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800866c:	e071      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008676:	e06c      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008680:	e067      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	75fb      	strb	r3, [r7, #23]
        break;
 8008686:	e064      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d15c      	bne.n	800874e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	2b0d      	cmp	r3, #13
 8008698:	d856      	bhi.n	8008748 <HAL_TIM_RegisterCallback+0x274>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_TIM_RegisterCallback+0x1cc>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086d9 	.word	0x080086d9
 80086a4:	080086e1 	.word	0x080086e1
 80086a8:	080086e9 	.word	0x080086e9
 80086ac:	080086f1 	.word	0x080086f1
 80086b0:	080086f9 	.word	0x080086f9
 80086b4:	08008701 	.word	0x08008701
 80086b8:	08008709 	.word	0x08008709
 80086bc:	08008711 	.word	0x08008711
 80086c0:	08008719 	.word	0x08008719
 80086c4:	08008721 	.word	0x08008721
 80086c8:	08008729 	.word	0x08008729
 80086cc:	08008731 	.word	0x08008731
 80086d0:	08008739 	.word	0x08008739
 80086d4:	08008741 	.word	0x08008741
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80086de:	e038      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80086e6:	e034      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80086ee:	e030      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80086f6:	e02c      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80086fe:	e028      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008706:	e024      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800870e:	e020      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008716:	e01c      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800871e:	e018      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008726:	e014      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800872e:	e010      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008736:	e00c      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800873e:	e008      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008746:	e004      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
        break;
 800874c:	e001      	b.n	8008752 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a34      	ldr	r2, [pc, #208]	; (800884c <TIM_Base_SetConfig+0xe4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00f      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d00b      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a31      	ldr	r2, [pc, #196]	; (8008850 <TIM_Base_SetConfig+0xe8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a30      	ldr	r2, [pc, #192]	; (8008854 <TIM_Base_SetConfig+0xec>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <TIM_Base_SetConfig+0xf0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d108      	bne.n	80087b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a25      	ldr	r2, [pc, #148]	; (800884c <TIM_Base_SetConfig+0xe4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01b      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c0:	d017      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a22      	ldr	r2, [pc, #136]	; (8008850 <TIM_Base_SetConfig+0xe8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a21      	ldr	r2, [pc, #132]	; (8008854 <TIM_Base_SetConfig+0xec>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00f      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a20      	ldr	r2, [pc, #128]	; (8008858 <TIM_Base_SetConfig+0xf0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00b      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a1f      	ldr	r2, [pc, #124]	; (800885c <TIM_Base_SetConfig+0xf4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d007      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <TIM_Base_SetConfig+0xf8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d003      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <TIM_Base_SetConfig+0xfc>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d108      	bne.n	8008804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a08      	ldr	r2, [pc, #32]	; (800884c <TIM_Base_SetConfig+0xe4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d103      	bne.n	8008838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	615a      	str	r2, [r3, #20]
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40014000 	.word	0x40014000
 8008860:	40014400 	.word	0x40014400
 8008864:	40014800 	.word	0x40014800

08008868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 0302 	bic.w	r3, r3, #2
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <TIM_OC1_SetConfig+0xc8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d10c      	bne.n	80088de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f023 0308 	bic.w	r3, r3, #8
 80088ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f023 0304 	bic.w	r3, r3, #4
 80088dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <TIM_OC1_SetConfig+0xc8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d111      	bne.n	800890a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4313      	orrs	r3, r2
 8008908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	621a      	str	r2, [r3, #32]
}
 8008924:	bf00      	nop
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	40010000 	.word	0x40010000

08008934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f023 0210 	bic.w	r2, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800896a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4313      	orrs	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f023 0320 	bic.w	r3, r3, #32
 800897e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4313      	orrs	r3, r2
 800898a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <TIM_OC2_SetConfig+0xd4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d10d      	bne.n	80089b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <TIM_OC2_SetConfig+0xd4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d113      	bne.n	80089e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000

08008a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0303 	bic.w	r3, r3, #3
 8008a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a1d      	ldr	r2, [pc, #116]	; (8008adc <TIM_OC3_SetConfig+0xd0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d10d      	bne.n	8008a86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a14      	ldr	r2, [pc, #80]	; (8008adc <TIM_OC3_SetConfig+0xd0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d113      	bne.n	8008ab6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	621a      	str	r2, [r3, #32]
}
 8008ad0:	bf00      	nop
 8008ad2:	371c      	adds	r7, #28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	40010000 	.word	0x40010000

08008ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	031b      	lsls	r3, r3, #12
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <TIM_OC4_SetConfig+0x9c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d109      	bne.n	8008b54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	019b      	lsls	r3, r3, #6
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40010000 	.word	0x40010000

08008b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f023 030a 	bic.w	r3, r3, #10
 8008bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b087      	sub	sp, #28
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	f023 0210 	bic.w	r2, r3, #16
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	031b      	lsls	r3, r3, #12
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f043 0307 	orr.w	r3, r3, #7
 8008c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	609a      	str	r2, [r3, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	021a      	lsls	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	609a      	str	r2, [r3, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f003 031f 	and.w	r3, r3, #31
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a1a      	ldr	r2, [r3, #32]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	401a      	ands	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1a      	ldr	r2, [r3, #32]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f003 031f 	and.w	r3, r3, #31
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cec:	431a      	orrs	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	; (8008d7c <TIM_ResetCallback+0x7c>)
 8008d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a1b      	ldr	r2, [pc, #108]	; (8008d80 <TIM_ResetCallback+0x80>)
 8008d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <TIM_ResetCallback+0x84>)
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <TIM_ResetCallback+0x88>)
 8008d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <TIM_ResetCallback+0x8c>)
 8008d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a17      	ldr	r2, [pc, #92]	; (8008d90 <TIM_ResetCallback+0x90>)
 8008d34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a16      	ldr	r2, [pc, #88]	; (8008d94 <TIM_ResetCallback+0x94>)
 8008d3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <TIM_ResetCallback+0x98>)
 8008d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a14      	ldr	r2, [pc, #80]	; (8008d9c <TIM_ResetCallback+0x9c>)
 8008d4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <TIM_ResetCallback+0xa0>)
 8008d54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <TIM_ResetCallback+0xa4>)
 8008d5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <TIM_ResetCallback+0xa8>)
 8008d64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a10      	ldr	r2, [pc, #64]	; (8008dac <TIM_ResetCallback+0xac>)
 8008d6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	080033bd 	.word	0x080033bd
 8008d80:	0800841f 	.word	0x0800841f
 8008d84:	08008497 	.word	0x08008497
 8008d88:	080084ab 	.word	0x080084ab
 8008d8c:	08008447 	.word	0x08008447
 8008d90:	0800845b 	.word	0x0800845b
 8008d94:	08008433 	.word	0x08008433
 8008d98:	0800846f 	.word	0x0800846f
 8008d9c:	08008483 	.word	0x08008483
 8008da0:	080084bf 	.word	0x080084bf
 8008da4:	08008f31 	.word	0x08008f31
 8008da8:	08008f45 	.word	0x08008f45
 8008dac:	08008f59 	.word	0x08008f59

08008db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e050      	b.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d018      	beq.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e14:	d013      	beq.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a15      	ldr	r2, [pc, #84]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d10c      	bne.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	40010000 	.word	0x40010000
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40000800 	.word	0x40000800
 8008e84:	40000c00 	.word	0x40000c00
 8008e88:	40014000 	.word	0x40014000

08008e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e03d      	b.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e04a      	b.n	8009014 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d111      	bne.n	8008fae <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fd2c 	bl	80099f0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a1e      	ldr	r2, [pc, #120]	; (800901c <HAL_UART_Init+0xb0>)
 8008fa4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2224      	movs	r2, #36	; 0x24
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fff6 	bl	8009fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695a      	ldr	r2, [r3, #20]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ffa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	08004485 	.word	0x08004485

08009020 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	460b      	mov	r3, r1
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d107      	bne.n	8009048 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	f043 0220 	orr.w	r2, r3, #32
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e08c      	b.n	8009162 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_UART_RegisterCallback+0x36>
 8009052:	2302      	movs	r3, #2
 8009054:	e085      	b.n	8009162 <HAL_UART_RegisterCallback+0x142>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b20      	cmp	r3, #32
 8009068:	d151      	bne.n	800910e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	2b0c      	cmp	r3, #12
 800906e:	d845      	bhi.n	80090fc <HAL_UART_RegisterCallback+0xdc>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <HAL_UART_RegisterCallback+0x58>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	080090ad 	.word	0x080090ad
 800907c:	080090b5 	.word	0x080090b5
 8009080:	080090bd 	.word	0x080090bd
 8009084:	080090c5 	.word	0x080090c5
 8009088:	080090cd 	.word	0x080090cd
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090dd 	.word	0x080090dd
 8009094:	080090e5 	.word	0x080090e5
 8009098:	080090fd 	.word	0x080090fd
 800909c:	080090fd 	.word	0x080090fd
 80090a0:	080090fd 	.word	0x080090fd
 80090a4:	080090ed 	.word	0x080090ed
 80090a8:	080090f5 	.word	0x080090f5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80090b2:	e051      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80090ba:	e04d      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80090c2:	e049      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80090ca:	e045      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80090d2:	e041      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80090da:	e03d      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80090e2:	e039      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80090ea:	e035      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80090f2:	e031      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80090fa:	e02d      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009100:	f043 0220 	orr.w	r2, r3, #32
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
        break;
 800910c:	e024      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d116      	bne.n	8009148 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	2b0b      	cmp	r3, #11
 800911e:	d002      	beq.n	8009126 <HAL_UART_RegisterCallback+0x106>
 8009120:	2b0c      	cmp	r3, #12
 8009122:	d004      	beq.n	800912e <HAL_UART_RegisterCallback+0x10e>
 8009124:	e007      	b.n	8009136 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800912c:	e014      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009134:	e010      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	f043 0220 	orr.w	r2, r3, #32
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	75fb      	strb	r3, [r7, #23]
        break;
 8009146:	e007      	b.n	8009158 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f043 0220 	orr.w	r2, r3, #32
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop

08009170 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b20      	cmp	r3, #32
 8009188:	d11d      	bne.n	80091c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Receive_IT+0x26>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e016      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Receive_IT+0x38>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e00f      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	461a      	mov	r2, r3
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fcf7 	bl	8009bb0 <UART_Start_Receive_IT>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e000      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091c6:	2302      	movs	r3, #2
  }
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08c      	sub	sp, #48	; 0x30
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	4613      	mov	r3, r2
 80091dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d165      	bne.n	80092b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_UART_Transmit_DMA+0x26>
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e05e      	b.n	80092b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_UART_Transmit_DMA+0x38>
 8009204:	2302      	movs	r3, #2
 8009206:	e057      	b.n	80092b8 <HAL_UART_Transmit_DMA+0xe8>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2221      	movs	r2, #33	; 0x21
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	4a22      	ldr	r2, [pc, #136]	; (80092c0 <HAL_UART_Transmit_DMA+0xf0>)
 8009236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	4a21      	ldr	r2, [pc, #132]	; (80092c4 <HAL_UART_Transmit_DMA+0xf4>)
 800923e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	4a20      	ldr	r2, [pc, #128]	; (80092c8 <HAL_UART_Transmit_DMA+0xf8>)
 8009246:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	2200      	movs	r2, #0
 800924e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009250:	f107 0308 	add.w	r3, r7, #8
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	6819      	ldr	r1, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3304      	adds	r3, #4
 8009264:	461a      	mov	r2, r3
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	f7fb fcd6 	bl	8004c18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009274:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3314      	adds	r3, #20
 8009284:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	617b      	str	r3, [r7, #20]
   return(result);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3314      	adds	r3, #20
 800929c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929e:	627a      	str	r2, [r7, #36]	; 0x24
 80092a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6a39      	ldr	r1, [r7, #32]
 80092a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e5      	bne.n	800927e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e000      	b.n	80092b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
  }
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3730      	adds	r7, #48	; 0x30
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	08009a61 	.word	0x08009a61
 80092c4:	08009afd 	.word	0x08009afd
 80092c8:	08009b1b 	.word	0x08009b1b

080092cc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b09a      	sub	sp, #104	; 0x68
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092ea:	667b      	str	r3, [r7, #100]	; 0x64
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	330c      	adds	r3, #12
 80092f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092f4:	657a      	str	r2, [r7, #84]	; 0x54
 80092f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e5      	bne.n	80092d4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	663b      	str	r3, [r7, #96]	; 0x60
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3314      	adds	r3, #20
 8009326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009328:	643a      	str	r2, [r7, #64]	; 0x40
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800932e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e5      	bne.n	8009308 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	2b01      	cmp	r3, #1
 8009342:	d119      	bne.n	8009378 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	61fb      	str	r3, [r7, #28]
   return(result);
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f023 0310 	bic.w	r3, r3, #16
 800935a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	330c      	adds	r3, #12
 8009362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800936a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e5      	bne.n	8009344 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009382:	2b40      	cmp	r3, #64	; 0x40
 8009384:	d136      	bne.n	80093f4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	60bb      	str	r3, [r7, #8]
   return(result);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800939c:	65bb      	str	r3, [r7, #88]	; 0x58
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3314      	adds	r3, #20
 80093a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093a6:	61ba      	str	r2, [r7, #24]
 80093a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	613b      	str	r3, [r7, #16]
   return(result);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e5      	bne.n	8009386 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d018      	beq.n	80093f4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	2200      	movs	r2, #0
 80093c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fb fc7a 	bl	8004cc8 <HAL_DMA_Abort>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00c      	beq.n	80093f4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fb fe8e 	bl	8005100 <HAL_DMA_GetError>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d104      	bne.n	80093f4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2210      	movs	r2, #16
 80093ee:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e00a      	b.n	800940a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3768      	adds	r7, #104	; 0x68
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0ba      	sub	sp, #232	; 0xe8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800943a:	2300      	movs	r3, #0
 800943c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009440:	2300      	movs	r3, #0
 8009442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10f      	bne.n	800947a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800945a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_UART_IRQHandler+0x66>
 8009466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fce3 	bl	8009e3e <UART_Receive_IT>
      return;
 8009478:	e25b      	b.n	8009932 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800947a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80e1 	beq.w	8009646 <HAL_UART_IRQHandler+0x232>
 8009484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009494:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80d4 	beq.w	8009646 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800949e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00b      	beq.n	80094c2 <HAL_UART_IRQHandler+0xae>
 80094aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d005      	beq.n	80094c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	f043 0201 	orr.w	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00b      	beq.n	80094e6 <HAL_UART_IRQHandler+0xd2>
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	f043 0202 	orr.w	r2, r3, #2
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00b      	beq.n	800950a <HAL_UART_IRQHandler+0xf6>
 80094f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	f043 0204 	orr.w	r2, r3, #4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d011      	beq.n	800953a <HAL_UART_IRQHandler+0x126>
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f043 0208 	orr.w	r2, r3, #8
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 81f2 	beq.w	8009928 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_UART_IRQHandler+0x14e>
 8009550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fc6e 	bl	8009e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	bf0c      	ite	eq
 8009570:	2301      	moveq	r3, #1
 8009572:	2300      	movne	r3, #0
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f003 0308 	and.w	r3, r3, #8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d103      	bne.n	800958e <HAL_UART_IRQHandler+0x17a>
 8009586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d051      	beq.n	8009632 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb74 	bl	8009c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d142      	bne.n	8009628 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3314      	adds	r3, #20
 80095a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3314      	adds	r3, #20
 80095ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d9      	bne.n	80095a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d013      	beq.n	800961e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	4a7f      	ldr	r2, [pc, #508]	; (80097f8 <HAL_UART_IRQHandler+0x3e4>)
 80095fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	4618      	mov	r0, r3
 8009604:	f7fb fbd0 	bl	8004da8 <HAL_DMA_Abort_IT>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d019      	beq.n	8009642 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961c:	e011      	b.n	8009642 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009626:	e00c      	b.n	8009642 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009630:	e007      	b.n	8009642 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009640:	e172      	b.n	8009928 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009642:	bf00      	nop
    return;
 8009644:	e170      	b.n	8009928 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	2b01      	cmp	r3, #1
 800964c:	f040 814c 	bne.w	80098e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8145 	beq.w	80098e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800965e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 813e 	beq.w	80098e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800966c:	2300      	movs	r3, #0
 800966e:	60bb      	str	r3, [r7, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968c:	2b40      	cmp	r3, #64	; 0x40
 800968e:	f040 80b5 	bne.w	80097fc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800969e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 8142 	beq.w	800992c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096b0:	429a      	cmp	r2, r3
 80096b2:	f080 813b 	bcs.w	800992c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c8:	f000 8088 	beq.w	80097dc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	330c      	adds	r3, #12
 80096d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	330c      	adds	r3, #12
 80096f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80096f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009704:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1d9      	bne.n	80096cc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3314      	adds	r3, #20
 800971e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800973c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009740:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009744:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800974e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e1      	bne.n	8009718 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800976a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3314      	adds	r3, #20
 8009774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009778:	66fa      	str	r2, [r7, #108]	; 0x6c
 800977a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800977e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e3      	bne.n	8009754 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	330c      	adds	r3, #12
 80097a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ac:	f023 0310 	bic.w	r3, r3, #16
 80097b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097be:	65ba      	str	r2, [r7, #88]	; 0x58
 80097c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e3      	bne.n	800979a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fb fa76 	bl	8004cc8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80097e8:	b292      	uxth	r2, r2
 80097ea:	1a8a      	subs	r2, r1, r2
 80097ec:	b292      	uxth	r2, r2
 80097ee:	4611      	mov	r1, r2
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f4:	e09a      	b.n	800992c <HAL_UART_IRQHandler+0x518>
 80097f6:	bf00      	nop
 80097f8:	08009d43 	.word	0x08009d43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 808c 	beq.w	8009930 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8087 	beq.w	8009930 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009846:	647a      	str	r2, [r7, #68]	; 0x44
 8009848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800984c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e3      	bne.n	8009822 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800987e:	633a      	str	r2, [r7, #48]	; 0x30
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e3      	bne.n	800985a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0310 	bic.w	r3, r3, #16
 80098b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80098c4:	61fa      	str	r2, [r7, #28]
 80098c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	617b      	str	r3, [r7, #20]
   return(result);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e3      	bne.n	80098a0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098dc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80098e0:	4611      	mov	r1, r2
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098e6:	e023      	b.n	8009930 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_UART_IRQHandler+0x4f4>
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fa33 	bl	8009d6c <UART_Transmit_IT>
    return;
 8009906:	e014      	b.n	8009932 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00e      	beq.n	8009932 <HAL_UART_IRQHandler+0x51e>
 8009914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	d008      	beq.n	8009932 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fa73 	bl	8009e0c <UART_EndTransmit_IT>
    return;
 8009926:	e004      	b.n	8009932 <HAL_UART_IRQHandler+0x51e>
    return;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <HAL_UART_IRQHandler+0x51e>
      return;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <HAL_UART_IRQHandler+0x51e>
      return;
 8009930:	bf00      	nop
  }
}
 8009932:	37e8      	adds	r7, #232	; 0xe8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a10      	ldr	r2, [pc, #64]	; (8009a3c <UART_InitCallbacksToDefault+0x4c>)
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a0f      	ldr	r2, [pc, #60]	; (8009a40 <UART_InitCallbacksToDefault+0x50>)
 8009a02:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a0f      	ldr	r2, [pc, #60]	; (8009a44 <UART_InitCallbacksToDefault+0x54>)
 8009a08:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a0e      	ldr	r2, [pc, #56]	; (8009a48 <UART_InitCallbacksToDefault+0x58>)
 8009a0e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a0e      	ldr	r2, [pc, #56]	; (8009a4c <UART_InitCallbacksToDefault+0x5c>)
 8009a14:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <UART_InitCallbacksToDefault+0x60>)
 8009a1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a0d      	ldr	r2, [pc, #52]	; (8009a54 <UART_InitCallbacksToDefault+0x64>)
 8009a20:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a0c      	ldr	r2, [pc, #48]	; (8009a58 <UART_InitCallbacksToDefault+0x68>)
 8009a26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a0c      	ldr	r2, [pc, #48]	; (8009a5c <UART_InitCallbacksToDefault+0x6c>)
 8009a2c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	0800994d 	.word	0x0800994d
 8009a40:	08009939 	.word	0x08009939
 8009a44:	08009975 	.word	0x08009975
 8009a48:	08009961 	.word	0x08009961
 8009a4c:	08009989 	.word	0x08009989
 8009a50:	0800999d 	.word	0x0800999d
 8009a54:	080099b1 	.word	0x080099b1
 8009a58:	080099c5 	.word	0x080099c5
 8009a5c:	080099d9 	.word	0x080099d9

08009a60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b090      	sub	sp, #64	; 0x40
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d137      	bne.n	8009aec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7e:	2200      	movs	r2, #0
 8009a80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3314      	adds	r3, #20
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	623b      	str	r3, [r7, #32]
   return(result);
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3314      	adds	r3, #20
 8009aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e5      	bne.n	8009a82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	330c      	adds	r3, #12
 8009abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	330c      	adds	r3, #12
 8009ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad6:	61fa      	str	r2, [r7, #28]
 8009ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	69b9      	ldr	r1, [r7, #24]
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e5      	bne.n	8009ab6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009aea:	e003      	b.n	8009af4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009af2:	4798      	blx	r3
}
 8009af4:	bf00      	nop
 8009af6:	3740      	adds	r7, #64	; 0x40
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b36:	2b80      	cmp	r3, #128	; 0x80
 8009b38:	bf0c      	ite	eq
 8009b3a:	2301      	moveq	r3, #1
 8009b3c:	2300      	movne	r3, #0
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b21      	cmp	r3, #33	; 0x21
 8009b4c:	d108      	bne.n	8009b60 <UART_DMAError+0x46>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009b5a:	68b8      	ldr	r0, [r7, #8]
 8009b5c:	f000 f866 	bl	8009c2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6a:	2b40      	cmp	r3, #64	; 0x40
 8009b6c:	bf0c      	ite	eq
 8009b6e:	2301      	moveq	r3, #1
 8009b70:	2300      	movne	r3, #0
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b22      	cmp	r3, #34	; 0x22
 8009b80:	d108      	bne.n	8009b94 <UART_DMAError+0x7a>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009b8e:	68b8      	ldr	r0, [r7, #8]
 8009b90:	f000 f874 	bl	8009c7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	f043 0210 	orr.w	r2, r3, #16
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	88fa      	ldrh	r2, [r7, #6]
 8009bc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	88fa      	ldrh	r2, [r7, #6]
 8009bce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2222      	movs	r2, #34	; 0x22
 8009bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695a      	ldr	r2, [r3, #20]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0201 	orr.w	r2, r2, #1
 8009c0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f042 0220 	orr.w	r2, r2, #32
 8009c1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b089      	sub	sp, #36	; 0x24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	330c      	adds	r3, #12
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	61ba      	str	r2, [r7, #24]
 8009c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c58:	6979      	ldr	r1, [r7, #20]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	e841 2300 	strex	r3, r2, [r1]
 8009c60:	613b      	str	r3, [r7, #16]
   return(result);
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1e5      	bne.n	8009c34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009c70:	bf00      	nop
 8009c72:	3724      	adds	r7, #36	; 0x24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b095      	sub	sp, #84	; 0x54
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	330c      	adds	r3, #12
 8009c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ca4:	643a      	str	r2, [r7, #64]	; 0x40
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e5      	bne.n	8009c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3314      	adds	r3, #20
 8009cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e5      	bne.n	8009cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d119      	bne.n	8009d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f023 0310 	bic.w	r3, r3, #16
 8009d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	330c      	adds	r3, #12
 8009d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d14:	61ba      	str	r2, [r7, #24]
 8009d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6979      	ldr	r1, [r7, #20]
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	613b      	str	r3, [r7, #16]
   return(result);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e5      	bne.n	8009cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d36:	bf00      	nop
 8009d38:	3754      	adds	r7, #84	; 0x54
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b21      	cmp	r3, #33	; 0x21
 8009d7e:	d13e      	bne.n	8009dfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d88:	d114      	bne.n	8009db4 <UART_Transmit_IT+0x48>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d110      	bne.n	8009db4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009da6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	1c9a      	adds	r2, r3, #2
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	621a      	str	r2, [r3, #32]
 8009db2:	e008      	b.n	8009dc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	1c59      	adds	r1, r3, #1
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6211      	str	r1, [r2, #32]
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10f      	bne.n	8009dfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009de8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009df8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b08c      	sub	sp, #48	; 0x30
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b22      	cmp	r3, #34	; 0x22
 8009e50:	f040 80ad 	bne.w	8009fae <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e5c:	d117      	bne.n	8009e8e <UART_Receive_IT+0x50>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d113      	bne.n	8009e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	1c9a      	adds	r2, r3, #2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8009e8c:	e026      	b.n	8009edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e94:	2300      	movs	r3, #0
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea0:	d007      	beq.n	8009eb2 <UART_Receive_IT+0x74>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <UART_Receive_IT+0x82>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	e008      	b.n	8009ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d15c      	bne.n	8009faa <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0220 	bic.w	r2, r2, #32
 8009efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695a      	ldr	r2, [r3, #20]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0201 	bic.w	r2, r2, #1
 8009f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d136      	bne.n	8009f9e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	330c      	adds	r3, #12
 8009f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	613b      	str	r3, [r7, #16]
   return(result);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f023 0310 	bic.w	r3, r3, #16
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	330c      	adds	r3, #12
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	623a      	str	r2, [r7, #32]
 8009f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	69f9      	ldr	r1, [r7, #28]
 8009f5c:	6a3a      	ldr	r2, [r7, #32]
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e5      	bne.n	8009f36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b10      	cmp	r3, #16
 8009f76:	d10a      	bne.n	8009f8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009f96:	4611      	mov	r1, r2
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
 8009f9c:	e003      	b.n	8009fa6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e002      	b.n	8009fb0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3730      	adds	r7, #48	; 0x30
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fbc:	b0c0      	sub	sp, #256	; 0x100
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd4:	68d9      	ldr	r1, [r3, #12]
 8009fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	ea40 0301 	orr.w	r3, r0, r1
 8009fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a010:	f021 010c 	bic.w	r1, r1, #12
 800a014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a01e:	430b      	orrs	r3, r1
 800a020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a032:	6999      	ldr	r1, [r3, #24]
 800a034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	ea40 0301 	orr.w	r3, r0, r1
 800a03e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	4b8f      	ldr	r3, [pc, #572]	; (800a284 <UART_SetConfig+0x2cc>)
 800a048:	429a      	cmp	r2, r3
 800a04a:	d005      	beq.n	800a058 <UART_SetConfig+0xa0>
 800a04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b8d      	ldr	r3, [pc, #564]	; (800a288 <UART_SetConfig+0x2d0>)
 800a054:	429a      	cmp	r2, r3
 800a056:	d104      	bne.n	800a062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a058:	f7fc ff26 	bl	8006ea8 <HAL_RCC_GetPCLK2Freq>
 800a05c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a060:	e003      	b.n	800a06a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a062:	f7fc ff0d 	bl	8006e80 <HAL_RCC_GetPCLK1Freq>
 800a066:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a074:	f040 810c 	bne.w	800a290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a082:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a08a:	4622      	mov	r2, r4
 800a08c:	462b      	mov	r3, r5
 800a08e:	1891      	adds	r1, r2, r2
 800a090:	65b9      	str	r1, [r7, #88]	; 0x58
 800a092:	415b      	adcs	r3, r3
 800a094:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a09a:	4621      	mov	r1, r4
 800a09c:	eb12 0801 	adds.w	r8, r2, r1
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	eb43 0901 	adc.w	r9, r3, r1
 800a0a6:	f04f 0200 	mov.w	r2, #0
 800a0aa:	f04f 0300 	mov.w	r3, #0
 800a0ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0ba:	4690      	mov	r8, r2
 800a0bc:	4699      	mov	r9, r3
 800a0be:	4623      	mov	r3, r4
 800a0c0:	eb18 0303 	adds.w	r3, r8, r3
 800a0c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0c8:	462b      	mov	r3, r5
 800a0ca:	eb49 0303 	adc.w	r3, r9, r3
 800a0ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a0e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	18db      	adds	r3, r3, r3
 800a0ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	eb42 0303 	adc.w	r3, r2, r3
 800a0f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a0f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a0f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a0fc:	f7f6 fd28 	bl	8000b50 <__aeabi_uldivmod>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4b61      	ldr	r3, [pc, #388]	; (800a28c <UART_SetConfig+0x2d4>)
 800a106:	fba3 2302 	umull	r2, r3, r3, r2
 800a10a:	095b      	lsrs	r3, r3, #5
 800a10c:	011c      	lsls	r4, r3, #4
 800a10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a118:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a11c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a120:	4642      	mov	r2, r8
 800a122:	464b      	mov	r3, r9
 800a124:	1891      	adds	r1, r2, r2
 800a126:	64b9      	str	r1, [r7, #72]	; 0x48
 800a128:	415b      	adcs	r3, r3
 800a12a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a12c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a130:	4641      	mov	r1, r8
 800a132:	eb12 0a01 	adds.w	sl, r2, r1
 800a136:	4649      	mov	r1, r9
 800a138:	eb43 0b01 	adc.w	fp, r3, r1
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a14c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a150:	4692      	mov	sl, r2
 800a152:	469b      	mov	fp, r3
 800a154:	4643      	mov	r3, r8
 800a156:	eb1a 0303 	adds.w	r3, sl, r3
 800a15a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a15e:	464b      	mov	r3, r9
 800a160:	eb4b 0303 	adc.w	r3, fp, r3
 800a164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a17c:	460b      	mov	r3, r1
 800a17e:	18db      	adds	r3, r3, r3
 800a180:	643b      	str	r3, [r7, #64]	; 0x40
 800a182:	4613      	mov	r3, r2
 800a184:	eb42 0303 	adc.w	r3, r2, r3
 800a188:	647b      	str	r3, [r7, #68]	; 0x44
 800a18a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a18e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a192:	f7f6 fcdd 	bl	8000b50 <__aeabi_uldivmod>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	4b3b      	ldr	r3, [pc, #236]	; (800a28c <UART_SetConfig+0x2d4>)
 800a19e:	fba3 2301 	umull	r2, r3, r3, r1
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	2264      	movs	r2, #100	; 0x64
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	1acb      	subs	r3, r1, r3
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1b2:	4b36      	ldr	r3, [pc, #216]	; (800a28c <UART_SetConfig+0x2d4>)
 800a1b4:	fba3 2302 	umull	r2, r3, r3, r2
 800a1b8:	095b      	lsrs	r3, r3, #5
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1c0:	441c      	add	r4, r3
 800a1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a1d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	464b      	mov	r3, r9
 800a1d8:	1891      	adds	r1, r2, r2
 800a1da:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1dc:	415b      	adcs	r3, r3
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	1851      	adds	r1, r2, r1
 800a1e8:	6339      	str	r1, [r7, #48]	; 0x30
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	414b      	adcs	r3, r1
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	f04f 0300 	mov.w	r3, #0
 800a1f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	00cb      	lsls	r3, r1, #3
 800a200:	4651      	mov	r1, sl
 800a202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a206:	4651      	mov	r1, sl
 800a208:	00ca      	lsls	r2, r1, #3
 800a20a:	4610      	mov	r0, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	4603      	mov	r3, r0
 800a210:	4642      	mov	r2, r8
 800a212:	189b      	adds	r3, r3, r2
 800a214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a218:	464b      	mov	r3, r9
 800a21a:	460a      	mov	r2, r1
 800a21c:	eb42 0303 	adc.w	r3, r2, r3
 800a220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a238:	460b      	mov	r3, r1
 800a23a:	18db      	adds	r3, r3, r3
 800a23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a23e:	4613      	mov	r3, r2
 800a240:	eb42 0303 	adc.w	r3, r2, r3
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a24a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a24e:	f7f6 fc7f 	bl	8000b50 <__aeabi_uldivmod>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <UART_SetConfig+0x2d4>)
 800a258:	fba3 1302 	umull	r1, r3, r3, r2
 800a25c:	095b      	lsrs	r3, r3, #5
 800a25e:	2164      	movs	r1, #100	; 0x64
 800a260:	fb01 f303 	mul.w	r3, r1, r3
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	3332      	adds	r3, #50	; 0x32
 800a26a:	4a08      	ldr	r2, [pc, #32]	; (800a28c <UART_SetConfig+0x2d4>)
 800a26c:	fba2 2303 	umull	r2, r3, r2, r3
 800a270:	095b      	lsrs	r3, r3, #5
 800a272:	f003 0207 	and.w	r2, r3, #7
 800a276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4422      	add	r2, r4
 800a27e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a280:	e105      	b.n	800a48e <UART_SetConfig+0x4d6>
 800a282:	bf00      	nop
 800a284:	40011000 	.word	0x40011000
 800a288:	40011400 	.word	0x40011400
 800a28c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a294:	2200      	movs	r2, #0
 800a296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a29a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a29e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2a2:	4642      	mov	r2, r8
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	1891      	adds	r1, r2, r2
 800a2a8:	6239      	str	r1, [r7, #32]
 800a2aa:	415b      	adcs	r3, r3
 800a2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	1854      	adds	r4, r2, r1
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	eb43 0501 	adc.w	r5, r3, r1
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	f04f 0300 	mov.w	r3, #0
 800a2c4:	00eb      	lsls	r3, r5, #3
 800a2c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2ca:	00e2      	lsls	r2, r4, #3
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	461d      	mov	r5, r3
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	18e3      	adds	r3, r4, r3
 800a2d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2d8:	464b      	mov	r3, r9
 800a2da:	eb45 0303 	adc.w	r3, r5, r3
 800a2de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a2fe:	4629      	mov	r1, r5
 800a300:	008b      	lsls	r3, r1, #2
 800a302:	4621      	mov	r1, r4
 800a304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a308:	4621      	mov	r1, r4
 800a30a:	008a      	lsls	r2, r1, #2
 800a30c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a310:	f7f6 fc1e 	bl	8000b50 <__aeabi_uldivmod>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4b60      	ldr	r3, [pc, #384]	; (800a49c <UART_SetConfig+0x4e4>)
 800a31a:	fba3 2302 	umull	r2, r3, r3, r2
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	011c      	lsls	r4, r3, #4
 800a322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a326:	2200      	movs	r2, #0
 800a328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a32c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a334:	4642      	mov	r2, r8
 800a336:	464b      	mov	r3, r9
 800a338:	1891      	adds	r1, r2, r2
 800a33a:	61b9      	str	r1, [r7, #24]
 800a33c:	415b      	adcs	r3, r3
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a344:	4641      	mov	r1, r8
 800a346:	1851      	adds	r1, r2, r1
 800a348:	6139      	str	r1, [r7, #16]
 800a34a:	4649      	mov	r1, r9
 800a34c:	414b      	adcs	r3, r1
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	f04f 0200 	mov.w	r2, #0
 800a354:	f04f 0300 	mov.w	r3, #0
 800a358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a35c:	4659      	mov	r1, fp
 800a35e:	00cb      	lsls	r3, r1, #3
 800a360:	4651      	mov	r1, sl
 800a362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a366:	4651      	mov	r1, sl
 800a368:	00ca      	lsls	r2, r1, #3
 800a36a:	4610      	mov	r0, r2
 800a36c:	4619      	mov	r1, r3
 800a36e:	4603      	mov	r3, r0
 800a370:	4642      	mov	r2, r8
 800a372:	189b      	adds	r3, r3, r2
 800a374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a378:	464b      	mov	r3, r9
 800a37a:	460a      	mov	r2, r1
 800a37c:	eb42 0303 	adc.w	r3, r2, r3
 800a380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a38e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 0300 	mov.w	r3, #0
 800a398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a39c:	4649      	mov	r1, r9
 800a39e:	008b      	lsls	r3, r1, #2
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	008a      	lsls	r2, r1, #2
 800a3aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3ae:	f7f6 fbcf 	bl	8000b50 <__aeabi_uldivmod>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4b39      	ldr	r3, [pc, #228]	; (800a49c <UART_SetConfig+0x4e4>)
 800a3b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	2164      	movs	r1, #100	; 0x64
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	3332      	adds	r3, #50	; 0x32
 800a3ca:	4a34      	ldr	r2, [pc, #208]	; (800a49c <UART_SetConfig+0x4e4>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3d6:	441c      	add	r4, r3
 800a3d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3dc:	2200      	movs	r2, #0
 800a3de:	673b      	str	r3, [r7, #112]	; 0x70
 800a3e0:	677a      	str	r2, [r7, #116]	; 0x74
 800a3e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	464b      	mov	r3, r9
 800a3ea:	1891      	adds	r1, r2, r2
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	415b      	adcs	r3, r3
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3f6:	4641      	mov	r1, r8
 800a3f8:	1851      	adds	r1, r2, r1
 800a3fa:	6039      	str	r1, [r7, #0]
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	414b      	adcs	r3, r1
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a40e:	4659      	mov	r1, fp
 800a410:	00cb      	lsls	r3, r1, #3
 800a412:	4651      	mov	r1, sl
 800a414:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a418:	4651      	mov	r1, sl
 800a41a:	00ca      	lsls	r2, r1, #3
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	4603      	mov	r3, r0
 800a422:	4642      	mov	r2, r8
 800a424:	189b      	adds	r3, r3, r2
 800a426:	66bb      	str	r3, [r7, #104]	; 0x68
 800a428:	464b      	mov	r3, r9
 800a42a:	460a      	mov	r2, r1
 800a42c:	eb42 0303 	adc.w	r3, r2, r3
 800a430:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	663b      	str	r3, [r7, #96]	; 0x60
 800a43c:	667a      	str	r2, [r7, #100]	; 0x64
 800a43e:	f04f 0200 	mov.w	r2, #0
 800a442:	f04f 0300 	mov.w	r3, #0
 800a446:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a44a:	4649      	mov	r1, r9
 800a44c:	008b      	lsls	r3, r1, #2
 800a44e:	4641      	mov	r1, r8
 800a450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a454:	4641      	mov	r1, r8
 800a456:	008a      	lsls	r2, r1, #2
 800a458:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a45c:	f7f6 fb78 	bl	8000b50 <__aeabi_uldivmod>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4b0d      	ldr	r3, [pc, #52]	; (800a49c <UART_SetConfig+0x4e4>)
 800a466:	fba3 1302 	umull	r1, r3, r3, r2
 800a46a:	095b      	lsrs	r3, r3, #5
 800a46c:	2164      	movs	r1, #100	; 0x64
 800a46e:	fb01 f303 	mul.w	r3, r1, r3
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	3332      	adds	r3, #50	; 0x32
 800a478:	4a08      	ldr	r2, [pc, #32]	; (800a49c <UART_SetConfig+0x4e4>)
 800a47a:	fba2 2303 	umull	r2, r3, r2, r3
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	f003 020f 	and.w	r2, r3, #15
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4422      	add	r2, r4
 800a48c:	609a      	str	r2, [r3, #8]
}
 800a48e:	bf00      	nop
 800a490:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a494:	46bd      	mov	sp, r7
 800a496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49a:	bf00      	nop
 800a49c:	51eb851f 	.word	0x51eb851f

0800a4a0 <__errno>:
 800a4a0:	4b01      	ldr	r3, [pc, #4]	; (800a4a8 <__errno+0x8>)
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	20000290 	.word	0x20000290

0800a4ac <__libc_init_array>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4d0d      	ldr	r5, [pc, #52]	; (800a4e4 <__libc_init_array+0x38>)
 800a4b0:	4c0d      	ldr	r4, [pc, #52]	; (800a4e8 <__libc_init_array+0x3c>)
 800a4b2:	1b64      	subs	r4, r4, r5
 800a4b4:	10a4      	asrs	r4, r4, #2
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	42a6      	cmp	r6, r4
 800a4ba:	d109      	bne.n	800a4d0 <__libc_init_array+0x24>
 800a4bc:	4d0b      	ldr	r5, [pc, #44]	; (800a4ec <__libc_init_array+0x40>)
 800a4be:	4c0c      	ldr	r4, [pc, #48]	; (800a4f0 <__libc_init_array+0x44>)
 800a4c0:	f000 f90c 	bl	800a6dc <_init>
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	42a6      	cmp	r6, r4
 800a4cc:	d105      	bne.n	800a4da <__libc_init_array+0x2e>
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d4:	4798      	blx	r3
 800a4d6:	3601      	adds	r6, #1
 800a4d8:	e7ee      	b.n	800a4b8 <__libc_init_array+0xc>
 800a4da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4de:	4798      	blx	r3
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	e7f2      	b.n	800a4ca <__libc_init_array+0x1e>
 800a4e4:	0800a76c 	.word	0x0800a76c
 800a4e8:	0800a76c 	.word	0x0800a76c
 800a4ec:	0800a76c 	.word	0x0800a76c
 800a4f0:	0800a770 	.word	0x0800a770

0800a4f4 <memcpy>:
 800a4f4:	440a      	add	r2, r1
 800a4f6:	4291      	cmp	r1, r2
 800a4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4fc:	d100      	bne.n	800a500 <memcpy+0xc>
 800a4fe:	4770      	bx	lr
 800a500:	b510      	push	{r4, lr}
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50a:	4291      	cmp	r1, r2
 800a50c:	d1f9      	bne.n	800a502 <memcpy+0xe>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <memset>:
 800a510:	4402      	add	r2, r0
 800a512:	4603      	mov	r3, r0
 800a514:	4293      	cmp	r3, r2
 800a516:	d100      	bne.n	800a51a <memset+0xa>
 800a518:	4770      	bx	lr
 800a51a:	f803 1b01 	strb.w	r1, [r3], #1
 800a51e:	e7f9      	b.n	800a514 <memset+0x4>

0800a520 <sqrt>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	ed2d 8b02 	vpush	{d8}
 800a526:	ec55 4b10 	vmov	r4, r5, d0
 800a52a:	f000 f825 	bl	800a578 <__ieee754_sqrt>
 800a52e:	4622      	mov	r2, r4
 800a530:	462b      	mov	r3, r5
 800a532:	4620      	mov	r0, r4
 800a534:	4629      	mov	r1, r5
 800a536:	eeb0 8a40 	vmov.f32	s16, s0
 800a53a:	eef0 8a60 	vmov.f32	s17, s1
 800a53e:	f7f6 faa1 	bl	8000a84 <__aeabi_dcmpun>
 800a542:	b990      	cbnz	r0, 800a56a <sqrt+0x4a>
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	4620      	mov	r0, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f6 fa72 	bl	8000a34 <__aeabi_dcmplt>
 800a550:	b158      	cbz	r0, 800a56a <sqrt+0x4a>
 800a552:	f7ff ffa5 	bl	800a4a0 <__errno>
 800a556:	2321      	movs	r3, #33	; 0x21
 800a558:	6003      	str	r3, [r0, #0]
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f7f6 f91f 	bl	80007a4 <__aeabi_ddiv>
 800a566:	ec41 0b18 	vmov	d8, r0, r1
 800a56a:	eeb0 0a48 	vmov.f32	s0, s16
 800a56e:	eef0 0a68 	vmov.f32	s1, s17
 800a572:	ecbd 8b02 	vpop	{d8}
 800a576:	bd38      	pop	{r3, r4, r5, pc}

0800a578 <__ieee754_sqrt>:
 800a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57c:	ec55 4b10 	vmov	r4, r5, d0
 800a580:	4e55      	ldr	r6, [pc, #340]	; (800a6d8 <__ieee754_sqrt+0x160>)
 800a582:	43ae      	bics	r6, r5
 800a584:	ee10 0a10 	vmov	r0, s0
 800a588:	ee10 3a10 	vmov	r3, s0
 800a58c:	462a      	mov	r2, r5
 800a58e:	4629      	mov	r1, r5
 800a590:	d110      	bne.n	800a5b4 <__ieee754_sqrt+0x3c>
 800a592:	ee10 2a10 	vmov	r2, s0
 800a596:	462b      	mov	r3, r5
 800a598:	f7f5 ffda 	bl	8000550 <__aeabi_dmul>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 fe1e 	bl	80001e4 <__adddf3>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	ec45 4b10 	vmov	d0, r4, r5
 800a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b4:	2d00      	cmp	r5, #0
 800a5b6:	dc10      	bgt.n	800a5da <__ieee754_sqrt+0x62>
 800a5b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a5bc:	4330      	orrs	r0, r6
 800a5be:	d0f5      	beq.n	800a5ac <__ieee754_sqrt+0x34>
 800a5c0:	b15d      	cbz	r5, 800a5da <__ieee754_sqrt+0x62>
 800a5c2:	ee10 2a10 	vmov	r2, s0
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	ee10 0a10 	vmov	r0, s0
 800a5cc:	f7f5 fe08 	bl	80001e0 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	f7f6 f8e6 	bl	80007a4 <__aeabi_ddiv>
 800a5d8:	e7e6      	b.n	800a5a8 <__ieee754_sqrt+0x30>
 800a5da:	1512      	asrs	r2, r2, #20
 800a5dc:	d074      	beq.n	800a6c8 <__ieee754_sqrt+0x150>
 800a5de:	07d4      	lsls	r4, r2, #31
 800a5e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a5e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a5e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a5ec:	bf5e      	ittt	pl
 800a5ee:	0fda      	lsrpl	r2, r3, #31
 800a5f0:	005b      	lslpl	r3, r3, #1
 800a5f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a5f6:	2400      	movs	r4, #0
 800a5f8:	0fda      	lsrs	r2, r3, #31
 800a5fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a5fe:	107f      	asrs	r7, r7, #1
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	2516      	movs	r5, #22
 800a604:	4620      	mov	r0, r4
 800a606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a60a:	1886      	adds	r6, r0, r2
 800a60c:	428e      	cmp	r6, r1
 800a60e:	bfde      	ittt	le
 800a610:	1b89      	suble	r1, r1, r6
 800a612:	18b0      	addle	r0, r6, r2
 800a614:	18a4      	addle	r4, r4, r2
 800a616:	0049      	lsls	r1, r1, #1
 800a618:	3d01      	subs	r5, #1
 800a61a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a61e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a622:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a626:	d1f0      	bne.n	800a60a <__ieee754_sqrt+0x92>
 800a628:	462a      	mov	r2, r5
 800a62a:	f04f 0e20 	mov.w	lr, #32
 800a62e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a632:	4281      	cmp	r1, r0
 800a634:	eb06 0c05 	add.w	ip, r6, r5
 800a638:	dc02      	bgt.n	800a640 <__ieee754_sqrt+0xc8>
 800a63a:	d113      	bne.n	800a664 <__ieee754_sqrt+0xec>
 800a63c:	459c      	cmp	ip, r3
 800a63e:	d811      	bhi.n	800a664 <__ieee754_sqrt+0xec>
 800a640:	f1bc 0f00 	cmp.w	ip, #0
 800a644:	eb0c 0506 	add.w	r5, ip, r6
 800a648:	da43      	bge.n	800a6d2 <__ieee754_sqrt+0x15a>
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	db41      	blt.n	800a6d2 <__ieee754_sqrt+0x15a>
 800a64e:	f100 0801 	add.w	r8, r0, #1
 800a652:	1a09      	subs	r1, r1, r0
 800a654:	459c      	cmp	ip, r3
 800a656:	bf88      	it	hi
 800a658:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a65c:	eba3 030c 	sub.w	r3, r3, ip
 800a660:	4432      	add	r2, r6
 800a662:	4640      	mov	r0, r8
 800a664:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a668:	f1be 0e01 	subs.w	lr, lr, #1
 800a66c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a670:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a674:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a678:	d1db      	bne.n	800a632 <__ieee754_sqrt+0xba>
 800a67a:	430b      	orrs	r3, r1
 800a67c:	d006      	beq.n	800a68c <__ieee754_sqrt+0x114>
 800a67e:	1c50      	adds	r0, r2, #1
 800a680:	bf13      	iteet	ne
 800a682:	3201      	addne	r2, #1
 800a684:	3401      	addeq	r4, #1
 800a686:	4672      	moveq	r2, lr
 800a688:	f022 0201 	bicne.w	r2, r2, #1
 800a68c:	1063      	asrs	r3, r4, #1
 800a68e:	0852      	lsrs	r2, r2, #1
 800a690:	07e1      	lsls	r1, r4, #31
 800a692:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a696:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a69a:	bf48      	it	mi
 800a69c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a6a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	e781      	b.n	800a5ac <__ieee754_sqrt+0x34>
 800a6a8:	0ad9      	lsrs	r1, r3, #11
 800a6aa:	3815      	subs	r0, #21
 800a6ac:	055b      	lsls	r3, r3, #21
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d0fa      	beq.n	800a6a8 <__ieee754_sqrt+0x130>
 800a6b2:	02cd      	lsls	r5, r1, #11
 800a6b4:	d50a      	bpl.n	800a6cc <__ieee754_sqrt+0x154>
 800a6b6:	f1c2 0420 	rsb	r4, r2, #32
 800a6ba:	fa23 f404 	lsr.w	r4, r3, r4
 800a6be:	1e55      	subs	r5, r2, #1
 800a6c0:	4093      	lsls	r3, r2
 800a6c2:	4321      	orrs	r1, r4
 800a6c4:	1b42      	subs	r2, r0, r5
 800a6c6:	e78a      	b.n	800a5de <__ieee754_sqrt+0x66>
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	e7f0      	b.n	800a6ae <__ieee754_sqrt+0x136>
 800a6cc:	0049      	lsls	r1, r1, #1
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	e7ef      	b.n	800a6b2 <__ieee754_sqrt+0x13a>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	e7bd      	b.n	800a652 <__ieee754_sqrt+0xda>
 800a6d6:	bf00      	nop
 800a6d8:	7ff00000 	.word	0x7ff00000

0800a6dc <_init>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <_fini>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr
