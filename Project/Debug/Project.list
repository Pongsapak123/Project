
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a794  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a99c  0800a99c  000202f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a99c  0800a99c  0001a99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9a4  0800a9a4  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0800a9ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e24  200002f8  0800aca0  000202f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  0800aca0  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017750  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cad  00000000  00000000  00037a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a37  00000000  00000000  0003cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018754  00000000  00000000  000555bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f84  00000000  00000000  0006dd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  00102ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f8 	.word	0x200002f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a914 	.word	0x0800a914

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002fc 	.word	0x200002fc
 80001d4:	0800a914 	.word	0x0800a914

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <read_pos>:
	SENSOR_CHECK,
} State ;

extern int homing;

void read_pos() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <read_pos+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <read_pos+0x40>)
 8000e62:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <read_pos+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb07 	bl	800047c <__aeabi_i2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <read_pos+0x44>)
 8000e74:	f7ff fb6c 	bl	8000550 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe16 	bl	8000ab0 <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <read_pos+0x48>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000500 	.word	0x20000500
 8000e94:	20000fcc 	.word	0x20000fcc
 8000e98:	3f8e0000 	.word	0x3f8e0000
 8000e9c:	20000fd0 	.word	0x20000fd0

08000ea0 <motor>:

void motor(uint32_t speed, int DIR) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d10a      	bne.n	8000ec8 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <motor+0x4c>)
 8000eba:	f004 fcc5 	bl	8005848 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <motor+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	}
}
 8000ec6:	e00c      	b.n	8000ee2 <motor+0x42>
	} else if (DIR == 1) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <motor+0x4c>)
 8000ed6:	f004 fcb7 	bl	8005848 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <motor+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	2000044c 	.word	0x2000044c

08000ef4 <Init_Homing>:

void Init_Homing() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <Init_Homing+0xcc>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <Init_Homing+0x12>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d01b      	beq.n	8000f3c <Init_Homing+0x48>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000f04:	e059      	b.n	8000fba <Init_Homing+0xc6>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <Init_Homing+0xd0>)
 8000f0c:	f004 fc84 	bl	8005818 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <Init_Homing+0x3a>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <Init_Homing+0xd4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ffbd 	bl	8000ea0 <motor>
			state_homing = 1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <Init_Homing+0xcc>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	801a      	strh	r2, [r3, #0]
		break;
 8000f2c:	e045      	b.n	8000fba <Init_Homing+0xc6>
			motor(Max_Counter_PWM * 0.25, -1);
 8000f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f36:	f7ff ffb3 	bl	8000ea0 <motor>
		break;
 8000f3a:	e03e      	b.n	8000fba <Init_Homing+0xc6>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	4823      	ldr	r0, [pc, #140]	; (8000fcc <Init_Homing+0xd8>)
 8000f40:	f004 fc6a 	bl	8005818 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d131      	bne.n	8000fae <Init_Homing+0xba>
			motor(0, 1);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffa7 	bl	8000ea0 <motor>
			HAL_Delay(400);
 8000f52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f56:	f003 fd97 	bl	8004a88 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <Init_Homing+0xd4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <Init_Homing+0xd4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <Init_Homing+0xdc>)
 8000f6c:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <Init_Homing+0xdc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa82 	bl	800047c <__aeabi_i2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <Init_Homing+0xe0>)
 8000f7e:	f7ff fae7 	bl	8000550 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd91 	bl	8000ab0 <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <Init_Homing+0xe4>)
 8000f92:	6013      	str	r3, [r2, #0]
			y_axis_Moving_Status = 0;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <Init_Homing+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	841a      	strh	r2, [r3, #32]
			state_homing = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <Init_Homing+0xcc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(6);
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f000 fbe7 	bl	8001774 <EndEffector_Event>
			State = IDLE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <Init_Homing+0xec>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
		break;
 8000fac:	e004      	b.n	8000fb8 <Init_Homing+0xc4>
			motor(Max_Counter_PWM * 0.18, 1);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	f642 6014 	movw	r0, #11796	; 0x2e14
 8000fb4:	f7ff ff74 	bl	8000ea0 <motor>
		break;
 8000fb8:	bf00      	nop
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000314 	.word	0x20000314
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	20000500 	.word	0x20000500
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	20000fcc 	.word	0x20000fcc
 8000fd4:	3f8e0000 	.word	0x3f8e0000
 8000fd8:	20000fd0 	.word	0x20000fd0
 8000fdc:	20000e28 	.word	0x20000e28
 8000fe0:	20000270 	.word	0x20000270

08000fe4 <Joy_Homing>:

void Joy_Homing() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <Joy_Homing+0xb8>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <Joy_Homing+0x12>
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d017      	beq.n	8001024 <Joy_Homing+0x40>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8000ff4:	e04f      	b.n	8001096 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	4829      	ldr	r0, [pc, #164]	; (80010a0 <Joy_Homing+0xbc>)
 8000ffc:	f004 fc0c 	bl	8005818 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d107      	bne.n	8001016 <Joy_Homing+0x32>
			motor(0, 1);
 8001006:	2101      	movs	r1, #1
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ff49 	bl	8000ea0 <motor>
			state_homing = 1;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <Joy_Homing+0xb8>)
 8001010:	2201      	movs	r2, #1
 8001012:	801a      	strh	r2, [r3, #0]
		break;
 8001014:	e03f      	b.n	8001096 <Joy_Homing+0xb2>
			motor(Max_Counter_PWM * 0.25, -1);
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800101e:	f7ff ff3f 	bl	8000ea0 <motor>
		break;
 8001022:	e038      	b.n	8001096 <Joy_Homing+0xb2>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	481f      	ldr	r0, [pc, #124]	; (80010a4 <Joy_Homing+0xc0>)
 8001028:	f004 fbf6 	bl	8005818 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d12b      	bne.n	800108a <Joy_Homing+0xa6>
			motor(0, 1);
 8001032:	2101      	movs	r1, #1
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ff33 	bl	8000ea0 <motor>
			HAL_Delay(400);
 800103a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800103e:	f003 fd23 	bl	8004a88 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <Joy_Homing+0xc4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <Joy_Homing+0xc4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	461a      	mov	r2, r3
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <Joy_Homing+0xc8>)
 8001054:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <Joy_Homing+0xc8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa0e 	bl	800047c <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <Joy_Homing+0xcc>)
 8001066:	f7ff fa73 	bl	8000550 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fd1d 	bl	8000ab0 <__aeabi_d2f>
 8001076:	4603      	mov	r3, r0
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <Joy_Homing+0xd0>)
 800107a:	6013      	str	r3, [r2, #0]
			homing = 0;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <Joy_Homing+0xd4>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
			state_homing = 0;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <Joy_Homing+0xb8>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
		break;
 8001088:	e004      	b.n	8001094 <Joy_Homing+0xb0>
			motor(Max_Counter_PWM * 0.18, 1);
 800108a:	2101      	movs	r1, #1
 800108c:	f642 6014 	movw	r0, #11796	; 0x2e14
 8001090:	f7ff ff06 	bl	8000ea0 <motor>
		break;
 8001094:	bf00      	nop
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000316 	.word	0x20000316
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	20000500 	.word	0x20000500
 80010ac:	20000fcc 	.word	0x20000fcc
 80010b0:	3f8e0000 	.word	0x3f8e0000
 80010b4:	20000fd0 	.word	0x20000fd0
 80010b8:	20000398 	.word	0x20000398

080010bc <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <modbus_1t5_Timeout+0x1c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2201      	movs	r2, #1
 80010ca:	751a      	strb	r2, [r3, #20]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000318 	.word	0x20000318

080010dc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <modbus_3t5_Timeout+0x1c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	755a      	strb	r2, [r3, #21]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000318 	.word	0x20000318

080010fc <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <modbus_UART_Recived+0x60>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <modbus_UART_Recived+0x60>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	b289      	uxth	r1, r1
 800111a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800111e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001122:	d210      	bcs.n	8001146 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <modbus_UART_Recived+0x60>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68d8      	ldr	r0, [r3, #12]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <modbus_UART_Recived+0x60>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <modbus_UART_Recived+0x60>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001136:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800113a:	4413      	add	r3, r2
 800113c:	3302      	adds	r3, #2
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f008 f931 	bl	80093a8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <modbus_UART_Recived+0x60>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000318 	.word	0x20000318

08001160 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800116a:	4a24      	ldr	r2, [pc, #144]	; (80011fc <Modbus_init+0x9c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Modbus_init+0x9c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <Modbus_init+0x9c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <Modbus_init+0xa0>)
 8001180:	2114      	movs	r1, #20
 8001182:	4618      	mov	r0, r3
 8001184:	f007 fac2 	bl	800870c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <Modbus_init+0x9c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <Modbus_init+0xa4>)
 8001190:	210e      	movs	r1, #14
 8001192:	4618      	mov	r0, r3
 8001194:	f007 faba 	bl	800870c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Modbus_init+0x9c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <Modbus_init+0xa8>)
 80011a0:	2103      	movs	r1, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 f858 	bl	8009258 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <Modbus_init+0x9c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68d8      	ldr	r0, [r3, #12]
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Modbus_init+0x9c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Modbus_init+0x9c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011ba:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80011be:	4413      	add	r3, r2
 80011c0:	3302      	adds	r3, #2
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	f008 f8ef 	bl	80093a8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <Modbus_init+0x9c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <Modbus_init+0x9c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fb3d 	bl	8007860 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <Modbus_init+0x9c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 fd7c 	bl	8007cec <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000318 	.word	0x20000318
 8001200:	080010bd 	.word	0x080010bd
 8001204:	080010dd 	.word	0x080010dd
 8001208:	080010fd 	.word	0x080010fd

0800120c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800121c:	23ff      	movs	r3, #255	; 0xff
 800121e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001220:	e013      	b.n	800124a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	4053      	eors	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <CRC16+0x64>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4053      	eors	r3, r2
 800123e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <CRC16+0x68>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	803a      	strh	r2, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e6      	bne.n	8001222 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	b29b      	uxth	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000100 	.word	0x20000100
 8001274:	20000000 	.word	0x20000000

08001278 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800127e:	4b81      	ldr	r3, [pc, #516]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	7e1b      	ldrb	r3, [r3, #24]
 8001284:	3b01      	subs	r3, #1
 8001286:	2b03      	cmp	r3, #3
 8001288:	d80a      	bhi.n	80012a0 <Modbus_Protocal_Worker+0x28>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <Modbus_Protocal_Worker+0x18>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012ab 	.word	0x080012ab
 8001294:	0800144b 	.word	0x0800144b
 8001298:	08001337 	.word	0x08001337
 800129c:	0800135d 	.word	0x0800135d
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012a0:	4b78      	ldr	r3, [pc, #480]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	761a      	strb	r2, [r3, #24]
		break;
 80012a8:	e0e8      	b.n	800147c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80012b6:	f000 f9dd 	bl	8001674 <Modbus_Emission>
 80012ba:	e01c      	b.n	80012f6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80012bc:	4b71      	ldr	r3, [pc, #452]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	7d9b      	ldrb	r3, [r3, #22]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d017      	beq.n	80012f6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80012ee:	4b65      	ldr	r3, [pc, #404]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2203      	movs	r2, #3
 80012f4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80012f6:	4b63      	ldr	r3, [pc, #396]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b20      	cmp	r3, #32
 8001304:	f040 80b3 	bne.w	800146e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d8      	ldr	r0, [r3, #12]
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001324:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001328:	4413      	add	r3, r2
 800132a:	3302      	adds	r3, #2
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	f008 f83a 	bl	80093a8 <HAL_UART_Receive_IT>
		}
		break;
 8001334:	e09b      	b.n	800146e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001336:	4b53      	ldr	r3, [pc, #332]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	7d1b      	ldrb	r3, [r3, #20]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8098 	beq.w	8001472 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800134a:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	22fe      	movs	r2, #254	; 0xfe
 8001350:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001352:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2204      	movs	r2, #4
 8001358:	761a      	strb	r2, [r3, #24]
		}
		break;
 800135a:	e08a      	b.n	8001472 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	7d9b      	ldrb	r3, [r3, #22]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001382:	f113 0f02 	cmn.w	r3, #2
 8001386:	d150      	bne.n	800142a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013a0:	3b02      	subs	r3, #2
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f7ff ff31 	bl	800120c <CRC16>
 80013aa:	4603      	mov	r3, r0
 80013ac:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013ae:	793a      	ldrb	r2, [r7, #4]
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013bc:	3b02      	subs	r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10c      	bne.n	80013e2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013c8:	797a      	ldrb	r2, [r7, #5]
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80013d6:	3b01      	subs	r3, #1
 80013d8:	440b      	add	r3, r1
 80013da:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d004      	beq.n	80013ec <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	75da      	strb	r2, [r3, #23]
				break;
 80013ea:	e047      	b.n	800147c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d113      	bne.n	8001426 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800140e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001418:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800141a:	461a      	mov	r2, r3
 800141c:	f009 f986 	bl	800a72c <memcpy>

			//execute command
			Modbus_frame_response();
 8001420:	f000 f910 	bl	8001644 <Modbus_frame_response>
 8001424:	e001      	b.n	800142a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001426:	bf00      	nop
					}
		break;


	}
}
 8001428:	e028      	b.n	800147c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	7d5b      	ldrb	r3, [r3, #21]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f008 f85e 	bl	8009504 <HAL_UART_AbortReceive>
		break;
 8001448:	e015      	b.n	8001476 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b20      	cmp	r3, #32
 8001458:	d10f      	bne.n	800147a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <Modbus_Protocal_Worker+0x20c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	761a      	strb	r2, [r3, #24]
		break;
 800146c:	e005      	b.n	800147a <Modbus_Protocal_Worker+0x202>
		break;
 800146e:	bf00      	nop
 8001470:	e004      	b.n	800147c <Modbus_Protocal_Worker+0x204>
		break;
 8001472:	bf00      	nop
 8001474:	e002      	b.n	800147c <Modbus_Protocal_Worker+0x204>
		break;
 8001476:	bf00      	nop
 8001478:	e000      	b.n	800147c <Modbus_Protocal_Worker+0x204>
		break;
 800147a:	bf00      	nop
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000318 	.word	0x20000318

08001488 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <modbusWrite1Register+0x80>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	7e9b      	ldrb	r3, [r3, #26]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <modbusWrite1Register+0x80>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	7edb      	ldrb	r3, [r3, #27]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <modbusWrite1Register+0x80>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d903      	bls.n	80014ba <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014b2:	2002      	movs	r0, #2
 80014b4:	f000 f8a4 	bl	8001600 <ModbusErrorReply>
			 return;
 80014b8:	e023      	b.n	8001502 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <modbusWrite1Register+0x80>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <modbusWrite1Register+0x80>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	7f12      	ldrb	r2, [r2, #28]
 80014cc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <modbusWrite1Register+0x80>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <modbusWrite1Register+0x80>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	440b      	add	r3, r1
 80014de:	7f52      	ldrb	r2, [r2, #29]
 80014e0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <modbusWrite1Register+0x80>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <modbusWrite1Register+0x80>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80014f0:	2208      	movs	r2, #8
 80014f2:	4619      	mov	r1, r3
 80014f4:	f009 f91a 	bl	800a72c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <modbusWrite1Register+0x80>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2205      	movs	r2, #5
 80014fe:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000318 	.word	0x20000318

0800150c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <modbusRead1Register+0xf0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	7f1b      	ldrb	r3, [r3, #28]
 8001518:	b29b      	uxth	r3, r3
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <modbusRead1Register+0xf0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	7f5b      	ldrb	r3, [r3, #29]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <modbusRead1Register+0xf0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	7e9b      	ldrb	r3, [r3, #26]
 8001530:	b29b      	uxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <modbusRead1Register+0xf0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7edb      	ldrb	r3, [r3, #27]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4413      	add	r3, r2
 8001540:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <modbusRead1Register+0x42>
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	2b7d      	cmp	r3, #125	; 0x7d
 800154c:	d903      	bls.n	8001556 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f856 	bl	8001600 <ModbusErrorReply>
		 return;
 8001554:	e04e      	b.n	80015f4 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001556:	88ba      	ldrh	r2, [r7, #4]
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <modbusRead1Register+0xf0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	429a      	cmp	r2, r3
 8001560:	d808      	bhi.n	8001574 <modbusRead1Register+0x68>
 8001562:	88ba      	ldrh	r2, [r7, #4]
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	4413      	add	r3, r2
 8001568:	461a      	mov	r2, r3
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <modbusRead1Register+0xf0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	429a      	cmp	r2, r3
 8001572:	d903      	bls.n	800157c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001574:	2002      	movs	r0, #2
 8001576:	f000 f843 	bl	8001600 <ModbusErrorReply>
		 return;
 800157a:	e03b      	b.n	80015f4 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <modbusRead1Register+0xf0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <modbusRead1Register+0xf0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001596:	2400      	movs	r4, #0
 8001598:	e020      	b.n	80015dc <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <modbusRead1Register+0xf0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	4423      	add	r3, r4
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	18d1      	adds	r1, r2, r3
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <modbusRead1Register+0xf0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	1c63      	adds	r3, r4, #1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	7849      	ldrb	r1, [r1, #1]
 80015b2:	4413      	add	r3, r2
 80015b4:	460a      	mov	r2, r1
 80015b6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <modbusRead1Register+0xf0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	4423      	add	r3, r4
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	18d1      	adds	r1, r2, r3
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <modbusRead1Register+0xf0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	0063      	lsls	r3, r4, #1
 80015ce:	3303      	adds	r3, #3
 80015d0:	7809      	ldrb	r1, [r1, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80015da:	3401      	adds	r4, #1
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	429c      	cmp	r4, r3
 80015e0:	dbdb      	blt.n	800159a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <modbusRead1Register+0xf0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000318 	.word	0x20000318

08001600 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <ModbusErrorReply+0x40>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	7e5a      	ldrb	r2, [r3, #25]
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <ModbusErrorReply+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <ModbusErrorReply+0x40>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <ModbusErrorReply+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000318 	.word	0x20000318

08001644 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <Modbus_frame_response+0x2c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d004      	beq.n	800165c <Modbus_frame_response+0x18>
 8001652:	2b06      	cmp	r3, #6
 8001654:	d105      	bne.n	8001662 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001656:	f7ff ff17 	bl	8001488 <modbusWrite1Register>
		break;
 800165a:	e006      	b.n	800166a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800165c:	f7ff ff56 	bl	800150c <modbusRead1Register>
		break;
 8001660:	e003      	b.n	800166a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff ffcc 	bl	8001600 <ModbusErrorReply>
		break;
 8001668:	bf00      	nop

	}
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000318 	.word	0x20000318

08001674 <Modbus_Emission>:

void Modbus_Emission()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	d15e      	bne.n	8001748 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <Modbus_Emission+0xfc>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <Modbus_Emission+0xfc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001698:	4b35      	ldr	r3, [pc, #212]	; (8001770 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80016a0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <Modbus_Emission+0xfc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <Modbus_Emission+0xfc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80016b2:	461a      	mov	r2, r3
 80016b4:	f009 f83a 	bl	800a72c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <Modbus_Emission+0xfc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <Modbus_Emission+0xfc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3203      	adds	r2, #3
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <Modbus_Emission+0xfc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <Modbus_Emission+0xfc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016de:	3b02      	subs	r3, #2
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f7ff fd92 	bl	800120c <CRC16>
 80016e8:	4603      	mov	r3, r0
 80016ea:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <Modbus_Emission+0xfc>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <Modbus_Emission+0xfc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80016f8:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80016fa:	7939      	ldrb	r1, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	460a      	mov	r2, r1
 8001700:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <Modbus_Emission+0xfc>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <Modbus_Emission+0xfc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001710:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001712:	7979      	ldrb	r1, [r7, #5]
 8001714:	4413      	add	r3, r2
 8001716:	460a      	mov	r2, r1
 8001718:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <Modbus_Emission+0xfc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	d10d      	bne.n	8001748 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <Modbus_Emission+0xfc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <Modbus_Emission+0xfc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <Modbus_Emission+0xfc>)
 800173c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800173e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001742:	461a      	mov	r2, r3
 8001744:	f007 fe60 	bl	8009408 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <Modbus_Emission+0xfc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <Modbus_Emission+0xfc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <Modbus_Emission+0xfc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <Modbus_Emission+0xfc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2202      	movs	r2, #2
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000318 	.word	0x20000318

08001774 <EndEffector_Event>:
	Read,
} EndEffector_State;

int Count_Time = 0;

void EndEffector_Event(char EndEffector_State) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af02      	add	r7, sp, #8
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 800177e:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <EndEffector_Event+0x200>)
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	f040 80e8 	bne.w	800195c <EndEffector_Event+0x1e8>
		switch (EndEffector_State) {
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f200 80eb 	bhi.w	800196a <EndEffector_Event+0x1f6>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <EndEffector_Event+0x28>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	08001961 	.word	0x08001961
 80017a0:	080017d1 	.word	0x080017d1
 80017a4:	080017e7 	.word	0x080017e7
 80017a8:	080017fd 	.word	0x080017fd
 80017ac:	08001813 	.word	0x08001813
 80017b0:	08001829 	.word	0x08001829
 80017b4:	0800183f 	.word	0x0800183f
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800186b 	.word	0x0800186b
 80017c0:	08001881 	.word	0x08001881
 80017c4:	080018db 	.word	0x080018db
 80017c8:	080018f1 	.word	0x080018f1
 80017cc:	0800194b 	.word	0x0800194b
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2302      	movs	r3, #2
 80017d6:	4a68      	ldr	r2, [pc, #416]	; (8001978 <EndEffector_Event+0x204>)
 80017d8:	212a      	movs	r1, #42	; 0x2a
 80017da:	4866      	ldr	r0, [pc, #408]	; (8001974 <EndEffector_Event+0x200>)
 80017dc:	f004 f9aa 	bl	8005b34 <HAL_I2C_Master_Transmit>
					2, 100);
			EndEffector_State = Init;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
			break;
 80017e4:	e0c1      	b.n	800196a <EndEffector_Event+0x1f6>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	4a63      	ldr	r2, [pc, #396]	; (800197c <EndEffector_Event+0x208>)
 80017ee:	212a      	movs	r1, #42	; 0x2a
 80017f0:	4860      	ldr	r0, [pc, #384]	; (8001974 <EndEffector_Event+0x200>)
 80017f2:	f004 f99f 	bl	8005b34 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
			break;
 80017fa:	e0b6      	b.n	800196a <EndEffector_Event+0x1f6>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 80017fc:	2364      	movs	r3, #100	; 0x64
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2304      	movs	r3, #4
 8001802:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <EndEffector_Event+0x20c>)
 8001804:	212a      	movs	r1, #42	; 0x2a
 8001806:	485b      	ldr	r0, [pc, #364]	; (8001974 <EndEffector_Event+0x200>)
 8001808:	f004 f994 	bl	8005b34 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
			break;
 8001810:	e0ab      	b.n	800196a <EndEffector_Event+0x1f6>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <EndEffector_Event+0x210>)
 800181a:	212a      	movs	r1, #42	; 0x2a
 800181c:	4855      	ldr	r0, [pc, #340]	; (8001974 <EndEffector_Event+0x200>)
 800181e:	f004 f989 	bl	8005b34 <HAL_I2C_Master_Transmit>
					1, 100);
			EndEffector_State = Init;
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]
			break;
 8001826:	e0a0      	b.n	800196a <EndEffector_Event+0x1f6>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2304      	movs	r3, #4
 800182e:	4a56      	ldr	r2, [pc, #344]	; (8001988 <EndEffector_Event+0x214>)
 8001830:	212a      	movs	r1, #42	; 0x2a
 8001832:	4850      	ldr	r0, [pc, #320]	; (8001974 <EndEffector_Event+0x200>)
 8001834:	f004 f97e 	bl	8005b34 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 100);
			EndEffector_State = Init;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
			break;
 800183c:	e095      	b.n	800196a <EndEffector_Event+0x1f6>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 800183e:	2364      	movs	r3, #100	; 0x64
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <EndEffector_Event+0x218>)
 8001846:	212a      	movs	r1, #42	; 0x2a
 8001848:	484a      	ldr	r0, [pc, #296]	; (8001974 <EndEffector_Event+0x200>)
 800184a:	f004 f973 	bl	8005b34 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Init;
 800184e:	2300      	movs	r3, #0
 8001850:	71fb      	strb	r3, [r7, #7]
			break;
 8001852:	e08a      	b.n	800196a <EndEffector_Event+0x1f6>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8001854:	2364      	movs	r3, #100	; 0x64
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2302      	movs	r3, #2
 800185a:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <EndEffector_Event+0x21c>)
 800185c:	212a      	movs	r1, #42	; 0x2a
 800185e:	4845      	ldr	r0, [pc, #276]	; (8001974 <EndEffector_Event+0x200>)
 8001860:	f004 f968 	bl	8005b34 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 100);
			EndEffector_State = Init;
 8001864:	2300      	movs	r3, #0
 8001866:	71fb      	strb	r3, [r7, #7]
			break;
 8001868:	e07f      	b.n	800196a <EndEffector_Event+0x1f6>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	4a48      	ldr	r2, [pc, #288]	; (8001994 <EndEffector_Event+0x220>)
 8001872:	212a      	movs	r1, #42	; 0x2a
 8001874:	483f      	ldr	r0, [pc, #252]	; (8001974 <EndEffector_Event+0x200>)
 8001876:	f004 f95d 	bl	8005b34 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Pick_Check;
 800187a:	2309      	movs	r3, #9
 800187c:	71fb      	strb	r3, [r7, #7]
			break;
 800187e:	e074      	b.n	800196a <EndEffector_Event+0x1f6>

		case Pick_Check:
			if (Count_Time == 0) {
 8001880:	4b45      	ldr	r3, [pc, #276]	; (8001998 <EndEffector_Event+0x224>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d108      	bne.n	800189a <EndEffector_Event+0x126>
				timestamp_End = HAL_GetTick() + 200;
 8001888:	f003 f8f2 	bl	8004a70 <HAL_GetTick>
 800188c:	4603      	mov	r3, r0
 800188e:	33c8      	adds	r3, #200	; 0xc8
 8001890:	4a42      	ldr	r2, [pc, #264]	; (800199c <EndEffector_Event+0x228>)
 8001892:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <EndEffector_Event+0x224>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <EndEffector_Event+0x224>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d160      	bne.n	8001964 <EndEffector_Event+0x1f0>
				if (Read_data[0] == 0b0111) {
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <EndEffector_Event+0x22c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	d104      	bne.n	80018b4 <EndEffector_Event+0x140>
					EndEffector_State = Init;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
					Count_Time = 0;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <EndEffector_Event+0x224>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

				}
				if (HAL_GetTick() >= timestamp_End) {
 80018b4:	f003 f8dc 	bl	8004a70 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <EndEffector_Event+0x228>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d350      	bcc.n	8001964 <EndEffector_Event+0x1f0>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <EndEffector_Event+0x22c>)
 80018ca:	212a      	movs	r1, #42	; 0x2a
 80018cc:	4829      	ldr	r0, [pc, #164]	; (8001974 <EndEffector_Event+0x200>)
 80018ce:	f004 fa2f 	bl	8005d30 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <EndEffector_Event+0x224>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80018d8:	e044      	b.n	8001964 <EndEffector_Event+0x1f0>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 80018da:	2364      	movs	r3, #100	; 0x64
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2302      	movs	r3, #2
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <EndEffector_Event+0x230>)
 80018e2:	212a      	movs	r1, #42	; 0x2a
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <EndEffector_Event+0x200>)
 80018e6:	f004 f925 	bl	8005b34 <HAL_I2C_Master_Transmit>
					100);
			EndEffector_State = Place_Check;
 80018ea:	230b      	movs	r3, #11
 80018ec:	71fb      	strb	r3, [r7, #7]
			break;
 80018ee:	e03c      	b.n	800196a <EndEffector_Event+0x1f6>

		case Place_Check:
			if (Count_Time == 0) {
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <EndEffector_Event+0x224>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <EndEffector_Event+0x196>
				timestamp_End = HAL_GetTick() + 200;
 80018f8:	f003 f8ba 	bl	8004a70 <HAL_GetTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	33c8      	adds	r3, #200	; 0xc8
 8001900:	4a26      	ldr	r2, [pc, #152]	; (800199c <EndEffector_Event+0x228>)
 8001902:	6013      	str	r3, [r2, #0]
				Count_Time = 1;
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <EndEffector_Event+0x224>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
			}
			if (Count_Time == 1) {
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <EndEffector_Event+0x224>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12a      	bne.n	8001968 <EndEffector_Event+0x1f4>
				if (Read_data[0] == 0b0100) {
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <EndEffector_Event+0x22c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d104      	bne.n	8001924 <EndEffector_Event+0x1b0>
					EndEffector_State = Init;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
					Count_Time = 0;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <EndEffector_Event+0x224>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

				}
				if (HAL_GetTick() >= timestamp_End) {
 8001924:	f003 f8a4 	bl	8004a70 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <EndEffector_Event+0x228>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d31a      	bcc.n	8001968 <EndEffector_Event+0x1f4>
					HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data,
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <EndEffector_Event+0x22c>)
 800193a:	212a      	movs	r1, #42	; 0x2a
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <EndEffector_Event+0x200>)
 800193e:	f004 f9f7 	bl	8005d30 <HAL_I2C_Master_Receive>
							1, 100);
					Count_Time = 0;
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <EndEffector_Event+0x224>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8001948:	e00e      	b.n	8001968 <EndEffector_Event+0x1f4>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1, 100);
 800194a:	2364      	movs	r3, #100	; 0x64
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <EndEffector_Event+0x22c>)
 8001952:	212a      	movs	r1, #42	; 0x2a
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <EndEffector_Event+0x200>)
 8001956:	f004 f9eb 	bl	8005d30 <HAL_I2C_Master_Receive>
			break;
 800195a:	e006      	b.n	800196a <EndEffector_Event+0x1f6>
		}

	}
 800195c:	bf00      	nop
 800195e:	e004      	b.n	800196a <EndEffector_Event+0x1f6>
			break;
 8001960:	bf00      	nop
 8001962:	e002      	b.n	800196a <EndEffector_Event+0x1f6>
			break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <EndEffector_Event+0x1f6>
			break;
 8001968:	bf00      	nop
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200003a0 	.word	0x200003a0
 8001978:	20000200 	.word	0x20000200
 800197c:	20000204 	.word	0x20000204
 8001980:	20000208 	.word	0x20000208
 8001984:	2000020c 	.word	0x2000020c
 8001988:	20000210 	.word	0x20000210
 800198c:	20000214 	.word	0x20000214
 8001990:	20000218 	.word	0x20000218
 8001994:	2000021c 	.word	0x2000021c
 8001998:	20000324 	.word	0x20000324
 800199c:	20000320 	.word	0x20000320
 80019a0:	2000031c 	.word	0x2000031c
 80019a4:	20000220 	.word	0x20000220

080019a8 <JoyStickControl>:

int homing = 0;

uint32_t time_joy_offset = 0;

void JoyStickControl() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af02      	add	r7, sp, #8

	read_pos();
 80019ae:	f7ff fa51 	bl	8000e54 <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2104      	movs	r1, #4
 80019b6:	48ac      	ldr	r0, [pc, #688]	; (8001c68 <JoyStickControl+0x2c0>)
 80019b8:	f003 ff46 	bl	8005848 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 80019bc:	231e      	movs	r3, #30
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	230a      	movs	r3, #10
 80019c2:	4aaa      	ldr	r2, [pc, #680]	; (8001c6c <JoyStickControl+0x2c4>)
 80019c4:	49aa      	ldr	r1, [pc, #680]	; (8001c70 <JoyStickControl+0x2c8>)
 80019c6:	48ab      	ldr	r0, [pc, #684]	; (8001c74 <JoyStickControl+0x2cc>)
 80019c8:	f005 fc27 	bl	800721a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2104      	movs	r1, #4
 80019d0:	48a5      	ldr	r0, [pc, #660]	; (8001c68 <JoyStickControl+0x2c0>)
 80019d2:	f003 ff39 	bl	8005848 <HAL_GPIO_WritePin>
	// O 0xdf   0x7f

//	static uint32_t timestamp_joy = 0;

	if (RX[4] == 0xfe && RX_last == 0xff) { //Select Speed Button
 80019d6:	4ba5      	ldr	r3, [pc, #660]	; (8001c6c <JoyStickControl+0x2c4>)
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	2bfe      	cmp	r3, #254	; 0xfe
 80019dc:	d114      	bne.n	8001a08 <JoyStickControl+0x60>
 80019de:	4ba6      	ldr	r3, [pc, #664]	; (8001c78 <JoyStickControl+0x2d0>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d110      	bne.n	8001a08 <JoyStickControl+0x60>
		if (state_motor == 1) {
 80019e6:	4ba5      	ldr	r3, [pc, #660]	; (8001c7c <JoyStickControl+0x2d4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d103      	bne.n	80019f6 <JoyStickControl+0x4e>
			state_motor = 0;
 80019ee:	4ba3      	ldr	r3, [pc, #652]	; (8001c7c <JoyStickControl+0x2d4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80019f4:	e0ea      	b.n	8001bcc <JoyStickControl+0x224>
		} else if (state_motor == 0) {
 80019f6:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <JoyStickControl+0x2d4>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 80e6 	bne.w	8001bcc <JoyStickControl+0x224>
			state_motor = 1;
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <JoyStickControl+0x2d4>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8001a06:	e0e1      	b.n	8001bcc <JoyStickControl+0x224>
		}
	} else if (RX[4] == 0xbf && button_last == 0xFF
 8001a08:	4b98      	ldr	r3, [pc, #608]	; (8001c6c <JoyStickControl+0x2c4>)
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	2bbf      	cmp	r3, #191	; 0xbf
 8001a0e:	d16c      	bne.n	8001aea <JoyStickControl+0x142>
 8001a10:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <JoyStickControl+0x2d8>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d168      	bne.n	8001aea <JoyStickControl+0x142>
			&& HAL_GetTick() - time_joy_offset >= 1000) { //X Button
 8001a18:	f003 f82a 	bl	8004a70 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b99      	ldr	r3, [pc, #612]	; (8001c84 <JoyStickControl+0x2dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a28:	d35f      	bcc.n	8001aea <JoyStickControl+0x142>
		time_joy_offset = HAL_GetTick();
 8001a2a:	f003 f821 	bl	8004a70 <HAL_GetTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a94      	ldr	r2, [pc, #592]	; (8001c84 <JoyStickControl+0x2dc>)
 8001a32:	6013      	str	r3, [r2, #0]
		y_c[count] = PosY;
 8001a34:	4b94      	ldr	r3, [pc, #592]	; (8001c88 <JoyStickControl+0x2e0>)
 8001a36:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <JoyStickControl+0x2e4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4993      	ldr	r1, [pc, #588]	; (8001c90 <JoyStickControl+0x2e8>)
 8001a42:	0083      	lsls	r3, r0, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	601a      	str	r2, [r3, #0]

		if (x_axis_Actual_Position>= 0 && x_axis_Actual_Position <= 3500) {
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <JoyStickControl+0x2ec>)
 8001a4a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001a4e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d813      	bhi.n	8001a7e <JoyStickControl+0xd6>
			x_c[count] = (float)x_axis_Actual_Position/10.0;
 8001a56:	4b8f      	ldr	r3, [pc, #572]	; (8001c94 <JoyStickControl+0x2ec>)
 8001a58:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <JoyStickControl+0x2e0>)
 8001a66:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	4a89      	ldr	r2, [pc, #548]	; (8001c98 <JoyStickControl+0x2f0>)
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	edc3 7a00 	vstr	s15, [r3]
 8001a7c:	e023      	b.n	8001ac6 <JoyStickControl+0x11e>
		} else if(x_axis_Actual_Position >= 65535-3500 && x_axis_Actual_Position <= 65535) {
 8001a7e:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <JoyStickControl+0x2ec>)
 8001a80:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001a84:	f24f 2252 	movw	r2, #62034	; 0xf252
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d91c      	bls.n	8001ac6 <JoyStickControl+0x11e>
			x_c[count] = -((float)(65536%x_axis_Actual_Position))/10.0;
 8001a8c:	4b81      	ldr	r3, [pc, #516]	; (8001c94 <JoyStickControl+0x2ec>)
 8001a8e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001a92:	461a      	mov	r2, r3
 8001a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a98:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a9c:	fb01 f202 	mul.w	r2, r1, r2
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aaa:	eeb1 7a67 	vneg.f32	s14, s15
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <JoyStickControl+0x2e0>)
 8001ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abc:	4a76      	ldr	r2, [pc, #472]	; (8001c98 <JoyStickControl+0x2f0>)
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
		}

		count += 1;
 8001ac6:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <JoyStickControl+0x2e0>)
 8001ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <JoyStickControl+0x2e0>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <JoyStickControl+0x2e0>)
 8001ada:	f993 3000 	ldrsb.w	r3, [r3]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	dd75      	ble.n	8001bce <JoyStickControl+0x226>
			count = 2;
 8001ae2:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <JoyStickControl+0x2e0>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	701a      	strb	r2, [r3, #0]
		if (count >= 2) {
 8001ae8:	e071      	b.n	8001bce <JoyStickControl+0x226>
//		count -= 1;
//		if (count <= 0) {
//			count = 0;
//		}
//	}
	else if (RX[4] == 0xdf && button_last == 0xFF
 8001aea:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <JoyStickControl+0x2c4>)
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	2bdf      	cmp	r3, #223	; 0xdf
 8001af0:	d16d      	bne.n	8001bce <JoyStickControl+0x226>
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <JoyStickControl+0x2d8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d169      	bne.n	8001bce <JoyStickControl+0x226>
			&& HAL_GetTick() - time_joy_offset >= 1000 && count >= 2) { // Delete Button
 8001afa:	f002 ffb9 	bl	8004a70 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <JoyStickControl+0x2dc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0a:	d360      	bcc.n	8001bce <JoyStickControl+0x226>
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <JoyStickControl+0x2e0>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	dd5b      	ble.n	8001bce <JoyStickControl+0x226>
		Calculate_Position(x_c[0], x_c[1], x_c[2], y_c[0], y_c[1], y_c[2]);
 8001b16:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <JoyStickControl+0x2f0>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <JoyStickControl+0x2f0>)
 8001b1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <JoyStickControl+0x2f0>)
 8001b24:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <JoyStickControl+0x2e8>)
 8001b2a:	ed93 6a00 	vldr	s12, [r3]
 8001b2e:	4b58      	ldr	r3, [pc, #352]	; (8001c90 <JoyStickControl+0x2e8>)
 8001b30:	edd3 5a01 	vldr	s11, [r3, #4]
 8001b34:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <JoyStickControl+0x2e8>)
 8001b36:	ed93 5a02 	vldr	s10, [r3, #8]
 8001b3a:	eef0 2a45 	vmov.f32	s5, s10
 8001b3e:	eeb0 2a65 	vmov.f32	s4, s11
 8001b42:	eef0 1a46 	vmov.f32	s3, s12
 8001b46:	eeb0 1a66 	vmov.f32	s2, s13
 8001b4a:	eef0 0a47 	vmov.f32	s1, s14
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	f000 f91d 	bl	8001d90 <Calculate_Position>

		if (TRAY_STATUS == PICK) {
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <JoyStickControl+0x2f4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <JoyStickControl+0x1d2>
//			Calculate_Position(104, 114.5, 63.7, 221.5, 281.9, 281.7);
			memcpy(Pick_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001b5e:	2225      	movs	r2, #37	; 0x25
 8001b60:	494f      	ldr	r1, [pc, #316]	; (8001ca0 <JoyStickControl+0x2f8>)
 8001b62:	4850      	ldr	r0, [pc, #320]	; (8001ca4 <JoyStickControl+0x2fc>)
 8001b64:	f008 fde2 	bl	800a72c <memcpy>
			memcpy(Pick_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001b68:	2225      	movs	r2, #37	; 0x25
 8001b6a:	494f      	ldr	r1, [pc, #316]	; (8001ca8 <JoyStickControl+0x300>)
 8001b6c:	484f      	ldr	r0, [pc, #316]	; (8001cac <JoyStickControl+0x304>)
 8001b6e:	f008 fddd 	bl	800a72c <memcpy>

			count = 0;
 8001b72:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <JoyStickControl+0x2e0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e010      	b.n	8001b9c <JoyStickControl+0x1f4>
		} else if (TRAY_STATUS == PLACE) {
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <JoyStickControl+0x2f4>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d10c      	bne.n	8001b9c <JoyStickControl+0x1f4>
//			Calculate_Position(70.4, 128.2, 130.3, -267.1, -269.1, -218.4);
			memcpy(Place_Point_X, x_final_joy, sizeof(x_final_joy) + 1);
 8001b82:	2225      	movs	r2, #37	; 0x25
 8001b84:	4946      	ldr	r1, [pc, #280]	; (8001ca0 <JoyStickControl+0x2f8>)
 8001b86:	484a      	ldr	r0, [pc, #296]	; (8001cb0 <JoyStickControl+0x308>)
 8001b88:	f008 fdd0 	bl	800a72c <memcpy>
			memcpy(Place_Point_Y, y_final_joy, sizeof(y_final_joy) + 1);
 8001b8c:	2225      	movs	r2, #37	; 0x25
 8001b8e:	4946      	ldr	r1, [pc, #280]	; (8001ca8 <JoyStickControl+0x300>)
 8001b90:	4848      	ldr	r0, [pc, #288]	; (8001cb4 <JoyStickControl+0x30c>)
 8001b92:	f008 fdcb 	bl	800a72c <memcpy>
			count = 0;
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <JoyStickControl+0x2e0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
//
//			Place_Tray_Origin_x= -500;
//			Place_Tray_Origin_y= -2000;
//			Place_Tray_Origin_Orientation= 9000;;

		memset(x_c, 0, sizeof(x_c));
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	483d      	ldr	r0, [pc, #244]	; (8001c98 <JoyStickControl+0x2f0>)
 8001ba2:	f008 fdd1 	bl	800a748 <memset>
		memset(y_c, 0, sizeof(y_c));
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4839      	ldr	r0, [pc, #228]	; (8001c90 <JoyStickControl+0x2e8>)
 8001bac:	f008 fdcc 	bl	800a748 <memset>

		y_axis_Moving_Status= 0;
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <JoyStickControl+0x2ec>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	841a      	strh	r2, [r3, #32]
		State = IDLE;
 8001bb6:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <JoyStickControl+0x310>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
		count = 0;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <JoyStickControl+0x2e0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]

		motor(0, 0);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f96b 	bl	8000ea0 <motor>
 8001bca:	e000      	b.n	8001bce <JoyStickControl+0x226>
		if (state_motor == 1) {
 8001bcc:	bf00      	nop
//	else if (RX[4] == 0xEF && button_last == 0xFF) {
//		homing = 1;
//	}

//motor speed Select
	switch (state_motor) {
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <JoyStickControl+0x2d4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <JoyStickControl+0x234>
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d072      	beq.n	8001cc0 <JoyStickControl+0x318>
 8001bda:	e0b8      	b.n	8001d4e <JoyStickControl+0x3a6>
	case 0:
		if (RX[3] == 0xfe) { //Not be push
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <JoyStickControl+0x2c4>)
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	2bfe      	cmp	r3, #254	; 0xfe
 8001be2:	d108      	bne.n	8001bf6 <JoyStickControl+0x24e>
			motor(0, 1);
 8001be4:	2101      	movs	r1, #1
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f95a 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <JoyStickControl+0x2ec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		else if (RX[3] == 0xde) { //right
			x_axis_Moving_Status = 4;
			motor(0, 1);
		}

		break;
 8001bf4:	e0aa      	b.n	8001d4c <JoyStickControl+0x3a4>
		else if (RX[3] == 0xee) { //UP
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <JoyStickControl+0x2c4>)
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2bee      	cmp	r3, #238	; 0xee
 8001bfc:	d10a      	bne.n	8001c14 <JoyStickControl+0x26c>
			x_axis_Moving_Status= 0;
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <JoyStickControl+0x2ec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, 1);
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <JoyStickControl+0x314>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f947 	bl	8000ea0 <motor>
		break;
 8001c12:	e09b      	b.n	8001d4c <JoyStickControl+0x3a4>
		else if (RX[3] == 0xbe) { //Down
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <JoyStickControl+0x2c4>)
 8001c16:	78db      	ldrb	r3, [r3, #3]
 8001c18:	2bbe      	cmp	r3, #190	; 0xbe
 8001c1a:	d10b      	bne.n	8001c34 <JoyStickControl+0x28c>
			x_axis_Moving_Status= 0;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <JoyStickControl+0x2ec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(fast, -1);
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <JoyStickControl+0x314>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f937 	bl	8000ea0 <motor>
		break;
 8001c32:	e08b      	b.n	8001d4c <JoyStickControl+0x3a4>
		else if (RX[3] == 0x7e) { //left
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <JoyStickControl+0x2c4>)
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	2b7e      	cmp	r3, #126	; 0x7e
 8001c3a:	d108      	bne.n	8001c4e <JoyStickControl+0x2a6>
			x_axis_Moving_Status = 8;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <JoyStickControl+0x2ec>)
 8001c3e:	2208      	movs	r2, #8
 8001c40:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f92a 	bl	8000ea0 <motor>
		break;
 8001c4c:	e07e      	b.n	8001d4c <JoyStickControl+0x3a4>
		else if (RX[3] == 0xde) { //right
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <JoyStickControl+0x2c4>)
 8001c50:	78db      	ldrb	r3, [r3, #3]
 8001c52:	2bde      	cmp	r3, #222	; 0xde
 8001c54:	d17a      	bne.n	8001d4c <JoyStickControl+0x3a4>
			x_axis_Moving_Status = 4;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <JoyStickControl+0x2ec>)
 8001c58:	2204      	movs	r2, #4
 8001c5a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff f91d 	bl	8000ea0 <motor>
		break;
 8001c66:	e071      	b.n	8001d4c <JoyStickControl+0x3a4>
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	20000328 	.word	0x20000328
 8001c70:	20000224 	.word	0x20000224
 8001c74:	200003f4 	.word	0x200003f4
 8001c78:	20000333 	.word	0x20000333
 8001c7c:	20000332 	.word	0x20000332
 8001c80:	20000334 	.word	0x20000334
 8001c84:	2000039c 	.word	0x2000039c
 8001c88:	20000335 	.word	0x20000335
 8001c8c:	20000fd0 	.word	0x20000fd0
 8001c90:	20000338 	.word	0x20000338
 8001c94:	20000e28 	.word	0x20000e28
 8001c98:	20000344 	.word	0x20000344
 8001c9c:	2000106a 	.word	0x2000106a
 8001ca0:	20000350 	.word	0x20000350
 8001ca4:	20000ff8 	.word	0x20000ff8
 8001ca8:	20000374 	.word	0x20000374
 8001cac:	20000fd4 	.word	0x20000fd4
 8001cb0:	20001040 	.word	0x20001040
 8001cb4:	2000101c 	.word	0x2000101c
 8001cb8:	20000270 	.word	0x20000270
 8001cbc:	2000022e 	.word	0x2000022e

		case 1:
		if (RX[3] == 0xfe) { //Not be push
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <JoyStickControl+0x3d0>)
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2bfe      	cmp	r3, #254	; 0xfe
 8001cc6:	d108      	bne.n	8001cda <JoyStickControl+0x332>
			motor(0, 1);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff f8e8 	bl	8000ea0 <motor>
			x_axis_Moving_Status= 0;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <JoyStickControl+0x3d4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001cd8:	e039      	b.n	8001d4e <JoyStickControl+0x3a6>
		}
		else if (RX[3] == 0xee) { //UP
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <JoyStickControl+0x3d0>)
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	2bee      	cmp	r3, #238	; 0xee
 8001ce0:	d10a      	bne.n	8001cf8 <JoyStickControl+0x350>
			x_axis_Moving_Status= 0;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <JoyStickControl+0x3d4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, 1);
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <JoyStickControl+0x3d8>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f8d5 	bl	8000ea0 <motor>
 8001cf6:	e02a      	b.n	8001d4e <JoyStickControl+0x3a6>
		}
		else if (RX[3] == 0xbe) { //Down
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <JoyStickControl+0x3d0>)
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2bbe      	cmp	r3, #190	; 0xbe
 8001cfe:	d10b      	bne.n	8001d18 <JoyStickControl+0x370>
			x_axis_Moving_Status= 0;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <JoyStickControl+0x3d4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(slow, -1);
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <JoyStickControl+0x3d8>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f8c5 	bl	8000ea0 <motor>
 8001d16:	e01a      	b.n	8001d4e <JoyStickControl+0x3a6>
		}
		else if (RX[3] == 0x7e) { //left
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <JoyStickControl+0x3d0>)
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b7e      	cmp	r3, #126	; 0x7e
 8001d1e:	d108      	bne.n	8001d32 <JoyStickControl+0x38a>
			x_axis_Moving_Status = 8;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <JoyStickControl+0x3d4>)
 8001d22:	2208      	movs	r2, #8
 8001d24:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f8b8 	bl	8000ea0 <motor>
 8001d30:	e00d      	b.n	8001d4e <JoyStickControl+0x3a6>
		}
		else if (RX[3] == 0xde) { //right
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <JoyStickControl+0x3d0>)
 8001d34:	78db      	ldrb	r3, [r3, #3]
 8001d36:	2bde      	cmp	r3, #222	; 0xde
 8001d38:	d109      	bne.n	8001d4e <JoyStickControl+0x3a6>
			x_axis_Moving_Status = 4;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <JoyStickControl+0x3d4>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			motor(0, 1);
 8001d42:	2101      	movs	r1, #1
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff f8ab 	bl	8000ea0 <motor>
 8001d4a:	e000      	b.n	8001d4e <JoyStickControl+0x3a6>
		break;
 8001d4c:	bf00      	nop
		}

	}

	switch (homing) {
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <JoyStickControl+0x3dc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <JoyStickControl+0x3b8>
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d103      	bne.n	8001d62 <JoyStickControl+0x3ba>
	case 0:
		break;
	case 1:
		Joy_Homing();
 8001d5a:	f7ff f943 	bl	8000fe4 <Joy_Homing>
		break;
 8001d5e:	e000      	b.n	8001d62 <JoyStickControl+0x3ba>
		break;
 8001d60:	bf00      	nop
	}

	RX_last = RX[4];
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <JoyStickControl+0x3d0>)
 8001d64:	791a      	ldrb	r2, [r3, #4]
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <JoyStickControl+0x3e0>)
 8001d68:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8001d6a:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <JoyStickControl+0x3d0>)
 8001d6c:	791a      	ldrb	r2, [r3, #4]
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <JoyStickControl+0x3e4>)
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000328 	.word	0x20000328
 8001d7c:	20000e28 	.word	0x20000e28
 8001d80:	20000230 	.word	0x20000230
 8001d84:	20000398 	.word	0x20000398
 8001d88:	20000333 	.word	0x20000333
 8001d8c:	20000334 	.word	0x20000334

08001d90 <Calculate_Position>:

void Calculate_Position(float x_c1, float x_c2, float x_c3, float y_c1,
		float y_c2, float y_c3) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d9a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d9e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001da2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001da6:	ed87 2a01 	vstr	s4, [r7, #4]
 8001daa:	edc7 2a00 	vstr	s5, [r7]

//Parameter use in Equation
//Trigonometry
	a1 = x_c2 - x_c1;
 8001dae:	ed97 7a04 	vldr	s14, [r7, #16]
 8001db2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	4be1      	ldr	r3, [pc, #900]	; (8002140 <Calculate_Position+0x3b0>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]
	b = y_c2 - y_c1;
 8001dc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	4bdd      	ldr	r3, [pc, #884]	; (8002144 <Calculate_Position+0x3b4>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]
	c = sqrt((a1 * a1) + (b * b));
 8001dd2:	4bdb      	ldr	r3, [pc, #876]	; (8002140 <Calculate_Position+0x3b0>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	4bd9      	ldr	r3, [pc, #868]	; (8002140 <Calculate_Position+0x3b0>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	4bd8      	ldr	r3, [pc, #864]	; (8002144 <Calculate_Position+0x3b4>)
 8001de4:	edd3 6a00 	vldr	s13, [r3]
 8001de8:	4bd6      	ldr	r3, [pc, #856]	; (8002144 <Calculate_Position+0x3b4>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	ee17 0a90 	vmov	r0, s15
 8001dfa:	f7fe fb51 	bl	80004a0 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	ec43 2b10 	vmov	d0, r2, r3
 8001e06:	f008 fca7 	bl	800a758 <sqrt>
 8001e0a:	ec53 2b10 	vmov	r2, r3, d0
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fe4d 	bl	8000ab0 <__aeabi_d2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4acb      	ldr	r2, [pc, #812]	; (8002148 <Calculate_Position+0x3b8>)
 8001e1a:	6013      	str	r3, [r2, #0]

//float cos_zeta1= a1/ c;
	cos_zeta = a1 / c;
 8001e1c:	4bc8      	ldr	r3, [pc, #800]	; (8002140 <Calculate_Position+0x3b0>)
 8001e1e:	edd3 6a00 	vldr	s13, [r3]
 8001e22:	4bc9      	ldr	r3, [pc, #804]	; (8002148 <Calculate_Position+0x3b8>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	4bc7      	ldr	r3, [pc, #796]	; (800214c <Calculate_Position+0x3bc>)
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
	sin_zeta = b / c;
 8001e32:	4bc4      	ldr	r3, [pc, #784]	; (8002144 <Calculate_Position+0x3b4>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	4bc3      	ldr	r3, [pc, #780]	; (8002148 <Calculate_Position+0x3b8>)
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e42:	4bc3      	ldr	r3, [pc, #780]	; (8002150 <Calculate_Position+0x3c0>)
 8001e44:	edc3 7a00 	vstr	s15, [r3]
//	float tan_zeta1= b / a;

	x_final_joy[0] = (((10 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8001e48:	4bc0      	ldr	r3, [pc, #768]	; (800214c <Calculate_Position+0x3bc>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e56:	4bbe      	ldr	r3, [pc, #760]	; (8002150 <Calculate_Position+0x3c0>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	eddf 6abd 	vldr	s13, [pc, #756]	; 8002154 <Calculate_Position+0x3c4>
 8001e60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e78:	4bb7      	ldr	r3, [pc, #732]	; (8002158 <Calculate_Position+0x3c8>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	x_final_joy[1] = (((30 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8001e7e:	4bb3      	ldr	r3, [pc, #716]	; (800214c <Calculate_Position+0x3bc>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e8c:	4bb0      	ldr	r3, [pc, #704]	; (8002150 <Calculate_Position+0x3c0>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002154 <Calculate_Position+0x3c4>
 8001e96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	4baa      	ldr	r3, [pc, #680]	; (8002158 <Calculate_Position+0x3c8>)
 8001eb0:	edc3 7a01 	vstr	s15, [r3, #4]
	x_final_joy[2] = (((50 * cos_zeta) - (40 * sin_zeta)) + x_c1) * 10;
 8001eb4:	4ba5      	ldr	r3, [pc, #660]	; (800214c <Calculate_Position+0x3bc>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800215c <Calculate_Position+0x3cc>
 8001ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ec2:	4ba3      	ldr	r3, [pc, #652]	; (8002150 <Calculate_Position+0x3c0>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8002154 <Calculate_Position+0x3c4>
 8001ecc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee4:	4b9c      	ldr	r3, [pc, #624]	; (8002158 <Calculate_Position+0x3c8>)
 8001ee6:	edc3 7a02 	vstr	s15, [r3, #8]
	x_final_joy[3] = (((10 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 8001eea:	4b98      	ldr	r3, [pc, #608]	; (800214c <Calculate_Position+0x3bc>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ef4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ef8:	4b95      	ldr	r3, [pc, #596]	; (8002150 <Calculate_Position+0x3c0>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <Calculate_Position+0x3c8>)
 8001f1c:	edc3 7a03 	vstr	s15, [r3, #12]
	x_final_joy[4] = (((30 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 8001f20:	4b8a      	ldr	r3, [pc, #552]	; (800214c <Calculate_Position+0x3bc>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <Calculate_Position+0x3c0>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <Calculate_Position+0x3c8>)
 8001f52:	edc3 7a04 	vstr	s15, [r3, #16]
	x_final_joy[5] = (((50 * cos_zeta) - (25 * sin_zeta)) + x_c1) * 10;
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <Calculate_Position+0x3bc>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800215c <Calculate_Position+0x3cc>
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	4b7a      	ldr	r3, [pc, #488]	; (8002150 <Calculate_Position+0x3c0>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f86:	4b74      	ldr	r3, [pc, #464]	; (8002158 <Calculate_Position+0x3c8>)
 8001f88:	edc3 7a05 	vstr	s15, [r3, #20]
	x_final_joy[6] = (((10 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8001f8c:	4b6f      	ldr	r3, [pc, #444]	; (800214c <Calculate_Position+0x3bc>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <Calculate_Position+0x3c0>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <Calculate_Position+0x3c8>)
 8001fbe:	edc3 7a06 	vstr	s15, [r3, #24]
	x_final_joy[7] = (((30 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <Calculate_Position+0x3bc>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <Calculate_Position+0x3c0>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <Calculate_Position+0x3c8>)
 8001ff4:	edc3 7a07 	vstr	s15, [r3, #28]
	x_final_joy[8] = (((50 * cos_zeta) - (10 * sin_zeta)) + x_c1) * 10;
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <Calculate_Position+0x3bc>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800215c <Calculate_Position+0x3cc>
 8002002:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002006:	4b52      	ldr	r3, [pc, #328]	; (8002150 <Calculate_Position+0x3c0>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002018:	edd7 7a05 	vldr	s15, [r7, #20]
 800201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002020:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <Calculate_Position+0x3c8>)
 800202a:	edc3 7a08 	vstr	s15, [r3, #32]

	y_final_joy[0] = ((40 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <Calculate_Position+0x3bc>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002154 <Calculate_Position+0x3c4>
 8002038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800203c:	4b44      	ldr	r3, [pc, #272]	; (8002150 <Calculate_Position+0x3c0>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002046:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800204a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <Calculate_Position+0x3d0>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
	y_final_joy[1] = ((40 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <Calculate_Position+0x3bc>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002154 <Calculate_Position+0x3c4>
 8002066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <Calculate_Position+0x3c0>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002074:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800207c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <Calculate_Position+0x3d0>)
 8002086:	edc3 7a01 	vstr	s15, [r3, #4]
	y_final_joy[2] = ((40 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <Calculate_Position+0x3bc>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002154 <Calculate_Position+0x3c4>
 8002094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <Calculate_Position+0x3c0>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800215c <Calculate_Position+0x3cc>
 80020a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <Calculate_Position+0x3d0>)
 80020b4:	edc3 7a02 	vstr	s15, [r3, #8]
	y_final_joy[3] = ((25 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <Calculate_Position+0x3bc>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <Calculate_Position+0x3c0>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <Calculate_Position+0x3d0>)
 80020e2:	edc3 7a03 	vstr	s15, [r3, #12]
	y_final_joy[4] = ((25 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <Calculate_Position+0x3bc>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <Calculate_Position+0x3c0>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80020fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002106:	edd7 7a02 	vldr	s15, [r7, #8]
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <Calculate_Position+0x3d0>)
 8002110:	edc3 7a04 	vstr	s15, [r3, #16]
	y_final_joy[5] = ((25 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <Calculate_Position+0x3bc>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800211e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <Calculate_Position+0x3c0>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800215c <Calculate_Position+0x3cc>
 800212c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002134:	edd7 7a02 	vldr	s15, [r7, #8]
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	e012      	b.n	8002164 <Calculate_Position+0x3d4>
 800213e:	bf00      	nop
 8002140:	2000106c 	.word	0x2000106c
 8002144:	20001070 	.word	0x20001070
 8002148:	20001074 	.word	0x20001074
 800214c:	20001078 	.word	0x20001078
 8002150:	2000107c 	.word	0x2000107c
 8002154:	42200000 	.word	0x42200000
 8002158:	20000350 	.word	0x20000350
 800215c:	42480000 	.word	0x42480000
 8002160:	20000374 	.word	0x20000374
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <Calculate_Position+0x46c>)
 8002166:	edc3 7a05 	vstr	s15, [r3, #20]
	y_final_joy[6] = ((10 * cos_zeta) + (10 * sin_zeta)) + y_c1;
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <Calculate_Position+0x470>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002174:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <Calculate_Position+0x474>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002182:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218a:	edd7 7a02 	vldr	s15, [r7, #8]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <Calculate_Position+0x46c>)
 8002194:	edc3 7a06 	vstr	s15, [r3, #24]
	y_final_joy[7] = ((10 * cos_zeta) + (30 * sin_zeta)) + y_c1;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <Calculate_Position+0x470>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <Calculate_Position+0x474>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80021b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <Calculate_Position+0x46c>)
 80021c2:	edc3 7a07 	vstr	s15, [r3, #28]
	y_final_joy[8] = ((10 * cos_zeta) + (50 * sin_zeta)) + y_c1;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <Calculate_Position+0x470>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <Calculate_Position+0x474>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002208 <Calculate_Position+0x478>
 80021de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b03      	ldr	r3, [pc, #12]	; (80021fc <Calculate_Position+0x46c>)
 80021f0:	edc3 7a08 	vstr	s15, [r3, #32]

}
 80021f4:	bf00      	nop
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000374 	.word	0x20000374
 8002200:	20001078 	.word	0x20001078
 8002204:	2000107c 	.word	0x2000107c
 8002208:	42480000 	.word	0x42480000

0800220c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002210:	f3bf 8f4f 	dsb	sy
}
 8002214:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <__NVIC_SystemReset+0x24>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800221e:	4904      	ldr	r1, [pc, #16]	; (8002230 <__NVIC_SystemReset+0x24>)
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_SystemReset+0x28>)
 8002222:	4313      	orrs	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002226:	f3bf 8f4f 	dsb	sy
}
 800222a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <__NVIC_SystemReset+0x20>
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	05fa0004 	.word	0x05fa0004

08002238 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b0a0      	sub	sp, #128	; 0x80
 800223e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002240:	f002 fbb0 	bl	80049a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002244:	f000 fdc6 	bl	8002dd4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002248:	f001 f8ec 	bl	8003424 <MX_GPIO_Init>
	MX_DMA_Init();
 800224c:	f001 f8ca 	bl	80033e4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002250:	f001 f870 	bl	8003334 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002254:	f000 ff2a 	bl	80030ac <MX_TIM2_Init>
	MX_TIM1_Init();
 8002258:	f000 fe88 	bl	8002f6c <MX_TIM1_Init>
	MX_TIM3_Init();
 800225c:	f000 ff7a 	bl	8003154 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8002260:	f001 f894 	bl	800338c <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8002264:	f000 ffc4 	bl	80031f0 <MX_TIM5_Init>
	MX_SPI3_Init();
 8002268:	f000 fe4a 	bl	8002f00 <MX_SPI3_Init>
	MX_TIM11_Init();
 800226c:	f001 f80e 	bl	800328c <MX_TIM11_Init>
	MX_I2C2_Init();
 8002270:	f000 fe18 	bl	8002ea4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
//	EndEffector_Event(Reset);
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002274:	2104      	movs	r1, #4
 8002276:	48ac      	ldr	r0, [pc, #688]	; (8002528 <main+0x2f0>)
 8002278:	f005 fe52 	bl	8007f20 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800227c:	48ab      	ldr	r0, [pc, #684]	; (800252c <main+0x2f4>)
 800227e:	f005 faef 	bl	8007860 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002282:	48ab      	ldr	r0, [pc, #684]	; (8002530 <main+0x2f8>)
 8002284:	f005 fa92 	bl	80077ac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002288:	2100      	movs	r1, #0
 800228a:	48a9      	ldr	r0, [pc, #676]	; (8002530 <main+0x2f8>)
 800228c:	f005 fc16 	bl	8007abc <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8002290:	48a8      	ldr	r0, [pc, #672]	; (8002534 <main+0x2fc>)
 8002292:	f005 fae5 	bl	8007860 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8002296:	4ba8      	ldr	r3, [pc, #672]	; (8002538 <main+0x300>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe f920 	bl	80004e4 <__aeabi_ul2d>
 80022a4:	a39e      	add	r3, pc, #632	; (adr r3, 8002520 <main+0x2e8>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fe fa7b 	bl	80007a4 <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4ba1      	ldr	r3, [pc, #644]	; (800253c <main+0x304>)
 80022b8:	e9c3 0100 	strd	r0, r1, [r3]
	t_DeAcce = traject_us / 1000000.00;
 80022bc:	4b9e      	ldr	r3, [pc, #632]	; (8002538 <main+0x300>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7fe f90d 	bl	80004e4 <__aeabi_ul2d>
 80022ca:	a395      	add	r3, pc, #596	; (adr r3, 8002520 <main+0x2e8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fa68 	bl	80007a4 <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	4b98      	ldr	r3, [pc, #608]	; (8002540 <main+0x308>)
 80022de:	e9c3 0100 	strd	r0, r1, [r3]
	t_Cons = traject_us / 1000000.00;
 80022e2:	4b95      	ldr	r3, [pc, #596]	; (8002538 <main+0x300>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe f8fa 	bl	80004e4 <__aeabi_ul2d>
 80022f0:	a38b      	add	r3, pc, #556	; (adr r3, 8002520 <main+0x2e8>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe fa55 	bl	80007a4 <__aeabi_ddiv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	4b90      	ldr	r3, [pc, #576]	; (8002544 <main+0x30c>)
 8002304:	e9c3 0100 	strd	r0, r1, [r3]
	t_count = traject_us / 1000000.00;
 8002308:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <main+0x300>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe f8e7 	bl	80004e4 <__aeabi_ul2d>
 8002316:	a382      	add	r3, pc, #520	; (adr r3, 8002520 <main+0x2e8>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe fa42 	bl	80007a4 <__aeabi_ddiv>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	4b87      	ldr	r3, [pc, #540]	; (8002548 <main+0x310>)
 800232a:	e9c3 0100 	strd	r0, r1, [r3]
	t_diff = traject_us / 1000000.00;
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <main+0x300>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe f8d4 	bl	80004e4 <__aeabi_ul2d>
 800233c:	a378      	add	r3, pc, #480	; (adr r3, 8002520 <main+0x2e8>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe fa2f 	bl	80007a4 <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	4b7f      	ldr	r3, [pc, #508]	; (800254c <main+0x314>)
 8002350:	e9c3 0100 	strd	r0, r1, [r3]

	hmodbus.huart = &huart2;
 8002354:	4a7e      	ldr	r2, [pc, #504]	; (8002550 <main+0x318>)
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <main+0x31c>)
 8002358:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim11;
 800235a:	4a7d      	ldr	r2, [pc, #500]	; (8002550 <main+0x318>)
 800235c:	4b7e      	ldr	r3, [pc, #504]	; (8002558 <main+0x320>)
 800235e:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8002360:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <main+0x318>)
 8002362:	2315      	movs	r3, #21
 8002364:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8002366:	4a7a      	ldr	r2, [pc, #488]	; (8002550 <main+0x318>)
 8002368:	23c8      	movs	r3, #200	; 0xc8
 800236a:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 800236c:	497b      	ldr	r1, [pc, #492]	; (800255c <main+0x324>)
 800236e:	4878      	ldr	r0, [pc, #480]	; (8002550 <main+0x318>)
 8002370:	f7fe fef6 	bl	8001160 <Modbus_init>

	struct BaseSystemBit BaseSystemStatusData = { .SetPickTray = 1,
 8002374:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <main+0x328>)
 8002376:	f107 0564 	add.w	r5, r7, #100	; 0x64
 800237a:	461c      	mov	r4, r3
 800237c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	602b      	str	r3, [r5, #0]
			.SetPlaceTray = 2, .Home = 4, .RunTrayMode = 8, .RunPointMode = 16 };

	struct EndEffectorStatusBit EndEffectorStatusData = { .LaserOff = 0,
 8002384:	4b77      	ldr	r3, [pc, #476]	; (8002564 <main+0x32c>)
 8002386:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800238a:	461c      	mov	r4, r3
 800238c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	602b      	str	r3, [r5, #0]
			.LaserOn = 1, .GripperPower = 2, .GripperPicking = 6,
			.GripperPlacing = 10 };

	struct yaxisMovingStatusBit yaxisMovingStatusData =
 8002394:	4b74      	ldr	r3, [pc, #464]	; (8002568 <main+0x330>)
 8002396:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800239a:	461c      	mov	r4, r3
 800239c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a4:	e885 0003 	stmia.w	r5, {r0, r1}
			{ .JogPick = 1, .JogPlease = 2, .Home = 4, .GoPick = 8, .GoPlace =
					16, .Gopoint = 32 };

	struct xaxisMovingStatusBit xaxisMovingStatusData = { .Home = 1, .Run = 2,
 80023a8:	4b70      	ldr	r3, [pc, #448]	; (800256c <main+0x334>)
 80023aa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.JogLeft = 4, .JogRight = 8 };

	x_axis_Actual_Position= 0;
 80023b4:	4a69      	ldr	r2, [pc, #420]	; (800255c <main+0x324>)
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
	x_axis_Target_Speed= 2500;
 80023bc:	4a67      	ldr	r2, [pc, #412]	; (800255c <main+0x324>)
 80023be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80023c2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	x_axis_Target_Acceleration_Time= 2;
 80023c6:	4a65      	ldr	r2, [pc, #404]	; (800255c <main+0x324>)
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		static uint64_t timestamp_Endeffecter = 0;
		static uint64_t timestamp_wait = 0;
		int64_t GetTicku = micros();
 80023ce:	f001 f8f9 	bl	80035c4 <micros>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

		Modbus_Protocal_Worker();
 80023da:	f7fe ff4d 	bl	8001278 <Modbus_Protocal_Worker>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 80023de:	f002 fb47 	bl	8004a70 <HAL_GetTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2200      	movs	r2, #0
 80023e6:	4698      	mov	r8, r3
 80023e8:	4691      	mov	r9, r2
 80023ea:	4b61      	ldr	r3, [pc, #388]	; (8002570 <main+0x338>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	4590      	cmp	r8, r2
 80023f2:	eb79 0303 	sbcs.w	r3, r9, r3
 80023f6:	d323      	bcc.n	8002440 <main+0x208>
			timestamp_heartbeat = HAL_GetTick() + 200;
 80023f8:	f002 fb3a 	bl	8004a70 <HAL_GetTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	33c8      	adds	r3, #200	; 0xc8
 8002400:	2200      	movs	r2, #0
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	627a      	str	r2, [r7, #36]	; 0x24
 8002406:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <main+0x338>)
 8002408:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800240c:	e9c3 1200 	strd	r1, r2, [r3]

			Heartbeat_Protocol= 22881;
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <main+0x324>)
 8002412:	f645 1361 	movw	r3, #22881	; 0x5961
 8002416:	8013      	strh	r3, [r2, #0]

			y_axis_Actual_Position= (int32_t)(PosY* 10);
 8002418:	4b56      	ldr	r3, [pc, #344]	; (8002574 <main+0x33c>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242a:	ee17 3a90 	vmov	r3, s15
 800242e:	b29b      	uxth	r3, r3
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <main+0x324>)
 8002432:	8453      	strh	r3, [r2, #34]	; 0x22
			y_axis_Actual_Speed= 0;
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <main+0x324>)
 8002436:	2300      	movs	r3, #0
 8002438:	8493      	strh	r3, [r2, #36]	; 0x24
			y_axis_Actual_Acceleration= 0;
 800243a:	4a48      	ldr	r2, [pc, #288]	; (800255c <main+0x324>)
 800243c:	2300      	movs	r3, #0
 800243e:	84d3      	strh	r3, [r2, #38]	; 0x26
//		case 6:
//			EndEffector_Event(Test_Stop);
//			state_laser_test = 0;
//		}

		switch (State) {
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <main+0x340>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b08      	cmp	r3, #8
 8002446:	f200 8489 	bhi.w	8002d5c <main+0xb24>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <main+0x218>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002475 	.word	0x08002475
 8002454:	0800247f 	.word	0x0800247f
 8002458:	08002499 	.word	0x08002499
 800245c:	0800274f 	.word	0x0800274f
 8002460:	08002755 	.word	0x08002755
 8002464:	0800289f 	.word	0x0800289f
 8002468:	0800275b 	.word	0x0800275b
 800246c:	08002c63 	.word	0x08002c63
 8002470:	08002c6b 	.word	0x08002c6b

		case INIT:
			State = INIT_HOMING;
 8002474:	4a40      	ldr	r2, [pc, #256]	; (8002578 <main+0x340>)
 8002476:	2301      	movs	r3, #1
 8002478:	7013      	strb	r3, [r2, #0]
			break;
 800247a:	f000 bc6f 	b.w	8002d5c <main+0xb24>

		case INIT_HOMING:
			y_axis_Moving_Status= yaxisMovingStatusData.Home;
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	b29b      	uxth	r3, r3
 8002482:	4a36      	ldr	r2, [pc, #216]	; (800255c <main+0x324>)
 8002484:	8413      	strh	r3, [r2, #32]
			x_axis_Moving_Status = xaxisMovingStatusData.Home;
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	b29b      	uxth	r3, r3
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <main+0x324>)
 800248c:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
			Init_Homing();
 8002490:	f7fe fd30 	bl	8000ef4 <Init_Homing>

			break;
 8002494:	f000 bc62 	b.w	8002d5c <main+0xb24>

			case IDLE: //HOME

			if (HAL_GetTick() >= timestamp_Endeffecter) {
 8002498:	f002 faea 	bl	8004a70 <HAL_GetTick>
 800249c:	4603      	mov	r3, r0
 800249e:	2200      	movs	r2, #0
 80024a0:	469a      	mov	sl, r3
 80024a2:	4693      	mov	fp, r2
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <main+0x344>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	4592      	cmp	sl, r2
 80024ac:	eb7b 0303 	sbcs.w	r3, fp, r3
 80024b0:	d373      	bcc.n	800259a <main+0x362>
				timestamp_Endeffecter = HAL_GetTick() + 200;
 80024b2:	f002 fadd 	bl	8004a70 <HAL_GetTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	33c8      	adds	r3, #200	; 0xc8
 80024ba:	2200      	movs	r2, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	61fa      	str	r2, [r7, #28]
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <main+0x344>)
 80024c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80024c6:	e9c3 1200 	strd	r1, r2, [r3]
				if (End_Effector_Status == EndEffectorStatusData.LaserOn) {
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <main+0x324>)
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d103      	bne.n	80024de <main+0x2a6>
					EndEffector_Event(Test_Start);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff f94c 	bl	8001774 <EndEffector_Event>
 80024dc:	e012      	b.n	8002504 <main+0x2cc>
				} else if(End_Effector_Status == EndEffectorStatusData.LaserOff) {
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <main+0x324>)
 80024e0:	889b      	ldrh	r3, [r3, #4]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d103      	bne.n	80024f2 <main+0x2ba>
					EndEffector_Event(Test_Stop);
 80024ea:	2002      	movs	r0, #2
 80024ec:	f7ff f942 	bl	8001774 <EndEffector_Event>
 80024f0:	e008      	b.n	8002504 <main+0x2cc>
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPower) {
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <main+0x324>)
 80024f4:	889b      	ldrh	r3, [r3, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d102      	bne.n	8002504 <main+0x2cc>
					EndEffector_Event(Run_Mode);
 80024fe:	2006      	movs	r0, #6
 8002500:	f7ff f938 	bl	8001774 <EndEffector_Event>
				}

				if (End_Effector_Status == EndEffectorStatusData.GripperPicking) {
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <main+0x324>)
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250c:	429a      	cmp	r2, r3
 800250e:	d137      	bne.n	8002580 <main+0x348>
//					EndEffector_Event(Run_Mode);
					EndEffector_Event(Pick);
 8002510:	2008      	movs	r0, #8
 8002512:	f7ff f92f 	bl	8001774 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	b29b      	uxth	r3, r3
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <main+0x324>)
 800251c:	8093      	strh	r3, [r2, #4]
 800251e:	e03c      	b.n	800259a <main+0x362>
 8002520:	00000000 	.word	0x00000000
 8002524:	412e8480 	.word	0x412e8480
 8002528:	20000500 	.word	0x20000500
 800252c:	200005b4 	.word	0x200005b4
 8002530:	2000044c 	.word	0x2000044c
 8002534:	20000668 	.word	0x20000668
 8002538:	20000238 	.word	0x20000238
 800253c:	20000248 	.word	0x20000248
 8002540:	20000250 	.word	0x20000250
 8002544:	20000258 	.word	0x20000258
 8002548:	20000260 	.word	0x20000260
 800254c:	20000268 	.word	0x20000268
 8002550:	20000950 	.word	0x20000950
 8002554:	200007d0 	.word	0x200007d0
 8002558:	2000071c 	.word	0x2000071c
 800255c:	20000e28 	.word	0x20000e28
 8002560:	0800a92c 	.word	0x0800a92c
 8002564:	0800a940 	.word	0x0800a940
 8002568:	0800a954 	.word	0x0800a954
 800256c:	0800a96c 	.word	0x0800a96c
 8002570:	20001080 	.word	0x20001080
 8002574:	20000fd0 	.word	0x20000fd0
 8002578:	20000270 	.word	0x20000270
 800257c:	20001088 	.word	0x20001088
				} else if (End_Effector_Status == EndEffectorStatusData.GripperPlacing) {
 8002580:	4ba7      	ldr	r3, [pc, #668]	; (8002820 <main+0x5e8>)
 8002582:	889b      	ldrh	r3, [r3, #4]
 8002584:	461a      	mov	r2, r3
 8002586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <main+0x362>
//					EndEffector_Event(Run_Mode);
					EndEffector_Event(Place);
 800258c:	2009      	movs	r0, #9
 800258e:	f7ff f8f1 	bl	8001774 <EndEffector_Event>
					End_Effector_Status = EndEffectorStatusData.GripperPower;
 8002592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002594:	b29b      	uxth	r3, r3
 8002596:	4aa2      	ldr	r2, [pc, #648]	; (8002820 <main+0x5e8>)
 8002598:	8093      	strh	r3, [r2, #4]
				}
			}

			if(Base_System_Status == BaseSystemStatusData.SetPickTray) {
 800259a:	4ba1      	ldr	r3, [pc, #644]	; (8002820 <main+0x5e8>)
 800259c:	885b      	ldrh	r3, [r3, #2]
 800259e:	461a      	mov	r2, r3
 80025a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d114      	bne.n	80025d0 <main+0x398>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <main+0x5e8>)
 80025ac:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff f8e0 	bl	8001774 <EndEffector_Event>
				Base_System_Status = 0;
 80025b4:	4a9a      	ldr	r2, [pc, #616]	; (8002820 <main+0x5e8>)
 80025b6:	2300      	movs	r3, #0
 80025b8:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPick;
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4a98      	ldr	r2, [pc, #608]	; (8002820 <main+0x5e8>)
 80025c0:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PICK;
 80025c2:	4a98      	ldr	r2, [pc, #608]	; (8002824 <main+0x5ec>)
 80025c4:	2300      	movs	r3, #0
 80025c6:	7013      	strb	r3, [r2, #0]
				State = SETPICKTRAY;
 80025c8:	4a97      	ldr	r2, [pc, #604]	; (8002828 <main+0x5f0>)
 80025ca:	2303      	movs	r3, #3
 80025cc:	7013      	strb	r3, [r2, #0]
 80025ce:	e019      	b.n	8002604 <main+0x3cc>
			} else if(Base_System_Status == BaseSystemStatusData.SetPlaceTray) {
 80025d0:	4b93      	ldr	r3, [pc, #588]	; (8002820 <main+0x5e8>)
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	461a      	mov	r2, r3
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d8:	429a      	cmp	r2, r3
 80025da:	d113      	bne.n	8002604 <main+0x3cc>
				End_Effector_Status = EndEffectorStatusData.LaserOn;
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4a8f      	ldr	r2, [pc, #572]	; (8002820 <main+0x5e8>)
 80025e2:	8093      	strh	r3, [r2, #4]
				EndEffector_Event(Test_Start);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7ff f8c5 	bl	8001774 <EndEffector_Event>
				Base_System_Status = 0;
 80025ea:	4a8d      	ldr	r2, [pc, #564]	; (8002820 <main+0x5e8>)
 80025ec:	2300      	movs	r3, #0
 80025ee:	8053      	strh	r3, [r2, #2]
				y_axis_Moving_Status = yaxisMovingStatusData.JogPlease;
 80025f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4a8a      	ldr	r2, [pc, #552]	; (8002820 <main+0x5e8>)
 80025f6:	8413      	strh	r3, [r2, #32]
				TRAY_STATUS = PLACE;
 80025f8:	4a8a      	ldr	r2, [pc, #552]	; (8002824 <main+0x5ec>)
 80025fa:	2301      	movs	r3, #1
 80025fc:	7013      	strb	r3, [r2, #0]
				State = SETPLACETRAY;
 80025fe:	4a8a      	ldr	r2, [pc, #552]	; (8002828 <main+0x5f0>)
 8002600:	2304      	movs	r3, #4
 8002602:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.RunPointMode) {
 8002604:	4b86      	ldr	r3, [pc, #536]	; (8002820 <main+0x5e8>)
 8002606:	885b      	ldrh	r3, [r3, #2]
 8002608:	461a      	mov	r2, r3
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	429a      	cmp	r2, r3
 800260e:	d166      	bne.n	80026de <main+0x4a6>
				Base_System_Status = 0;
 8002610:	4a83      	ldr	r2, [pc, #524]	; (8002820 <main+0x5e8>)
 8002612:	2300      	movs	r3, #0
 8002614:	8053      	strh	r3, [r2, #2]
//				EndEffector_Event(Run_Mode);
				x_axis_Target_Position = Goal_Point_x;
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <main+0x5e8>)
 8002618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800261c:	4a80      	ldr	r2, [pc, #512]	; (8002820 <main+0x5e8>)
 800261e:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	b29b      	uxth	r3, r3
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <main+0x5e8>)
 8002628:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80

				pos_i = PosY;
 800262c:	4b7f      	ldr	r3, [pc, #508]	; (800282c <main+0x5f4>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b7f      	ldr	r3, [pc, #508]	; (8002830 <main+0x5f8>)
 8002632:	601a      	str	r2, [r3, #0]

				if(Goal_Point_y >= 0 && Goal_Point_y <= 3500) {
 8002634:	4b7a      	ldr	r3, [pc, #488]	; (8002820 <main+0x5e8>)
 8002636:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800263a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800263e:	429a      	cmp	r2, r3
 8002640:	d80e      	bhi.n	8002660 <main+0x428>
					pos_f = (float)Goal_Point_y/10;
 8002642:	4b77      	ldr	r3, [pc, #476]	; (8002820 <main+0x5e8>)
 8002644:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002650:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002658:	4b76      	ldr	r3, [pc, #472]	; (8002834 <main+0x5fc>)
 800265a:	edc3 7a00 	vstr	s15, [r3]
 800265e:	e01e      	b.n	800269e <main+0x466>
				} else if(Goal_Point_y >= 65535-3500 && Goal_Point_y <= 65535) {
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <main+0x5e8>)
 8002662:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8002666:	f24f 2352 	movw	r3, #62034	; 0xf252
 800266a:	429a      	cmp	r2, r3
 800266c:	d917      	bls.n	800269e <main+0x466>
					pos_f = -(float)(65536%Goal_Point_y)/10;
 800266e:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <main+0x5e8>)
 8002670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800267a:	fb92 f3f1 	sdiv	r3, r2, r1
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268c:	eeb1 7a67 	vneg.f32	s14, s15
 8002690:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <main+0x5fc>)
 800269a:	edc3 7a00 	vstr	s15, [r3]
				}

				Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 800269e:	4b64      	ldr	r3, [pc, #400]	; (8002830 <main+0x5f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fefc 	bl	80004a0 <__aeabi_f2d>
 80026a8:	4604      	mov	r4, r0
 80026aa:	460d      	mov	r5, r1
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <main+0x5fc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd fef5 	bl	80004a0 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	ed9f 3b51 	vldr	d3, [pc, #324]	; 8002800 <main+0x5c8>
 80026be:	ed9f 2b52 	vldr	d2, [pc, #328]	; 8002808 <main+0x5d0>
 80026c2:	ec43 2b11 	vmov	d1, r2, r3
 80026c6:	ec45 4b10 	vmov	d0, r4, r5
 80026ca:	f001 f951 	bl	8003970 <Trajectory_Gen>

				y_axis_Moving_Status = yaxisMovingStatusData.Gopoint;
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4a53      	ldr	r2, [pc, #332]	; (8002820 <main+0x5e8>)
 80026d4:	8413      	strh	r3, [r2, #32]
				State = RUNPOINTMODE;
 80026d6:	4a54      	ldr	r2, [pc, #336]	; (8002828 <main+0x5f0>)
 80026d8:	2306      	movs	r3, #6
 80026da:	7013      	strb	r3, [r2, #0]
 80026dc:	e029      	b.n	8002732 <main+0x4fa>

			} else if(Base_System_Status == BaseSystemStatusData.RunTrayMode) {
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <main+0x5e8>)
 80026e0:	885b      	ldrh	r3, [r3, #2]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d123      	bne.n	8002732 <main+0x4fa>
				Base_System_Status = 0;
 80026ea:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <main+0x5e8>)
 80026ec:	2300      	movs	r3, #0
 80026ee:	8053      	strh	r3, [r2, #2]
				position_index = 0;
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <main+0x600>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	6013      	str	r3, [r2, #0]

				x_axis_Target_Position= (int16_t)Pick_Point_X[position_index];
 80026f6:	4b50      	ldr	r3, [pc, #320]	; (8002838 <main+0x600>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a50      	ldr	r2, [pc, #320]	; (800283c <main+0x604>)
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 3a90 	vmov	r3, s15
 800270c:	b21b      	sxth	r3, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	4a43      	ldr	r2, [pc, #268]	; (8002820 <main+0x5e8>)
 8002712:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
				x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	b29b      	uxth	r3, r3
 800271a:	4a41      	ldr	r2, [pc, #260]	; (8002820 <main+0x5e8>)
 800271c:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80

				State = RUNTRAYMODE;
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <main+0x5f0>)
 8002722:	2305      	movs	r3, #5
 8002724:	7013      	strb	r3, [r2, #0]
				State_Control = TRAJECTGEN;
 8002726:	4a46      	ldr	r2, [pc, #280]	; (8002840 <main+0x608>)
 8002728:	2300      	movs	r3, #0
 800272a:	7013      	strb	r3, [r2, #0]
				State_RUNTRAYMODE = GOPICK;
 800272c:	4a45      	ldr	r2, [pc, #276]	; (8002844 <main+0x60c>)
 800272e:	2300      	movs	r3, #0
 8002730:	7013      	strb	r3, [r2, #0]
			}

			if(Base_System_Status == BaseSystemStatusData.Home) {
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <main+0x5e8>)
 8002734:	885b      	ldrh	r3, [r3, #2]
 8002736:	461a      	mov	r2, r3
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	429a      	cmp	r2, r3
 800273c:	f040 830b 	bne.w	8002d56 <main+0xb1e>
				Base_System_Status = 0;
 8002740:	4a37      	ldr	r2, [pc, #220]	; (8002820 <main+0x5e8>)
 8002742:	2300      	movs	r3, #0
 8002744:	8053      	strh	r3, [r2, #2]
				State = INIT_HOMING;
 8002746:	4a38      	ldr	r2, [pc, #224]	; (8002828 <main+0x5f0>)
 8002748:	2301      	movs	r3, #1
 800274a:	7013      	strb	r3, [r2, #0]
			}
			break;
 800274c:	e303      	b.n	8002d56 <main+0xb1e>

			case SETPICKTRAY:
			JoyStickControl();
 800274e:	f7ff f92b 	bl	80019a8 <JoyStickControl>
			break;
 8002752:	e303      	b.n	8002d5c <main+0xb24>

			case SETPLACETRAY:
			JoyStickControl();
 8002754:	f7ff f928 	bl	80019a8 <JoyStickControl>
			break;
 8002758:	e300      	b.n	8002d5c <main+0xb24>

			case RUNPOINTMODE:
			if (GetTicku >= timestamp_traject) {
 800275a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800275e:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <main+0x610>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4290      	cmp	r0, r2
 8002766:	eb71 0303 	sbcs.w	r3, r1, r3
 800276a:	d31f      	bcc.n	80027ac <main+0x574>
				timestamp_traject = GetTicku + traject_us;
 800276c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002770:	4b36      	ldr	r3, [pc, #216]	; (800284c <main+0x614>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	1884      	adds	r4, r0, r2
 8002778:	613c      	str	r4, [r7, #16]
 800277a:	eb41 0303 	adc.w	r3, r1, r3
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <main+0x610>)
 8002782:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002786:	e9c3 1200 	strd	r1, r2, [r3]
				Trajectory_Eva();
 800278a:	f001 fa45 	bl	8003c18 <Trajectory_Eva>
				read_pos();
 800278e:	f7fe fb61 	bl	8000e54 <read_pos>
				PID(x);
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <main+0x618>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe f988 	bl	8000ab0 <__aeabi_d2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	ee00 3a10 	vmov	s0, r3
 80027a6:	f000 ff47 	bl	8003638 <PID>
				pos_i = PosY;
				y_axis_Moving_Status = 0;

				State = IDLE;
			}
			break;
 80027aa:	e2d7      	b.n	8002d5c <main+0xb24>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <main+0x5fc>)
 80027ae:	ed93 7a00 	vldr	s14, [r3]
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <main+0x5f4>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027bc:	ee17 0a90 	vmov	r0, s15
 80027c0:	f7fd fe6e 	bl	80004a0 <__aeabi_f2d>
 80027c4:	a312      	add	r3, pc, #72	; (adr r3, 8002810 <main+0x5d8>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fe f93d 	bl	8000a48 <__aeabi_dcmple>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <main+0x59e>
			break;
 80027d4:	e2c2      	b.n	8002d5c <main+0xb24>
			} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary ) {
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <main+0x5fc>)
 80027d8:	ed93 7a00 	vldr	s14, [r3]
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <main+0x5f4>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f7fd fe59 	bl	80004a0 <__aeabi_f2d>
 80027ee:	a30a      	add	r3, pc, #40	; (adr r3, 8002818 <main+0x5e0>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fe f932 	bl	8000a5c <__aeabi_dcmpge>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12a      	bne.n	8002854 <main+0x61c>
			break;
 80027fe:	e2ad      	b.n	8002d5c <main+0xb24>
 8002800:	00000000 	.word	0x00000000
 8002804:	40b04100 	.word	0x40b04100
 8002808:	00000000 	.word	0x00000000
 800280c:	408d8800 	.word	0x408d8800
 8002810:	9999999a 	.word	0x9999999a
 8002814:	3fc99999 	.word	0x3fc99999
 8002818:	9999999a 	.word	0x9999999a
 800281c:	bfc99999 	.word	0xbfc99999
 8002820:	20000e28 	.word	0x20000e28
 8002824:	2000106a 	.word	0x2000106a
 8002828:	20000270 	.word	0x20000270
 800282c:	20000fd0 	.word	0x20000fd0
 8002830:	20000918 	.word	0x20000918
 8002834:	2000091c 	.word	0x2000091c
 8002838:	20001064 	.word	0x20001064
 800283c:	20000ff8 	.word	0x20000ff8
 8002840:	20001069 	.word	0x20001069
 8002844:	20001068 	.word	0x20001068
 8002848:	20001090 	.word	0x20001090
 800284c:	20000238 	.word	0x20000238
 8002850:	20000928 	.word	0x20000928
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002854:	4bb0      	ldr	r3, [pc, #704]	; (8002b18 <main+0x8e0>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	6353      	str	r3, [r2, #52]	; 0x34
				Intregral = 0;
 800285c:	4aaf      	ldr	r2, [pc, #700]	; (8002b1c <main+0x8e4>)
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	6013      	str	r3, [r2, #0]
				Dutyfeedback = 0;
 8002864:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <main+0x8e8>)
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
				v = 0;
 800286c:	49ad      	ldr	r1, [pc, #692]	; (8002b24 <main+0x8ec>)
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c1 2300 	strd	r2, r3, [r1]
				a = 0;
 800287a:	49ab      	ldr	r1, [pc, #684]	; (8002b28 <main+0x8f0>)
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9c1 2300 	strd	r2, r3, [r1]
				pos_i = PosY;
 8002888:	4ba8      	ldr	r3, [pc, #672]	; (8002b2c <main+0x8f4>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4ba8      	ldr	r3, [pc, #672]	; (8002b30 <main+0x8f8>)
 800288e:	601a      	str	r2, [r3, #0]
				y_axis_Moving_Status = 0;
 8002890:	4aa8      	ldr	r2, [pc, #672]	; (8002b34 <main+0x8fc>)
 8002892:	2300      	movs	r3, #0
 8002894:	8413      	strh	r3, [r2, #32]
				State = IDLE;
 8002896:	4aa8      	ldr	r2, [pc, #672]	; (8002b38 <main+0x900>)
 8002898:	2302      	movs	r3, #2
 800289a:	7013      	strb	r3, [r2, #0]
			break;
 800289c:	e25e      	b.n	8002d5c <main+0xb24>

			case RUNTRAYMODE:
			switch (State_RUNTRAYMODE) {
 800289e:	4ba7      	ldr	r3, [pc, #668]	; (8002b3c <main+0x904>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <main+0x676>
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f000 80d3 	beq.w	8002a52 <main+0x81a>
					break;
				}
				break;
			}

			break;
 80028ac:	e256      	b.n	8002d5c <main+0xb24>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPick;
 80028ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4aa0      	ldr	r2, [pc, #640]	; (8002b34 <main+0x8fc>)
 80028b4:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 80028b6:	4ba2      	ldr	r3, [pc, #648]	; (8002b40 <main+0x908>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <main+0x68c>
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d028      	beq.n	8002914 <main+0x6dc>
				break;
 80028c2:	e1cd      	b.n	8002c60 <main+0xa28>
					pos_i = PosY;
 80028c4:	4b99      	ldr	r3, [pc, #612]	; (8002b2c <main+0x8f4>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b99      	ldr	r3, [pc, #612]	; (8002b30 <main+0x8f8>)
 80028ca:	601a      	str	r2, [r3, #0]
					pos_f = Pick_Point_Y[position_index];
 80028cc:	4b9d      	ldr	r3, [pc, #628]	; (8002b44 <main+0x90c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a9d      	ldr	r2, [pc, #628]	; (8002b48 <main+0x910>)
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b9c      	ldr	r3, [pc, #624]	; (8002b4c <main+0x914>)
 80028da:	601a      	str	r2, [r3, #0]
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 80028dc:	4b94      	ldr	r3, [pc, #592]	; (8002b30 <main+0x8f8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fddd 	bl	80004a0 <__aeabi_f2d>
 80028e6:	4604      	mov	r4, r0
 80028e8:	460d      	mov	r5, r1
 80028ea:	4b98      	ldr	r3, [pc, #608]	; (8002b4c <main+0x914>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fdd6 	bl	80004a0 <__aeabi_f2d>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	ed9f 3b7f 	vldr	d3, [pc, #508]	; 8002af8 <main+0x8c0>
 80028fc:	ed9f 2b80 	vldr	d2, [pc, #512]	; 8002b00 <main+0x8c8>
 8002900:	ec43 2b11 	vmov	d1, r2, r3
 8002904:	ec45 4b10 	vmov	d0, r4, r5
 8002908:	f001 f832 	bl	8003970 <Trajectory_Gen>
					State_Control = TRAJECTEVA_PID;
 800290c:	4a8c      	ldr	r2, [pc, #560]	; (8002b40 <main+0x908>)
 800290e:	2301      	movs	r3, #1
 8002910:	7013      	strb	r3, [r2, #0]
					break;
 8002912:	e09d      	b.n	8002a50 <main+0x818>
					if (GetTicku >= timestamp_traject) {
 8002914:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002918:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <main+0x918>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	4290      	cmp	r0, r2
 8002920:	eb71 0303 	sbcs.w	r3, r1, r3
 8002924:	d31f      	bcc.n	8002966 <main+0x72e>
						timestamp_traject = GetTicku + traject_us;
 8002926:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800292a:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <main+0x91c>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	1884      	adds	r4, r0, r2
 8002932:	60bc      	str	r4, [r7, #8]
 8002934:	eb41 0303 	adc.w	r3, r1, r3
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <main+0x918>)
 800293c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002940:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002944:	f001 f968 	bl	8003c18 <Trajectory_Eva>
						read_pos();
 8002948:	f7fe fa84 	bl	8000e54 <read_pos>
						PID(x);
 800294c:	4b82      	ldr	r3, [pc, #520]	; (8002b58 <main+0x920>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f8ab 	bl	8000ab0 <__aeabi_d2f>
 800295a:	4603      	mov	r3, r0
 800295c:	ee00 3a10 	vmov	s0, r3
 8002960:	f000 fe6a 	bl	8003638 <PID>
					break;
 8002964:	e073      	b.n	8002a4e <main+0x816>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 8002966:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <main+0x914>)
 8002968:	ed93 7a00 	vldr	s14, [r3]
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <main+0x8f4>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002976:	ee17 0a90 	vmov	r0, s15
 800297a:	f7fd fd91 	bl	80004a0 <__aeabi_f2d>
 800297e:	a362      	add	r3, pc, #392	; (adr r3, 8002b08 <main+0x8d0>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fe f860 	bl	8000a48 <__aeabi_dcmple>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d100      	bne.n	8002990 <main+0x758>
					break;
 800298e:	e05e      	b.n	8002a4e <main+0x816>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 8002990:	4b6e      	ldr	r3, [pc, #440]	; (8002b4c <main+0x914>)
 8002992:	ed93 7a00 	vldr	s14, [r3]
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <main+0x8f4>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	ee17 0a90 	vmov	r0, s15
 80029a4:	f7fd fd7c 	bl	80004a0 <__aeabi_f2d>
 80029a8:	a359      	add	r3, pc, #356	; (adr r3, 8002b10 <main+0x8d8>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fe f855 	bl	8000a5c <__aeabi_dcmpge>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d100      	bne.n	80029ba <main+0x782>
					break;
 80029b8:	e049      	b.n	8002a4e <main+0x816>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 80029ba:	4b5e      	ldr	r3, [pc, #376]	; (8002b34 <main+0x8fc>)
 80029bc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d144      	bne.n	8002a4e <main+0x816>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80029c4:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <main+0x8e0>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 80029cc:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <main+0x8e4>)
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <main+0x8e8>)
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	6013      	str	r3, [r2, #0]
						v = 0;
 80029dc:	4951      	ldr	r1, [pc, #324]	; (8002b24 <main+0x8ec>)
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 80029ea:	494f      	ldr	r1, [pc, #316]	; (8002b28 <main+0x8f0>)
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_Delay(2200);
 80029f8:	f640 0098 	movw	r0, #2200	; 0x898
 80029fc:	f002 f844 	bl	8004a88 <HAL_Delay>
						pos_i = PosY;
 8002a00:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <main+0x8f4>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <main+0x8f8>)
 8002a06:	601a      	str	r2, [r3, #0]
						pos_f = Place_Point_Y[position_index];
 8002a08:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <main+0x90c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <main+0x924>)
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <main+0x914>)
 8002a16:	601a      	str	r2, [r3, #0]
						x_axis_Target_Position= (int16_t)Place_Point_X[position_index];
 8002a18:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <main+0x90c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <main+0x928>)
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2a:	ee17 3a90 	vmov	r3, s15
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <main+0x8fc>)
 8002a34:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
						x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <main+0x8fc>)
 8002a3e:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
						State_Control = TRAJECTGEN;
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <main+0x908>)
 8002a44:	2300      	movs	r3, #0
 8002a46:	7013      	strb	r3, [r2, #0]
						State_RUNTRAYMODE = GOPLACE;
 8002a48:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <main+0x904>)
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	7013      	strb	r3, [r2, #0]
					break;
 8002a4e:	bf00      	nop
				break;
 8002a50:	e106      	b.n	8002c60 <main+0xa28>
				y_axis_Moving_Status = yaxisMovingStatusData.GoPlace;
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4a37      	ldr	r2, [pc, #220]	; (8002b34 <main+0x8fc>)
 8002a58:	8413      	strh	r3, [r2, #32]
				switch (State_Control) {
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <main+0x908>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <main+0x830>
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d01c      	beq.n	8002aa0 <main+0x868>
				break;
 8002a66:	e0fa      	b.n	8002c5e <main+0xa26>
					Trajectory_Gen(pos_i, pos_f, Max_Velocity, Max_Acceleration);
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <main+0x8f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <main+0x914>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd10 	bl	80004a0 <__aeabi_f2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 8002af8 <main+0x8c0>
 8002a88:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8002b00 <main+0x8c8>
 8002a8c:	ec43 2b11 	vmov	d1, r2, r3
 8002a90:	ec45 4b10 	vmov	d0, r4, r5
 8002a94:	f000 ff6c 	bl	8003970 <Trajectory_Gen>
					State_Control = TRAJECTEVA_PID;
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <main+0x908>)
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	7013      	strb	r3, [r2, #0]
					break;
 8002a9e:	e0de      	b.n	8002c5e <main+0xa26>
					if (GetTicku >= timestamp_traject) {
 8002aa0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <main+0x918>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	4290      	cmp	r0, r2
 8002aac:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ab0:	d358      	bcc.n	8002b64 <main+0x92c>
						timestamp_traject = GetTicku + traject_us;
 8002ab2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <main+0x91c>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	1884      	adds	r4, r0, r2
 8002abe:	603c      	str	r4, [r7, #0]
 8002ac0:	eb41 0303 	adc.w	r3, r1, r3
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <main+0x918>)
 8002ac8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002acc:	e9c3 1200 	strd	r1, r2, [r3]
						Trajectory_Eva();
 8002ad0:	f001 f8a2 	bl	8003c18 <Trajectory_Eva>
						read_pos();
 8002ad4:	f7fe f9be 	bl	8000e54 <read_pos>
						PID(x);
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <main+0x920>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fd ffe5 	bl	8000ab0 <__aeabi_d2f>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	ee00 3a10 	vmov	s0, r3
 8002aec:	f000 fda4 	bl	8003638 <PID>
					break;
 8002af0:	e0b4      	b.n	8002c5c <main+0xa24>
 8002af2:	bf00      	nop
 8002af4:	f3af 8000 	nop.w
 8002af8:	00000000 	.word	0x00000000
 8002afc:	40b04100 	.word	0x40b04100
 8002b00:	00000000 	.word	0x00000000
 8002b04:	408d8800 	.word	0x408d8800
 8002b08:	9999999a 	.word	0x9999999a
 8002b0c:	3fc99999 	.word	0x3fc99999
 8002b10:	9999999a 	.word	0x9999999a
 8002b14:	bfc99999 	.word	0xbfc99999
 8002b18:	2000044c 	.word	0x2000044c
 8002b1c:	20000944 	.word	0x20000944
 8002b20:	20000940 	.word	0x20000940
 8002b24:	20000930 	.word	0x20000930
 8002b28:	20000938 	.word	0x20000938
 8002b2c:	20000fd0 	.word	0x20000fd0
 8002b30:	20000918 	.word	0x20000918
 8002b34:	20000e28 	.word	0x20000e28
 8002b38:	20000270 	.word	0x20000270
 8002b3c:	20001068 	.word	0x20001068
 8002b40:	20001069 	.word	0x20001069
 8002b44:	20001064 	.word	0x20001064
 8002b48:	20000fd4 	.word	0x20000fd4
 8002b4c:	2000091c 	.word	0x2000091c
 8002b50:	20001090 	.word	0x20001090
 8002b54:	20000238 	.word	0x20000238
 8002b58:	20000928 	.word	0x20000928
 8002b5c:	2000101c 	.word	0x2000101c
 8002b60:	20001040 	.word	0x20001040
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 8002b64:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <main+0xb48>)
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <main+0xb4c>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	ee17 0a90 	vmov	r0, s15
 8002b78:	f7fd fc92 	bl	80004a0 <__aeabi_f2d>
 8002b7c:	a37c      	add	r3, pc, #496	; (adr r3, 8002d70 <main+0xb38>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd ff61 	bl	8000a48 <__aeabi_dcmple>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d100      	bne.n	8002b8e <main+0x956>
					break;
 8002b8c:	e066      	b.n	8002c5c <main+0xa24>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 8002b8e:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <main+0xb48>)
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <main+0xb4c>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	ee17 0a90 	vmov	r0, s15
 8002ba2:	f7fd fc7d 	bl	80004a0 <__aeabi_f2d>
 8002ba6:	a374      	add	r3, pc, #464	; (adr r3, 8002d78 <main+0xb40>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd ff56 	bl	8000a5c <__aeabi_dcmpge>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d100      	bne.n	8002bb8 <main+0x980>
					break;
 8002bb6:	e051      	b.n	8002c5c <main+0xa24>
					} else if (pos_f - PosY <= Boundary && pos_f - PosY >= -Boundary && x_axis_Moving_Status == 0) {
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <main+0xb50>)
 8002bba:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14c      	bne.n	8002c5c <main+0xa24>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <main+0xb54>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	6353      	str	r3, [r2, #52]	; 0x34
						Intregral = 0;
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <main+0xb58>)
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	6013      	str	r3, [r2, #0]
						Dutyfeedback = 0;
 8002bd2:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <main+0xb5c>)
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	6013      	str	r3, [r2, #0]
						v = 0;
 8002bda:	496f      	ldr	r1, [pc, #444]	; (8002d98 <main+0xb60>)
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9c1 2300 	strd	r2, r3, [r1]
						a = 0;
 8002be8:	496c      	ldr	r1, [pc, #432]	; (8002d9c <main+0xb64>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_Delay(2200);
 8002bf6:	f640 0098 	movw	r0, #2200	; 0x898
 8002bfa:	f001 ff45 	bl	8004a88 <HAL_Delay>
						pos_i = PosY;
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <main+0xb4c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <main+0xb68>)
 8002c04:	601a      	str	r2, [r3, #0]
						if(position_index < 8) {
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <main+0xb6c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	dc20      	bgt.n	8002c50 <main+0xa18>
							position_index++;
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <main+0xb6c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <main+0xb6c>)
 8002c16:	601a      	str	r2, [r3, #0]
							x_axis_Target_Position = (int16_t)Pick_Point_X[position_index];
 8002c18:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <main+0xb6c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a62      	ldr	r2, [pc, #392]	; (8002da8 <main+0xb70>)
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2a:	ee17 3a90 	vmov	r3, s15
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <main+0xb50>)
 8002c34:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
							x_axis_Moving_Status = xaxisMovingStatusData.Run;
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <main+0xb50>)
 8002c3e:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
							State_Control = TRAJECTGEN;
 8002c42:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <main+0xb74>)
 8002c44:	2300      	movs	r3, #0
 8002c46:	7013      	strb	r3, [r2, #0]
							State_RUNTRAYMODE = GOPICK;
 8002c48:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <main+0xb78>)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	7013      	strb	r3, [r2, #0]
					break;
 8002c4e:	e005      	b.n	8002c5c <main+0xa24>
							y_axis_Moving_Status = 0;
 8002c50:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <main+0xb50>)
 8002c52:	2300      	movs	r3, #0
 8002c54:	8413      	strh	r3, [r2, #32]
							State = IDLE;
 8002c56:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <main+0xb7c>)
 8002c58:	2302      	movs	r3, #2
 8002c5a:	7013      	strb	r3, [r2, #0]
					break;
 8002c5c:	bf00      	nop
				break;
 8002c5e:	bf00      	nop
			break;
 8002c60:	e07c      	b.n	8002d5c <main+0xb24>

			case EMERGENCY_LIMIT:
			state_IT = 1;
 8002c62:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <main+0xb80>)
 8002c64:	2301      	movs	r3, #1
 8002c66:	7013      	strb	r3, [r2, #0]
			break;
 8002c68:	e078      	b.n	8002d5c <main+0xb24>

			case SENSOR_CHECK:
			read_pos();
 8002c6a:	f7fe f8f3 	bl	8000e54 <read_pos>
			GPIO_test.photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,Photoelectric_sensor_1_Pin);
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	4852      	ldr	r0, [pc, #328]	; (8002dbc <main+0xb84>)
 8002c72:	f002 fdd1 	bl	8005818 <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <main+0xb88>)
 8002c7c:	601a      	str	r2, [r3, #0]
			GPIO_test.photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,Photoelectric_sensor_2_Pin);
 8002c7e:	2104      	movs	r1, #4
 8002c80:	4850      	ldr	r0, [pc, #320]	; (8002dc4 <main+0xb8c>)
 8002c82:	f002 fdc9 	bl	8005818 <HAL_GPIO_ReadPin>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <main+0xb88>)
 8002c8c:	605a      	str	r2, [r3, #4]
			GPIO_test.photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,Photoelectric_sensor_3_Pin);
 8002c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c92:	484c      	ldr	r0, [pc, #304]	; (8002dc4 <main+0xb8c>)
 8002c94:	f002 fdc0 	bl	8005818 <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <main+0xb88>)
 8002c9e:	609a      	str	r2, [r3, #8]
			GPIO_test.emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port,Emergency_Pin);
 8002ca0:	2108      	movs	r1, #8
 8002ca2:	4846      	ldr	r0, [pc, #280]	; (8002dbc <main+0xb84>)
 8002ca4:	f002 fdb8 	bl	8005818 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <main+0xb88>)
 8002cae:	60da      	str	r2, [r3, #12]

			if (GPIO_test.ramp == 1) {
 8002cb0:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <main+0xb88>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10f      	bne.n	8002cd8 <main+0xaa0>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	4842      	ldr	r0, [pc, #264]	; (8002dc8 <main+0xb90>)
 8002cbe:	f002 fdc3 	bl	8005848 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	4840      	ldr	r0, [pc, #256]	; (8002dc8 <main+0xb90>)
 8002cc8:	f002 fdbe 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2120      	movs	r1, #32
 8002cd0:	483d      	ldr	r0, [pc, #244]	; (8002dc8 <main+0xb90>)
 8002cd2:	f002 fdb9 	bl	8005848 <HAL_GPIO_WritePin>
 8002cd6:	e036      	b.n	8002d46 <main+0xb0e>
						RESET);
			} else if (GPIO_test.ramp == 2) {
 8002cd8:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <main+0xb88>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d10f      	bne.n	8002d00 <main+0xac8>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	4838      	ldr	r0, [pc, #224]	; (8002dc8 <main+0xb90>)
 8002ce6:	f002 fdaf 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002cea:	2201      	movs	r2, #1
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	4836      	ldr	r0, [pc, #216]	; (8002dc8 <main+0xb90>)
 8002cf0:	f002 fdaa 	bl	8005848 <HAL_GPIO_WritePin>
						SET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	4833      	ldr	r0, [pc, #204]	; (8002dc8 <main+0xb90>)
 8002cfa:	f002 fda5 	bl	8005848 <HAL_GPIO_WritePin>
 8002cfe:	e022      	b.n	8002d46 <main+0xb0e>
						RESET);
			} else if (GPIO_test.ramp == 3) {
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <main+0xb88>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d10f      	bne.n	8002d28 <main+0xaf0>
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	482e      	ldr	r0, [pc, #184]	; (8002dc8 <main+0xb90>)
 8002d0e:	f002 fd9b 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002d12:	2200      	movs	r2, #0
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	482c      	ldr	r0, [pc, #176]	; (8002dc8 <main+0xb90>)
 8002d18:	f002 fd96 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2120      	movs	r1, #32
 8002d20:	4829      	ldr	r0, [pc, #164]	; (8002dc8 <main+0xb90>)
 8002d22:	f002 fd91 	bl	8005848 <HAL_GPIO_WritePin>
 8002d26:	e00e      	b.n	8002d46 <main+0xb0e>
						SET);
			} else {
				HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	4826      	ldr	r0, [pc, #152]	; (8002dc8 <main+0xb90>)
 8002d2e:	f002 fd8b 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_2_GPIO_Port, Switch_Relay_2_Pin,
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	4824      	ldr	r0, [pc, #144]	; (8002dc8 <main+0xb90>)
 8002d38:	f002 fd86 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
				HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2120      	movs	r1, #32
 8002d40:	4821      	ldr	r0, [pc, #132]	; (8002dc8 <main+0xb90>)
 8002d42:	f002 fd81 	bl	8005848 <HAL_GPIO_WritePin>
						RESET);
			}
			if(go_next == 1 ) {
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <main+0xb94>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <main+0xb22>
				State = INIT;
 8002d4e:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <main+0xb7c>)
 8002d50:	2300      	movs	r3, #0
 8002d52:	7013      	strb	r3, [r2, #0]
			}

			break;
 8002d54:	e001      	b.n	8002d5a <main+0xb22>
			break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <main+0xb24>
			break;
 8002d5a:	bf00      	nop
		}

		if (Re == 1) {
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <main+0xb98>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f47f ab34 	bne.w	80023ce <main+0x196>
			NVIC_SystemReset();
 8002d66:	f7ff fa51 	bl	800220c <__NVIC_SystemReset>
 8002d6a:	bf00      	nop
 8002d6c:	f3af 8000 	nop.w
 8002d70:	9999999a 	.word	0x9999999a
 8002d74:	3fc99999 	.word	0x3fc99999
 8002d78:	9999999a 	.word	0x9999999a
 8002d7c:	bfc99999 	.word	0xbfc99999
 8002d80:	2000091c 	.word	0x2000091c
 8002d84:	20000fd0 	.word	0x20000fd0
 8002d88:	20000e28 	.word	0x20000e28
 8002d8c:	2000044c 	.word	0x2000044c
 8002d90:	20000944 	.word	0x20000944
 8002d94:	20000940 	.word	0x20000940
 8002d98:	20000930 	.word	0x20000930
 8002d9c:	20000938 	.word	0x20000938
 8002da0:	20000918 	.word	0x20000918
 8002da4:	20001064 	.word	0x20001064
 8002da8:	20000ff8 	.word	0x20000ff8
 8002dac:	20001069 	.word	0x20001069
 8002db0:	20001068 	.word	0x20001068
 8002db4:	20000270 	.word	0x20000270
 8002db8:	20000920 	.word	0x20000920
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	20000fb8 	.word	0x20000fb8
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	20000921 	.word	0x20000921
 8002dd0:	20000922 	.word	0x20000922

08002dd4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b094      	sub	sp, #80	; 0x50
 8002dd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	2230      	movs	r2, #48	; 0x30
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f007 fcb0 	bl	800a748 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <SystemClock_Config+0xc8>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <SystemClock_Config+0xc8>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <SystemClock_Config+0xc8>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002e44:	2304      	movs	r3, #4
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002e48:	2364      	movs	r3, #100	; 0x64
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e50:	2304      	movs	r3, #4
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e54:	f107 0320 	add.w	r3, r7, #32
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fcbd 	bl	80067d8 <HAL_RCC_OscConfig>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <SystemClock_Config+0x94>
		Error_Handler();
 8002e64:	f000 fbe2 	bl	800362c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e68:	230f      	movs	r3, #15
 8002e6a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e78:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	2103      	movs	r1, #3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 ff1f 	bl	8006cc8 <HAL_RCC_ClockConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <SystemClock_Config+0xc0>
		Error_Handler();
 8002e90:	f000 fbcc 	bl	800362c <Error_Handler>
	}
}
 8002e94:	bf00      	nop
 8002e96:	3750      	adds	r7, #80	; 0x50
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <MX_I2C2_Init+0x54>)
 8002eac:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <MX_I2C2_Init+0x58>)
 8002eb2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ec6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <MX_I2C2_Init+0x50>)
 8002ee2:	f002 fce3 	bl	80058ac <HAL_I2C_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002eec:	f000 fb9e 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200003a0 	.word	0x200003a0
 8002ef8:	40005800 	.word	0x40005800
 8002efc:	000186a0 	.word	0x000186a0

08002f00 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002f04:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <MX_SPI3_Init+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f10:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f20:	2202      	movs	r2, #2
 8002f22:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f30:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f34:	2238      	movs	r2, #56	; 0x38
 8002f36:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <MX_SPI3_Init+0x64>)
 8002f52:	f004 f8d9 	bl	8007108 <HAL_SPI_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_SPI3_Init+0x60>
		Error_Handler();
 8002f5c:	f000 fb66 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200003f4 	.word	0x200003f4
 8002f68:	40003c00 	.word	0x40003c00

08002f6c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b096      	sub	sp, #88	; 0x58
 8002f70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	611a      	str	r2, [r3, #16]
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f007 fbcf 	bl	800a748 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fac:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <MX_TIM1_Init+0x13c>)
 8002fae:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002fb0:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002fca:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002fd6:	4833      	ldr	r0, [pc, #204]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002fd8:	f004 fb8c 	bl	80076f4 <HAL_TIM_Base_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002fe2:	f000 fb23 	bl	800362c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002fec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	482c      	ldr	r0, [pc, #176]	; (80030a4 <MX_TIM1_Init+0x138>)
 8002ff4:	f005 fa68 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM1_Init+0x96>
		Error_Handler();
 8002ffe:	f000 fb15 	bl	800362c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003002:	4828      	ldr	r0, [pc, #160]	; (80030a4 <MX_TIM1_Init+0x138>)
 8003004:	f004 fcf4 	bl	80079f0 <HAL_TIM_PWM_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800300e:	f000 fb0d 	bl	800362c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800301a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800301e:	4619      	mov	r1, r3
 8003020:	4820      	ldr	r0, [pc, #128]	; (80030a4 <MX_TIM1_Init+0x138>)
 8003022:	f005 ffe1 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800302c:	f000 fafe 	bl	800362c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003030:	2360      	movs	r3, #96	; 0x60
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800303c:	2300      	movs	r3, #0
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	2200      	movs	r2, #0
 8003052:	4619      	mov	r1, r3
 8003054:	4813      	ldr	r0, [pc, #76]	; (80030a4 <MX_TIM1_Init+0x138>)
 8003056:	f005 f975 	bl	8008344 <HAL_TIM_PWM_ConfigChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8003060:	f000 fae4 	bl	800362c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800307c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4807      	ldr	r0, [pc, #28]	; (80030a4 <MX_TIM1_Init+0x138>)
 8003088:	f006 f81c 	bl	80090c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8003092:	f000 facb 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <MX_TIM1_Init+0x138>)
 8003098:	f001 fad6 	bl	8004648 <HAL_TIM_MspPostInit>

}
 800309c:	bf00      	nop
 800309e:	3758      	adds	r7, #88	; 0x58
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000044c 	.word	0x2000044c
 80030a8:	40010000 	.word	0x40010000

080030ac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f007 fb44 	bl	800a748 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030de:	f04f 32ff 	mov.w	r2, #4294967295
 80030e2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <MX_TIM2_Init+0xa4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030f0:	2303      	movs	r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030f8:	2301      	movs	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8003100:	230f      	movs	r3, #15
 8003102:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800310c:	2300      	movs	r3, #0
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8003110:	230f      	movs	r3, #15
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	4619      	mov	r1, r3
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <MX_TIM2_Init+0xa4>)
 800311c:	f004 fe4c 	bl	8007db8 <HAL_TIM_Encoder_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8003126:	f000 fa81 	bl	800362c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4806      	ldr	r0, [pc, #24]	; (8003150 <MX_TIM2_Init+0xa4>)
 8003138:	f005 ff56 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003142:	f000 fa73 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003146:	bf00      	nop
 8003148:	3730      	adds	r7, #48	; 0x30
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000500 	.word	0x20000500

08003154 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003168:	463b      	mov	r3, r7
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <MX_TIM3_Init+0x94>)
 8003172:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <MX_TIM3_Init+0x98>)
 8003174:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <MX_TIM3_Init+0x94>)
 8003178:	2263      	movs	r2, #99	; 0x63
 800317a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <MX_TIM3_Init+0x94>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <MX_TIM3_Init+0x94>)
 8003184:	f242 720f 	movw	r2, #9999	; 0x270f
 8003188:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <MX_TIM3_Init+0x94>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <MX_TIM3_Init+0x94>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003196:	4814      	ldr	r0, [pc, #80]	; (80031e8 <MX_TIM3_Init+0x94>)
 8003198:	f004 faac 	bl	80076f4 <HAL_TIM_Base_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80031a2:	f000 fa43 	bl	800362c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	4619      	mov	r1, r3
 80031b2:	480d      	ldr	r0, [pc, #52]	; (80031e8 <MX_TIM3_Init+0x94>)
 80031b4:	f005 f988 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80031be:	f000 fa35 	bl	800362c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80031ca:	463b      	mov	r3, r7
 80031cc:	4619      	mov	r1, r3
 80031ce:	4806      	ldr	r0, [pc, #24]	; (80031e8 <MX_TIM3_Init+0x94>)
 80031d0:	f005 ff0a 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80031da:	f000 fa27 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80031de:	bf00      	nop
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200005b4 	.word	0x200005b4
 80031ec:	40000400 	.word	0x40000400

080031f0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003204:	463b      	mov	r3, r7
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <MX_TIM5_Init+0x94>)
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <MX_TIM5_Init+0x98>)
 8003210:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <MX_TIM5_Init+0x94>)
 8003214:	2263      	movs	r2, #99	; 0x63
 8003216:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <MX_TIM5_Init+0x94>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <MX_TIM5_Init+0x94>)
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_TIM5_Init+0x94>)
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <MX_TIM5_Init+0x94>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003232:	4814      	ldr	r0, [pc, #80]	; (8003284 <MX_TIM5_Init+0x94>)
 8003234:	f004 fa5e 	bl	80076f4 <HAL_TIM_Base_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM5_Init+0x52>
		Error_Handler();
 800323e:	f000 f9f5 	bl	800362c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003246:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4619      	mov	r1, r3
 800324e:	480d      	ldr	r0, [pc, #52]	; (8003284 <MX_TIM5_Init+0x94>)
 8003250:	f005 f93a 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM5_Init+0x6e>
		Error_Handler();
 800325a:	f000 f9e7 	bl	800362c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003266:	463b      	mov	r3, r7
 8003268:	4619      	mov	r1, r3
 800326a:	4806      	ldr	r0, [pc, #24]	; (8003284 <MX_TIM5_Init+0x94>)
 800326c:	f005 febc 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8003276:	f000 f9d9 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000668 	.word	0x20000668
 8003288:	40000c00 	.word	0x40000c00

0800328c <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	615a      	str	r2, [r3, #20]
 80032a2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <MX_TIM11_Init+0xa0>)
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <MX_TIM11_Init+0xa4>)
 80032a8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <MX_TIM11_Init+0xa0>)
 80032ac:	2263      	movs	r2, #99	; 0x63
 80032ae:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <MX_TIM11_Init+0xa0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <MX_TIM11_Init+0xa0>)
 80032b8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80032bc:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <MX_TIM11_Init+0xa0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <MX_TIM11_Init+0xa0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 80032ca:	4818      	ldr	r0, [pc, #96]	; (800332c <MX_TIM11_Init+0xa0>)
 80032cc:	f004 fa12 	bl	80076f4 <HAL_TIM_Base_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM11_Init+0x4e>
		Error_Handler();
 80032d6:	f000 f9a9 	bl	800362c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 80032da:	4814      	ldr	r0, [pc, #80]	; (800332c <MX_TIM11_Init+0xa0>)
 80032dc:	f004 fb22 	bl	8007924 <HAL_TIM_OC_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM11_Init+0x5e>
		Error_Handler();
 80032e6:	f000 f9a1 	bl	800362c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 80032ea:	2108      	movs	r1, #8
 80032ec:	480f      	ldr	r0, [pc, #60]	; (800332c <MX_TIM11_Init+0xa0>)
 80032ee:	f004 fc95 	bl	8007c1c <HAL_TIM_OnePulse_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM11_Init+0x70>
		Error_Handler();
 80032f8:	f000 f998 	bl	800362c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80032fc:	2310      	movs	r3, #16
 80032fe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8003300:	f240 5399 	movw	r3, #1433	; 0x599
 8003304:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	2200      	movs	r2, #0
 8003312:	4619      	mov	r1, r3
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <MX_TIM11_Init+0xa0>)
 8003316:	f004 ffb9 	bl	800828c <HAL_TIM_OC_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003320:	f000 f984 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	2000071c 	.word	0x2000071c
 8003330:	40014800 	.word	0x40014800

08003334 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <MX_USART2_UART_Init+0x50>)
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <MX_USART2_UART_Init+0x54>)
 800333c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003340:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003344:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800334c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800335a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <MX_USART2_UART_Init+0x50>)
 800335e:	220c      	movs	r2, #12
 8003360:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <MX_USART2_UART_Init+0x50>)
 800336a:	2200      	movs	r2, #0
 800336c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_USART2_UART_Init+0x50>)
 8003370:	f005 ff18 	bl	80091a4 <HAL_UART_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 800337a:	f000 f957 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200007d0 	.word	0x200007d0
 8003388:	40004400 	.word	0x40004400

0800338c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <MX_USART6_UART_Init+0x50>)
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <MX_USART6_UART_Init+0x54>)
 8003394:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <MX_USART6_UART_Init+0x50>)
 8003398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800339c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033a4:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033b6:	220c      	movs	r2, #12
 80033b8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_USART6_UART_Init+0x50>)
 80033c8:	f005 feec 	bl	80091a4 <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 80033d2:	f000 f92b 	bl	800362c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000844 	.word	0x20000844
 80033e0:	40011400 	.word	0x40011400

080033e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_DMA_Init+0x3c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <MX_DMA_Init+0x3c>)
 80033f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_DMA_Init+0x3c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2100      	movs	r1, #0
 800340a:	2011      	movs	r0, #17
 800340c:	f001 fc3b 	bl	8004c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003410:	2011      	movs	r0, #17
 8003412:	f001 fc54 	bl	8004cbe <HAL_NVIC_EnableIRQ>

}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <MX_GPIO_Init+0x174>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a55      	ldr	r2, [pc, #340]	; (8003598 <MX_GPIO_Init+0x174>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b53      	ldr	r3, [pc, #332]	; (8003598 <MX_GPIO_Init+0x174>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <MX_GPIO_Init+0x174>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <MX_GPIO_Init+0x174>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <MX_GPIO_Init+0x174>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b48      	ldr	r3, [pc, #288]	; (8003598 <MX_GPIO_Init+0x174>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a47      	ldr	r2, [pc, #284]	; (8003598 <MX_GPIO_Init+0x174>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b45      	ldr	r3, [pc, #276]	; (8003598 <MX_GPIO_Init+0x174>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <MX_GPIO_Init+0x174>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <MX_GPIO_Init+0x174>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <MX_GPIO_Init+0x174>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <MX_GPIO_Init+0x174>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a39      	ldr	r2, [pc, #228]	; (8003598 <MX_GPIO_Init+0x174>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <MX_GPIO_Init+0x174>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80034cc:	4833      	ldr	r0, [pc, #204]	; (800359c <MX_GPIO_Init+0x178>)
 80034ce:	f002 f9bb 	bl	8005848 <HAL_GPIO_WritePin>
	Switch_Relay_3_Pin | Switch_Relay_1_Pin | Switch_Relay_2_Pin | DIR_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 80034d2:	2200      	movs	r2, #0
 80034d4:	2104      	movs	r1, #4
 80034d6:	4832      	ldr	r0, [pc, #200]	; (80035a0 <MX_GPIO_Init+0x17c>)
 80034d8:	f002 f9b6 	bl	8005848 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_1_Pin;
 80034dc:	f242 0348 	movw	r3, #8264	; 0x2048
 80034e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4619      	mov	r1, r3
 80034f2:	482c      	ldr	r0, [pc, #176]	; (80035a4 <MX_GPIO_Init+0x180>)
 80034f4:	f002 f80c 	bl	8005510 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_3_Pin Switch_Relay_1_Pin Switch_Relay_2_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_3_Pin | Switch_Relay_1_Pin
 80034f8:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 80034fc:	617b      	str	r3, [r7, #20]
			| Switch_Relay_2_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fe:	2301      	movs	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4822      	ldr	r0, [pc, #136]	; (800359c <MX_GPIO_Init+0x178>)
 8003512:	f001 fffd 	bl	8005510 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 8003516:	f44f 7382 	mov.w	r3, #260	; 0x104
 800351a:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800351c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003520:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	481e      	ldr	r0, [pc, #120]	; (80035a8 <MX_GPIO_Init+0x184>)
 800352e:	f001 ffef 	bl	8005510 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 8003532:	2304      	movs	r3, #4
 8003534:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	4815      	ldr	r0, [pc, #84]	; (80035a0 <MX_GPIO_Init+0x17c>)
 800354a:	f001 ffe1 	bl	8005510 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	2008      	movs	r0, #8
 8003554:	f001 fb97 	bl	8004c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003558:	2008      	movs	r0, #8
 800355a:	f001 fbb0 	bl	8004cbe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	2009      	movs	r0, #9
 8003564:	f001 fb8f 	bl	8004c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003568:	2009      	movs	r0, #9
 800356a:	f001 fba8 	bl	8004cbe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	2017      	movs	r0, #23
 8003574:	f001 fb87 	bl	8004c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003578:	2017      	movs	r0, #23
 800357a:	f001 fba0 	bl	8004cbe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	2028      	movs	r0, #40	; 0x28
 8003584:	f001 fb7f 	bl	8004c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003588:	2028      	movs	r0, #40	; 0x28
 800358a:	f001 fb98 	bl	8004cbe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800358e:	bf00      	nop
 8003590:	3728      	adds	r7, #40	; 0x28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020c00 	.word	0x40020c00
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020400 	.word	0x40020400

080035ac <HAL_GPIO_EXTI_Callback>:
		motor(0, 1);
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <micros>:

uint64_t micros() {
 80035c4:	b4b0      	push	{r4, r5, r7}
 80035c6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <micros+0x2c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2200      	movs	r2, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	4611      	mov	r1, r2
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <micros+0x30>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	1884      	adds	r4, r0, r2
 80035dc:	eb41 0503 	adc.w	r5, r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	462b      	mov	r3, r5
}
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bcb0      	pop	{r4, r5, r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000668 	.word	0x20000668
 80035f4:	20000948 	.word	0x20000948

080035f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035f8:	b4b0      	push	{r4, r5, r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	1e54      	subs	r4, r2, #1
 8003610:	f143 0500 	adc.w	r5, r3, #0
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003616:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bcb0      	pop	{r4, r5, r7}
 8003622:	4770      	bx	lr
 8003624:	20000668 	.word	0x20000668
 8003628:	20000948 	.word	0x20000948

0800362c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003630:	b672      	cpsid	i
}
 8003632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003634:	e7fe      	b.n	8003634 <Error_Handler+0x8>
	...

08003638 <PID>:
	RUNPOINTMODE,
	EMERGENCY_LIMIT,
	SENSOR_CHECK,
} State ;

void PID(float setposition) {
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8003642:	4bb5      	ldr	r3, [pc, #724]	; (8003918 <PID+0x2e0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4ab5      	ldr	r2, [pc, #724]	; (800391c <PID+0x2e4>)
 8003648:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 800364a:	4bb4      	ldr	r3, [pc, #720]	; (800391c <PID+0x2e4>)
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4bb3      	ldr	r3, [pc, #716]	; (8003920 <PID+0x2e8>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	ee17 0a90 	vmov	r0, s15
 800365e:	f7fc ff1f 	bl	80004a0 <__aeabi_f2d>
 8003662:	4604      	mov	r4, r0
 8003664:	460d      	mov	r5, r1
 8003666:	4baf      	ldr	r3, [pc, #700]	; (8003924 <PID+0x2ec>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fc ff38 	bl	80004e4 <__aeabi_ul2d>
 8003674:	a3a2      	add	r3, pc, #648	; (adr r3, 8003900 <PID+0x2c8>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fd f893 	bl	80007a4 <__aeabi_ddiv>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4620      	mov	r0, r4
 8003684:	4629      	mov	r1, r5
 8003686:	f7fd f88d 	bl	80007a4 <__aeabi_ddiv>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fa0d 	bl	8000ab0 <__aeabi_d2f>
 8003696:	4603      	mov	r3, r0
 8003698:	4aa3      	ldr	r2, [pc, #652]	; (8003928 <PID+0x2f0>)
 800369a:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 800369c:	4b9f      	ldr	r3, [pc, #636]	; (800391c <PID+0x2e4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a9f      	ldr	r2, [pc, #636]	; (8003920 <PID+0x2e8>)
 80036a2:	6013      	str	r3, [r2, #0]

	if (pos_f < -350) {
 80036a4:	4ba1      	ldr	r3, [pc, #644]	; (800392c <PID+0x2f4>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003930 <PID+0x2f8>
 80036ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	d503      	bpl.n	80036c0 <PID+0x88>
		pos_f = -350;
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <PID+0x2f4>)
 80036ba:	4a9e      	ldr	r2, [pc, #632]	; (8003934 <PID+0x2fc>)
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00c      	b.n	80036da <PID+0xa2>
	} else if (pos_f > 350) {
 80036c0:	4b9a      	ldr	r3, [pc, #616]	; (800392c <PID+0x2f4>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003938 <PID+0x300>
 80036ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d2:	dd02      	ble.n	80036da <PID+0xa2>
		pos_f = 350;
 80036d4:	4b95      	ldr	r3, [pc, #596]	; (800392c <PID+0x2f4>)
 80036d6:	4a99      	ldr	r2, [pc, #612]	; (800393c <PID+0x304>)
 80036d8:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <PID+0x2e0>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80036e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e8:	4b95      	ldr	r3, [pc, #596]	; (8003940 <PID+0x308>)
 80036ea:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 80036ee:	4b95      	ldr	r3, [pc, #596]	; (8003944 <PID+0x30c>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003948 <PID+0x310>
 80036f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	bfac      	ite	ge
 8003702:	2301      	movge	r3, #1
 8003704:	2300      	movlt	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13f      	bne.n	8003792 <PID+0x15a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003712:	4b8b      	ldr	r3, [pc, #556]	; (8003940 <PID+0x308>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	bfac      	ite	ge
 8003722:	2301      	movge	r3, #1
 8003724:	2300      	movlt	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <PID+0x11a>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8003732:	4b86      	ldr	r3, [pc, #536]	; (800394c <PID+0x314>)
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	bfac      	ite	ge
 8003742:	2301      	movge	r3, #1
 8003744:	2300      	movlt	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f083 0301 	eor.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <PID+0x170>
 8003752:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <PID+0x308>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	bf4c      	ite	mi
 8003762:	2301      	movmi	r3, #1
 8003764:	2300      	movpl	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <PID+0x15a>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <PID+0x314>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	bf4c      	ite	mi
 8003782:	2301      	movmi	r3, #1
 8003784:	2300      	movpl	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <PID+0x170>
		Intregral = Intregral + Error;
 8003792:	4b6e      	ldr	r3, [pc, #440]	; (800394c <PID+0x314>)
 8003794:	ed93 7a00 	vldr	s14, [r3]
 8003798:	4b69      	ldr	r3, [pc, #420]	; (8003940 <PID+0x308>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <PID+0x314>)
 80037a4:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <PID+0x318>)
 80037aa:	ed93 7a00 	vldr	s14, [r3]
 80037ae:	4b64      	ldr	r3, [pc, #400]	; (8003940 <PID+0x308>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b8:	4b61      	ldr	r3, [pc, #388]	; (8003940 <PID+0x308>)
 80037ba:	edd3 6a00 	vldr	s13, [r3]
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <PID+0x31c>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <PID+0x320>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80037d2:	4b62      	ldr	r3, [pc, #392]	; (800395c <PID+0x324>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <PID+0x314>)
 80037e2:	edd3 6a00 	vldr	s13, [r3]
 80037e6:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <PID+0x328>)
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f0:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <PID+0x30c>)
 80037f6:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 80037fa:	4b52      	ldr	r3, [pc, #328]	; (8003944 <PID+0x30c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fe4e 	bl	80004a0 <__aeabi_f2d>
 8003804:	a340      	add	r3, pc, #256	; (adr r3, 8003908 <PID+0x2d0>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fd f927 	bl	8000a5c <__aeabi_dcmpge>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <PID+0x1e4>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <PID+0x30c>)
 8003816:	4a53      	ldr	r2, [pc, #332]	; (8003964 <PID+0x32c>)
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e00f      	b.n	800383c <PID+0x204>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 800381c:	4b49      	ldr	r3, [pc, #292]	; (8003944 <PID+0x30c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fe3d 	bl	80004a0 <__aeabi_f2d>
 8003826:	a33a      	add	r3, pc, #232	; (adr r3, 8003910 <PID+0x2d8>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fd f90c 	bl	8000a48 <__aeabi_dcmple>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <PID+0x204>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <PID+0x30c>)
 8003838:	4a4b      	ldr	r2, [pc, #300]	; (8003968 <PID+0x330>)
 800383a:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 800383c:	4b41      	ldr	r3, [pc, #260]	; (8003944 <PID+0x30c>)
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d503      	bpl.n	8003854 <PID+0x21c>
		dir = -1;
 800384c:	4b47      	ldr	r3, [pc, #284]	; (800396c <PID+0x334>)
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e00a      	b.n	800386a <PID+0x232>
	} else if (Dutyfeedback > 0) {
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <PID+0x30c>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	dd02      	ble.n	800386a <PID+0x232>
		dir = 1;
 8003864:	4b41      	ldr	r3, [pc, #260]	; (800396c <PID+0x334>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 800386a:	4b35      	ldr	r3, [pc, #212]	; (8003940 <PID+0x308>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	dd0b      	ble.n	8003896 <PID+0x25e>
		Dutyfeedback += 1 * Kp; //230
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <PID+0x30c>)
 8003880:	ed93 7a00 	vldr	s14, [r3]
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <PID+0x318>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <PID+0x30c>)
 8003890:	edc3 7a00 	vstr	s15, [r3]
 8003894:	e014      	b.n	80038c0 <PID+0x288>
	} else if (Error < -1.0) {
 8003896:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <PID+0x308>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80038a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a8:	d50a      	bpl.n	80038c0 <PID+0x288>
		Dutyfeedback -= 1 * Kp;
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <PID+0x30c>)
 80038ac:	ed93 7a00 	vldr	s14, [r3]
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <PID+0x318>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <PID+0x30c>)
 80038bc:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <PID+0x30c>)
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	eef0 7ae7 	vabs.f32	s15, s15
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <PID+0x30c>)
 80038cc:	edc3 7a00 	vstr	s15, [r3]

	motor(Dutyfeedback, dir);
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <PID+0x30c>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <PID+0x334>)
 80038dc:	f993 3000 	ldrsb.w	r3, [r3]
 80038e0:	4619      	mov	r1, r3
 80038e2:	ee17 0a90 	vmov	r0, s15
 80038e6:	f7fd fadb 	bl	8000ea0 <motor>
	Last_Error = Error;
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <PID+0x308>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <PID+0x31c>)
 80038f0:	6013      	str	r3, [r2, #0]
//			State = INIT_HOMING;
//		}

//	}

}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bdb0      	pop	{r4, r5, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	f3af 8000 	nop.w
 8003900:	00000000 	.word	0x00000000
 8003904:	412e8480 	.word	0x412e8480
 8003908:	66666666 	.word	0x66666666
 800390c:	40e66666 	.word	0x40e66666
 8003910:	66666666 	.word	0x66666666
 8003914:	c0e66666 	.word	0xc0e66666
 8003918:	20000fd0 	.word	0x20000fd0
 800391c:	2000109c 	.word	0x2000109c
 8003920:	200010a0 	.word	0x200010a0
 8003924:	20000240 	.word	0x20000240
 8003928:	200010a4 	.word	0x200010a4
 800392c:	2000091c 	.word	0x2000091c
 8003930:	c3af0000 	.word	0xc3af0000
 8003934:	c3af0000 	.word	0xc3af0000
 8003938:	43af0000 	.word	0x43af0000
 800393c:	43af0000 	.word	0x43af0000
 8003940:	200010a8 	.word	0x200010a8
 8003944:	20000940 	.word	0x20000940
 8003948:	47800000 	.word	0x47800000
 800394c:	20000944 	.word	0x20000944
 8003950:	20000274 	.word	0x20000274
 8003954:	200010ac 	.word	0x200010ac
 8003958:	20000280 	.word	0x20000280
 800395c:	2000027c 	.word	0x2000027c
 8003960:	20000278 	.word	0x20000278
 8003964:	47333333 	.word	0x47333333
 8003968:	c7333333 	.word	0xc7333333
 800396c:	20001098 	.word	0x20001098

08003970 <Trajectory_Gen>:

void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8003970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af00      	add	r7, sp, #0
 8003978:	ed87 0b06 	vstr	d0, [r7, #24]
 800397c:	ed87 1b04 	vstr	d1, [r7, #16]
 8003980:	ed87 2b02 	vstr	d2, [r7, #8]
 8003984:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8003988:	4993      	ldr	r1, [pc, #588]	; (8003bd8 <Trajectory_Gen+0x268>)
 800398a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800398e:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 8003992:	4992      	ldr	r1, [pc, #584]	; (8003bdc <Trajectory_Gen+0x26c>)
 8003994:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003998:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 800399c:	4990      	ldr	r1, [pc, #576]	; (8003be0 <Trajectory_Gen+0x270>)
 800399e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a2:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 80039a6:	498f      	ldr	r1, [pc, #572]	; (8003be4 <Trajectory_Gen+0x274>)
 80039a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ac:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 80039b0:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <Trajectory_Gen+0x278>)
 80039b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039b6:	4a8d      	ldr	r2, [pc, #564]	; (8003bec <Trajectory_Gen+0x27c>)
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f7fd f8c8 	bl	8000b50 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fc fd8c 	bl	80004e4 <__aeabi_ul2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4987      	ldr	r1, [pc, #540]	; (8003bf0 <Trajectory_Gen+0x280>)
 80039d2:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <Trajectory_Gen+0x278>)
 80039d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039dc:	4a83      	ldr	r2, [pc, #524]	; (8003bec <Trajectory_Gen+0x27c>)
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f7fd f8b5 	bl	8000b50 <__aeabi_uldivmod>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fc fd79 	bl	80004e4 <__aeabi_ul2d>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	497f      	ldr	r1, [pc, #508]	; (8003bf4 <Trajectory_Gen+0x284>)
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 80039fc:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <Trajectory_Gen+0x278>)
 80039fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a02:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <Trajectory_Gen+0x27c>)
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f7fd f8a2 	bl	8000b50 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fc fd66 	bl	80004e4 <__aeabi_ul2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4976      	ldr	r1, [pc, #472]	; (8003bf8 <Trajectory_Gen+0x288>)
 8003a1e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 8003a22:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <Trajectory_Gen+0x278>)
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	4a70      	ldr	r2, [pc, #448]	; (8003bec <Trajectory_Gen+0x27c>)
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	f7fd f88f 	bl	8000b50 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fc fd53 	bl	80004e4 <__aeabi_ul2d>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	496e      	ldr	r1, [pc, #440]	; (8003bfc <Trajectory_Gen+0x28c>)
 8003a44:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 8003a48:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <Trajectory_Gen+0x26c>)
 8003a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a4e:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <Trajectory_Gen+0x268>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fbc4 	bl	80001e0 <__aeabi_dsub>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <Trajectory_Gen+0x290>)
 8003a64:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8003a68:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <Trajectory_Gen+0x26c>)
 8003a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <Trajectory_Gen+0x268>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbb4 	bl	80001e0 <__aeabi_dsub>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	f7fc fff2 	bl	8000a70 <__aeabi_dcmpgt>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <Trajectory_Gen+0x12a>
		direct = 1;
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <Trajectory_Gen+0x294>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e018      	b.n	8003acc <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <Trajectory_Gen+0x26c>)
 8003a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa0:	4b4d      	ldr	r3, [pc, #308]	; (8003bd8 <Trajectory_Gen+0x268>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f7fc fb9b 	bl	80001e0 <__aeabi_dsub>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	f7fc ffbb 	bl	8000a34 <__aeabi_dcmplt>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <Trajectory_Gen+0x15c>
		direct = -1;
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <Trajectory_Gen+0x294>)
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8003acc:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <Trajectory_Gen+0x270>)
 8003ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad2:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <Trajectory_Gen+0x274>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fe64 	bl	80007a4 <__aeabi_ddiv>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4949      	ldr	r1, [pc, #292]	; (8003c08 <Trajectory_Gen+0x298>)
 8003ae2:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <Trajectory_Gen+0x290>)
 8003ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <Trajectory_Gen+0x274>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fe57 	bl	80007a4 <__aeabi_ddiv>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	ec43 2b17 	vmov	d7, r2, r3
 8003afe:	eeb0 0a47 	vmov.f32	s0, s14
 8003b02:	eef0 0a67 	vmov.f32	s1, s15
 8003b06:	f006 fe27 	bl	800a758 <sqrt>
 8003b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b0e:	eef0 7a60 	vmov.f32	s15, s1
 8003b12:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <Trajectory_Gen+0x29c>)
 8003b14:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <Trajectory_Gen+0x29c>)
 8003b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <Trajectory_Gen+0x298>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f7fc ff86 	bl	8000a34 <__aeabi_dcmplt>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00f      	beq.n	8003b4e <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <Trajectory_Gen+0x29c>)
 8003b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	f7fc fb54 	bl	80001e4 <__adddf3>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4933      	ldr	r1, [pc, #204]	; (8003c10 <Trajectory_Gen+0x2a0>)
 8003b42:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <Trajectory_Gen+0x2a4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8003b4c:	e03e      	b.n	8003bcc <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <Trajectory_Gen+0x29c>)
 8003b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b54:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <Trajectory_Gen+0x298>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc ff7f 	bl	8000a5c <__aeabi_dcmpge>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d100      	bne.n	8003b66 <Trajectory_Gen+0x1f6>
}
 8003b64:	e032      	b.n	8003bcc <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <Trajectory_Gen+0x298>)
 8003b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	f7fc fb38 	bl	80001e4 <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4690      	mov	r8, r2
 8003b7a:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <Trajectory_Gen+0x290>)
 8003b7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <Trajectory_Gen+0x298>)
 8003b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <Trajectory_Gen+0x270>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fcdf 	bl	8000550 <__aeabi_dmul>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4620      	mov	r0, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	f7fc fb21 	bl	80001e0 <__aeabi_dsub>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <Trajectory_Gen+0x270>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fdfa 	bl	80007a4 <__aeabi_ddiv>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fb14 	bl	80001e4 <__adddf3>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8003bc0:	4913      	ldr	r1, [pc, #76]	; (8003c10 <Trajectory_Gen+0x2a0>)
 8003bc2:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <Trajectory_Gen+0x2a4>)
 8003bc8:	2202      	movs	r2, #2
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200010b8 	.word	0x200010b8
 8003bdc:	200010c0 	.word	0x200010c0
 8003be0:	200010c8 	.word	0x200010c8
 8003be4:	200010d0 	.word	0x200010d0
 8003be8:	20000238 	.word	0x20000238
 8003bec:	000f4240 	.word	0x000f4240
 8003bf0:	20000248 	.word	0x20000248
 8003bf4:	20000250 	.word	0x20000250
 8003bf8:	20000258 	.word	0x20000258
 8003bfc:	20000260 	.word	0x20000260
 8003c00:	200010d8 	.word	0x200010d8
 8003c04:	200010b4 	.word	0x200010b4
 8003c08:	20001100 	.word	0x20001100
 8003c0c:	20001110 	.word	0x20001110
 8003c10:	20001108 	.word	0x20001108
 8003c14:	200010b0 	.word	0x200010b0

08003c18 <Trajectory_Eva>:

void Trajectory_Eva() {
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 8003c1e:	4ba3      	ldr	r3, [pc, #652]	; (8003eac <Trajectory_Eva+0x294>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	f000 8173 	beq.w	8003f0e <Trajectory_Eva+0x2f6>
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f300 835e 	bgt.w	80042ea <Trajectory_Eva+0x6d2>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 835a 	beq.w	80042e8 <Trajectory_Eva+0x6d0>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d000      	beq.n	8003c3a <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8003c38:	e357      	b.n	80042ea <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 8003c3a:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c40:	4b9c      	ldr	r3, [pc, #624]	; (8003eb4 <Trajectory_Eva+0x29c>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc feff 	bl	8000a48 <__aeabi_dcmple>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8085 	beq.w	8003d5c <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8003c52:	4b99      	ldr	r3, [pc, #612]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fc10 	bl	800047c <__aeabi_i2d>
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	4b96      	ldr	r3, [pc, #600]	; (8003ebc <Trajectory_Eva+0x2a4>)
 8003c62:	f7fc fc75 	bl	8000550 <__aeabi_dmul>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4b94      	ldr	r3, [pc, #592]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f7fc fc6c 	bl	8000550 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4b90      	ldr	r3, [pc, #576]	; (8003ec4 <Trajectory_Eva+0x2ac>)
 8003c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c86:	4b8f      	ldr	r3, [pc, #572]	; (8003ec4 <Trajectory_Eva+0x2ac>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fc60 	bl	8000550 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fc5a 	bl	8000550 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <Trajectory_Eva+0x2b0>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f7fc fa9b 	bl	80001e4 <__adddf3>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
			x = x_initial
 8003cb2:	4986      	ldr	r1, [pc, #536]	; (8003ecc <Trajectory_Eva+0x2b4>)
 8003cb4:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8003cb8:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cbe:	4b81      	ldr	r3, [pc, #516]	; (8003ec4 <Trajectory_Eva+0x2ac>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fc44 	bl	8000550 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fbd1 	bl	800047c <__aeabi_i2d>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fc35 	bl	8000550 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4979      	ldr	r1, [pc, #484]	; (8003ed0 <Trajectory_Eva+0x2b8>)
 8003cec:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003cf0:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fbc1 	bl	800047c <__aeabi_i2d>
 8003cfa:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fc26 	bl	8000550 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4972      	ldr	r1, [pc, #456]	; (8003ed4 <Trajectory_Eva+0x2bc>)
 8003d0a:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <Trajectory_Eva+0x2b4>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4970      	ldr	r1, [pc, #448]	; (8003ed8 <Trajectory_Eva+0x2c0>)
 8003d16:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <Trajectory_Eva+0x2b8>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	496e      	ldr	r1, [pc, #440]	; (8003edc <Trajectory_Eva+0x2c4>)
 8003d22:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8003d26:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <Trajectory_Eva+0x2ac>)
 8003d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d2c:	4b6c      	ldr	r3, [pc, #432]	; (8003ee0 <Trajectory_Eva+0x2c8>)
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f7fc fa57 	bl	80001e4 <__adddf3>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4962      	ldr	r1, [pc, #392]	; (8003ec4 <Trajectory_Eva+0x2ac>)
 8003d3c:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003d40:	4b5b      	ldr	r3, [pc, #364]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d46:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <Trajectory_Eva+0x2c8>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa4a 	bl	80001e4 <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4956      	ldr	r1, [pc, #344]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003d56:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003d5a:	e2c6      	b.n	80042ea <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 8003d5c:	4b54      	ldr	r3, [pc, #336]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d62:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <Trajectory_Eva+0x2cc>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc fe6e 	bl	8000a48 <__aeabi_dcmple>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80bc 	beq.w	8003eec <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <Trajectory_Eva+0x2c4>)
 8003d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f7fc fbe6 	bl	8000550 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <Trajectory_Eva+0x2c0>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f7fc fa27 	bl	80001e4 <__adddf3>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8003d9e:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fb6a 	bl	800047c <__aeabi_i2d>
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <Trajectory_Eva+0x2a4>)
 8003dae:	f7fc fbcf 	bl	8000550 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fbc6 	bl	8000550 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fbbd 	bl	8000550 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fbb4 	bl	8000550 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc f9f6 	bl	80001e0 <__aeabi_dsub>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8003df8:	4934      	ldr	r1, [pc, #208]	; (8003ecc <Trajectory_Eva+0x2b4>)
 8003dfa:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <Trajectory_Eva+0x2c4>)
 8003e00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fb9e 	bl	8000550 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4692      	mov	sl, r2
 8003e1a:	469b      	mov	fp, r3
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc fb2b 	bl	800047c <__aeabi_i2d>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	f7fc fb8f 	bl	8000550 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc f9d1 	bl	80001e0 <__aeabi_dsub>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4923      	ldr	r1, [pc, #140]	; (8003ed0 <Trajectory_Eva+0x2b8>)
 8003e44:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <Trajectory_Eva+0x2a8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	4690      	mov	r8, r2
 8003e50:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <Trajectory_Eva+0x2a0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb0f 	bl	800047c <__aeabi_i2d>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4640      	mov	r0, r8
 8003e64:	4649      	mov	r1, r9
 8003e66:	f7fc fb73 	bl	8000550 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4919      	ldr	r1, [pc, #100]	; (8003ed4 <Trajectory_Eva+0x2bc>)
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <Trajectory_Eva+0x2c8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc f9b0 	bl	80001e4 <__adddf3>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4917      	ldr	r1, [pc, #92]	; (8003ee8 <Trajectory_Eva+0x2d0>)
 8003e8a:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <Trajectory_Eva+0x2c8>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f7fc f9a3 	bl	80001e4 <__adddf3>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <Trajectory_Eva+0x298>)
 8003ea4:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003ea8:	e21f      	b.n	80042ea <Trajectory_Eva+0x6d2>
 8003eaa:	bf00      	nop
 8003eac:	200010b0 	.word	0x200010b0
 8003eb0:	20000260 	.word	0x20000260
 8003eb4:	20001110 	.word	0x20001110
 8003eb8:	200010b4 	.word	0x200010b4
 8003ebc:	3fe00000 	.word	0x3fe00000
 8003ec0:	200010d0 	.word	0x200010d0
 8003ec4:	20000248 	.word	0x20000248
 8003ec8:	200010b8 	.word	0x200010b8
 8003ecc:	20000928 	.word	0x20000928
 8003ed0:	20000930 	.word	0x20000930
 8003ed4:	20000938 	.word	0x20000938
 8003ed8:	200010e0 	.word	0x200010e0
 8003edc:	200010f0 	.word	0x200010f0
 8003ee0:	20000268 	.word	0x20000268
 8003ee4:	20001108 	.word	0x20001108
 8003ee8:	20000250 	.word	0x20000250
			x = x_final;
 8003eec:	4b8e      	ldr	r3, [pc, #568]	; (8004128 <Trajectory_Eva+0x510>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	498e      	ldr	r1, [pc, #568]	; (800412c <Trajectory_Eva+0x514>)
 8003ef4:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8003ef8:	498d      	ldr	r1, [pc, #564]	; (8004130 <Trajectory_Eva+0x518>)
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <Trajectory_Eva+0x51c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
		break;
 8003f0c:	e1ed      	b.n	80042ea <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 8003f0e:	4b8a      	ldr	r3, [pc, #552]	; (8004138 <Trajectory_Eva+0x520>)
 8003f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f14:	4b89      	ldr	r3, [pc, #548]	; (800413c <Trajectory_Eva+0x524>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f7fc fd95 	bl	8000a48 <__aeabi_dcmple>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8089 	beq.w	8004038 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8003f26:	4b86      	ldr	r3, [pc, #536]	; (8004140 <Trajectory_Eva+0x528>)
 8003f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	4b84      	ldr	r3, [pc, #528]	; (8004144 <Trajectory_Eva+0x52c>)
 8003f32:	f7fc fb0d 	bl	8000550 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <Trajectory_Eva+0x530>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fa9a 	bl	800047c <__aeabi_i2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7fc fafe 	bl	8000550 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4b7b      	ldr	r3, [pc, #492]	; (800414c <Trajectory_Eva+0x534>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f7fc faf5 	bl	8000550 <__aeabi_dmul>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4b77      	ldr	r3, [pc, #476]	; (800414c <Trajectory_Eva+0x534>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc faec 	bl	8000550 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4b73      	ldr	r3, [pc, #460]	; (8004150 <Trajectory_Eva+0x538>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc f92d 	bl	80001e4 <__adddf3>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4967      	ldr	r1, [pc, #412]	; (800412c <Trajectory_Eva+0x514>)
 8003f90:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <Trajectory_Eva+0x528>)
 8003f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	; (800414c <Trajectory_Eva+0x534>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc fad6 	bl	8000550 <__aeabi_dmul>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <Trajectory_Eva+0x530>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa63 	bl	800047c <__aeabi_i2d>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4620      	mov	r0, r4
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	f7fc fac7 	bl	8000550 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	495a      	ldr	r1, [pc, #360]	; (8004130 <Trajectory_Eva+0x518>)
 8003fc8:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8003fcc:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <Trajectory_Eva+0x530>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fa53 	bl	800047c <__aeabi_i2d>
 8003fd6:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <Trajectory_Eva+0x528>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc fab8 	bl	8000550 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	495b      	ldr	r1, [pc, #364]	; (8004154 <Trajectory_Eva+0x53c>)
 8003fe6:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8003fea:	4b50      	ldr	r3, [pc, #320]	; (800412c <Trajectory_Eva+0x514>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	4959      	ldr	r1, [pc, #356]	; (8004158 <Trajectory_Eva+0x540>)
 8003ff2:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <Trajectory_Eva+0x518>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	4957      	ldr	r1, [pc, #348]	; (800415c <Trajectory_Eva+0x544>)
 8003ffe:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8004002:	4b52      	ldr	r3, [pc, #328]	; (800414c <Trajectory_Eva+0x534>)
 8004004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004008:	4b55      	ldr	r3, [pc, #340]	; (8004160 <Trajectory_Eva+0x548>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc f8e9 	bl	80001e4 <__adddf3>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	494d      	ldr	r1, [pc, #308]	; (800414c <Trajectory_Eva+0x534>)
 8004018:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800401c:	4b46      	ldr	r3, [pc, #280]	; (8004138 <Trajectory_Eva+0x520>)
 800401e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004022:	4b4f      	ldr	r3, [pc, #316]	; (8004160 <Trajectory_Eva+0x548>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc f8dc 	bl	80001e4 <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4941      	ldr	r1, [pc, #260]	; (8004138 <Trajectory_Eva+0x520>)
 8004032:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004036:	e158      	b.n	80042ea <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <Trajectory_Eva+0x54c>)
 800403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <Trajectory_Eva+0x524>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc f8cc 	bl	80001e0 <__aeabi_dsub>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <Trajectory_Eva+0x520>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc fd01 	bl	8000a5c <__aeabi_dcmpge>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 808b 	beq.w	8004178 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <Trajectory_Eva+0x550>)
 8004064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004068:	4b40      	ldr	r3, [pc, #256]	; (800416c <Trajectory_Eva+0x554>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f7fc fa6f 	bl	8000550 <__aeabi_dmul>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4614      	mov	r4, r2
 8004078:	461d      	mov	r5, r3
 800407a:	4b33      	ldr	r3, [pc, #204]	; (8004148 <Trajectory_Eva+0x530>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc f9fc 	bl	800047c <__aeabi_i2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc fa60 	bl	8000550 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <Trajectory_Eva+0x540>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc f8a1 	bl	80001e4 <__adddf3>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4921      	ldr	r1, [pc, #132]	; (800412c <Trajectory_Eva+0x514>)
 80040a8:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <Trajectory_Eva+0x530>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f9e3 	bl	800047c <__aeabi_i2d>
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <Trajectory_Eva+0x550>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc fa48 	bl	8000550 <__aeabi_dmul>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	491a      	ldr	r1, [pc, #104]	; (8004130 <Trajectory_Eva+0x518>)
 80040c6:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 80040ca:	4922      	ldr	r1, [pc, #136]	; (8004154 <Trajectory_Eva+0x53c>)
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <Trajectory_Eva+0x514>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	4924      	ldr	r1, [pc, #144]	; (8004170 <Trajectory_Eva+0x558>)
 80040e0:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <Trajectory_Eva+0x518>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	4922      	ldr	r1, [pc, #136]	; (8004174 <Trajectory_Eva+0x55c>)
 80040ec:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 80040f0:	4b1e      	ldr	r3, [pc, #120]	; (800416c <Trajectory_Eva+0x554>)
 80040f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <Trajectory_Eva+0x548>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc f872 	bl	80001e4 <__adddf3>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4919      	ldr	r1, [pc, #100]	; (800416c <Trajectory_Eva+0x554>)
 8004106:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <Trajectory_Eva+0x520>)
 800410c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <Trajectory_Eva+0x548>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc f865 	bl	80001e4 <__adddf3>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4906      	ldr	r1, [pc, #24]	; (8004138 <Trajectory_Eva+0x520>)
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004124:	e0e1      	b.n	80042ea <Trajectory_Eva+0x6d2>
 8004126:	bf00      	nop
 8004128:	200010c0 	.word	0x200010c0
 800412c:	20000928 	.word	0x20000928
 8004130:	20000930 	.word	0x20000930
 8004134:	200010b0 	.word	0x200010b0
 8004138:	20000260 	.word	0x20000260
 800413c:	20001100 	.word	0x20001100
 8004140:	200010d0 	.word	0x200010d0
 8004144:	3fe00000 	.word	0x3fe00000
 8004148:	200010b4 	.word	0x200010b4
 800414c:	20000248 	.word	0x20000248
 8004150:	200010b8 	.word	0x200010b8
 8004154:	20000938 	.word	0x20000938
 8004158:	200010e0 	.word	0x200010e0
 800415c:	200010f0 	.word	0x200010f0
 8004160:	20000268 	.word	0x20000268
 8004164:	20001108 	.word	0x20001108
 8004168:	200010c8 	.word	0x200010c8
 800416c:	20000258 	.word	0x20000258
 8004170:	200010e8 	.word	0x200010e8
 8004174:	200010f8 	.word	0x200010f8
		} else if (t_count <= t_final) {
 8004178:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <Trajectory_Eva+0x6d8>)
 800417a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800417e:	4b5d      	ldr	r3, [pc, #372]	; (80042f4 <Trajectory_Eva+0x6dc>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fc fc60 	bl	8000a48 <__aeabi_dcmple>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 809b 	beq.w	80042c6 <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <Trajectory_Eva+0x6e0>)
 8004192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004196:	4b59      	ldr	r3, [pc, #356]	; (80042fc <Trajectory_Eva+0x6e4>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f7fc f9d8 	bl	8000550 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	4b55      	ldr	r3, [pc, #340]	; (8004300 <Trajectory_Eva+0x6e8>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc f819 	bl	80001e4 <__adddf3>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 80041ba:	4b52      	ldr	r3, [pc, #328]	; (8004304 <Trajectory_Eva+0x6ec>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f95c 	bl	800047c <__aeabi_i2d>
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <Trajectory_Eva+0x6f0>)
 80041ca:	f7fc f9c1 	bl	8000550 <__aeabi_dmul>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4b4d      	ldr	r3, [pc, #308]	; (800430c <Trajectory_Eva+0x6f4>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc f9b8 	bl	8000550 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4692      	mov	sl, r2
 80041e6:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 80041e8:	4b44      	ldr	r3, [pc, #272]	; (80042fc <Trajectory_Eva+0x6e4>)
 80041ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <Trajectory_Eva+0x6e4>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc f9ac 	bl	8000550 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4650      	mov	r0, sl
 80041fe:	4659      	mov	r1, fp
 8004200:	f7fc f9a6 	bl	8000550 <__aeabi_dmul>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8004208:	4640      	mov	r0, r8
 800420a:	4649      	mov	r1, r9
 800420c:	f7fb ffe8 	bl	80001e0 <__aeabi_dsub>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
			x =
 8004214:	493e      	ldr	r1, [pc, #248]	; (8004310 <Trajectory_Eva+0x6f8>)
 8004216:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 800421a:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <Trajectory_Eva+0x6e0>)
 800421c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004220:	4b3a      	ldr	r3, [pc, #232]	; (800430c <Trajectory_Eva+0x6f4>)
 8004222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004226:	4b35      	ldr	r3, [pc, #212]	; (80042fc <Trajectory_Eva+0x6e4>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc f990 	bl	8000550 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <Trajectory_Eva+0x6ec>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f91d 	bl	800047c <__aeabi_i2d>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4650      	mov	r0, sl
 8004248:	4659      	mov	r1, fp
 800424a:	f7fc f981 	bl	8000550 <__aeabi_dmul>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4640      	mov	r0, r8
 8004254:	4649      	mov	r1, r9
 8004256:	f7fb ffc3 	bl	80001e0 <__aeabi_dsub>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	492d      	ldr	r1, [pc, #180]	; (8004314 <Trajectory_Eva+0x6fc>)
 8004260:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <Trajectory_Eva+0x6f4>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	4614      	mov	r4, r2
 800426c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <Trajectory_Eva+0x6ec>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc f901 	bl	800047c <__aeabi_i2d>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc f965 	bl	8000550 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4923      	ldr	r1, [pc, #140]	; (8004318 <Trajectory_Eva+0x700>)
 800428c:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <Trajectory_Eva+0x6e4>)
 8004292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <Trajectory_Eva+0x704>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ffa2 	bl	80001e4 <__adddf3>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4915      	ldr	r1, [pc, #84]	; (80042fc <Trajectory_Eva+0x6e4>)
 80042a6:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <Trajectory_Eva+0x6d8>)
 80042ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <Trajectory_Eva+0x704>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fb ff95 	bl	80001e4 <__adddf3>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	490c      	ldr	r1, [pc, #48]	; (80042f0 <Trajectory_Eva+0x6d8>)
 80042c0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80042c4:	e011      	b.n	80042ea <Trajectory_Eva+0x6d2>
			x = x_final;
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <Trajectory_Eva+0x708>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	4910      	ldr	r1, [pc, #64]	; (8004310 <Trajectory_Eva+0x6f8>)
 80042ce:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 80042d2:	4910      	ldr	r1, [pc, #64]	; (8004314 <Trajectory_Eva+0x6fc>)
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <Trajectory_Eva+0x70c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
		break;
 80042e6:	e000      	b.n	80042ea <Trajectory_Eva+0x6d2>
		break;
 80042e8:	bf00      	nop
}
 80042ea:	bf00      	nop
 80042ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f0:	20000260 	.word	0x20000260
 80042f4:	20001108 	.word	0x20001108
 80042f8:	200010f8 	.word	0x200010f8
 80042fc:	20000250 	.word	0x20000250
 8004300:	200010e8 	.word	0x200010e8
 8004304:	200010b4 	.word	0x200010b4
 8004308:	3fe00000 	.word	0x3fe00000
 800430c:	200010d0 	.word	0x200010d0
 8004310:	20000928 	.word	0x20000928
 8004314:	20000930 	.word	0x20000930
 8004318:	20000938 	.word	0x20000938
 800431c:	20000268 	.word	0x20000268
 8004320:	200010c0 	.word	0x200010c0
 8004324:	200010b0 	.word	0x200010b0

08004328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_MspInit+0x4c>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <HAL_MspInit+0x4c>)
 8004338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800433c:	6453      	str	r3, [r2, #68]	; 0x44
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_MspInit+0x4c>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_MspInit+0x4c>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	4a08      	ldr	r2, [pc, #32]	; (8004374 <HAL_MspInit+0x4c>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	6413      	str	r3, [r2, #64]	; 0x40
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_MspInit+0x4c>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004366:	2007      	movs	r0, #7
 8004368:	f000 fc82 	bl	8004c70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_I2C_MspInit+0xa4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d13c      	bne.n	8004414 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	6313      	str	r3, [r2, #48]	; 0x30
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043bc:	2312      	movs	r3, #18
 80043be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043c8:	2304      	movs	r3, #4
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4619      	mov	r1, r3
 80043d2:	4814      	ldr	r0, [pc, #80]	; (8004424 <HAL_I2C_MspInit+0xac>)
 80043d4:	f001 f89c 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043d8:	2308      	movs	r3, #8
 80043da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043dc:	2312      	movs	r3, #18
 80043de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e4:	2303      	movs	r3, #3
 80043e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80043e8:	2309      	movs	r3, #9
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	4619      	mov	r1, r3
 80043f2:	480c      	ldr	r0, [pc, #48]	; (8004424 <HAL_I2C_MspInit+0xac>)
 80043f4:	f001 f88c 	bl	8005510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 8004402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004406:	6413      	str	r3, [r2, #64]	; 0x40
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_I2C_MspInit+0xa8>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004414:	bf00      	nop
 8004416:	3728      	adds	r7, #40	; 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40005800 	.word	0x40005800
 8004420:	40023800 	.word	0x40023800
 8004424:	40020400 	.word	0x40020400

08004428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_SPI_MspInit+0x84>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d12c      	bne.n	80044a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_SPI_MspInit+0x88>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004482:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004490:	2303      	movs	r3, #3
 8004492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004494:	2306      	movs	r3, #6
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4619      	mov	r1, r3
 800449e:	4805      	ldr	r0, [pc, #20]	; (80044b4 <HAL_SPI_MspInit+0x8c>)
 80044a0:	f001 f836 	bl	8005510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40003c00 	.word	0x40003c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40020800 	.word	0x40020800

080044b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a38      	ldr	r2, [pc, #224]	; (80045a8 <HAL_TIM_Base_MspInit+0xf0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d116      	bne.n	80044f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	4a36      	ldr	r2, [pc, #216]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6453      	str	r3, [r2, #68]	; 0x44
 80044da:	4b34      	ldr	r3, [pc, #208]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2100      	movs	r1, #0
 80044ea:	201a      	movs	r0, #26
 80044ec:	f000 fbcb 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80044f0:	201a      	movs	r0, #26
 80044f2:	f000 fbe4 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80044f6:	e052      	b.n	800459e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <HAL_TIM_Base_MspInit+0xf8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d116      	bne.n	8004530 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b26      	ldr	r3, [pc, #152]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2100      	movs	r1, #0
 8004522:	201d      	movs	r0, #29
 8004524:	f000 fbaf 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004528:	201d      	movs	r0, #29
 800452a:	f000 fbc8 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 800452e:	e036      	b.n	800459e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <HAL_TIM_Base_MspInit+0xfc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d116      	bne.n	8004568 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004556:	2200      	movs	r2, #0
 8004558:	2100      	movs	r1, #0
 800455a:	2032      	movs	r0, #50	; 0x32
 800455c:	f000 fb93 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004560:	2032      	movs	r0, #50	; 0x32
 8004562:	f000 fbac 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 8004566:	e01a      	b.n	800459e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <HAL_TIM_Base_MspInit+0x100>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d115      	bne.n	800459e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_TIM_Base_MspInit+0xf4>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800458e:	2200      	movs	r2, #0
 8004590:	2100      	movs	r1, #0
 8004592:	201a      	movs	r0, #26
 8004594:	f000 fb77 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004598:	201a      	movs	r0, #26
 800459a:	f000 fb90 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40014800 	.word	0x40014800

080045bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d12b      	bne.n	8004636 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a16      	ldr	r2, [pc, #88]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <HAL_TIM_Encoder_MspInit+0x84>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004616:	2303      	movs	r3, #3
 8004618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461a:	2302      	movs	r3, #2
 800461c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004626:	2301      	movs	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462a:	f107 0314 	add.w	r3, r7, #20
 800462e:	4619      	mov	r1, r3
 8004630:	4804      	ldr	r0, [pc, #16]	; (8004644 <HAL_TIM_Encoder_MspInit+0x88>)
 8004632:	f000 ff6d 	bl	8005510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004636:	bf00      	nop
 8004638:	3728      	adds	r7, #40	; 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	40020000 	.word	0x40020000

08004648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <HAL_TIM_MspPostInit+0x68>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d11e      	bne.n	80046a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_TIM_MspPostInit+0x6c>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <HAL_TIM_MspPostInit+0x6c>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_TIM_MspPostInit+0x6c>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800468a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004698:	2301      	movs	r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 030c 	add.w	r3, r7, #12
 80046a0:	4619      	mov	r1, r3
 80046a2:	4805      	ldr	r0, [pc, #20]	; (80046b8 <HAL_TIM_MspPostInit+0x70>)
 80046a4:	f000 ff34 	bl	8005510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80046a8:	bf00      	nop
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40020000 	.word	0x40020000

080046bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08c      	sub	sp, #48	; 0x30
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	f107 031c 	add.w	r3, r7, #28
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_UART_MspInit+0x154>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d162      	bne.n	80047a4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <HAL_UART_MspInit+0x158>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4a4b      	ldr	r2, [pc, #300]	; (8004814 <HAL_UART_MspInit+0x158>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_UART_MspInit+0x158>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <HAL_UART_MspInit+0x158>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a44      	ldr	r2, [pc, #272]	; (8004814 <HAL_UART_MspInit+0x158>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b42      	ldr	r3, [pc, #264]	; (8004814 <HAL_UART_MspInit+0x158>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004716:	230c      	movs	r3, #12
 8004718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471a:	2302      	movs	r3, #2
 800471c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004722:	2303      	movs	r3, #3
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004726:	2307      	movs	r3, #7
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472a:	f107 031c 	add.w	r3, r7, #28
 800472e:	4619      	mov	r1, r3
 8004730:	4839      	ldr	r0, [pc, #228]	; (8004818 <HAL_UART_MspInit+0x15c>)
 8004732:	f000 feed 	bl	8005510 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_UART_MspInit+0x160>)
 8004738:	4a39      	ldr	r2, [pc, #228]	; (8004820 <HAL_UART_MspInit+0x164>)
 800473a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_UART_MspInit+0x160>)
 800473e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004742:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004744:	4b35      	ldr	r3, [pc, #212]	; (800481c <HAL_UART_MspInit+0x160>)
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800474a:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_UART_MspInit+0x160>)
 800474c:	2200      	movs	r2, #0
 800474e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_UART_MspInit+0x160>)
 8004752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004756:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004758:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_UART_MspInit+0x160>)
 800475a:	2200      	movs	r2, #0
 800475c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_UART_MspInit+0x160>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <HAL_UART_MspInit+0x160>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800476a:	4b2c      	ldr	r3, [pc, #176]	; (800481c <HAL_UART_MspInit+0x160>)
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004770:	4b2a      	ldr	r3, [pc, #168]	; (800481c <HAL_UART_MspInit+0x160>)
 8004772:	2200      	movs	r2, #0
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004776:	4829      	ldr	r0, [pc, #164]	; (800481c <HAL_UART_MspInit+0x160>)
 8004778:	f000 fabc 	bl	8004cf4 <HAL_DMA_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004782:	f7fe ff53 	bl	800362c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <HAL_UART_MspInit+0x160>)
 800478a:	635a      	str	r2, [r3, #52]	; 0x34
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <HAL_UART_MspInit+0x160>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2100      	movs	r1, #0
 8004796:	2026      	movs	r0, #38	; 0x26
 8004798:	f000 fa75 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800479c:	2026      	movs	r0, #38	; 0x26
 800479e:	f000 fa8e 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80047a2:	e031      	b.n	8004808 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_UART_MspInit+0x168>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d12c      	bne.n	8004808 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_UART_MspInit+0x158>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80047e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047f8:	2308      	movs	r3, #8
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	f107 031c 	add.w	r3, r7, #28
 8004800:	4619      	mov	r1, r3
 8004802:	4805      	ldr	r0, [pc, #20]	; (8004818 <HAL_UART_MspInit+0x15c>)
 8004804:	f000 fe84 	bl	8005510 <HAL_GPIO_Init>
}
 8004808:	bf00      	nop
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40004400 	.word	0x40004400
 8004814:	40023800 	.word	0x40023800
 8004818:	40020000 	.word	0x40020000
 800481c:	200008b8 	.word	0x200008b8
 8004820:	400260a0 	.word	0x400260a0
 8004824:	40011400 	.word	0x40011400

08004828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800482c:	e7fe      	b.n	800482c <NMI_Handler+0x4>

0800482e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004832:	e7fe      	b.n	8004832 <HardFault_Handler+0x4>

08004834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004838:	e7fe      	b.n	8004838 <MemManage_Handler+0x4>

0800483a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800483e:	e7fe      	b.n	800483e <BusFault_Handler+0x4>

08004840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004844:	e7fe      	b.n	8004844 <UsageFault_Handler+0x4>

08004846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004874:	f000 f8e8 	bl	8004a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}

0800487c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8004880:	2004      	movs	r0, #4
 8004882:	f000 fffb 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}

0800488a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800488e:	2008      	movs	r0, #8
 8004890:	f000 fff4 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <DMA1_Stream6_IRQHandler+0x10>)
 800489e:	f000 fbc1 	bl	8005024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200008b8 	.word	0x200008b8

080048ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 80048b0:	2040      	movs	r0, #64	; 0x40
 80048b2:	f000 ffe3 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 80048b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048ba:	f000 ffdf 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048c8:	4803      	ldr	r0, [pc, #12]	; (80048d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80048ca:	f003 fbb7 	bl	800803c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80048ce:	4803      	ldr	r0, [pc, #12]	; (80048dc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80048d0:	f003 fbb4 	bl	800803c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	2000044c 	.word	0x2000044c
 80048dc:	2000071c 	.word	0x2000071c

080048e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <TIM3_IRQHandler+0x10>)
 80048e6:	f003 fba9 	bl	800803c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200005b4 	.word	0x200005b4

080048f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <USART2_IRQHandler+0x10>)
 80048fa:	f004 fea7 	bl	800964c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200007d0 	.word	0x200007d0

08004908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800490c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004910:	f000 ffb4 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}

08004918 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <TIM5_IRQHandler+0x10>)
 800491e:	f003 fb8d 	bl	800803c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000668 	.word	0x20000668

0800492c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <SystemInit+0x20>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	4a05      	ldr	r2, [pc, #20]	; (800494c <SystemInit+0x20>)
 8004938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800493c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004954:	480d      	ldr	r0, [pc, #52]	; (800498c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004956:	490e      	ldr	r1, [pc, #56]	; (8004990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004958:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800495a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800495c:	e002      	b.n	8004964 <LoopCopyDataInit>

0800495e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800495e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004962:	3304      	adds	r3, #4

08004964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004968:	d3f9      	bcc.n	800495e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800496a:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800496c:	4c0b      	ldr	r4, [pc, #44]	; (800499c <LoopFillZerobss+0x26>)
  movs r3, #0
 800496e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004970:	e001      	b.n	8004976 <LoopFillZerobss>

08004972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004974:	3204      	adds	r2, #4

08004976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004978:	d3fb      	bcc.n	8004972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800497a:	f7ff ffd7 	bl	800492c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800497e:	f005 feb1 	bl	800a6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004982:	f7fd fc59 	bl	8002238 <main>
  bx  lr    
 8004986:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8004988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800498c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004990:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8004994:	0800a9ac 	.word	0x0800a9ac
  ldr r2, =_sbss
 8004998:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800499c:	2000111c 	.word	0x2000111c

080049a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049a0:	e7fe      	b.n	80049a0 <ADC_IRQHandler>
	...

080049a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_Init+0x40>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_Init+0x40>)
 80049ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_Init+0x40>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <HAL_Init+0x40>)
 80049ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_Init+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_Init+0x40>)
 80049c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f000 f94f 	bl	8004c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d2:	2000      	movs	r0, #0
 80049d4:	f000 f808 	bl	80049e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049d8:	f7ff fca6 	bl	8004328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00

080049e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_InitTick+0x54>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_InitTick+0x58>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f967 	bl	8004cda <HAL_SYSTICK_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00e      	b.n	8004a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d80a      	bhi.n	8004a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	f000 f92f 	bl	8004c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <HAL_InitTick+0x5c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000284 	.word	0x20000284
 8004a40:	2000028c 	.word	0x2000028c
 8004a44:	20000288 	.word	0x20000288

08004a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_IncTick+0x20>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_IncTick+0x24>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_IncTick+0x24>)
 8004a5a:	6013      	str	r3, [r2, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	2000028c 	.word	0x2000028c
 8004a6c:	20001118 	.word	0x20001118

08004a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return uwTick;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_GetTick+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20001118 	.word	0x20001118

08004a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7ff ffee 	bl	8004a70 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d005      	beq.n	8004aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_Delay+0x44>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004aae:	bf00      	nop
 8004ab0:	f7ff ffde 	bl	8004a70 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d8f7      	bhi.n	8004ab0 <HAL_Delay+0x28>
  {
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2000028c 	.word	0x2000028c

08004ad0 <__NVIC_SetPriorityGrouping>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aec:	4013      	ands	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b02:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	60d3      	str	r3, [r2, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_GetPriorityGrouping>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <__NVIC_GetPriorityGrouping+0x18>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 0307 	and.w	r3, r3, #7
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_EnableIRQ>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db0b      	blt.n	8004b5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4907      	ldr	r1, [pc, #28]	; (8004b6c <__NVIC_EnableIRQ+0x38>)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2001      	movs	r0, #1
 8004b56:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e100 	.word	0xe000e100

08004b70 <__NVIC_SetPriority>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db0a      	blt.n	8004b9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	490c      	ldr	r1, [pc, #48]	; (8004bbc <__NVIC_SetPriority+0x4c>)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	440b      	add	r3, r1
 8004b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b98:	e00a      	b.n	8004bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4908      	ldr	r1, [pc, #32]	; (8004bc0 <__NVIC_SetPriority+0x50>)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3b04      	subs	r3, #4
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	440b      	add	r3, r1
 8004bae:	761a      	strb	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <NVIC_EncodePriority>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	bf28      	it	cs
 8004be2:	2304      	movcs	r3, #4
 8004be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3304      	adds	r3, #4
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d902      	bls.n	8004bf4 <NVIC_EncodePriority+0x30>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3b03      	subs	r3, #3
 8004bf2:	e000      	b.n	8004bf6 <NVIC_EncodePriority+0x32>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	401a      	ands	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	43d9      	mvns	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c1c:	4313      	orrs	r3, r2
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c3c:	d301      	bcc.n	8004c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e00f      	b.n	8004c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <SysTick_Config+0x40>)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c4a:	210f      	movs	r1, #15
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	f7ff ff8e 	bl	8004b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <SysTick_Config+0x40>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <SysTick_Config+0x40>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000e010 	.word	0xe000e010

08004c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff29 	bl	8004ad0 <__NVIC_SetPriorityGrouping>
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c98:	f7ff ff3e 	bl	8004b18 <__NVIC_GetPriorityGrouping>
 8004c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f7ff ff8e 	bl	8004bc4 <NVIC_EncodePriority>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff5d 	bl	8004b70 <__NVIC_SetPriority>
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff31 	bl	8004b34 <__NVIC_EnableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ffa2 	bl	8004c2c <SysTick_Config>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d00:	f7ff feb6 	bl	8004a70 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e099      	b.n	8004e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d30:	e00f      	b.n	8004d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d32:	f7ff fe9d 	bl	8004a70 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	d908      	bls.n	8004d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e078      	b.n	8004e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e8      	bne.n	8004d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <HAL_DMA_Init+0x158>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d107      	bne.n	8004dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	4313      	orrs	r3, r2
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0307 	bic.w	r3, r3, #7
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d117      	bne.n	8004e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fb0d 	bl	8005418 <DMA_CheckFifoParam>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e12:	2301      	movs	r3, #1
 8004e14:	e016      	b.n	8004e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fac4 	bl	80053ac <DMA_CalcBaseAndBitshift>
 8004e24:	4603      	mov	r3, r0
 8004e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	223f      	movs	r2, #63	; 0x3f
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	f010803f 	.word	0xf010803f

08004e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_DMA_Start_IT+0x26>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e040      	b.n	8004ef8 <HAL_DMA_Start_IT+0xa8>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d12f      	bne.n	8004eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa56 	bl	8005350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	223f      	movs	r2, #63	; 0x3f
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0216 	orr.w	r2, r2, #22
 8004ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0208 	orr.w	r2, r2, #8
 8004ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e005      	b.n	8004ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f0e:	f7ff fdaf 	bl	8004a70 <HAL_GetTick>
 8004f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d008      	beq.n	8004f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2280      	movs	r2, #128	; 0x80
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e052      	b.n	8004fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0216 	bic.w	r2, r2, #22
 8004f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <HAL_DMA_Abort+0x62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0208 	bic.w	r2, r2, #8
 8004f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f82:	e013      	b.n	8004fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f84:	f7ff fd74 	bl	8004a70 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d90c      	bls.n	8004fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e015      	b.n	8004fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e4      	bne.n	8004f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	223f      	movs	r2, #63	; 0x3f
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00c      	b.n	8005018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2205      	movs	r2, #5
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005030:	4b8e      	ldr	r3, [pc, #568]	; (800526c <HAL_DMA_IRQHandler+0x248>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a8e      	ldr	r2, [pc, #568]	; (8005270 <HAL_DMA_IRQHandler+0x24c>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a9b      	lsrs	r3, r3, #10
 800503c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2208      	movs	r2, #8
 8005050:	409a      	lsls	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01a      	beq.n	8005090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	2208      	movs	r2, #8
 800507e:	409a      	lsls	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	2201      	movs	r2, #1
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d012      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	2201      	movs	r2, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f043 0202 	orr.w	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ca:	2204      	movs	r2, #4
 80050cc:	409a      	lsls	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	2204      	movs	r2, #4
 80050ea:	409a      	lsls	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f043 0204 	orr.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	2210      	movs	r2, #16
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d043      	beq.n	8005194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d03c      	beq.n	8005194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	2210      	movs	r2, #16
 8005120:	409a      	lsls	r2, r3
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d018      	beq.n	8005166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d024      	beq.n	8005194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
 8005152:	e01f      	b.n	8005194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
 8005164:	e016      	b.n	8005194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0208 	bic.w	r2, r2, #8
 8005182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	2220      	movs	r2, #32
 800519a:	409a      	lsls	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 808f 	beq.w	80052c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8087 	beq.w	80052c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ba:	2220      	movs	r2, #32
 80051bc:	409a      	lsls	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d136      	bne.n	800523c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0216 	bic.w	r2, r2, #22
 80051dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_DMA_IRQHandler+0x1da>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0208 	bic.w	r2, r2, #8
 800520c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	223f      	movs	r2, #63	; 0x3f
 8005214:	409a      	lsls	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	d07e      	beq.n	8005330 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
        }
        return;
 800523a:	e079      	b.n	8005330 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01d      	beq.n	8005286 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525c:	2b00      	cmp	r3, #0
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
 8005268:	e02c      	b.n	80052c4 <HAL_DMA_IRQHandler+0x2a0>
 800526a:	bf00      	nop
 800526c:	20000284 	.word	0x20000284
 8005270:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d023      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
 8005284:	e01e      	b.n	80052c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10f      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0210 	bic.w	r2, r2, #16
 80052a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d032      	beq.n	8005332 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d022      	beq.n	800531e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2205      	movs	r2, #5
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d307      	bcc.n	800530c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f2      	bne.n	80052f0 <HAL_DMA_IRQHandler+0x2cc>
 800530a:	e000      	b.n	800530e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800530c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
 800532e:	e000      	b.n	8005332 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005330:	bf00      	nop
    }
  }
}
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800536c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d108      	bne.n	8005390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800538e:	e007      	b.n	80053a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	3b10      	subs	r3, #16
 80053bc:	4a14      	ldr	r2, [pc, #80]	; (8005410 <DMA_CalcBaseAndBitshift+0x64>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053c6:	4a13      	ldr	r2, [pc, #76]	; (8005414 <DMA_CalcBaseAndBitshift+0x68>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d909      	bls.n	80053ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58
 80053ec:	e007      	b.n	80053fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	aaaaaaab 	.word	0xaaaaaaab
 8005414:	0800a994 	.word	0x0800a994

08005418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d11f      	bne.n	8005472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d856      	bhi.n	80054e6 <DMA_CheckFifoParam+0xce>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <DMA_CheckFifoParam+0x28>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005451 	.word	0x08005451
 8005444:	08005463 	.word	0x08005463
 8005448:	08005451 	.word	0x08005451
 800544c:	080054e7 	.word	0x080054e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d046      	beq.n	80054ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e043      	b.n	80054ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800546a:	d140      	bne.n	80054ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005470:	e03d      	b.n	80054ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	d121      	bne.n	80054c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d837      	bhi.n	80054f2 <DMA_CheckFifoParam+0xda>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <DMA_CheckFifoParam+0x70>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	0800549f 	.word	0x0800549f
 8005490:	08005499 	.word	0x08005499
 8005494:	080054b1 	.word	0x080054b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e030      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d025      	beq.n	80054f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ae:	e022      	b.n	80054f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054b8:	d11f      	bne.n	80054fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054be:	e01c      	b.n	80054fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d903      	bls.n	80054ce <DMA_CheckFifoParam+0xb6>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d003      	beq.n	80054d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054cc:	e018      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
      break;
 80054d2:	e015      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	e00b      	b.n	80054fe <DMA_CheckFifoParam+0xe6>
      break;
 80054e6:	bf00      	nop
 80054e8:	e00a      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054ea:	bf00      	nop
 80054ec:	e008      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e006      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e004      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;   
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054fe:	bf00      	nop
    }
  } 
  
  return status; 
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	e159      	b.n	80057e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800552c:	2201      	movs	r2, #1
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4013      	ands	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	429a      	cmp	r2, r3
 8005546:	f040 8148 	bne.w	80057da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d005      	beq.n	8005562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800555e:	2b02      	cmp	r3, #2
 8005560:	d130      	bne.n	80055c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005598:	2201      	movs	r2, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 0201 	and.w	r2, r3, #1
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d017      	beq.n	8005600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d123      	bne.n	8005654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	08da      	lsrs	r2, r3, #3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3208      	adds	r2, #8
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	220f      	movs	r2, #15
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4013      	ands	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4313      	orrs	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	08da      	lsrs	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3208      	adds	r2, #8
 800564e:	69b9      	ldr	r1, [r7, #24]
 8005650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	2203      	movs	r2, #3
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0203 	and.w	r2, r3, #3
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80a2 	beq.w	80057da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <HAL_GPIO_Init+0x2e8>)
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	4a56      	ldr	r2, [pc, #344]	; (80057f8 <HAL_GPIO_Init+0x2e8>)
 80056a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056a4:	6453      	str	r3, [r2, #68]	; 0x44
 80056a6:	4b54      	ldr	r3, [pc, #336]	; (80057f8 <HAL_GPIO_Init+0x2e8>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056b2:	4a52      	ldr	r2, [pc, #328]	; (80057fc <HAL_GPIO_Init+0x2ec>)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	3302      	adds	r3, #2
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	220f      	movs	r2, #15
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a49      	ldr	r2, [pc, #292]	; (8005800 <HAL_GPIO_Init+0x2f0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d019      	beq.n	8005712 <HAL_GPIO_Init+0x202>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a48      	ldr	r2, [pc, #288]	; (8005804 <HAL_GPIO_Init+0x2f4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_GPIO_Init+0x1fe>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a47      	ldr	r2, [pc, #284]	; (8005808 <HAL_GPIO_Init+0x2f8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00d      	beq.n	800570a <HAL_GPIO_Init+0x1fa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a46      	ldr	r2, [pc, #280]	; (800580c <HAL_GPIO_Init+0x2fc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <HAL_GPIO_Init+0x1f6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a45      	ldr	r2, [pc, #276]	; (8005810 <HAL_GPIO_Init+0x300>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_GPIO_Init+0x1f2>
 80056fe:	2304      	movs	r3, #4
 8005700:	e008      	b.n	8005714 <HAL_GPIO_Init+0x204>
 8005702:	2307      	movs	r3, #7
 8005704:	e006      	b.n	8005714 <HAL_GPIO_Init+0x204>
 8005706:	2303      	movs	r3, #3
 8005708:	e004      	b.n	8005714 <HAL_GPIO_Init+0x204>
 800570a:	2302      	movs	r3, #2
 800570c:	e002      	b.n	8005714 <HAL_GPIO_Init+0x204>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_GPIO_Init+0x204>
 8005712:	2300      	movs	r3, #0
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	f002 0203 	and.w	r2, r2, #3
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	4093      	lsls	r3, r2
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005724:	4935      	ldr	r1, [pc, #212]	; (80057fc <HAL_GPIO_Init+0x2ec>)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	089b      	lsrs	r3, r3, #2
 800572a:	3302      	adds	r3, #2
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <HAL_GPIO_Init+0x304>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005756:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <HAL_GPIO_Init+0x304>)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800575c:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <HAL_GPIO_Init+0x304>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	43db      	mvns	r3, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4013      	ands	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <HAL_GPIO_Init+0x304>)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <HAL_GPIO_Init+0x304>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_GPIO_Init+0x304>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b0:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_GPIO_Init+0x304>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057d4:	4a0f      	ldr	r2, [pc, #60]	; (8005814 <HAL_GPIO_Init+0x304>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3301      	adds	r3, #1
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	f67f aea2 	bls.w	800552c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40013800 	.word	0x40013800
 8005800:	40020000 	.word	0x40020000
 8005804:	40020400 	.word	0x40020400
 8005808:	40020800 	.word	0x40020800
 800580c:	40020c00 	.word	0x40020c00
 8005810:	40021000 	.word	0x40021000
 8005814:	40013c00 	.word	0x40013c00

08005818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	887b      	ldrh	r3, [r7, #2]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e001      	b.n	800583a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005858:	787b      	ldrb	r3, [r7, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005864:	e003      	b.n	800586e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005866:	887b      	ldrh	r3, [r7, #2]
 8005868:	041a      	lsls	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd fe86 	bl	80035ac <HAL_GPIO_EXTI_Callback>
  }
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40013c00 	.word	0x40013c00

080058ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e12b      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fe fd50 	bl	8004378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800590e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005910:	f001 fbd2 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8005914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a81      	ldr	r2, [pc, #516]	; (8005b20 <HAL_I2C_Init+0x274>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d807      	bhi.n	8005930 <HAL_I2C_Init+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a80      	ldr	r2, [pc, #512]	; (8005b24 <HAL_I2C_Init+0x278>)
 8005924:	4293      	cmp	r3, r2
 8005926:	bf94      	ite	ls
 8005928:	2301      	movls	r3, #1
 800592a:	2300      	movhi	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e006      	b.n	800593e <HAL_I2C_Init+0x92>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a7d      	ldr	r2, [pc, #500]	; (8005b28 <HAL_I2C_Init+0x27c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	bf94      	ite	ls
 8005938:	2301      	movls	r3, #1
 800593a:	2300      	movhi	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e0e7      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a78      	ldr	r2, [pc, #480]	; (8005b2c <HAL_I2C_Init+0x280>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0c9b      	lsrs	r3, r3, #18
 8005950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a6a      	ldr	r2, [pc, #424]	; (8005b20 <HAL_I2C_Init+0x274>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d802      	bhi.n	8005980 <HAL_I2C_Init+0xd4>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3301      	adds	r3, #1
 800597e:	e009      	b.n	8005994 <HAL_I2C_Init+0xe8>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	4a69      	ldr	r2, [pc, #420]	; (8005b30 <HAL_I2C_Init+0x284>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	3301      	adds	r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	430b      	orrs	r3, r1
 800599a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	495c      	ldr	r1, [pc, #368]	; (8005b20 <HAL_I2C_Init+0x274>)
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d819      	bhi.n	80059e8 <HAL_I2C_Init+0x13c>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1e59      	subs	r1, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059c8:	400b      	ands	r3, r1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_I2C_Init+0x138>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e59      	subs	r1, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059dc:	3301      	adds	r3, #1
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	e051      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e4:	2304      	movs	r3, #4
 80059e6:	e04f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d111      	bne.n	8005a14 <HAL_I2C_Init+0x168>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1e58      	subs	r0, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e012      	b.n	8005a3a <HAL_I2C_Init+0x18e>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1e58      	subs	r0, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6859      	ldr	r1, [r3, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	0099      	lsls	r1, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_Init+0x196>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e022      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10e      	bne.n	8005a68 <HAL_I2C_Init+0x1bc>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e58      	subs	r0, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	440b      	add	r3, r1
 8005a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	0099      	lsls	r1, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	6809      	ldr	r1, [r1, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6911      	ldr	r1, [r2, #16]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68d2      	ldr	r2, [r2, #12]
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	000186a0 	.word	0x000186a0
 8005b24:	001e847f 	.word	0x001e847f
 8005b28:	003d08ff 	.word	0x003d08ff
 8005b2c:	431bde83 	.word	0x431bde83
 8005b30:	10624dd3 	.word	0x10624dd3

08005b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	817b      	strh	r3, [r7, #10]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7fe ff92 	bl	8004a70 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 80e0 	bne.w	8005d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2319      	movs	r3, #25
 8005b62:	2201      	movs	r2, #1
 8005b64:	4970      	ldr	r1, [pc, #448]	; (8005d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fc58 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0d3      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x50>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0cc      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a50      	ldr	r2, [pc, #320]	; (8005d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fac2 	bl	800617c <I2C_MasterRequestWrite>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e08d      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c18:	e066      	b.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6a39      	ldr	r1, [r7, #32]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fcd2 	bl	80065c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d107      	bne.n	8005c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e06b      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d11b      	bne.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	6a39      	ldr	r1, [r7, #32]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fcc2 	bl	800664a <I2C_WaitOnBTFFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d107      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01a      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d194      	bne.n	8005c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	00100002 	.word	0x00100002
 8005d2c:	ffff0000 	.word	0xffff0000

08005d30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08c      	sub	sp, #48	; 0x30
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	817b      	strh	r3, [r7, #10]
 8005d40:	4613      	mov	r3, r2
 8005d42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7fe fe94 	bl	8004a70 <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	f040 820b 	bne.w	800616e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2319      	movs	r3, #25
 8005d5e:	2201      	movs	r2, #1
 8005d60:	497c      	ldr	r1, [pc, #496]	; (8005f54 <HAL_I2C_Master_Receive+0x224>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fb5a 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e1fe      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_I2C_Master_Receive+0x50>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e1f7      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d007      	beq.n	8005da6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2222      	movs	r2, #34	; 0x22
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	893a      	ldrh	r2, [r7, #8]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a5c      	ldr	r2, [pc, #368]	; (8005f58 <HAL_I2C_Master_Receive+0x228>)
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005de8:	8979      	ldrh	r1, [r7, #10]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa46 	bl	8006280 <I2C_MasterRequestRead>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e1b8      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d113      	bne.n	8005e2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e18c      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11b      	bne.n	8005e6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e16c      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11b      	bne.n	8005eae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	e14c      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ed4:	e138      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	f200 80f1 	bhi.w	80060c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d123      	bne.n	8005f30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fbed 	bl	80066cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e139      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f2e:	e10b      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d14e      	bne.n	8005fd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4906      	ldr	r1, [pc, #24]	; (8005f5c <HAL_I2C_Master_Receive+0x22c>)
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fa6a 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e10e      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
 8005f52:	bf00      	nop
 8005f54:	00100002 	.word	0x00100002
 8005f58:	ffff0000 	.word	0xffff0000
 8005f5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fd4:	e0b8      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4966      	ldr	r1, [pc, #408]	; (8006178 <HAL_I2C_Master_Receive+0x448>)
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fa1b 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0bf      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	494f      	ldr	r1, [pc, #316]	; (8006178 <HAL_I2C_Master_Receive+0x448>)
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f9ed 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e091      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c0:	e042      	b.n	8006148 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fb00 	bl	80066cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e04c      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d118      	bne.n	8006148 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f aec2 	bne.w	8005ed6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00010004 	.word	0x00010004

0800617c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	460b      	mov	r3, r1
 800618a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d006      	beq.n	80061a6 <I2C_MasterRequestWrite+0x2a>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d003      	beq.n	80061a6 <I2C_MasterRequestWrite+0x2a>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061a4:	d108      	bne.n	80061b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e00b      	b.n	80061d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	2b12      	cmp	r3, #18
 80061be:	d107      	bne.n	80061d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f91d 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00d      	beq.n	8006204 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f6:	d103      	bne.n	8006200 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e035      	b.n	8006270 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620c:	d108      	bne.n	8006220 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800620e:	897b      	ldrh	r3, [r7, #10]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800621c:	611a      	str	r2, [r3, #16]
 800621e:	e01b      	b.n	8006258 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006220:	897b      	ldrh	r3, [r7, #10]
 8006222:	11db      	asrs	r3, r3, #7
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0306 	and.w	r3, r3, #6
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f063 030f 	orn	r3, r3, #15
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	490e      	ldr	r1, [pc, #56]	; (8006278 <I2C_MasterRequestWrite+0xfc>)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f943 	bl	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e010      	b.n	8006270 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <I2C_MasterRequestWrite+0x100>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f933 	bl	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	00010008 	.word	0x00010008
 800627c:	00010002 	.word	0x00010002

08006280 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d006      	beq.n	80062ba <I2C_MasterRequestRead+0x3a>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d003      	beq.n	80062ba <I2C_MasterRequestRead+0x3a>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062b8:	d108      	bne.n	80062cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e00b      	b.n	80062e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	2b11      	cmp	r3, #17
 80062d2:	d107      	bne.n	80062e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f893 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00d      	beq.n	8006318 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630a:	d103      	bne.n	8006314 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e079      	b.n	800640c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006320:	d108      	bne.n	8006334 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006322:	897b      	ldrh	r3, [r7, #10]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	611a      	str	r2, [r3, #16]
 8006332:	e05f      	b.n	80063f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	11db      	asrs	r3, r3, #7
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f063 030f 	orn	r3, r3, #15
 8006344:	b2da      	uxtb	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	4930      	ldr	r1, [pc, #192]	; (8006414 <I2C_MasterRequestRead+0x194>)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f8b9 	bl	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e054      	b.n	800640c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4929      	ldr	r1, [pc, #164]	; (8006418 <I2C_MasterRequestRead+0x198>)
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f8a9 	bl	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e044      	b.n	800640c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f831 	bl	800641c <I2C_WaitOnFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00d      	beq.n	80063dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ce:	d103      	bne.n	80063d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e017      	b.n	800640c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063dc:	897b      	ldrh	r3, [r7, #10]
 80063de:	11db      	asrs	r3, r3, #7
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0306 	and.w	r3, r3, #6
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f063 030e 	orn	r3, r3, #14
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4907      	ldr	r1, [pc, #28]	; (8006418 <I2C_MasterRequestRead+0x198>)
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f865 	bl	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	00010008 	.word	0x00010008
 8006418:	00010002 	.word	0x00010002

0800641c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800642c:	e025      	b.n	800647a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d021      	beq.n	800647a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006436:	f7fe fb1b 	bl	8004a70 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e023      	b.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d10d      	bne.n	80064a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	43da      	mvns	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	e00c      	b.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	43da      	mvns	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d0b6      	beq.n	800642e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064d8:	e051      	b.n	800657e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e8:	d123      	bne.n	8006532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0204 	orr.w	r2, r3, #4
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e046      	b.n	80065c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d021      	beq.n	800657e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fe fa99 	bl	8004a70 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d116      	bne.n	800657e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e020      	b.n	80065c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10c      	bne.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	43da      	mvns	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf14      	ite	ne
 800659a:	2301      	movne	r3, #1
 800659c:	2300      	moveq	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	e00b      	b.n	80065ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	43da      	mvns	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d18d      	bne.n	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065d4:	e02d      	b.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f8ce 	bl	8006778 <I2C_IsAcknowledgeFailed>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e02d      	b.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d021      	beq.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ee:	f7fe fa3f 	bl	8004a70 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d116      	bne.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e007      	b.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d1ca      	bne.n	80065d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006656:	e02d      	b.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f88d 	bl	8006778 <I2C_IsAcknowledgeFailed>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e02d      	b.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d021      	beq.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fe f9fe 	bl	8004a70 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d116      	bne.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e007      	b.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d1ca      	bne.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066d8:	e042      	b.n	8006760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d119      	bne.n	800671c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0210 	mvn.w	r2, #16
 80066f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e029      	b.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671c:	f7fe f9a8 	bl	8004a70 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d302      	bcc.n	8006732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d116      	bne.n	8006760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e007      	b.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d1b5      	bne.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678e:	d11b      	bne.n	80067c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	f043 0204 	orr.w	r2, r3, #4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e267      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d075      	beq.n	80068e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067f6:	4b88      	ldr	r3, [pc, #544]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4b85      	ldr	r3, [pc, #532]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	2b08      	cmp	r3, #8
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b82      	ldr	r3, [pc, #520]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e242      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x74>
 800683e:	4b76      	ldr	r3, [pc, #472]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a75      	ldr	r2, [pc, #468]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x98>
 8006856:	4b70      	ldr	r3, [pc, #448]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6f      	ldr	r2, [pc, #444]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b6d      	ldr	r3, [pc, #436]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6c      	ldr	r2, [pc, #432]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 8006870:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a68      	ldr	r2, [pc, #416]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b66      	ldr	r3, [pc, #408]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fe f8ee 	bl	8004a70 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fe f8ea 	bl	8004a70 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e207      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b5b      	ldr	r3, [pc, #364]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xc0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fe f8da 	bl	8004a70 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fe f8d6 	bl	8004a70 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1f3      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b51      	ldr	r3, [pc, #324]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0xe8>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ee:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fa:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11c      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b44      	ldr	r3, [pc, #272]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d116      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d001      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1c7      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4937      	ldr	r1, [pc, #220]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	e03a      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006948:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <HAL_RCC_OscConfig+0x244>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fe f88f 	bl	8004a70 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006956:	f7fe f88b 	bl	8004a70 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e1a8      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	4b2b      	ldr	r3, [pc, #172]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4925      	ldr	r1, [pc, #148]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	e015      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <HAL_RCC_OscConfig+0x244>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fe f86e 	bl	8004a70 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006998:	f7fe f86a 	bl	8004a70 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e187      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d036      	beq.n	8006a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fe f84e 	bl	8004a70 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fe f84a 	bl	8004a70 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e167      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x200>
 80069f6:	e01b      	b.n	8006a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fe f837 	bl	8004a70 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a04:	e00e      	b.n	8006a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fe f833 	bl	8004a70 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d907      	bls.n	8006a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e150      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	42470000 	.word	0x42470000
 8006a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a24:	4b88      	ldr	r3, [pc, #544]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ea      	bne.n	8006a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8097 	beq.w	8006b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a42:	4b81      	ldr	r3, [pc, #516]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	4b7d      	ldr	r3, [pc, #500]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	4a7c      	ldr	r2, [pc, #496]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a5e:	4b7a      	ldr	r3, [pc, #488]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b77      	ldr	r3, [pc, #476]	; (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d118      	bne.n	8006aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7a:	4b74      	ldr	r3, [pc, #464]	; (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a73      	ldr	r2, [pc, #460]	; (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a86:	f7fd fff3 	bl	8004a70 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8e:	f7fd ffef 	bl	8004a70 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e10c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	4b6a      	ldr	r3, [pc, #424]	; (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d106      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x2ea>
 8006ab4:	4b64      	ldr	r3, [pc, #400]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	4a63      	ldr	r2, [pc, #396]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac0:	e01c      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x30c>
 8006aca:	4b5f      	ldr	r3, [pc, #380]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a5e      	ldr	r2, [pc, #376]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a5b      	ldr	r2, [pc, #364]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae2:	e00b      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ae4:	4b58      	ldr	r3, [pc, #352]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a57      	ldr	r2, [pc, #348]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
 8006af0:	4b55      	ldr	r3, [pc, #340]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a54      	ldr	r2, [pc, #336]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 0304 	bic.w	r3, r3, #4
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fd ffb4 	bl	8004a70 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fd ffb0 	bl	8004a70 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0cb      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	4b49      	ldr	r3, [pc, #292]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ee      	beq.n	8006b0c <HAL_RCC_OscConfig+0x334>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b30:	f7fd ff9e 	bl	8004a70 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fd ff9a 	bl	8004a70 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0b5      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1ee      	bne.n	8006b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d105      	bne.n	8006b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b60:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80a1 	beq.w	8006cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b76:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d05c      	beq.n	8006c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d141      	bne.n	8006c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fd ff6e 	bl	8004a70 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fd ff6a 	bl	8004a70 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e087      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	019b      	lsls	r3, r3, #6
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	491b      	ldr	r1, [pc, #108]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be0:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be6:	f7fd ff43 	bl	8004a70 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bee:	f7fd ff3f 	bl	8004a70 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e05c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x416>
 8006c0c:	e054      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fd ff2c 	bl	8004a70 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fd ff28 	bl	8004a70 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e045      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x444>
 8006c3a:	e03d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e038      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40007000 	.word	0x40007000
 8006c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <HAL_RCC_OscConfig+0x4ec>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d028      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d121      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0cc      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b68      	ldr	r3, [pc, #416]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d90c      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b65      	ldr	r3, [pc, #404]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b63      	ldr	r3, [pc, #396]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0b8      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d1c:	4b59      	ldr	r3, [pc, #356]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a58      	ldr	r2, [pc, #352]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d34:	4b53      	ldr	r3, [pc, #332]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4a52      	ldr	r2, [pc, #328]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	494d      	ldr	r1, [pc, #308]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d044      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d66:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d119      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e07f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b3f      	ldr	r3, [pc, #252]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e06f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d96:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e067      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4934      	ldr	r1, [pc, #208]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db8:	f7fd fe5a 	bl	8004a70 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fd fe56 	bl	8004a70 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e04f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d20c      	bcs.n	8006e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b22      	ldr	r3, [pc, #136]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b20      	ldr	r3, [pc, #128]	; (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e032      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e1c:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4916      	ldr	r1, [pc, #88]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	490e      	ldr	r1, [pc, #56]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e4e:	f000 f821 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	490a      	ldr	r1, [pc, #40]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	5ccb      	ldrb	r3, [r1, r3]
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd fdba 	bl	80049e8 <HAL_InitTick>

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40023c00 	.word	0x40023c00
 8006e84:	40023800 	.word	0x40023800
 8006e88:	0800a97c 	.word	0x0800a97c
 8006e8c:	20000284 	.word	0x20000284
 8006e90:	20000288 	.word	0x20000288

08006e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e98:	b094      	sub	sp, #80	; 0x50
 8006e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eac:	4b79      	ldr	r3, [pc, #484]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d00d      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	f200 80e1 	bhi.w	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d003      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0x3a>
 8006ec6:	e0db      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec8:	4b73      	ldr	r3, [pc, #460]	; (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ecc:	e0db      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ece:	4b73      	ldr	r3, [pc, #460]	; (800709c <HAL_RCC_GetSysClockFreq+0x208>)
 8006ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ed2:	e0d8      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed4:	4b6f      	ldr	r3, [pc, #444]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006edc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ede:	4b6d      	ldr	r3, [pc, #436]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d063      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eea:	4b6a      	ldr	r3, [pc, #424]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	099b      	lsrs	r3, r3, #6
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	633b      	str	r3, [r7, #48]	; 0x30
 8006efe:	2300      	movs	r3, #0
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f06:	4622      	mov	r2, r4
 8006f08:	462b      	mov	r3, r5
 8006f0a:	f04f 0000 	mov.w	r0, #0
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	0159      	lsls	r1, r3, #5
 8006f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f18:	0150      	lsls	r0, r2, #5
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4621      	mov	r1, r4
 8006f20:	1a51      	subs	r1, r2, r1
 8006f22:	6139      	str	r1, [r7, #16]
 8006f24:	4629      	mov	r1, r5
 8006f26:	eb63 0301 	sbc.w	r3, r3, r1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	018b      	lsls	r3, r1, #6
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f42:	4651      	mov	r1, sl
 8006f44:	018a      	lsls	r2, r1, #6
 8006f46:	4651      	mov	r1, sl
 8006f48:	ebb2 0801 	subs.w	r8, r2, r1
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f66:	4690      	mov	r8, r2
 8006f68:	4699      	mov	r9, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	eb18 0303 	adds.w	r3, r8, r3
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	462b      	mov	r3, r5
 8006f74:	eb49 0303 	adc.w	r3, r9, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f86:	4629      	mov	r1, r5
 8006f88:	024b      	lsls	r3, r1, #9
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f90:	4621      	mov	r1, r4
 8006f92:	024a      	lsls	r2, r1, #9
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fa4:	f7f9 fdd4 	bl	8000b50 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4613      	mov	r3, r2
 8006fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb0:	e058      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb2:	4b38      	ldr	r3, [pc, #224]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	f04f 0000 	mov.w	r0, #0
 8006fd4:	f04f 0100 	mov.w	r1, #0
 8006fd8:	0159      	lsls	r1, r3, #5
 8006fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fde:	0150      	lsls	r0, r2, #5
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fea:	4649      	mov	r1, r9
 8006fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007004:	ebb2 040a 	subs.w	r4, r2, sl
 8007008:	eb63 050b 	sbc.w	r5, r3, fp
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	00eb      	lsls	r3, r5, #3
 8007016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701a:	00e2      	lsls	r2, r4, #3
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	4643      	mov	r3, r8
 8007022:	18e3      	adds	r3, r4, r3
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	464b      	mov	r3, r9
 8007028:	eb45 0303 	adc.w	r3, r5, r3
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800703a:	4629      	mov	r1, r5
 800703c:	028b      	lsls	r3, r1, #10
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007044:	4621      	mov	r1, r4
 8007046:	028a      	lsls	r2, r1, #10
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704e:	2200      	movs	r2, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	61fa      	str	r2, [r7, #28]
 8007054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007058:	f7f9 fd7a 	bl	8000b50 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800707e:	e002      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8007082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007088:	4618      	mov	r0, r3
 800708a:	3750      	adds	r7, #80	; 0x50
 800708c:	46bd      	mov	sp, r7
 800708e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	00f42400 	.word	0x00f42400
 800709c:	007a1200 	.word	0x007a1200

080070a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a4:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a6:	681b      	ldr	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000284 	.word	0x20000284

080070b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070bc:	f7ff fff0 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0a9b      	lsrs	r3, r3, #10
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4903      	ldr	r1, [pc, #12]	; (80070dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ce:	5ccb      	ldrb	r3, [r1, r3]
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	0800a98c 	.word	0x0800a98c

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070e4:	f7ff ffdc 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0b5b      	lsrs	r3, r3, #13
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4903      	ldr	r1, [pc, #12]	; (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40023800 	.word	0x40023800
 8007104:	0800a98c 	.word	0x0800a98c

08007108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e07b      	b.n	8007212 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712a:	d009      	beq.n	8007140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	61da      	str	r2, [r3, #28]
 8007132:	e005      	b.n	8007140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fd f964 	bl	8004428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007176:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c4:	ea42 0103 	orr.w	r1, r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	f003 0104 	and.w	r1, r3, #4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	f003 0210 	and.w	r2, r3, #16
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b08c      	sub	sp, #48	; 0x30
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007228:	2301      	movs	r3, #1
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x26>
 800723c:	2302      	movs	r3, #2
 800723e:	e18a      	b.n	8007556 <HAL_SPI_TransmitReceive+0x33c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007248:	f7fd fc12 	bl	8004a70 <HAL_GetTick>
 800724c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800725e:	887b      	ldrh	r3, [r7, #2]
 8007260:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007266:	2b01      	cmp	r3, #1
 8007268:	d00f      	beq.n	800728a <HAL_SPI_TransmitReceive+0x70>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007270:	d107      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x68>
 800727a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800727e:	2b04      	cmp	r3, #4
 8007280:	d003      	beq.n	800728a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007282:	2302      	movs	r3, #2
 8007284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007288:	e15b      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_SPI_TransmitReceive+0x82>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_TransmitReceive+0x82>
 8007296:	887b      	ldrh	r3, [r7, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072a2:	e14e      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d003      	beq.n	80072b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2205      	movs	r2, #5
 80072b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	887a      	ldrh	r2, [r7, #2]
 80072c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	887a      	ldrh	r2, [r7, #2]
 80072ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	887a      	ldrh	r2, [r7, #2]
 80072da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	887a      	ldrh	r2, [r7, #2]
 80072e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	d007      	beq.n	800730c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800730a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d178      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_SPI_TransmitReceive+0x10a>
 800731e:	8b7b      	ldrh	r3, [r7, #26]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d166      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	881a      	ldrh	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	1c9a      	adds	r2, r3, #2
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007348:	e053      	b.n	80073f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d11b      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x176>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <HAL_SPI_TransmitReceive+0x176>
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d113      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	881a      	ldrh	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	1c9a      	adds	r2, r3, #2
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d119      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x1b8>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d014      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	b292      	uxth	r2, r2
 80073b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	1c9a      	adds	r2, r3, #2
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ce:	2301      	movs	r3, #1
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073d2:	f7fd fb4d 	bl	8004a70 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073de:	429a      	cmp	r2, r3
 80073e0:	d807      	bhi.n	80073f2 <HAL_SPI_TransmitReceive+0x1d8>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d003      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073f0:	e0a7      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1a6      	bne.n	800734a <HAL_SPI_TransmitReceive+0x130>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1a1      	bne.n	800734a <HAL_SPI_TransmitReceive+0x130>
 8007406:	e07c      	b.n	8007502 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_SPI_TransmitReceive+0x1fc>
 8007410:	8b7b      	ldrh	r3, [r7, #26]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d16b      	bne.n	80074ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800743c:	e057      	b.n	80074ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b02      	cmp	r3, #2
 800744a:	d11c      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x26c>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d017      	beq.n	8007486 <HAL_SPI_TransmitReceive+0x26c>
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d114      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	330c      	adds	r3, #12
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d119      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x2ae>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074c4:	2301      	movs	r3, #1
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074c8:	f7fd fad2 	bl	8004a70 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d803      	bhi.n	80074e0 <HAL_SPI_TransmitReceive+0x2c6>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d102      	bne.n	80074e6 <HAL_SPI_TransmitReceive+0x2cc>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074ec:	e029      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1a2      	bne.n	800743e <HAL_SPI_TransmitReceive+0x224>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d19d      	bne.n	800743e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f8b2 	bl	8007670 <SPI_EndRxTxTransaction>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d006      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800751e:	e010      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	e000      	b.n	8007542 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007556:	4618      	mov	r0, r3
 8007558:	3730      	adds	r7, #48	; 0x30
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007570:	f7fd fa7e 	bl	8004a70 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007580:	f7fd fa76 	bl	8004a70 <HAL_GetTick>
 8007584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007586:	4b39      	ldr	r3, [pc, #228]	; (800766c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	015b      	lsls	r3, r3, #5
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	fb02 f303 	mul.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007596:	e054      	b.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d050      	beq.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075a0:	f7fd fa66 	bl	8004a70 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d902      	bls.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d13d      	bne.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ce:	d111      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d8:	d004      	beq.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e2:	d107      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d10f      	bne.n	800761e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800761c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e017      	b.n	8007662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3b01      	subs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4013      	ands	r3, r2
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	429a      	cmp	r2, r3
 8007650:	bf0c      	ite	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	2300      	movne	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	429a      	cmp	r2, r3
 800765e:	d19b      	bne.n	8007598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000284 	.word	0x20000284

08007670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af02      	add	r7, sp, #8
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800767c:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <SPI_EndRxTxTransaction+0x7c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <SPI_EndRxTxTransaction+0x80>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	0d5b      	lsrs	r3, r3, #21
 8007688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800768c:	fb02 f303 	mul.w	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800769a:	d112      	bne.n	80076c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	2180      	movs	r1, #128	; 0x80
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff ff5a 	bl	8007560 <SPI_WaitFlagStateUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f043 0220 	orr.w	r2, r3, #32
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e00f      	b.n	80076e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d0f2      	beq.n	80076c2 <SPI_EndRxTxTransaction+0x52>
 80076dc:	e000      	b.n	80076e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80076de:	bf00      	nop
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000284 	.word	0x20000284
 80076f0:	165e9f81 	.word	0x165e9f81

080076f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e04c      	b.n	80077a0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d111      	bne.n	8007736 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 fc0c 	bl	8008f38 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1f      	ldr	r2, [pc, #124]	; (80077a8 <HAL_TIM_Base_Init+0xb4>)
 800772c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f001 f929 	bl	80089a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	080044b9 	.word	0x080044b9

080077ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d001      	beq.n	80077c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e03c      	b.n	800783e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1e      	ldr	r2, [pc, #120]	; (800784c <HAL_TIM_Base_Start+0xa0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_TIM_Base_Start+0x5c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d013      	beq.n	8007808 <HAL_TIM_Base_Start+0x5c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <HAL_TIM_Base_Start+0xa4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_TIM_Base_Start+0x5c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a19      	ldr	r2, [pc, #100]	; (8007854 <HAL_TIM_Base_Start+0xa8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_TIM_Base_Start+0x5c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_TIM_Base_Start+0xac>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIM_Base_Start+0x5c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <HAL_TIM_Base_Start+0xb0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d111      	bne.n	800782c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d010      	beq.n	800783c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782a:	e007      	b.n	800783c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40014000 	.word	0x40014000

08007860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d001      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e044      	b.n	8007902 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <HAL_TIM_Base_Start_IT+0xb0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x6c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a2:	d013      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x6c>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1a      	ldr	r2, [pc, #104]	; (8007914 <HAL_TIM_Base_Start_IT+0xb4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x6c>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a19      	ldr	r2, [pc, #100]	; (8007918 <HAL_TIM_Base_Start_IT+0xb8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x6c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a17      	ldr	r2, [pc, #92]	; (800791c <HAL_TIM_Base_Start_IT+0xbc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x6c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <HAL_TIM_Base_Start_IT+0xc0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d111      	bne.n	80078f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d010      	beq.n	8007900 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ee:	e007      	b.n	8007900 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40014000 	.word	0x40014000

08007924 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e04c      	b.n	80079d0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d111      	bne.n	8007966 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 faf4 	bl	8008f38 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <HAL_TIM_OC_Init+0xb4>)
 800795c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f001 f811 	bl	80089a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	080079dd 	.word	0x080079dd

080079dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e04c      	b.n	8007a9c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d111      	bne.n	8007a32 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fa8e 	bl	8008f38 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <HAL_TIM_PWM_Init+0xb4>)
 8007a28:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2202      	movs	r2, #2
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f000 ffab 	bl	80089a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	08007aa9 	.word	0x08007aa9

08007aa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <HAL_TIM_PWM_Start+0x24>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	e022      	b.n	8007b26 <HAL_TIM_PWM_Start+0x6a>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d109      	bne.n	8007afa <HAL_TIM_PWM_Start+0x3e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	bf14      	ite	ne
 8007af2:	2301      	movne	r3, #1
 8007af4:	2300      	moveq	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	e015      	b.n	8007b26 <HAL_TIM_PWM_Start+0x6a>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d109      	bne.n	8007b14 <HAL_TIM_PWM_Start+0x58>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	bf14      	ite	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	2300      	moveq	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	e008      	b.n	8007b26 <HAL_TIM_PWM_Start+0x6a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e068      	b.n	8007c00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_PWM_Start+0x82>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b3c:	e013      	b.n	8007b66 <HAL_TIM_PWM_Start+0xaa>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d104      	bne.n	8007b4e <HAL_TIM_PWM_Start+0x92>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b4c:	e00b      	b.n	8007b66 <HAL_TIM_PWM_Start+0xaa>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d104      	bne.n	8007b5e <HAL_TIM_PWM_Start+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b5c:	e003      	b.n	8007b66 <HAL_TIM_PWM_Start+0xaa>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 f9bc 	bl	8008eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <HAL_TIM_PWM_Start+0x14c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d107      	bne.n	8007b8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <HAL_TIM_PWM_Start+0x14c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d018      	beq.n	8007bca <HAL_TIM_PWM_Start+0x10e>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba0:	d013      	beq.n	8007bca <HAL_TIM_PWM_Start+0x10e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <HAL_TIM_PWM_Start+0x150>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00e      	beq.n	8007bca <HAL_TIM_PWM_Start+0x10e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a17      	ldr	r2, [pc, #92]	; (8007c10 <HAL_TIM_PWM_Start+0x154>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <HAL_TIM_PWM_Start+0x10e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a16      	ldr	r2, [pc, #88]	; (8007c14 <HAL_TIM_PWM_Start+0x158>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <HAL_TIM_PWM_Start+0x10e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <HAL_TIM_PWM_Start+0x15c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d111      	bne.n	8007bee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b06      	cmp	r3, #6
 8007bda:	d010      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bec:	e007      	b.n	8007bfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40010000 	.word	0x40010000
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40014000 	.word	0x40014000

08007c1c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e04c      	b.n	8007cca <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f977 	bl	8008f38 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1f      	ldr	r2, [pc, #124]	; (8007cd4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007c56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	4610      	mov	r0, r2
 8007c74:	f000 fe94 	bl	80089a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0208 	bic.w	r2, r2, #8
 8007c86:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08007cd9 	.word	0x08007cd9

08007cd8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d14:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d108      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d105      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	7b7b      	ldrb	r3, [r7, #13]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d28:	7b3b      	ldrb	r3, [r7, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d001      	beq.n	8007d32 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e03b      	b.n	8007daa <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0202 	orr.w	r2, r2, #2
 8007d60:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0204 	orr.w	r2, r2, #4
 8007d70:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 f8b6 	bl	8008eec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	2104      	movs	r1, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f8af 	bl	8008eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d107      	bne.n	8007da8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40010000 	.word	0x40010000

08007db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0a2      	b.n	8007f12 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d111      	bne.n	8007dfc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f8a9 	bl	8008f38 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a4a      	ldr	r2, [pc, #296]	; (8007f1c <HAL_TIM_Encoder_Init+0x164>)
 8007df2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f000 fdbc 	bl	80089a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	4313      	orrs	r3, r2
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e6e:	f023 030c 	bic.w	r3, r3, #12
 8007e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	011a      	lsls	r2, r3, #4
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	031b      	lsls	r3, r3, #12
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007eac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007eb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	080045bd 	.word	0x080045bd

08007f20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d110      	bne.n	8007f72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d102      	bne.n	8007f5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d001      	beq.n	8007f60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e069      	b.n	8008034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f70:	e031      	b.n	8007fd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d110      	bne.n	8007f9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d102      	bne.n	8007f84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f7e:	7b3b      	ldrb	r3, [r7, #12]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d001      	beq.n	8007f88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e055      	b.n	8008034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f98:	e01d      	b.n	8007fd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d108      	bne.n	8007fb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d105      	bne.n	8007fb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa6:	7b7b      	ldrb	r3, [r7, #13]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d102      	bne.n	8007fb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fac:	7b3b      	ldrb	r3, [r7, #12]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d001      	beq.n	8007fb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e03e      	b.n	8008034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_TIM_Encoder_Start+0xc4>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d008      	beq.n	8007ff4 <HAL_TIM_Encoder_Start+0xd4>
 8007fe2:	e00f      	b.n	8008004 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 ff7d 	bl	8008eec <TIM_CCxChannelCmd>
      break;
 8007ff2:	e016      	b.n	8008022 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 ff75 	bl	8008eec <TIM_CCxChannelCmd>
      break;
 8008002:	e00e      	b.n	8008022 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2201      	movs	r2, #1
 800800a:	2100      	movs	r1, #0
 800800c:	4618      	mov	r0, r3
 800800e:	f000 ff6d 	bl	8008eec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2201      	movs	r2, #1
 8008018:	2104      	movs	r1, #4
 800801a:	4618      	mov	r0, r3
 800801c:	f000 ff66 	bl	8008eec <TIM_CCxChannelCmd>
      break;
 8008020:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0201 	orr.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b02      	cmp	r3, #2
 8008050:	d128      	bne.n	80080a4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d121      	bne.n	80080a4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0202 	mvn.w	r2, #2
 8008068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
 8008088:	e009      	b.n	800809e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d128      	bne.n	8008104 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d121      	bne.n	8008104 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f06f 0204 	mvn.w	r2, #4
 80080c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	e009      	b.n	80080fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b08      	cmp	r3, #8
 8008110:	d128      	bne.n	8008164 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	2b08      	cmp	r3, #8
 800811e:	d121      	bne.n	8008164 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0208 	mvn.w	r2, #8
 8008128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2204      	movs	r2, #4
 800812e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
 8008148:	e009      	b.n	800815e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b10      	cmp	r3, #16
 8008170:	d128      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b10      	cmp	r3, #16
 800817e:	d121      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0210 	mvn.w	r2, #16
 8008188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2208      	movs	r2, #8
 800818e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	e009      	b.n	80081be <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d110      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d109      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f06f 0201 	mvn.w	r2, #1
 80081e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d110      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820c:	2b80      	cmp	r3, #128	; 0x80
 800820e:	d109      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d110      	bne.n	8008254 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d109      	bne.n	8008254 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b20      	cmp	r3, #32
 8008260:	d110      	bne.n	8008284 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b20      	cmp	r3, #32
 800826e:	d109      	bne.n	8008284 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0220 	mvn.w	r2, #32
 8008278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e048      	b.n	800833c <HAL_TIM_OC_ConfigChannel+0xb0>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b0c      	cmp	r3, #12
 80082b6:	d839      	bhi.n	800832c <HAL_TIM_OC_ConfigChannel+0xa0>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082f5 	.word	0x080082f5
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	0800832d 	.word	0x0800832d
 80082cc:	0800832d 	.word	0x0800832d
 80082d0:	08008303 	.word	0x08008303
 80082d4:	0800832d 	.word	0x0800832d
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	0800832d 	.word	0x0800832d
 80082e0:	08008311 	.word	0x08008311
 80082e4:	0800832d 	.word	0x0800832d
 80082e8:	0800832d 	.word	0x0800832d
 80082ec:	0800832d 	.word	0x0800832d
 80082f0:	0800831f 	.word	0x0800831f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fbd0 	bl	8008aa0 <TIM_OC1_SetConfig>
      break;
 8008300:	e017      	b.n	8008332 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fc2f 	bl	8008b6c <TIM_OC2_SetConfig>
      break;
 800830e:	e010      	b.n	8008332 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fc94 	bl	8008c44 <TIM_OC3_SetConfig>
      break;
 800831c:	e009      	b.n	8008332 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fcf7 	bl	8008d18 <TIM_OC4_SetConfig>
      break;
 800832a:	e002      	b.n	8008332 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
      break;
 8008330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800835e:	2302      	movs	r3, #2
 8008360:	e0ae      	b.n	80084c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b0c      	cmp	r3, #12
 800836e:	f200 809f 	bhi.w	80084b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	080083ad 	.word	0x080083ad
 800837c:	080084b1 	.word	0x080084b1
 8008380:	080084b1 	.word	0x080084b1
 8008384:	080084b1 	.word	0x080084b1
 8008388:	080083ed 	.word	0x080083ed
 800838c:	080084b1 	.word	0x080084b1
 8008390:	080084b1 	.word	0x080084b1
 8008394:	080084b1 	.word	0x080084b1
 8008398:	0800842f 	.word	0x0800842f
 800839c:	080084b1 	.word	0x080084b1
 80083a0:	080084b1 	.word	0x080084b1
 80083a4:	080084b1 	.word	0x080084b1
 80083a8:	0800846f 	.word	0x0800846f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb74 	bl	8008aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0208 	orr.w	r2, r2, #8
 80083c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0204 	bic.w	r2, r2, #4
 80083d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6999      	ldr	r1, [r3, #24]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	619a      	str	r2, [r3, #24]
      break;
 80083ea:	e064      	b.n	80084b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fbba 	bl	8008b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	021a      	lsls	r2, r3, #8
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	619a      	str	r2, [r3, #24]
      break;
 800842c:	e043      	b.n	80084b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fc05 	bl	8008c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0208 	orr.w	r2, r2, #8
 8008448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69da      	ldr	r2, [r3, #28]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0204 	bic.w	r2, r2, #4
 8008458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69d9      	ldr	r1, [r3, #28]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	61da      	str	r2, [r3, #28]
      break;
 800846c:	e023      	b.n	80084b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fc4f 	bl	8008d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69d9      	ldr	r1, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	021a      	lsls	r2, r3, #8
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	61da      	str	r2, [r3, #28]
      break;
 80084ae:	e002      	b.n	80084b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
      break;
 80084b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_TIM_ConfigClockSource+0x1c>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e0b4      	b.n	800864e <HAL_TIM_ConfigClockSource+0x186>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851c:	d03e      	beq.n	800859c <HAL_TIM_ConfigClockSource+0xd4>
 800851e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008522:	f200 8087 	bhi.w	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852a:	f000 8086 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x172>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008532:	d87f      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008534:	2b70      	cmp	r3, #112	; 0x70
 8008536:	d01a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0xa6>
 8008538:	2b70      	cmp	r3, #112	; 0x70
 800853a:	d87b      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b60      	cmp	r3, #96	; 0x60
 800853e:	d050      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008540:	2b60      	cmp	r3, #96	; 0x60
 8008542:	d877      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b50      	cmp	r3, #80	; 0x50
 8008546:	d03c      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008548:	2b50      	cmp	r3, #80	; 0x50
 800854a:	d873      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	d058      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0x13a>
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d86f      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b30      	cmp	r3, #48	; 0x30
 8008556:	d064      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008558:	2b30      	cmp	r3, #48	; 0x30
 800855a:	d86b      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b20      	cmp	r3, #32
 800855e:	d060      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008560:	2b20      	cmp	r3, #32
 8008562:	d867      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d05c      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008568:	2b10      	cmp	r3, #16
 800856a:	d05a      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 800856c:	e062      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6899      	ldr	r1, [r3, #8]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f000 fc95 	bl	8008eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	609a      	str	r2, [r3, #8]
      break;
 800859a:	e04f      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	6899      	ldr	r1, [r3, #8]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f000 fc7e 	bl	8008eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085be:	609a      	str	r2, [r3, #8]
      break;
 80085c0:	e03c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6859      	ldr	r1, [r3, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f000 fbf2 	bl	8008db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2150      	movs	r1, #80	; 0x50
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fc4b 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 80085e0:	e02c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6859      	ldr	r1, [r3, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f000 fc11 	bl	8008e16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2160      	movs	r1, #96	; 0x60
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fc3b 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008600:	e01c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	f000 fbd2 	bl	8008db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2140      	movs	r1, #64	; 0x40
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fc2b 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008620:	e00c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f000 fc22 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008632:	e003      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
      break;
 8008638:	e000      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800863a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	460b      	mov	r3, r1
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e135      	b.n	8008994 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_TIM_RegisterCallback+0x2a>
 8008732:	2302      	movs	r3, #2
 8008734:	e12e      	b.n	8008994 <HAL_TIM_RegisterCallback+0x288>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b01      	cmp	r3, #1
 8008748:	f040 80ba 	bne.w	80088c0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	2b1a      	cmp	r3, #26
 8008750:	f200 80b3 	bhi.w	80088ba <HAL_TIM_RegisterCallback+0x1ae>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <HAL_TIM_RegisterCallback+0x50>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	080087c9 	.word	0x080087c9
 8008760:	080087d1 	.word	0x080087d1
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087e1 	.word	0x080087e1
 800876c:	080087e9 	.word	0x080087e9
 8008770:	080087f1 	.word	0x080087f1
 8008774:	080087f9 	.word	0x080087f9
 8008778:	08008801 	.word	0x08008801
 800877c:	08008809 	.word	0x08008809
 8008780:	08008811 	.word	0x08008811
 8008784:	08008819 	.word	0x08008819
 8008788:	08008821 	.word	0x08008821
 800878c:	08008829 	.word	0x08008829
 8008790:	08008831 	.word	0x08008831
 8008794:	08008839 	.word	0x08008839
 8008798:	08008843 	.word	0x08008843
 800879c:	0800884d 	.word	0x0800884d
 80087a0:	08008857 	.word	0x08008857
 80087a4:	08008861 	.word	0x08008861
 80087a8:	0800886b 	.word	0x0800886b
 80087ac:	08008875 	.word	0x08008875
 80087b0:	0800887f 	.word	0x0800887f
 80087b4:	08008889 	.word	0x08008889
 80087b8:	08008893 	.word	0x08008893
 80087bc:	0800889d 	.word	0x0800889d
 80087c0:	080088a7 	.word	0x080088a7
 80087c4:	080088b1 	.word	0x080088b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80087ce:	e0dc      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80087d6:	e0d8      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80087de:	e0d4      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80087e6:	e0d0      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80087ee:	e0cc      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80087f6:	e0c8      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80087fe:	e0c4      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008806:	e0c0      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800880e:	e0bc      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008816:	e0b8      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800881e:	e0b4      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008826:	e0b0      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800882e:	e0ac      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008836:	e0a8      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008840:	e0a3      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800884a:	e09e      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008854:	e099      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800885e:	e094      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008868:	e08f      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008872:	e08a      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800887c:	e085      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008886:	e080      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008890:	e07b      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800889a:	e076      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80088a4:	e071      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80088ae:	e06c      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80088b8:	e067      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	75fb      	strb	r3, [r7, #23]
        break;
 80088be:	e064      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d15c      	bne.n	8008986 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	2b0d      	cmp	r3, #13
 80088d0:	d856      	bhi.n	8008980 <HAL_TIM_RegisterCallback+0x274>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <HAL_TIM_RegisterCallback+0x1cc>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	08008911 	.word	0x08008911
 80088dc:	08008919 	.word	0x08008919
 80088e0:	08008921 	.word	0x08008921
 80088e4:	08008929 	.word	0x08008929
 80088e8:	08008931 	.word	0x08008931
 80088ec:	08008939 	.word	0x08008939
 80088f0:	08008941 	.word	0x08008941
 80088f4:	08008949 	.word	0x08008949
 80088f8:	08008951 	.word	0x08008951
 80088fc:	08008959 	.word	0x08008959
 8008900:	08008961 	.word	0x08008961
 8008904:	08008969 	.word	0x08008969
 8008908:	08008971 	.word	0x08008971
 800890c:	08008979 	.word	0x08008979
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008916:	e038      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800891e:	e034      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008926:	e030      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800892e:	e02c      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008936:	e028      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800893e:	e024      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008946:	e020      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800894e:	e01c      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008956:	e018      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800895e:	e014      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008966:	e010      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800896e:	e00c      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008976:	e008      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800897e:	e004      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
        break;
 8008984:	e001      	b.n	800898a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
}
 8008994:	4618      	mov	r0, r3
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a34      	ldr	r2, [pc, #208]	; (8008a84 <TIM_Base_SetConfig+0xe4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00f      	beq.n	80089d8 <TIM_Base_SetConfig+0x38>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089be:	d00b      	beq.n	80089d8 <TIM_Base_SetConfig+0x38>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a31      	ldr	r2, [pc, #196]	; (8008a88 <TIM_Base_SetConfig+0xe8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <TIM_Base_SetConfig+0x38>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a30      	ldr	r2, [pc, #192]	; (8008a8c <TIM_Base_SetConfig+0xec>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_Base_SetConfig+0x38>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a2f      	ldr	r2, [pc, #188]	; (8008a90 <TIM_Base_SetConfig+0xf0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d108      	bne.n	80089ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a25      	ldr	r2, [pc, #148]	; (8008a84 <TIM_Base_SetConfig+0xe4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01b      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f8:	d017      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <TIM_Base_SetConfig+0xe8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <TIM_Base_SetConfig+0xec>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00f      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a20      	ldr	r2, [pc, #128]	; (8008a90 <TIM_Base_SetConfig+0xf0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00b      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <TIM_Base_SetConfig+0xf4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d007      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <TIM_Base_SetConfig+0xf8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d003      	beq.n	8008a2a <TIM_Base_SetConfig+0x8a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <TIM_Base_SetConfig+0xfc>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d108      	bne.n	8008a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a08      	ldr	r2, [pc, #32]	; (8008a84 <TIM_Base_SetConfig+0xe4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d103      	bne.n	8008a70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	615a      	str	r2, [r3, #20]
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40014000 	.word	0x40014000
 8008a98:	40014400 	.word	0x40014400
 8008a9c:	40014800 	.word	0x40014800

08008aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f023 0201 	bic.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f023 0302 	bic.w	r3, r3, #2
 8008ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <TIM_OC1_SetConfig+0xc8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d10c      	bne.n	8008b16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f023 0308 	bic.w	r3, r3, #8
 8008b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <TIM_OC1_SetConfig+0xc8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d111      	bne.n	8008b42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	621a      	str	r2, [r3, #32]
}
 8008b5c:	bf00      	nop
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	40010000 	.word	0x40010000

08008b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f023 0210 	bic.w	r2, r3, #16
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 0320 	bic.w	r3, r3, #32
 8008bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <TIM_OC2_SetConfig+0xd4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10d      	bne.n	8008be8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <TIM_OC2_SetConfig+0xd4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d113      	bne.n	8008c18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	40010000 	.word	0x40010000

08008c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0303 	bic.w	r3, r3, #3
 8008c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <TIM_OC3_SetConfig+0xd0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d10d      	bne.n	8008cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a14      	ldr	r2, [pc, #80]	; (8008d14 <TIM_OC3_SetConfig+0xd0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d113      	bne.n	8008cee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40010000 	.word	0x40010000

08008d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	031b      	lsls	r3, r3, #12
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a10      	ldr	r2, [pc, #64]	; (8008db4 <TIM_OC4_SetConfig+0x9c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d109      	bne.n	8008d8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	019b      	lsls	r3, r3, #6
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40010000 	.word	0x40010000

08008db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0201 	bic.w	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f023 030a 	bic.w	r3, r3, #10
 8008df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b087      	sub	sp, #28
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	f023 0210 	bic.w	r2, r3, #16
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	031b      	lsls	r3, r3, #12
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f043 0307 	orr.w	r3, r3, #7
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	021a      	lsls	r2, r3, #8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	2201      	movs	r2, #1
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	401a      	ands	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1a      	ldr	r2, [r3, #32]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	fa01 f303 	lsl.w	r3, r1, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <TIM_ResetCallback+0x7c>)
 8008f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a1b      	ldr	r2, [pc, #108]	; (8008fb8 <TIM_ResetCallback+0x80>)
 8008f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <TIM_ResetCallback+0x84>)
 8008f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a19      	ldr	r2, [pc, #100]	; (8008fc0 <TIM_ResetCallback+0x88>)
 8008f5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a18      	ldr	r2, [pc, #96]	; (8008fc4 <TIM_ResetCallback+0x8c>)
 8008f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <TIM_ResetCallback+0x90>)
 8008f6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a16      	ldr	r2, [pc, #88]	; (8008fcc <TIM_ResetCallback+0x94>)
 8008f74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <TIM_ResetCallback+0x98>)
 8008f7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a14      	ldr	r2, [pc, #80]	; (8008fd4 <TIM_ResetCallback+0x9c>)
 8008f84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <TIM_ResetCallback+0xa0>)
 8008f8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <TIM_ResetCallback+0xa4>)
 8008f94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a11      	ldr	r2, [pc, #68]	; (8008fe0 <TIM_ResetCallback+0xa8>)
 8008f9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a10      	ldr	r2, [pc, #64]	; (8008fe4 <TIM_ResetCallback+0xac>)
 8008fa4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	080035f9 	.word	0x080035f9
 8008fb8:	08008657 	.word	0x08008657
 8008fbc:	080086cf 	.word	0x080086cf
 8008fc0:	080086e3 	.word	0x080086e3
 8008fc4:	0800867f 	.word	0x0800867f
 8008fc8:	08008693 	.word	0x08008693
 8008fcc:	0800866b 	.word	0x0800866b
 8008fd0:	080086a7 	.word	0x080086a7
 8008fd4:	080086bb 	.word	0x080086bb
 8008fd8:	080086f7 	.word	0x080086f7
 8008fdc:	08009169 	.word	0x08009169
 8008fe0:	0800917d 	.word	0x0800917d
 8008fe4:	08009191 	.word	0x08009191

08008fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e050      	b.n	80090a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1c      	ldr	r2, [pc, #112]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d018      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904c:	d013      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a18      	ldr	r2, [pc, #96]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a15      	ldr	r2, [pc, #84]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d10c      	bne.n	8009090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800907c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	4313      	orrs	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40014000 	.word	0x40014000

080090c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090dc:	2302      	movs	r3, #2
 80090de:	e03d      	b.n	800915c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e04a      	b.n	800924c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d111      	bne.n	80091e6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fd2c 	bl	8009c28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <HAL_UART_Init+0xb0>)
 80091dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2224      	movs	r2, #36	; 0x24
 80091ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fff6 	bl	800a1f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691a      	ldr	r2, [r3, #16]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009212:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009222:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009232:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	080046bd 	.word	0x080046bd

08009258 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	460b      	mov	r3, r1
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d107      	bne.n	8009280 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	f043 0220 	orr.w	r2, r3, #32
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e08c      	b.n	800939a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_UART_RegisterCallback+0x36>
 800928a:	2302      	movs	r3, #2
 800928c:	e085      	b.n	800939a <HAL_UART_RegisterCallback+0x142>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d151      	bne.n	8009346 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80092a2:	7afb      	ldrb	r3, [r7, #11]
 80092a4:	2b0c      	cmp	r3, #12
 80092a6:	d845      	bhi.n	8009334 <HAL_UART_RegisterCallback+0xdc>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <HAL_UART_RegisterCallback+0x58>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092e5 	.word	0x080092e5
 80092b4:	080092ed 	.word	0x080092ed
 80092b8:	080092f5 	.word	0x080092f5
 80092bc:	080092fd 	.word	0x080092fd
 80092c0:	08009305 	.word	0x08009305
 80092c4:	0800930d 	.word	0x0800930d
 80092c8:	08009315 	.word	0x08009315
 80092cc:	0800931d 	.word	0x0800931d
 80092d0:	08009335 	.word	0x08009335
 80092d4:	08009335 	.word	0x08009335
 80092d8:	08009335 	.word	0x08009335
 80092dc:	08009325 	.word	0x08009325
 80092e0:	0800932d 	.word	0x0800932d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80092ea:	e051      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80092f2:	e04d      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80092fa:	e049      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009302:	e045      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800930a:	e041      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009312:	e03d      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800931a:	e039      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009322:	e035      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800932a:	e031      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009332:	e02d      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009338:	f043 0220 	orr.w	r2, r3, #32
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]
        break;
 8009344:	e024      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d116      	bne.n	8009380 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	2b0b      	cmp	r3, #11
 8009356:	d002      	beq.n	800935e <HAL_UART_RegisterCallback+0x106>
 8009358:	2b0c      	cmp	r3, #12
 800935a:	d004      	beq.n	8009366 <HAL_UART_RegisterCallback+0x10e>
 800935c:	e007      	b.n	800936e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009364:	e014      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800936c:	e010      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	f043 0220 	orr.w	r2, r3, #32
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	75fb      	strb	r3, [r7, #23]
        break;
 800937e:	e007      	b.n	8009390 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	f043 0220 	orr.w	r2, r3, #32
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009398:	7dfb      	ldrb	r3, [r7, #23]
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop

080093a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d11d      	bne.n	80093fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_UART_Receive_IT+0x26>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e016      	b.n	8009400 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_UART_Receive_IT+0x38>
 80093dc:	2302      	movs	r3, #2
 80093de:	e00f      	b.n	8009400 <HAL_UART_Receive_IT+0x58>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	461a      	mov	r2, r3
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fcf7 	bl	8009de8 <UART_Start_Receive_IT>
 80093fa:	4603      	mov	r3, r0
 80093fc:	e000      	b.n	8009400 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b20      	cmp	r3, #32
 8009420:	d165      	bne.n	80094ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_UART_Transmit_DMA+0x26>
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e05e      	b.n	80094f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UART_Transmit_DMA+0x38>
 800943c:	2302      	movs	r3, #2
 800943e:	e057      	b.n	80094f0 <HAL_UART_Transmit_DMA+0xe8>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	88fa      	ldrh	r2, [r7, #6]
 8009458:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2221      	movs	r2, #33	; 0x21
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946c:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <HAL_UART_Transmit_DMA+0xf0>)
 800946e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	4a21      	ldr	r2, [pc, #132]	; (80094fc <HAL_UART_Transmit_DMA+0xf4>)
 8009476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	4a20      	ldr	r2, [pc, #128]	; (8009500 <HAL_UART_Transmit_DMA+0xf8>)
 800947e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	2200      	movs	r2, #0
 8009486:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	6819      	ldr	r1, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3304      	adds	r3, #4
 800949c:	461a      	mov	r2, r3
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	f7fb fcd6 	bl	8004e50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	617b      	str	r3, [r7, #20]
   return(result);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d6:	627a      	str	r2, [r7, #36]	; 0x24
 80094d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6a39      	ldr	r1, [r7, #32]
 80094dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3730      	adds	r7, #48	; 0x30
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08009c99 	.word	0x08009c99
 80094fc:	08009d35 	.word	0x08009d35
 8009500:	08009d53 	.word	0x08009d53

08009504 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b09a      	sub	sp, #104	; 0x68
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800951c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009522:	667b      	str	r3, [r7, #100]	; 0x64
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	330c      	adds	r3, #12
 800952a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800952c:	657a      	str	r2, [r7, #84]	; 0x54
 800952e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e5      	bne.n	800950c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3314      	adds	r3, #20
 8009546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	663b      	str	r3, [r7, #96]	; 0x60
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3314      	adds	r3, #20
 800955e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009560:	643a      	str	r2, [r7, #64]	; 0x40
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e5      	bne.n	8009540 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009578:	2b01      	cmp	r3, #1
 800957a:	d119      	bne.n	80095b0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	61fb      	str	r3, [r7, #28]
   return(result);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f023 0310 	bic.w	r3, r3, #16
 8009592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800959c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800959e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e5      	bne.n	800957c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ba:	2b40      	cmp	r3, #64	; 0x40
 80095bc:	d136      	bne.n	800962c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3314      	adds	r3, #20
 80095c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3314      	adds	r3, #20
 80095dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095de:	61ba      	str	r2, [r7, #24]
 80095e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6979      	ldr	r1, [r7, #20]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	613b      	str	r3, [r7, #16]
   return(result);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d018      	beq.n	800962c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	2200      	movs	r2, #0
 8009600:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	4618      	mov	r0, r3
 8009608:	f7fb fc7a 	bl	8004f00 <HAL_DMA_Abort>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00c      	beq.n	800962c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	4618      	mov	r0, r3
 8009618:	f7fb fe8e 	bl	8005338 <HAL_DMA_GetError>
 800961c:	4603      	mov	r3, r0
 800961e:	2b20      	cmp	r3, #32
 8009620:	d104      	bne.n	800962c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2210      	movs	r2, #16
 8009626:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e00a      	b.n	8009642 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3768      	adds	r7, #104	; 0x68
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b0ba      	sub	sp, #232	; 0xe8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009672:	2300      	movs	r3, #0
 8009674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009678:	2300      	movs	r3, #0
 800967a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800968a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10f      	bne.n	80096b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d009      	beq.n	80096b2 <HAL_UART_IRQHandler+0x66>
 800969e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fce3 	bl	800a076 <UART_Receive_IT>
      return;
 80096b0:	e25b      	b.n	8009b6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80096b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80e1 	beq.w	800987e <HAL_UART_IRQHandler+0x232>
 80096bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80d4 	beq.w	800987e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <HAL_UART_IRQHandler+0xae>
 80096e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	f043 0201 	orr.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <HAL_UART_IRQHandler+0xd2>
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	f043 0202 	orr.w	r2, r3, #2
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800971e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00b      	beq.n	8009742 <HAL_UART_IRQHandler+0xf6>
 800972a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f043 0204 	orr.w	r2, r3, #4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009746:	f003 0308 	and.w	r3, r3, #8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d011      	beq.n	8009772 <HAL_UART_IRQHandler+0x126>
 800974e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800975a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	f043 0208 	orr.w	r2, r3, #8
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 81f2 	beq.w	8009b60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800977c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d008      	beq.n	800979a <HAL_UART_IRQHandler+0x14e>
 8009788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800978c:	f003 0320 	and.w	r3, r3, #32
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fc6e 	bl	800a076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	bf0c      	ite	eq
 80097a8:	2301      	moveq	r3, #1
 80097aa:	2300      	movne	r3, #0
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <HAL_UART_IRQHandler+0x17a>
 80097be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d051      	beq.n	800986a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fb74 	bl	8009eb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d6:	2b40      	cmp	r3, #64	; 0x40
 80097d8:	d142      	bne.n	8009860 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3314      	adds	r3, #20
 80097e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3314      	adds	r3, #20
 8009802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800980a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800981e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1d9      	bne.n	80097da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982a:	2b00      	cmp	r3, #0
 800982c:	d013      	beq.n	8009856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	4a7f      	ldr	r2, [pc, #508]	; (8009a30 <HAL_UART_IRQHandler+0x3e4>)
 8009834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb fbd0 	bl	8004fe0 <HAL_DMA_Abort_IT>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d019      	beq.n	800987a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009854:	e011      	b.n	800987a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985e:	e00c      	b.n	800987a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	e007      	b.n	800987a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009878:	e172      	b.n	8009b60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987a:	bf00      	nop
    return;
 800987c:	e170      	b.n	8009b60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	2b01      	cmp	r3, #1
 8009884:	f040 814c 	bne.w	8009b20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 8145 	beq.w	8009b20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 813e 	beq.w	8009b20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098a4:	2300      	movs	r3, #0
 80098a6:	60bb      	str	r3, [r7, #8]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60bb      	str	r3, [r7, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	60bb      	str	r3, [r7, #8]
 80098b8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c4:	2b40      	cmp	r3, #64	; 0x40
 80098c6:	f040 80b5 	bne.w	8009a34 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8142 	beq.w	8009b64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098e8:	429a      	cmp	r2, r3
 80098ea:	f080 813b 	bcs.w	8009b64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009900:	f000 8088 	beq.w	8009a14 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	330c      	adds	r3, #12
 800990a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800991a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009930:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800993c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1d9      	bne.n	8009904 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3314      	adds	r3, #20
 8009956:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009962:	f023 0301 	bic.w	r3, r3, #1
 8009966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3314      	adds	r3, #20
 8009970:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009974:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009978:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800997c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e1      	bne.n	8009950 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3314      	adds	r3, #20
 8009992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800999c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3314      	adds	r3, #20
 80099ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e3      	bne.n	800998c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	330c      	adds	r3, #12
 80099d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e4:	f023 0310 	bic.w	r3, r3, #16
 80099e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80099f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e3      	bne.n	80099d2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fb fa76 	bl	8004f00 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009a20:	b292      	uxth	r2, r2
 8009a22:	1a8a      	subs	r2, r1, r2
 8009a24:	b292      	uxth	r2, r2
 8009a26:	4611      	mov	r1, r2
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a2c:	e09a      	b.n	8009b64 <HAL_UART_IRQHandler+0x518>
 8009a2e:	bf00      	nop
 8009a30:	08009f7b 	.word	0x08009f7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 808c 	beq.w	8009b68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8087 	beq.w	8009b68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	330c      	adds	r3, #12
 8009a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a7e:	647a      	str	r2, [r7, #68]	; 0x44
 8009a80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e3      	bne.n	8009a5a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3314      	adds	r3, #20
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f023 0301 	bic.w	r3, r3, #1
 8009aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ab6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e3      	bne.n	8009a92 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	330c      	adds	r3, #12
 8009ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f023 0310 	bic.w	r3, r3, #16
 8009aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	330c      	adds	r3, #12
 8009af8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009afc:	61fa      	str	r2, [r7, #28]
 8009afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	69b9      	ldr	r1, [r7, #24]
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	617b      	str	r3, [r7, #20]
   return(result);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e3      	bne.n	8009ad8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b14:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009b18:	4611      	mov	r1, r2
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b1e:	e023      	b.n	8009b68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d009      	beq.n	8009b40 <HAL_UART_IRQHandler+0x4f4>
 8009b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa33 	bl	8009fa4 <UART_Transmit_IT>
    return;
 8009b3e:	e014      	b.n	8009b6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <HAL_UART_IRQHandler+0x51e>
 8009b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d008      	beq.n	8009b6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fa73 	bl	800a044 <UART_EndTransmit_IT>
    return;
 8009b5e:	e004      	b.n	8009b6a <HAL_UART_IRQHandler+0x51e>
    return;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <HAL_UART_IRQHandler+0x51e>
      return;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <HAL_UART_IRQHandler+0x51e>
      return;
 8009b68:	bf00      	nop
  }
}
 8009b6a:	37e8      	adds	r7, #232	; 0xe8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a10      	ldr	r2, [pc, #64]	; (8009c74 <UART_InitCallbacksToDefault+0x4c>)
 8009c34:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a0f      	ldr	r2, [pc, #60]	; (8009c78 <UART_InitCallbacksToDefault+0x50>)
 8009c3a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a0f      	ldr	r2, [pc, #60]	; (8009c7c <UART_InitCallbacksToDefault+0x54>)
 8009c40:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a0e      	ldr	r2, [pc, #56]	; (8009c80 <UART_InitCallbacksToDefault+0x58>)
 8009c46:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a0e      	ldr	r2, [pc, #56]	; (8009c84 <UART_InitCallbacksToDefault+0x5c>)
 8009c4c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <UART_InitCallbacksToDefault+0x60>)
 8009c52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a0d      	ldr	r2, [pc, #52]	; (8009c8c <UART_InitCallbacksToDefault+0x64>)
 8009c58:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a0c      	ldr	r2, [pc, #48]	; (8009c90 <UART_InitCallbacksToDefault+0x68>)
 8009c5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a0c      	ldr	r2, [pc, #48]	; (8009c94 <UART_InitCallbacksToDefault+0x6c>)
 8009c64:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	08009b85 	.word	0x08009b85
 8009c78:	08009b71 	.word	0x08009b71
 8009c7c:	08009bad 	.word	0x08009bad
 8009c80:	08009b99 	.word	0x08009b99
 8009c84:	08009bc1 	.word	0x08009bc1
 8009c88:	08009bd5 	.word	0x08009bd5
 8009c8c:	08009be9 	.word	0x08009be9
 8009c90:	08009bfd 	.word	0x08009bfd
 8009c94:	08009c11 	.word	0x08009c11

08009c98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b090      	sub	sp, #64	; 0x40
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d137      	bne.n	8009d24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3314      	adds	r3, #20
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3314      	adds	r3, #20
 8009cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cda:	633a      	str	r2, [r7, #48]	; 0x30
 8009cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e5      	bne.n	8009cba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d04:	637b      	str	r3, [r7, #52]	; 0x34
 8009d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	330c      	adds	r3, #12
 8009d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d0e:	61fa      	str	r2, [r7, #28]
 8009d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	69b9      	ldr	r1, [r7, #24]
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e5      	bne.n	8009cee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d22:	e003      	b.n	8009d2c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d2a:	4798      	blx	r3
}
 8009d2c:	bf00      	nop
 8009d2e:	3740      	adds	r7, #64	; 0x40
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6e:	2b80      	cmp	r3, #128	; 0x80
 8009d70:	bf0c      	ite	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	2300      	movne	r3, #0
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b21      	cmp	r3, #33	; 0x21
 8009d84:	d108      	bne.n	8009d98 <UART_DMAError+0x46>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	f000 f866 	bl	8009e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da2:	2b40      	cmp	r3, #64	; 0x40
 8009da4:	bf0c      	ite	eq
 8009da6:	2301      	moveq	r3, #1
 8009da8:	2300      	movne	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b22      	cmp	r3, #34	; 0x22
 8009db8:	d108      	bne.n	8009dcc <UART_DMAError+0x7a>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009dc6:	68b8      	ldr	r0, [r7, #8]
 8009dc8:	f000 f874 	bl	8009eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd0:	f043 0210 	orr.w	r2, r3, #16
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ddc:	68b8      	ldr	r0, [r7, #8]
 8009dde:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	88fa      	ldrh	r2, [r7, #6]
 8009e00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	88fa      	ldrh	r2, [r7, #6]
 8009e06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2222      	movs	r2, #34	; 0x22
 8009e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d007      	beq.n	8009e36 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695a      	ldr	r2, [r3, #20]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0201 	orr.w	r2, r2, #1
 8009e44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0220 	orr.w	r2, r2, #32
 8009e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b089      	sub	sp, #36	; 0x24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	330c      	adds	r3, #12
 8009e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	330c      	adds	r3, #12
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	61ba      	str	r2, [r7, #24]
 8009e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6979      	ldr	r1, [r7, #20]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e5      	bne.n	8009e6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ea8:	bf00      	nop
 8009eaa:	3724      	adds	r7, #36	; 0x24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b095      	sub	sp, #84	; 0x54
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009edc:	643a      	str	r2, [r7, #64]	; 0x40
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e5      	bne.n	8009ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	f023 0301 	bic.w	r3, r3, #1
 8009f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3314      	adds	r3, #20
 8009f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e5      	bne.n	8009ef0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d119      	bne.n	8009f60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	330c      	adds	r3, #12
 8009f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f023 0310 	bic.w	r3, r3, #16
 8009f42:	647b      	str	r3, [r7, #68]	; 0x44
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f4c:	61ba      	str	r2, [r7, #24]
 8009f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	6979      	ldr	r1, [r7, #20]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	613b      	str	r3, [r7, #16]
   return(result);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e5      	bne.n	8009f2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f6e:	bf00      	nop
 8009f70:	3754      	adds	r7, #84	; 0x54
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b21      	cmp	r3, #33	; 0x21
 8009fb6:	d13e      	bne.n	800a036 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc0:	d114      	bne.n	8009fec <UART_Transmit_IT+0x48>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d110      	bne.n	8009fec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	1c9a      	adds	r2, r3, #2
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]
 8009fea:	e008      	b.n	8009ffe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	1c59      	adds	r1, r3, #1
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6211      	str	r1, [r2, #32]
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	b29b      	uxth	r3, r3
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	4619      	mov	r1, r3
 800a00c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10f      	bne.n	800a032 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68da      	ldr	r2, [r3, #12]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	e000      	b.n	800a038 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a036:	2302      	movs	r3, #2
  }
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a05a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b08c      	sub	sp, #48	; 0x30
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b22      	cmp	r3, #34	; 0x22
 800a088:	f040 80ad 	bne.w	800a1e6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a094:	d117      	bne.n	800a0c6 <UART_Receive_IT+0x50>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d113      	bne.n	800a0c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	1c9a      	adds	r2, r3, #2
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	629a      	str	r2, [r3, #40]	; 0x28
 800a0c4:	e026      	b.n	800a114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d8:	d007      	beq.n	800a0ea <UART_Receive_IT+0x74>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <UART_Receive_IT+0x82>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	e008      	b.n	800a10a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a104:	b2da      	uxtb	r2, r3
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4619      	mov	r1, r3
 800a122:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a124:	2b00      	cmp	r3, #0
 800a126:	d15c      	bne.n	800a1e2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0220 	bic.w	r2, r2, #32
 800a136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695a      	ldr	r2, [r3, #20]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0201 	bic.w	r2, r2, #1
 800a156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a164:	2b01      	cmp	r3, #1
 800a166:	d136      	bne.n	800a1d6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	330c      	adds	r3, #12
 800a174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	613b      	str	r3, [r7, #16]
   return(result);
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f023 0310 	bic.w	r3, r3, #16
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	330c      	adds	r3, #12
 800a18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18e:	623a      	str	r2, [r7, #32]
 800a190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	69f9      	ldr	r1, [r7, #28]
 800a194:	6a3a      	ldr	r2, [r7, #32]
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e5      	bne.n	800a16e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d10a      	bne.n	800a1c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	4798      	blx	r3
 800a1d4:	e003      	b.n	800a1de <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e002      	b.n	800a1e8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e000      	b.n	800a1e8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a1e6:	2302      	movs	r3, #2
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f4:	b0c0      	sub	sp, #256	; 0x100
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20c:	68d9      	ldr	r1, [r3, #12]
 800a20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	ea40 0301 	orr.w	r3, r0, r1
 800a218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	431a      	orrs	r2, r3
 800a228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	431a      	orrs	r2, r3
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	4313      	orrs	r3, r2
 800a238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a248:	f021 010c 	bic.w	r1, r1, #12
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a256:	430b      	orrs	r3, r1
 800a258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26a:	6999      	ldr	r1, [r3, #24]
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	ea40 0301 	orr.w	r3, r0, r1
 800a276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b8f      	ldr	r3, [pc, #572]	; (800a4bc <UART_SetConfig+0x2cc>)
 800a280:	429a      	cmp	r2, r3
 800a282:	d005      	beq.n	800a290 <UART_SetConfig+0xa0>
 800a284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	4b8d      	ldr	r3, [pc, #564]	; (800a4c0 <UART_SetConfig+0x2d0>)
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d104      	bne.n	800a29a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a290:	f7fc ff26 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 800a294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a298:	e003      	b.n	800a2a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a29a:	f7fc ff0d 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 800a29e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ac:	f040 810c 	bne.w	800a4c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	1891      	adds	r1, r2, r2
 800a2c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2ca:	415b      	adcs	r3, r3
 800a2cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	eb12 0801 	adds.w	r8, r2, r1
 800a2d8:	4629      	mov	r1, r5
 800a2da:	eb43 0901 	adc.w	r9, r3, r1
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2f2:	4690      	mov	r8, r2
 800a2f4:	4699      	mov	r9, r3
 800a2f6:	4623      	mov	r3, r4
 800a2f8:	eb18 0303 	adds.w	r3, r8, r3
 800a2fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a300:	462b      	mov	r3, r5
 800a302:	eb49 0303 	adc.w	r3, r9, r3
 800a306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a31a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a31e:	460b      	mov	r3, r1
 800a320:	18db      	adds	r3, r3, r3
 800a322:	653b      	str	r3, [r7, #80]	; 0x50
 800a324:	4613      	mov	r3, r2
 800a326:	eb42 0303 	adc.w	r3, r2, r3
 800a32a:	657b      	str	r3, [r7, #84]	; 0x54
 800a32c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a334:	f7f6 fc0c 	bl	8000b50 <__aeabi_uldivmod>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4b61      	ldr	r3, [pc, #388]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a33e:	fba3 2302 	umull	r2, r3, r3, r2
 800a342:	095b      	lsrs	r3, r3, #5
 800a344:	011c      	lsls	r4, r3, #4
 800a346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a358:	4642      	mov	r2, r8
 800a35a:	464b      	mov	r3, r9
 800a35c:	1891      	adds	r1, r2, r2
 800a35e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a360:	415b      	adcs	r3, r3
 800a362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a368:	4641      	mov	r1, r8
 800a36a:	eb12 0a01 	adds.w	sl, r2, r1
 800a36e:	4649      	mov	r1, r9
 800a370:	eb43 0b01 	adc.w	fp, r3, r1
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	f04f 0300 	mov.w	r3, #0
 800a37c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a388:	4692      	mov	sl, r2
 800a38a:	469b      	mov	fp, r3
 800a38c:	4643      	mov	r3, r8
 800a38e:	eb1a 0303 	adds.w	r3, sl, r3
 800a392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a396:	464b      	mov	r3, r9
 800a398:	eb4b 0303 	adc.w	r3, fp, r3
 800a39c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	18db      	adds	r3, r3, r3
 800a3b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	eb42 0303 	adc.w	r3, r2, r3
 800a3c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3ca:	f7f6 fbc1 	bl	8000b50 <__aeabi_uldivmod>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4b3b      	ldr	r3, [pc, #236]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a3d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	2264      	movs	r2, #100	; 0x64
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	1acb      	subs	r3, r1, r3
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3ea:	4b36      	ldr	r3, [pc, #216]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a3ec:	fba3 2302 	umull	r2, r3, r3, r2
 800a3f0:	095b      	lsrs	r3, r3, #5
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3f8:	441c      	add	r4, r3
 800a3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	1891      	adds	r1, r2, r2
 800a412:	63b9      	str	r1, [r7, #56]	; 0x38
 800a414:	415b      	adcs	r3, r3
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a41c:	4641      	mov	r1, r8
 800a41e:	1851      	adds	r1, r2, r1
 800a420:	6339      	str	r1, [r7, #48]	; 0x30
 800a422:	4649      	mov	r1, r9
 800a424:	414b      	adcs	r3, r1
 800a426:	637b      	str	r3, [r7, #52]	; 0x34
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a434:	4659      	mov	r1, fp
 800a436:	00cb      	lsls	r3, r1, #3
 800a438:	4651      	mov	r1, sl
 800a43a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a43e:	4651      	mov	r1, sl
 800a440:	00ca      	lsls	r2, r1, #3
 800a442:	4610      	mov	r0, r2
 800a444:	4619      	mov	r1, r3
 800a446:	4603      	mov	r3, r0
 800a448:	4642      	mov	r2, r8
 800a44a:	189b      	adds	r3, r3, r2
 800a44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a450:	464b      	mov	r3, r9
 800a452:	460a      	mov	r2, r1
 800a454:	eb42 0303 	adc.w	r3, r2, r3
 800a458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a46c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a470:	460b      	mov	r3, r1
 800a472:	18db      	adds	r3, r3, r3
 800a474:	62bb      	str	r3, [r7, #40]	; 0x28
 800a476:	4613      	mov	r3, r2
 800a478:	eb42 0303 	adc.w	r3, r2, r3
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a486:	f7f6 fb63 	bl	8000b50 <__aeabi_uldivmod>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a490:	fba3 1302 	umull	r1, r3, r3, r2
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	2164      	movs	r1, #100	; 0x64
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	3332      	adds	r3, #50	; 0x32
 800a4a2:	4a08      	ldr	r2, [pc, #32]	; (800a4c4 <UART_SetConfig+0x2d4>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	095b      	lsrs	r3, r3, #5
 800a4aa:	f003 0207 	and.w	r2, r3, #7
 800a4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4422      	add	r2, r4
 800a4b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4b8:	e105      	b.n	800a6c6 <UART_SetConfig+0x4d6>
 800a4ba:	bf00      	nop
 800a4bc:	40011000 	.word	0x40011000
 800a4c0:	40011400 	.word	0x40011400
 800a4c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4da:	4642      	mov	r2, r8
 800a4dc:	464b      	mov	r3, r9
 800a4de:	1891      	adds	r1, r2, r2
 800a4e0:	6239      	str	r1, [r7, #32]
 800a4e2:	415b      	adcs	r3, r3
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4ea:	4641      	mov	r1, r8
 800a4ec:	1854      	adds	r4, r2, r1
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	eb43 0501 	adc.w	r5, r3, r1
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	00eb      	lsls	r3, r5, #3
 800a4fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a502:	00e2      	lsls	r2, r4, #3
 800a504:	4614      	mov	r4, r2
 800a506:	461d      	mov	r5, r3
 800a508:	4643      	mov	r3, r8
 800a50a:	18e3      	adds	r3, r4, r3
 800a50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a510:	464b      	mov	r3, r9
 800a512:	eb45 0303 	adc.w	r3, r5, r3
 800a516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	f04f 0300 	mov.w	r3, #0
 800a532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a536:	4629      	mov	r1, r5
 800a538:	008b      	lsls	r3, r1, #2
 800a53a:	4621      	mov	r1, r4
 800a53c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a540:	4621      	mov	r1, r4
 800a542:	008a      	lsls	r2, r1, #2
 800a544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a548:	f7f6 fb02 	bl	8000b50 <__aeabi_uldivmod>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4b60      	ldr	r3, [pc, #384]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a552:	fba3 2302 	umull	r2, r3, r3, r2
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	011c      	lsls	r4, r3, #4
 800a55a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a56c:	4642      	mov	r2, r8
 800a56e:	464b      	mov	r3, r9
 800a570:	1891      	adds	r1, r2, r2
 800a572:	61b9      	str	r1, [r7, #24]
 800a574:	415b      	adcs	r3, r3
 800a576:	61fb      	str	r3, [r7, #28]
 800a578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a57c:	4641      	mov	r1, r8
 800a57e:	1851      	adds	r1, r2, r1
 800a580:	6139      	str	r1, [r7, #16]
 800a582:	4649      	mov	r1, r9
 800a584:	414b      	adcs	r3, r1
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a594:	4659      	mov	r1, fp
 800a596:	00cb      	lsls	r3, r1, #3
 800a598:	4651      	mov	r1, sl
 800a59a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a59e:	4651      	mov	r1, sl
 800a5a0:	00ca      	lsls	r2, r1, #3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	189b      	adds	r3, r3, r2
 800a5ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	eb42 0303 	adc.w	r3, r2, r3
 800a5b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5c8:	f04f 0200 	mov.w	r2, #0
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	008b      	lsls	r3, r1, #2
 800a5d8:	4641      	mov	r1, r8
 800a5da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5de:	4641      	mov	r1, r8
 800a5e0:	008a      	lsls	r2, r1, #2
 800a5e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5e6:	f7f6 fab3 	bl	8000b50 <__aeabi_uldivmod>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4b39      	ldr	r3, [pc, #228]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a5f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	2164      	movs	r1, #100	; 0x64
 800a5f8:	fb01 f303 	mul.w	r3, r1, r3
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	3332      	adds	r3, #50	; 0x32
 800a602:	4a34      	ldr	r2, [pc, #208]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a604:	fba2 2303 	umull	r2, r3, r2, r3
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a60e:	441c      	add	r4, r3
 800a610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a614:	2200      	movs	r2, #0
 800a616:	673b      	str	r3, [r7, #112]	; 0x70
 800a618:	677a      	str	r2, [r7, #116]	; 0x74
 800a61a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	1891      	adds	r1, r2, r2
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	415b      	adcs	r3, r3
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a62e:	4641      	mov	r1, r8
 800a630:	1851      	adds	r1, r2, r1
 800a632:	6039      	str	r1, [r7, #0]
 800a634:	4649      	mov	r1, r9
 800a636:	414b      	adcs	r3, r1
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a646:	4659      	mov	r1, fp
 800a648:	00cb      	lsls	r3, r1, #3
 800a64a:	4651      	mov	r1, sl
 800a64c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a650:	4651      	mov	r1, sl
 800a652:	00ca      	lsls	r2, r1, #3
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	4603      	mov	r3, r0
 800a65a:	4642      	mov	r2, r8
 800a65c:	189b      	adds	r3, r3, r2
 800a65e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a660:	464b      	mov	r3, r9
 800a662:	460a      	mov	r2, r1
 800a664:	eb42 0303 	adc.w	r3, r2, r3
 800a668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	663b      	str	r3, [r7, #96]	; 0x60
 800a674:	667a      	str	r2, [r7, #100]	; 0x64
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a682:	4649      	mov	r1, r9
 800a684:	008b      	lsls	r3, r1, #2
 800a686:	4641      	mov	r1, r8
 800a688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a68c:	4641      	mov	r1, r8
 800a68e:	008a      	lsls	r2, r1, #2
 800a690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a694:	f7f6 fa5c 	bl	8000b50 <__aeabi_uldivmod>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a69e:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a2:	095b      	lsrs	r3, r3, #5
 800a6a4:	2164      	movs	r1, #100	; 0x64
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	3332      	adds	r3, #50	; 0x32
 800a6b0:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <UART_SetConfig+0x4e4>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	f003 020f 	and.w	r2, r3, #15
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4422      	add	r2, r4
 800a6c4:	609a      	str	r2, [r3, #8]
}
 800a6c6:	bf00      	nop
 800a6c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6d2:	bf00      	nop
 800a6d4:	51eb851f 	.word	0x51eb851f

0800a6d8 <__errno>:
 800a6d8:	4b01      	ldr	r3, [pc, #4]	; (800a6e0 <__errno+0x8>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20000290 	.word	0x20000290

0800a6e4 <__libc_init_array>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4d0d      	ldr	r5, [pc, #52]	; (800a71c <__libc_init_array+0x38>)
 800a6e8:	4c0d      	ldr	r4, [pc, #52]	; (800a720 <__libc_init_array+0x3c>)
 800a6ea:	1b64      	subs	r4, r4, r5
 800a6ec:	10a4      	asrs	r4, r4, #2
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42a6      	cmp	r6, r4
 800a6f2:	d109      	bne.n	800a708 <__libc_init_array+0x24>
 800a6f4:	4d0b      	ldr	r5, [pc, #44]	; (800a724 <__libc_init_array+0x40>)
 800a6f6:	4c0c      	ldr	r4, [pc, #48]	; (800a728 <__libc_init_array+0x44>)
 800a6f8:	f000 f90c 	bl	800a914 <_init>
 800a6fc:	1b64      	subs	r4, r4, r5
 800a6fe:	10a4      	asrs	r4, r4, #2
 800a700:	2600      	movs	r6, #0
 800a702:	42a6      	cmp	r6, r4
 800a704:	d105      	bne.n	800a712 <__libc_init_array+0x2e>
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70c:	4798      	blx	r3
 800a70e:	3601      	adds	r6, #1
 800a710:	e7ee      	b.n	800a6f0 <__libc_init_array+0xc>
 800a712:	f855 3b04 	ldr.w	r3, [r5], #4
 800a716:	4798      	blx	r3
 800a718:	3601      	adds	r6, #1
 800a71a:	e7f2      	b.n	800a702 <__libc_init_array+0x1e>
 800a71c:	0800a9a4 	.word	0x0800a9a4
 800a720:	0800a9a4 	.word	0x0800a9a4
 800a724:	0800a9a4 	.word	0x0800a9a4
 800a728:	0800a9a8 	.word	0x0800a9a8

0800a72c <memcpy>:
 800a72c:	440a      	add	r2, r1
 800a72e:	4291      	cmp	r1, r2
 800a730:	f100 33ff 	add.w	r3, r0, #4294967295
 800a734:	d100      	bne.n	800a738 <memcpy+0xc>
 800a736:	4770      	bx	lr
 800a738:	b510      	push	{r4, lr}
 800a73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a742:	4291      	cmp	r1, r2
 800a744:	d1f9      	bne.n	800a73a <memcpy+0xe>
 800a746:	bd10      	pop	{r4, pc}

0800a748 <memset>:
 800a748:	4402      	add	r2, r0
 800a74a:	4603      	mov	r3, r0
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d100      	bne.n	800a752 <memset+0xa>
 800a750:	4770      	bx	lr
 800a752:	f803 1b01 	strb.w	r1, [r3], #1
 800a756:	e7f9      	b.n	800a74c <memset+0x4>

0800a758 <sqrt>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	ed2d 8b02 	vpush	{d8}
 800a75e:	ec55 4b10 	vmov	r4, r5, d0
 800a762:	f000 f825 	bl	800a7b0 <__ieee754_sqrt>
 800a766:	4622      	mov	r2, r4
 800a768:	462b      	mov	r3, r5
 800a76a:	4620      	mov	r0, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	eeb0 8a40 	vmov.f32	s16, s0
 800a772:	eef0 8a60 	vmov.f32	s17, s1
 800a776:	f7f6 f985 	bl	8000a84 <__aeabi_dcmpun>
 800a77a:	b990      	cbnz	r0, 800a7a2 <sqrt+0x4a>
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4620      	mov	r0, r4
 800a782:	4629      	mov	r1, r5
 800a784:	f7f6 f956 	bl	8000a34 <__aeabi_dcmplt>
 800a788:	b158      	cbz	r0, 800a7a2 <sqrt+0x4a>
 800a78a:	f7ff ffa5 	bl	800a6d8 <__errno>
 800a78e:	2321      	movs	r3, #33	; 0x21
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	2200      	movs	r2, #0
 800a794:	2300      	movs	r3, #0
 800a796:	4610      	mov	r0, r2
 800a798:	4619      	mov	r1, r3
 800a79a:	f7f6 f803 	bl	80007a4 <__aeabi_ddiv>
 800a79e:	ec41 0b18 	vmov	d8, r0, r1
 800a7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a7a6:	eef0 0a68 	vmov.f32	s1, s17
 800a7aa:	ecbd 8b02 	vpop	{d8}
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}

0800a7b0 <__ieee754_sqrt>:
 800a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b4:	ec55 4b10 	vmov	r4, r5, d0
 800a7b8:	4e55      	ldr	r6, [pc, #340]	; (800a910 <__ieee754_sqrt+0x160>)
 800a7ba:	43ae      	bics	r6, r5
 800a7bc:	ee10 0a10 	vmov	r0, s0
 800a7c0:	ee10 3a10 	vmov	r3, s0
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	d110      	bne.n	800a7ec <__ieee754_sqrt+0x3c>
 800a7ca:	ee10 2a10 	vmov	r2, s0
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f5 febe 	bl	8000550 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	f7f5 fd02 	bl	80001e4 <__adddf3>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	ec45 4b10 	vmov	d0, r4, r5
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	dc10      	bgt.n	800a812 <__ieee754_sqrt+0x62>
 800a7f0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a7f4:	4330      	orrs	r0, r6
 800a7f6:	d0f5      	beq.n	800a7e4 <__ieee754_sqrt+0x34>
 800a7f8:	b15d      	cbz	r5, 800a812 <__ieee754_sqrt+0x62>
 800a7fa:	ee10 2a10 	vmov	r2, s0
 800a7fe:	462b      	mov	r3, r5
 800a800:	ee10 0a10 	vmov	r0, s0
 800a804:	f7f5 fcec 	bl	80001e0 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	f7f5 ffca 	bl	80007a4 <__aeabi_ddiv>
 800a810:	e7e6      	b.n	800a7e0 <__ieee754_sqrt+0x30>
 800a812:	1512      	asrs	r2, r2, #20
 800a814:	d074      	beq.n	800a900 <__ieee754_sqrt+0x150>
 800a816:	07d4      	lsls	r4, r2, #31
 800a818:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a81c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a824:	bf5e      	ittt	pl
 800a826:	0fda      	lsrpl	r2, r3, #31
 800a828:	005b      	lslpl	r3, r3, #1
 800a82a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a82e:	2400      	movs	r4, #0
 800a830:	0fda      	lsrs	r2, r3, #31
 800a832:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a836:	107f      	asrs	r7, r7, #1
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	2516      	movs	r5, #22
 800a83c:	4620      	mov	r0, r4
 800a83e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a842:	1886      	adds	r6, r0, r2
 800a844:	428e      	cmp	r6, r1
 800a846:	bfde      	ittt	le
 800a848:	1b89      	suble	r1, r1, r6
 800a84a:	18b0      	addle	r0, r6, r2
 800a84c:	18a4      	addle	r4, r4, r2
 800a84e:	0049      	lsls	r1, r1, #1
 800a850:	3d01      	subs	r5, #1
 800a852:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a856:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a85a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a85e:	d1f0      	bne.n	800a842 <__ieee754_sqrt+0x92>
 800a860:	462a      	mov	r2, r5
 800a862:	f04f 0e20 	mov.w	lr, #32
 800a866:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a86a:	4281      	cmp	r1, r0
 800a86c:	eb06 0c05 	add.w	ip, r6, r5
 800a870:	dc02      	bgt.n	800a878 <__ieee754_sqrt+0xc8>
 800a872:	d113      	bne.n	800a89c <__ieee754_sqrt+0xec>
 800a874:	459c      	cmp	ip, r3
 800a876:	d811      	bhi.n	800a89c <__ieee754_sqrt+0xec>
 800a878:	f1bc 0f00 	cmp.w	ip, #0
 800a87c:	eb0c 0506 	add.w	r5, ip, r6
 800a880:	da43      	bge.n	800a90a <__ieee754_sqrt+0x15a>
 800a882:	2d00      	cmp	r5, #0
 800a884:	db41      	blt.n	800a90a <__ieee754_sqrt+0x15a>
 800a886:	f100 0801 	add.w	r8, r0, #1
 800a88a:	1a09      	subs	r1, r1, r0
 800a88c:	459c      	cmp	ip, r3
 800a88e:	bf88      	it	hi
 800a890:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a894:	eba3 030c 	sub.w	r3, r3, ip
 800a898:	4432      	add	r2, r6
 800a89a:	4640      	mov	r0, r8
 800a89c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a8a0:	f1be 0e01 	subs.w	lr, lr, #1
 800a8a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a8a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a8b0:	d1db      	bne.n	800a86a <__ieee754_sqrt+0xba>
 800a8b2:	430b      	orrs	r3, r1
 800a8b4:	d006      	beq.n	800a8c4 <__ieee754_sqrt+0x114>
 800a8b6:	1c50      	adds	r0, r2, #1
 800a8b8:	bf13      	iteet	ne
 800a8ba:	3201      	addne	r2, #1
 800a8bc:	3401      	addeq	r4, #1
 800a8be:	4672      	moveq	r2, lr
 800a8c0:	f022 0201 	bicne.w	r2, r2, #1
 800a8c4:	1063      	asrs	r3, r4, #1
 800a8c6:	0852      	lsrs	r2, r2, #1
 800a8c8:	07e1      	lsls	r1, r4, #31
 800a8ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a8ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a8d2:	bf48      	it	mi
 800a8d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a8d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a8dc:	4614      	mov	r4, r2
 800a8de:	e781      	b.n	800a7e4 <__ieee754_sqrt+0x34>
 800a8e0:	0ad9      	lsrs	r1, r3, #11
 800a8e2:	3815      	subs	r0, #21
 800a8e4:	055b      	lsls	r3, r3, #21
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d0fa      	beq.n	800a8e0 <__ieee754_sqrt+0x130>
 800a8ea:	02cd      	lsls	r5, r1, #11
 800a8ec:	d50a      	bpl.n	800a904 <__ieee754_sqrt+0x154>
 800a8ee:	f1c2 0420 	rsb	r4, r2, #32
 800a8f2:	fa23 f404 	lsr.w	r4, r3, r4
 800a8f6:	1e55      	subs	r5, r2, #1
 800a8f8:	4093      	lsls	r3, r2
 800a8fa:	4321      	orrs	r1, r4
 800a8fc:	1b42      	subs	r2, r0, r5
 800a8fe:	e78a      	b.n	800a816 <__ieee754_sqrt+0x66>
 800a900:	4610      	mov	r0, r2
 800a902:	e7f0      	b.n	800a8e6 <__ieee754_sqrt+0x136>
 800a904:	0049      	lsls	r1, r1, #1
 800a906:	3201      	adds	r2, #1
 800a908:	e7ef      	b.n	800a8ea <__ieee754_sqrt+0x13a>
 800a90a:	4680      	mov	r8, r0
 800a90c:	e7bd      	b.n	800a88a <__ieee754_sqrt+0xda>
 800a90e:	bf00      	nop
 800a910:	7ff00000 	.word	0x7ff00000

0800a914 <_init>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <_fini>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr
