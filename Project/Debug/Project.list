
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007184  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007334  08007334  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800733c  0800733c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08007344  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000138  0800747c  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800747c  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012615  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f47  00000000  00000000  0003277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000238b  00000000  00000000  000367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001305d  00000000  00000000  00038b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093538  00000000  00000000  0004bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  000df158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000138 	.word	0x20000138
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007304 	.word	0x08007304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000013c 	.word	0x2000013c
 80001d4:	08007304 	.word	0x08007304

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e58:	f3bf 8f4f 	dsb	sy
}
 8000e5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SystemReset+0x24>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <__NVIC_SystemReset+0x24>)
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_SystemReset+0x28>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <__NVIC_SystemReset+0x20>
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	05fa0004 	.word	0x05fa0004

08000e80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e88:	f002 fa2c 	bl	80032e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e8c:	f000 f9c4 	bl	8001218 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e90:	f000 fc76 	bl	8001780 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e94:	f000 fc1e 	bl	80016d4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000e98:	f000 fb2c 	bl	80014f4 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000e9c:	f000 fa8a 	bl	80013b4 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000ea0:	f000 fb7c 	bl	800159c <MX_TIM3_Init>
	MX_I2C2_Init();
 8000ea4:	f000 fa22 	bl	80012ec <MX_I2C2_Init>
	MX_USART6_UART_Init();
 8000ea8:	f000 fc3e 	bl	8001728 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8000eac:	f000 fbc4 	bl	8001638 <MX_TIM5_Init>
	MX_SPI3_Init();
 8000eb0:	f000 fa4a 	bl	8001348 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f001 fc43 	bl	8002740 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000eba:	2104      	movs	r1, #4
 8000ebc:	48bc      	ldr	r0, [pc, #752]	; (80011b0 <main+0x330>)
 8000ebe:	f004 ff67 	bl	8005d90 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8000ec2:	48bc      	ldr	r0, [pc, #752]	; (80011b4 <main+0x334>)
 8000ec4:	f004 fd52 	bl	800596c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8000ec8:	48bb      	ldr	r0, [pc, #748]	; (80011b8 <main+0x338>)
 8000eca:	f004 fcf5 	bl	80058b8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	48b9      	ldr	r0, [pc, #740]	; (80011b8 <main+0x338>)
 8000ed2:	f004 fe07 	bl	8005ae4 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8000ed6:	48b9      	ldr	r0, [pc, #740]	; (80011bc <main+0x33c>)
 8000ed8:	f004 fd48 	bl	800596c <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 8000edc:	4bb8      	ldr	r3, [pc, #736]	; (80011c0 <main+0x340>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fafd 	bl	80004e4 <__aeabi_ul2d>
 8000eea:	a3ab      	add	r3, pc, #684	; (adr r3, 8001198 <main+0x318>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fc58 	bl	80007a4 <__aeabi_ddiv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	49b2      	ldr	r1, [pc, #712]	; (80011c4 <main+0x344>)
 8000efa:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 8000efe:	4bb0      	ldr	r3, [pc, #704]	; (80011c0 <main+0x340>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff faec 	bl	80004e4 <__aeabi_ul2d>
 8000f0c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001198 <main+0x318>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fc47 	bl	80007a4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	49ab      	ldr	r1, [pc, #684]	; (80011c8 <main+0x348>)
 8000f1c:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 8000f20:	4ba7      	ldr	r3, [pc, #668]	; (80011c0 <main+0x340>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fadb 	bl	80004e4 <__aeabi_ul2d>
 8000f2e:	a39a      	add	r3, pc, #616	; (adr r3, 8001198 <main+0x318>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fc36 	bl	80007a4 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	49a3      	ldr	r1, [pc, #652]	; (80011cc <main+0x34c>)
 8000f3e:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 8000f42:	4b9f      	ldr	r3, [pc, #636]	; (80011c0 <main+0x340>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff faca 	bl	80004e4 <__aeabi_ul2d>
 8000f50:	a391      	add	r3, pc, #580	; (adr r3, 8001198 <main+0x318>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fc25 	bl	80007a4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	499c      	ldr	r1, [pc, #624]	; (80011d0 <main+0x350>)
 8000f60:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 8000f64:	4b96      	ldr	r3, [pc, #600]	; (80011c0 <main+0x340>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fab9 	bl	80004e4 <__aeabi_ul2d>
 8000f72:	a389      	add	r3, pc, #548	; (adr r3, 8001198 <main+0x318>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fc14 	bl	80007a4 <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4994      	ldr	r1, [pc, #592]	; (80011d4 <main+0x354>)
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]

//		Test_Range();
		static uint64_t timestamp_traject = 0;
//		static uint64_t timestamp_pid = 0;

		int64_t GetTicku = micros();
 8000f86:	f001 fecf 	bl	8002d28 <micros>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 2300 	strd	r2, r3, [r7]

		switch (state_laser_test) {
 8000f92:	4b91      	ldr	r3, [pc, #580]	; (80011d8 <main+0x358>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d849      	bhi.n	800102e <main+0x1ae>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <main+0x120>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	0800102f 	.word	0x0800102f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fcb 	.word	0x08000fcb
 8000fac:	08000fd9 	.word	0x08000fd9
 8000fb0:	08000ff7 	.word	0x08000ff7
 8000fb4:	08001015 	.word	0x08001015
 8000fb8:	08001023 	.word	0x08001023
		case 0:
			break;
		case 1:
			EndEffector_Event(Test_Start);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 fbbf 	bl	8002740 <EndEffector_Event>
			state_laser_test = 0;
 8000fc2:	4b85      	ldr	r3, [pc, #532]	; (80011d8 <main+0x358>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
			break;
 8000fc8:	e031      	b.n	800102e <main+0x1ae>
		case 2:
			EndEffector_Event(Run_Mode);
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f001 fbb8 	bl	8002740 <EndEffector_Event>
			state_laser_test = 0;
 8000fd0:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <main+0x358>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
			break;
 8000fd6:	e02a      	b.n	800102e <main+0x1ae>
		case 3:
			EndEffector_Event(Pick);
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f001 fbb1 	bl	8002740 <EndEffector_Event>
//			HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
//					SET);
//			HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
//					RESET);
			HAL_Delay(2000);
 8000fde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe2:	f002 f9f1 	bl	80033c8 <HAL_Delay>
			pos_i = PosY;
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <main+0x35c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <main+0x360>)
 8000fec:	6013      	str	r3, [r2, #0]
			state_laser_test = 0;
 8000fee:	4b7a      	ldr	r3, [pc, #488]	; (80011d8 <main+0x358>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
			break;
 8000ff4:	e01b      	b.n	800102e <main+0x1ae>
		case 4:
			EndEffector_Event(Place);
 8000ff6:	2009      	movs	r0, #9
 8000ff8:	f001 fba2 	bl	8002740 <EndEffector_Event>
//			HAL_GPIO_WritePin(Switch_Relay_3_GPIO_Port, Switch_Relay_3_Pin,
//					SET);
//			HAL_GPIO_WritePin(Switch_Relay_1_GPIO_Port, Switch_Relay_1_Pin,
//					RESET);
			HAL_Delay(2000);
 8000ffc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001000:	f002 f9e2 	bl	80033c8 <HAL_Delay>
			pos_i = PosY;
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <main+0x35c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <main+0x360>)
 800100a:	6013      	str	r3, [r2, #0]

			state_laser_test = 0;
 800100c:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <main+0x358>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
			break;
 8001012:	e00c      	b.n	800102e <main+0x1ae>
		case 5:
			EndEffector_Event(Reset);
 8001014:	2003      	movs	r0, #3
 8001016:	f001 fb93 	bl	8002740 <EndEffector_Event>
			state_laser_test = 0;
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <main+0x358>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
			break;
 8001020:	e005      	b.n	800102e <main+0x1ae>
		case 6:
			EndEffector_Event(Test_Stop);
 8001022:	2002      	movs	r0, #2
 8001024:	f001 fb8c 	bl	8002740 <EndEffector_Event>
			state_laser_test = 0;
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <main+0x358>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
		}

		switch (State) {
 800102e:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <main+0x364>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b06      	cmp	r3, #6
 8001034:	f200 80a8 	bhi.w	8001188 <main+0x308>
 8001038:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <main+0x1c0>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	0800105d 	.word	0x0800105d
 8001044:	080010b9 	.word	0x080010b9
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010c5 	.word	0x080010c5
 8001050:	08001101 	.word	0x08001101
 8001054:	08001179 	.word	0x08001179
 8001058:	08001161 	.word	0x08001161
		case INIT:
			read_pos();
 800105c:	f001 fdde 	bl	8002c1c <read_pos>
			photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	4860      	ldr	r0, [pc, #384]	; (80011e8 <main+0x368>)
 8001066:	f002 fc69 	bl	800393c <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <main+0x36c>)
 8001070:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_1_Pin);
			photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8001072:	2104      	movs	r1, #4
 8001074:	485c      	ldr	r0, [pc, #368]	; (80011e8 <main+0x368>)
 8001076:	f002 fc61 	bl	800393c <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <main+0x370>)
 8001080:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_2_Pin);
			photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	485b      	ldr	r0, [pc, #364]	; (80011f4 <main+0x374>)
 8001086:	f002 fc59 	bl	800393c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <main+0x378>)
 8001090:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_3_Pin);
			emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8001092:	2108      	movs	r1, #8
 8001094:	4857      	ldr	r0, [pc, #348]	; (80011f4 <main+0x374>)
 8001096:	f002 fc51 	bl	800393c <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <main+0x37c>)
 80010a0:	601a      	str	r2, [r3, #0]
			go_next = 1;
 80010a2:	4b57      	ldr	r3, [pc, #348]	; (8001200 <main+0x380>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
			if (go_next == 1) {
 80010a8:	4b55      	ldr	r3, [pc, #340]	; (8001200 <main+0x380>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d166      	bne.n	800117e <main+0x2fe>
				State = INIT_HOMING;
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <main+0x364>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80010b6:	e062      	b.n	800117e <main+0x2fe>
		case INIT_HOMING:
			Init_Homing();
 80010b8:	f001 fcd2 	bl	8002a60 <Init_Homing>
			break;
 80010bc:	e064      	b.n	8001188 <main+0x308>
		case CALIBRATE:
			JoyStickControl();
 80010be:	f001 fbfd 	bl	80028bc <JoyStickControl>
			break;
 80010c2:	e061      	b.n	8001188 <main+0x308>
		case TRAJECT_GEN:
			read_pos();
 80010c4:	f001 fdaa 	bl	8002c1c <read_pos>
			Trajectory_Gen(pos_i, pos_f, 945, 4161);
 80010c8:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <main+0x360>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9e7 	bl	80004a0 <__aeabi_f2d>
 80010d2:	4680      	mov	r8, r0
 80010d4:	4689      	mov	r9, r1
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <main+0x384>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9e0 	bl	80004a0 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ed9f 3b2e 	vldr	d3, [pc, #184]	; 80011a0 <main+0x320>
 80010e8:	ed9f 2b2f 	vldr	d2, [pc, #188]	; 80011a8 <main+0x328>
 80010ec:	ec43 2b11 	vmov	d1, r2, r3
 80010f0:	ec49 8b10 	vmov	d0, r8, r9
 80010f4:	f000 fc08 	bl	8001908 <Trajectory_Gen>
			State = PID_STATE;
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <main+0x364>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	701a      	strb	r2, [r3, #0]
			break;
 80010fe:	e043      	b.n	8001188 <main+0x308>
		case PID_STATE:

			if (GetTicku >= timestamp_traject) {
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <main+0x388>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	4290      	cmp	r0, r2
 800110c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001110:	d31a      	bcc.n	8001148 <main+0x2c8>
				timestamp_traject = GetTicku + traject_us;
 8001112:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <main+0x340>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	1884      	adds	r4, r0, r2
 800111e:	eb41 0503 	adc.w	r5, r1, r3
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <main+0x388>)
 8001124:	e9c3 4500 	strd	r4, r5, [r3]
				Trajectory_Eva();
 8001128:	f000 fd42 	bl	8001bb0 <Trajectory_Eva>
				read_pos();
 800112c:	f001 fd76 	bl	8002c1c <read_pos>
				PID(x);
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <main+0x38c>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fcb9 	bl	8000ab0 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	ee00 3a10 	vmov	s0, r3
 8001144:	f001 f8bc 	bl	80022c0 <PID>

			}
			if (State_PID == 1) {
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <main+0x390>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d118      	bne.n	8001182 <main+0x302>
				motor(0, 1);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f001 fd38 	bl	8002bc8 <motor>
				State = IDLE;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <main+0x364>)
 800115a:	2206      	movs	r2, #6
 800115c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800115e:	e010      	b.n	8001182 <main+0x302>
		case IDLE:
			motor(0, 1);
 8001160:	2101      	movs	r1, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f001 fd30 	bl	8002bc8 <motor>
			if (State_PID == 0) {
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <main+0x390>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <main+0x306>
				State = TRAJECT_GEN;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <main+0x364>)
 8001172:	2203      	movs	r2, #3
 8001174:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001176:	e006      	b.n	8001186 <main+0x306>
		case EMERGENCY_LIMIT:
			Photo_IT();
 8001178:	f001 fcfc 	bl	8002b74 <Photo_IT>
			break;
 800117c:	e004      	b.n	8001188 <main+0x308>
			break;
 800117e:	bf00      	nop
 8001180:	e002      	b.n	8001188 <main+0x308>
			break;
 8001182:	bf00      	nop
 8001184:	e000      	b.n	8001188 <main+0x308>
			break;
 8001186:	bf00      	nop
		}

		if (Re == 1) {
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <main+0x394>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	f47f aefa 	bne.w	8000f86 <main+0x106>
			NVIC_SystemReset();
 8001192:	f7ff fe5f 	bl	8000e54 <__NVIC_SystemReset>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	412e8480 	.word	0x412e8480
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40b04100 	.word	0x40b04100
 80011a8:	00000000 	.word	0x00000000
 80011ac:	408d8800 	.word	0x408d8800
 80011b0:	20000248 	.word	0x20000248
 80011b4:	20000290 	.word	0x20000290
 80011b8:	20000200 	.word	0x20000200
 80011bc:	200002d8 	.word	0x200002d8
 80011c0:	20000070 	.word	0x20000070
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000010 	.word	0x20000010
 80011d0:	20000018 	.word	0x20000018
 80011d4:	20000020 	.word	0x20000020
 80011d8:	20000470 	.word	0x20000470
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	20000474 	.word	0x20000474
 80011e4:	2000049c 	.word	0x2000049c
 80011e8:	40020400 	.word	0x40020400
 80011ec:	20000488 	.word	0x20000488
 80011f0:	2000048c 	.word	0x2000048c
 80011f4:	40020800 	.word	0x40020800
 80011f8:	20000490 	.word	0x20000490
 80011fc:	20000494 	.word	0x20000494
 8001200:	2000047d 	.word	0x2000047d
 8001204:	20000478 	.word	0x20000478
 8001208:	200004a0 	.word	0x200004a0
 800120c:	20000410 	.word	0x20000410
 8001210:	2000006a 	.word	0x2000006a
 8001214:	2000047e 	.word	0x2000047e

08001218 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 ff86 	bl	8007138 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <SystemClock_Config+0xcc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <SystemClock_Config+0xd0>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001288:	2310      	movs	r3, #16
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001292:	2304      	movs	r3, #4
 8001294:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fb2c 	bl	80048fc <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x96>
		Error_Handler();
 80012aa:	f001 fd57 	bl	8002d5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fd8e 	bl	8004dec <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xc2>
		Error_Handler();
 80012d6:	f001 fd41 	bl	8002d5c <Error_Handler>
	}
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C2_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_I2C2_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C2_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_I2C2_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C2_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2C2_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_I2C2_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_I2C2_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2C2_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2C2_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2C2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C2_Init+0x50>)
 800132a:	f002 fb51 	bl	80039d0 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001334:	f001 fd12 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000154 	.word	0x20000154
 8001340:	40005800 	.word	0x40005800
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI3_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_SPI3_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI3_Init+0x64>)
 8001354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001358:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI3_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI3_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI3_Init+0x64>)
 8001368:	2202      	movs	r2, #2
 800136a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI3_Init+0x64>)
 800136e:	2201      	movs	r2, #1
 8001370:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI3_Init+0x64>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI3_Init+0x64>)
 800137c:	2238      	movs	r2, #56	; 0x38
 800137e:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI3_Init+0x64>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI3_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI3_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI3_Init+0x64>)
 8001394:	220a      	movs	r2, #10
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI3_Init+0x64>)
 800139a:	f003 ff47 	bl	800522c <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI3_Init+0x60>
		Error_Handler();
 80013a4:	f001 fcda 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001a8 	.word	0x200001a8
 80013b0:	40003c00 	.word	0x40003c00

080013b4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	; 0x58
 80013b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fea3 	bl	8007138 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <MX_TIM1_Init+0x138>)
 80013f4:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <MX_TIM1_Init+0x13c>)
 80013f6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <MX_TIM1_Init+0x138>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <MX_TIM1_Init+0x138>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <MX_TIM1_Init+0x138>)
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <MX_TIM1_Init+0x138>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_TIM1_Init+0x138>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <MX_TIM1_Init+0x138>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800141e:	4833      	ldr	r0, [pc, #204]	; (80014ec <MX_TIM1_Init+0x138>)
 8001420:	f004 f9fa 	bl	8005818 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800142a:	f001 fc97 	bl	8002d5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001438:	4619      	mov	r1, r3
 800143a:	482c      	ldr	r0, [pc, #176]	; (80014ec <MX_TIM1_Init+0x138>)
 800143c:	f004 ff00 	bl	8006240 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x96>
		Error_Handler();
 8001446:	f001 fc89 	bl	8002d5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_TIM1_Init+0x138>)
 800144c:	f004 faf0 	bl	8005a30 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001456:	f001 fc81 	bl	8002d5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001466:	4619      	mov	r1, r3
 8001468:	4820      	ldr	r0, [pc, #128]	; (80014ec <MX_TIM1_Init+0x138>)
 800146a:	f005 faa5 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001474:	f001 fc72 	bl	8002d5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM1_Init+0x138>)
 800149e:	f004 fe0d 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80014a8:	f001 fc58 	bl	8002d5c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM1_Init+0x138>)
 80014d0:	f005 fae0 	bl	8006a94 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80014da:	f001 fc3f 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM1_Init+0x138>)
 80014e0:	f001 fdae 	bl	8003040 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3758      	adds	r7, #88	; 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000200 	.word	0x20000200
 80014f0:	40010000 	.word	0x40010000

080014f4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f005 fe18 	bl	8007138 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001516:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_TIM2_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001526:	f04f 32ff 	mov.w	r2, #4294967295
 800152a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM2_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001538:	2303      	movs	r3, #3
 800153a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001540:	2301      	movs	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001550:	2301      	movs	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001564:	f004 fb6e 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x7e>
		Error_Handler();
 800156e:	f001 fbf5 	bl	8002d5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM2_Init+0xa4>)
 8001580:	f005 fa1a 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800158a:	f001 fbe7 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000248 	.word	0x20000248

0800159c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_TIM3_Init+0x94>)
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_TIM3_Init+0x98>)
 80015bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 83;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c0:	2253      	movs	r2, #83	; 0x53
 80015c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_TIM3_Init+0x94>)
 80015cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80015d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_TIM3_Init+0x94>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM3_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_TIM3_Init+0x94>)
 80015e0:	f004 f91a 	bl	8005818 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x52>
		Error_Handler();
 80015ea:	f001 fbb7 	bl	8002d5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM3_Init+0x94>)
 80015fc:	f004 fe20 	bl	8006240 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001606:	f001 fba9 	bl	8002d5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM3_Init+0x94>)
 8001618:	f005 f9ce 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001622:	f001 fb9b 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000290 	.word	0x20000290
 8001634:	40000400 	.word	0x40000400

08001638 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_TIM5_Init+0x94>)
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <MX_TIM5_Init+0x98>)
 8001658:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 83;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_TIM5_Init+0x94>)
 800165c:	2253      	movs	r2, #83	; 0x53
 800165e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM5_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_TIM5_Init+0x94>)
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_TIM5_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_TIM5_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_TIM5_Init+0x94>)
 800167c:	f004 f8cc 	bl	8005818 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM5_Init+0x52>
		Error_Handler();
 8001686:	f001 fb69 	bl	8002d5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_TIM5_Init+0x94>)
 8001698:	f004 fdd2 	bl	8006240 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM5_Init+0x6e>
		Error_Handler();
 80016a2:	f001 fb5b 	bl	8002d5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_TIM5_Init+0x94>)
 80016b4:	f005 f980 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80016be:	f001 fb4d 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200002d8 	.word	0x200002d8
 80016d0:	40000c00 	.word	0x40000c00

080016d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART2_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 800170c:	f005 fa28 	bl	8006b60 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001716:	f001 fb21 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000320 	.word	0x20000320
 8001724:	40004400 	.word	0x40004400

08001728 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_USART6_UART_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_USART6_UART_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART6_UART_Init+0x50>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART6_UART_Init+0x50>)
 800173c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001740:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <MX_USART6_UART_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART6_UART_Init+0x50>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART6_UART_Init+0x50>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART6_UART_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART6_UART_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART6_UART_Init+0x50>)
 8001764:	f005 f9fc 	bl	8006b60 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 800176e:	f001 faf5 	bl	8002d5c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000364 	.word	0x20000364
 800177c:	40011400 	.word	0x40011400

08001780 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <MX_GPIO_Init+0x174>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <MX_GPIO_Init+0x174>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x174>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a39      	ldr	r2, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x174>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0x174>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001828:	4833      	ldr	r0, [pc, #204]	; (80018f8 <MX_GPIO_Init+0x178>)
 800182a:	f002 f89f 	bl	800396c <HAL_GPIO_WritePin>
	Switch_Relay_1_Pin | Switch_Relay_2_Pin | Switch_Relay_3_Pin | DIR_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	4832      	ldr	r0, [pc, #200]	; (80018fc <MX_GPIO_Init+0x17c>)
 8001834:	f002 f89a 	bl	800396c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_3_Pin;
 8001838:	f242 0348 	movw	r3, #8264	; 0x2048
 800183c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001842:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	482c      	ldr	r0, [pc, #176]	; (8001900 <MX_GPIO_Init+0x180>)
 8001850:	f001 fef0 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_1_Pin Switch_Relay_2_Pin Switch_Relay_3_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_1_Pin | Switch_Relay_2_Pin
 8001854:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001858:	617b      	str	r3, [r7, #20]
			| Switch_Relay_3_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4822      	ldr	r0, [pc, #136]	; (80018f8 <MX_GPIO_Init+0x178>)
 800186e:	f001 fee1 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 8001872:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001876:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001878:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800187c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	481e      	ldr	r0, [pc, #120]	; (8001904 <MX_GPIO_Init+0x184>)
 800188a:	f001 fed3 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 800188e:	2304      	movs	r3, #4
 8001890:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <MX_GPIO_Init+0x17c>)
 80018a6:	f001 fec5 	bl	8003634 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2008      	movs	r0, #8
 80018b0:	f001 fe89 	bl	80035c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018b4:	2008      	movs	r0, #8
 80018b6:	f001 fea2 	bl	80035fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2009      	movs	r0, #9
 80018c0:	f001 fe81 	bl	80035c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018c4:	2009      	movs	r0, #9
 80018c6:	f001 fe9a 	bl	80035fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2017      	movs	r0, #23
 80018d0:	f001 fe79 	bl	80035c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018d4:	2017      	movs	r0, #23
 80018d6:	f001 fe92 	bl	80035fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2028      	movs	r0, #40	; 0x28
 80018e0:	f001 fe71 	bl	80035c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f001 fe8a 	bl	80035fe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40020800 	.word	0x40020800
 8001904:	40020400 	.word	0x40020400

08001908 <Trajectory_Gen>:

/* USER CODE BEGIN 4 */
void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 8001908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190c:	b088      	sub	sp, #32
 800190e:	af00      	add	r7, sp, #0
 8001910:	ed87 0b06 	vstr	d0, [r7, #24]
 8001914:	ed87 1b04 	vstr	d1, [r7, #16]
 8001918:	ed87 2b02 	vstr	d2, [r7, #8]
 800191c:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8001920:	4993      	ldr	r1, [pc, #588]	; (8001b70 <Trajectory_Gen+0x268>)
 8001922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 800192a:	4992      	ldr	r1, [pc, #584]	; (8001b74 <Trajectory_Gen+0x26c>)
 800192c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8001934:	4990      	ldr	r1, [pc, #576]	; (8001b78 <Trajectory_Gen+0x270>)
 8001936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 800193e:	498f      	ldr	r1, [pc, #572]	; (8001b7c <Trajectory_Gen+0x274>)
 8001940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001944:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <Trajectory_Gen+0x278>)
 800194a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800194e:	4a8d      	ldr	r2, [pc, #564]	; (8001b84 <Trajectory_Gen+0x27c>)
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f7ff f8fc 	bl	8000b50 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7fe fdc0 	bl	80004e4 <__aeabi_ul2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4987      	ldr	r1, [pc, #540]	; (8001b88 <Trajectory_Gen+0x280>)
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 800196e:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <Trajectory_Gen+0x278>)
 8001970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <Trajectory_Gen+0x27c>)
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	f7ff f8e9 	bl	8000b50 <__aeabi_uldivmod>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7fe fdad 	bl	80004e4 <__aeabi_ul2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	497f      	ldr	r1, [pc, #508]	; (8001b8c <Trajectory_Gen+0x284>)
 8001990:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8001994:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <Trajectory_Gen+0x278>)
 8001996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199a:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <Trajectory_Gen+0x27c>)
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f7ff f8d6 	bl	8000b50 <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7fe fd9a 	bl	80004e4 <__aeabi_ul2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4976      	ldr	r1, [pc, #472]	; (8001b90 <Trajectory_Gen+0x288>)
 80019b6:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <Trajectory_Gen+0x278>)
 80019bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c0:	4a70      	ldr	r2, [pc, #448]	; (8001b84 <Trajectory_Gen+0x27c>)
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f7ff f8c3 	bl	8000b50 <__aeabi_uldivmod>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7fe fd87 	bl	80004e4 <__aeabi_ul2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	496e      	ldr	r1, [pc, #440]	; (8001b94 <Trajectory_Gen+0x28c>)
 80019dc:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <Trajectory_Gen+0x26c>)
 80019e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <Trajectory_Gen+0x268>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fbf8 	bl	80001e0 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80019fa:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <Trajectory_Gen+0x290>)
 80019fc:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <Trajectory_Gen+0x26c>)
 8001a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <Trajectory_Gen+0x268>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fbe8 	bl	80001e0 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f7ff f826 	bl	8000a70 <__aeabi_dcmpgt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <Trajectory_Gen+0x12a>
		direct = 1;
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <Trajectory_Gen+0x294>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e018      	b.n	8001a64 <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8001a32:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <Trajectory_Gen+0x26c>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <Trajectory_Gen+0x268>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fbcf 	bl	80001e0 <__aeabi_dsub>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	f7fe ffef 	bl	8000a34 <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <Trajectory_Gen+0x15c>
		direct = -1;
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <Trajectory_Gen+0x294>)
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a62:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <Trajectory_Gen+0x270>)
 8001a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6a:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <Trajectory_Gen+0x274>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fe98 	bl	80007a4 <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4949      	ldr	r1, [pc, #292]	; (8001ba0 <Trajectory_Gen+0x298>)
 8001a7a:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <Trajectory_Gen+0x290>)
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <Trajectory_Gen+0x274>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fe8b 	bl	80007a4 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9a:	eef0 0a67 	vmov.f32	s1, s15
 8001a9e:	f005 fb53 	bl	8007148 <sqrt>
 8001aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa6:	eef0 7a60 	vmov.f32	s15, s1
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <Trajectory_Gen+0x29c>)
 8001aac:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <Trajectory_Gen+0x29c>)
 8001ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <Trajectory_Gen+0x298>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe ffba 	bl	8000a34 <__aeabi_dcmplt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00f      	beq.n	8001ae6 <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <Trajectory_Gen+0x29c>)
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	f7fe fb88 	bl	80001e4 <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4933      	ldr	r1, [pc, #204]	; (8001ba8 <Trajectory_Gen+0x2a0>)
 8001ada:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <Trajectory_Gen+0x2a4>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 8001ae4:	e03e      	b.n	8001b64 <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <Trajectory_Gen+0x29c>)
 8001ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <Trajectory_Gen+0x298>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe ffb3 	bl	8000a5c <__aeabi_dcmpge>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d100      	bne.n	8001afe <Trajectory_Gen+0x1f6>
}
 8001afc:	e032      	b.n	8001b64 <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <Trajectory_Gen+0x298>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	f7fe fb6c 	bl	80001e4 <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4690      	mov	r8, r2
 8001b12:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <Trajectory_Gen+0x290>)
 8001b16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <Trajectory_Gen+0x298>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <Trajectory_Gen+0x270>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fd13 	bl	8000550 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fb55 	bl	80001e0 <__aeabi_dsub>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <Trajectory_Gen+0x270>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fe2e 	bl	80007a4 <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	4649      	mov	r1, r9
 8001b50:	f7fe fb48 	bl	80001e4 <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8001b58:	4913      	ldr	r1, [pc, #76]	; (8001ba8 <Trajectory_Gen+0x2a0>)
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <Trajectory_Gen+0x2a4>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b6e:	bf00      	nop
 8001b70:	200003b0 	.word	0x200003b0
 8001b74:	200003b8 	.word	0x200003b8
 8001b78:	200003c0 	.word	0x200003c0
 8001b7c:	200003c8 	.word	0x200003c8
 8001b80:	20000070 	.word	0x20000070
 8001b84:	000f4240 	.word	0x000f4240
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000010 	.word	0x20000010
 8001b94:	20000018 	.word	0x20000018
 8001b98:	200003d0 	.word	0x200003d0
 8001b9c:	200003ac 	.word	0x200003ac
 8001ba0:	200003f8 	.word	0x200003f8
 8001ba4:	20000408 	.word	0x20000408
 8001ba8:	20000400 	.word	0x20000400
 8001bac:	200003a8 	.word	0x200003a8

08001bb0 <Trajectory_Eva>:

void Trajectory_Eva() {
 8001bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb4:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 8001bb6:	4ba3      	ldr	r3, [pc, #652]	; (8001e44 <Trajectory_Eva+0x294>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	f000 8173 	beq.w	8001ea6 <Trajectory_Eva+0x2f6>
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f300 835e 	bgt.w	8002282 <Trajectory_Eva+0x6d2>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 835a 	beq.w	8002280 <Trajectory_Eva+0x6d0>
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d000      	beq.n	8001bd2 <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 8001bd0:	e357      	b.n	8002282 <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 8001bd2:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <Trajectory_Eva+0x298>)
 8001bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd8:	4b9c      	ldr	r3, [pc, #624]	; (8001e4c <Trajectory_Eva+0x29c>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe ff33 	bl	8000a48 <__aeabi_dcmple>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8085 	beq.w	8001cf4 <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 8001bea:	4b99      	ldr	r3, [pc, #612]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc44 	bl	800047c <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <Trajectory_Eva+0x2a4>)
 8001bfa:	f7fe fca9 	bl	8000550 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	4b94      	ldr	r3, [pc, #592]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fca0 	bl	8000550 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b90      	ldr	r3, [pc, #576]	; (8001e5c <Trajectory_Eva+0x2ac>)
 8001c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <Trajectory_Eva+0x2ac>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fc94 	bl	8000550 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fc8e 	bl	8000550 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <Trajectory_Eva+0x2b0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe facf 	bl	80001e4 <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
			x = x_initial
 8001c4a:	4986      	ldr	r1, [pc, #536]	; (8001e64 <Trajectory_Eva+0x2b4>)
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <Trajectory_Eva+0x2ac>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fc78 	bl	8000550 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc05 	bl	800047c <__aeabi_i2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fc69 	bl	8000550 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4979      	ldr	r1, [pc, #484]	; (8001e68 <Trajectory_Eva+0x2b8>)
 8001c84:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbf5 	bl	800047c <__aeabi_i2d>
 8001c92:	4b71      	ldr	r3, [pc, #452]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fc5a 	bl	8000550 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4972      	ldr	r1, [pc, #456]	; (8001e6c <Trajectory_Eva+0x2bc>)
 8001ca2:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <Trajectory_Eva+0x2b4>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	4970      	ldr	r1, [pc, #448]	; (8001e70 <Trajectory_Eva+0x2c0>)
 8001cae:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <Trajectory_Eva+0x2b8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	496e      	ldr	r1, [pc, #440]	; (8001e74 <Trajectory_Eva+0x2c4>)
 8001cba:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <Trajectory_Eva+0x2ac>)
 8001cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <Trajectory_Eva+0x2c8>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fa8b 	bl	80001e4 <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4962      	ldr	r1, [pc, #392]	; (8001e5c <Trajectory_Eva+0x2ac>)
 8001cd4:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001cd8:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <Trajectory_Eva+0x298>)
 8001cda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <Trajectory_Eva+0x2c8>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fa7e 	bl	80001e4 <__adddf3>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4956      	ldr	r1, [pc, #344]	; (8001e48 <Trajectory_Eva+0x298>)
 8001cee:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001cf2:	e2c6      	b.n	8002282 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 8001cf4:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <Trajectory_Eva+0x298>)
 8001cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfa:	4b60      	ldr	r3, [pc, #384]	; (8001e7c <Trajectory_Eva+0x2cc>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fea2 	bl	8000a48 <__aeabi_dcmple>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80bc 	beq.w	8001e84 <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <Trajectory_Eva+0x2c4>)
 8001d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc1a 	bl	8000550 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <Trajectory_Eva+0x2c0>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fa5b 	bl	80001e4 <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4614      	mov	r4, r2
 8001d34:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb9e 	bl	800047c <__aeabi_i2d>
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <Trajectory_Eva+0x2a4>)
 8001d46:	f7fe fc03 	bl	8000550 <__aeabi_dmul>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fbfa 	bl	8000550 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fbf1 	bl	8000550 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fbe8 	bl	8000550 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fa2a 	bl	80001e0 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8001d90:	4934      	ldr	r1, [pc, #208]	; (8001e64 <Trajectory_Eva+0x2b4>)
 8001d92:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <Trajectory_Eva+0x2c4>)
 8001d98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fbd2 	bl	8000550 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4692      	mov	sl, r2
 8001db2:	469b      	mov	fp, r3
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb5f 	bl	800047c <__aeabi_i2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4650      	mov	r0, sl
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	f7fe fbc3 	bl	8000550 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fa05 	bl	80001e0 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4923      	ldr	r1, [pc, #140]	; (8001e68 <Trajectory_Eva+0x2b8>)
 8001ddc:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <Trajectory_Eva+0x2a8>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	4690      	mov	r8, r2
 8001de8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <Trajectory_Eva+0x2a0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb43 	bl	800047c <__aeabi_i2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	f7fe fba7 	bl	8000550 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4919      	ldr	r1, [pc, #100]	; (8001e6c <Trajectory_Eva+0x2bc>)
 8001e08:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <Trajectory_Eva+0x2c8>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe f9e4 	bl	80001e4 <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4917      	ldr	r1, [pc, #92]	; (8001e80 <Trajectory_Eva+0x2d0>)
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <Trajectory_Eva+0x298>)
 8001e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <Trajectory_Eva+0x2c8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe f9d7 	bl	80001e4 <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4903      	ldr	r1, [pc, #12]	; (8001e48 <Trajectory_Eva+0x298>)
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001e40:	e21f      	b.n	8002282 <Trajectory_Eva+0x6d2>
 8001e42:	bf00      	nop
 8001e44:	200003a8 	.word	0x200003a8
 8001e48:	20000018 	.word	0x20000018
 8001e4c:	20000408 	.word	0x20000408
 8001e50:	200003ac 	.word	0x200003ac
 8001e54:	3fe00000 	.word	0x3fe00000
 8001e58:	200003c8 	.word	0x200003c8
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	200003b0 	.word	0x200003b0
 8001e64:	20000410 	.word	0x20000410
 8001e68:	20000418 	.word	0x20000418
 8001e6c:	20000420 	.word	0x20000420
 8001e70:	200003d8 	.word	0x200003d8
 8001e74:	200003e8 	.word	0x200003e8
 8001e78:	20000020 	.word	0x20000020
 8001e7c:	20000400 	.word	0x20000400
 8001e80:	20000008 	.word	0x20000008
			x = x_final;
 8001e84:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <Trajectory_Eva+0x510>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	498e      	ldr	r1, [pc, #568]	; (80020c4 <Trajectory_Eva+0x514>)
 8001e8c:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8001e90:	498d      	ldr	r1, [pc, #564]	; (80020c8 <Trajectory_Eva+0x518>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <Trajectory_Eva+0x51c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
		break;
 8001ea4:	e1ed      	b.n	8002282 <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 8001ea6:	4b8a      	ldr	r3, [pc, #552]	; (80020d0 <Trajectory_Eva+0x520>)
 8001ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eac:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <Trajectory_Eva+0x524>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fdc9 	bl	8000a48 <__aeabi_dcmple>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8089 	beq.w	8001fd0 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 8001ebe:	4b86      	ldr	r3, [pc, #536]	; (80020d8 <Trajectory_Eva+0x528>)
 8001ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b84      	ldr	r3, [pc, #528]	; (80020dc <Trajectory_Eva+0x52c>)
 8001eca:	f7fe fb41 	bl	8000550 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4614      	mov	r4, r2
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <Trajectory_Eva+0x530>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe face 	bl	800047c <__aeabi_i2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb32 	bl	8000550 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <Trajectory_Eva+0x534>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb29 	bl	8000550 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b77      	ldr	r3, [pc, #476]	; (80020e4 <Trajectory_Eva+0x534>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb20 	bl	8000550 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <Trajectory_Eva+0x538>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe f961 	bl	80001e4 <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4967      	ldr	r1, [pc, #412]	; (80020c4 <Trajectory_Eva+0x514>)
 8001f28:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <Trajectory_Eva+0x528>)
 8001f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <Trajectory_Eva+0x534>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb0a 	bl	8000550 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <Trajectory_Eva+0x530>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa97 	bl	800047c <__aeabi_i2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe fafb 	bl	8000550 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	495a      	ldr	r1, [pc, #360]	; (80020c8 <Trajectory_Eva+0x518>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8001f64:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <Trajectory_Eva+0x530>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fa87 	bl	800047c <__aeabi_i2d>
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <Trajectory_Eva+0x528>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe faec 	bl	8000550 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	495b      	ldr	r1, [pc, #364]	; (80020ec <Trajectory_Eva+0x53c>)
 8001f7e:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8001f82:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <Trajectory_Eva+0x514>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	4959      	ldr	r1, [pc, #356]	; (80020f0 <Trajectory_Eva+0x540>)
 8001f8a:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <Trajectory_Eva+0x518>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	4957      	ldr	r1, [pc, #348]	; (80020f4 <Trajectory_Eva+0x544>)
 8001f96:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <Trajectory_Eva+0x534>)
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <Trajectory_Eva+0x548>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe f91d 	bl	80001e4 <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	494d      	ldr	r1, [pc, #308]	; (80020e4 <Trajectory_Eva+0x534>)
 8001fb0:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <Trajectory_Eva+0x520>)
 8001fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fba:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <Trajectory_Eva+0x548>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe f910 	bl	80001e4 <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4941      	ldr	r1, [pc, #260]	; (80020d0 <Trajectory_Eva+0x520>)
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001fce:	e158      	b.n	8002282 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <Trajectory_Eva+0x54c>)
 8001fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <Trajectory_Eva+0x524>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe f900 	bl	80001e0 <__aeabi_dsub>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <Trajectory_Eva+0x520>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	f7fe fd35 	bl	8000a5c <__aeabi_dcmpge>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 808b 	beq.w	8002110 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <Trajectory_Eva+0x550>)
 8001ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <Trajectory_Eva+0x554>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe faa3 	bl	8000550 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <Trajectory_Eva+0x530>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa30 	bl	800047c <__aeabi_i2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe fa94 	bl	8000550 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <Trajectory_Eva+0x540>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe f8d5 	bl	80001e4 <__adddf3>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4921      	ldr	r1, [pc, #132]	; (80020c4 <Trajectory_Eva+0x514>)
 8002040:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <Trajectory_Eva+0x530>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa17 	bl	800047c <__aeabi_i2d>
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <Trajectory_Eva+0x550>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa7c 	bl	8000550 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	491a      	ldr	r1, [pc, #104]	; (80020c8 <Trajectory_Eva+0x518>)
 800205e:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 8002062:	4922      	ldr	r1, [pc, #136]	; (80020ec <Trajectory_Eva+0x53c>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <Trajectory_Eva+0x514>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	4924      	ldr	r1, [pc, #144]	; (8002108 <Trajectory_Eva+0x558>)
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <Trajectory_Eva+0x518>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4922      	ldr	r1, [pc, #136]	; (800210c <Trajectory_Eva+0x55c>)
 8002084:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <Trajectory_Eva+0x554>)
 800208a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <Trajectory_Eva+0x548>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe f8a6 	bl	80001e4 <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4919      	ldr	r1, [pc, #100]	; (8002104 <Trajectory_Eva+0x554>)
 800209e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <Trajectory_Eva+0x520>)
 80020a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <Trajectory_Eva+0x548>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f899 	bl	80001e4 <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4906      	ldr	r1, [pc, #24]	; (80020d0 <Trajectory_Eva+0x520>)
 80020b8:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80020bc:	e0e1      	b.n	8002282 <Trajectory_Eva+0x6d2>
 80020be:	bf00      	nop
 80020c0:	200003b8 	.word	0x200003b8
 80020c4:	20000410 	.word	0x20000410
 80020c8:	20000418 	.word	0x20000418
 80020cc:	200003a8 	.word	0x200003a8
 80020d0:	20000018 	.word	0x20000018
 80020d4:	200003f8 	.word	0x200003f8
 80020d8:	200003c8 	.word	0x200003c8
 80020dc:	3fe00000 	.word	0x3fe00000
 80020e0:	200003ac 	.word	0x200003ac
 80020e4:	20000000 	.word	0x20000000
 80020e8:	200003b0 	.word	0x200003b0
 80020ec:	20000420 	.word	0x20000420
 80020f0:	200003d8 	.word	0x200003d8
 80020f4:	200003e8 	.word	0x200003e8
 80020f8:	20000020 	.word	0x20000020
 80020fc:	20000400 	.word	0x20000400
 8002100:	200003c0 	.word	0x200003c0
 8002104:	20000010 	.word	0x20000010
 8002108:	200003e0 	.word	0x200003e0
 800210c:	200003f0 	.word	0x200003f0
		} else if (t_count <= t_final) {
 8002110:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <Trajectory_Eva+0x6d8>)
 8002112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <Trajectory_Eva+0x6dc>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fc94 	bl	8000a48 <__aeabi_dcmple>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 809b 	beq.w	800225e <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <Trajectory_Eva+0x6e0>)
 800212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <Trajectory_Eva+0x6e4>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa0c 	bl	8000550 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	4b55      	ldr	r3, [pc, #340]	; (8002298 <Trajectory_Eva+0x6e8>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f84d 	bl	80001e4 <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4690      	mov	r8, r2
 8002150:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 8002152:	4b52      	ldr	r3, [pc, #328]	; (800229c <Trajectory_Eva+0x6ec>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f990 	bl	800047c <__aeabi_i2d>
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <Trajectory_Eva+0x6f0>)
 8002162:	f7fe f9f5 	bl	8000550 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <Trajectory_Eva+0x6f4>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f9ec 	bl	8000550 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4692      	mov	sl, r2
 800217e:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8002180:	4b44      	ldr	r3, [pc, #272]	; (8002294 <Trajectory_Eva+0x6e4>)
 8002182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <Trajectory_Eva+0x6e4>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe f9e0 	bl	8000550 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4650      	mov	r0, sl
 8002196:	4659      	mov	r1, fp
 8002198:	f7fe f9da 	bl	8000550 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 80021a0:	4640      	mov	r0, r8
 80021a2:	4649      	mov	r1, r9
 80021a4:	f7fe f81c 	bl	80001e0 <__aeabi_dsub>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
			x =
 80021ac:	493e      	ldr	r1, [pc, #248]	; (80022a8 <Trajectory_Eva+0x6f8>)
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <Trajectory_Eva+0x6e0>)
 80021b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <Trajectory_Eva+0x6f4>)
 80021ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <Trajectory_Eva+0x6e4>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f9c4 	bl	8000550 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4692      	mov	sl, r2
 80021ce:	469b      	mov	fp, r3
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <Trajectory_Eva+0x6ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f951 	bl	800047c <__aeabi_i2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4650      	mov	r0, sl
 80021e0:	4659      	mov	r1, fp
 80021e2:	f7fe f9b5 	bl	8000550 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4640      	mov	r0, r8
 80021ec:	4649      	mov	r1, r9
 80021ee:	f7fd fff7 	bl	80001e0 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	492d      	ldr	r1, [pc, #180]	; (80022ac <Trajectory_Eva+0x6fc>)
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <Trajectory_Eva+0x6f4>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	4614      	mov	r4, r2
 8002204:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <Trajectory_Eva+0x6ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f935 	bl	800047c <__aeabi_i2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f999 	bl	8000550 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4923      	ldr	r1, [pc, #140]	; (80022b0 <Trajectory_Eva+0x700>)
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <Trajectory_Eva+0x6e4>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <Trajectory_Eva+0x704>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fd ffd6 	bl	80001e4 <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4915      	ldr	r1, [pc, #84]	; (8002294 <Trajectory_Eva+0x6e4>)
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <Trajectory_Eva+0x6d8>)
 8002244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <Trajectory_Eva+0x704>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fd ffc9 	bl	80001e4 <__adddf3>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	490c      	ldr	r1, [pc, #48]	; (8002288 <Trajectory_Eva+0x6d8>)
 8002258:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800225c:	e011      	b.n	8002282 <Trajectory_Eva+0x6d2>
			x = x_final;
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <Trajectory_Eva+0x708>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	4910      	ldr	r1, [pc, #64]	; (80022a8 <Trajectory_Eva+0x6f8>)
 8002266:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 800226a:	4910      	ldr	r1, [pc, #64]	; (80022ac <Trajectory_Eva+0x6fc>)
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <Trajectory_Eva+0x70c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
		break;
 800227e:	e000      	b.n	8002282 <Trajectory_Eva+0x6d2>
		break;
 8002280:	bf00      	nop
}
 8002282:	bf00      	nop
 8002284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002288:	20000018 	.word	0x20000018
 800228c:	20000400 	.word	0x20000400
 8002290:	200003f0 	.word	0x200003f0
 8002294:	20000008 	.word	0x20000008
 8002298:	200003e0 	.word	0x200003e0
 800229c:	200003ac 	.word	0x200003ac
 80022a0:	3fe00000 	.word	0x3fe00000
 80022a4:	200003c8 	.word	0x200003c8
 80022a8:	20000410 	.word	0x20000410
 80022ac:	20000418 	.word	0x20000418
 80022b0:	20000420 	.word	0x20000420
 80022b4:	20000020 	.word	0x20000020
 80022b8:	200003b8 	.word	0x200003b8
 80022bc:	200003a8 	.word	0x200003a8

080022c0 <PID>:

void PID(float setposition) {
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 80022ca:	4b9b      	ldr	r3, [pc, #620]	; (8002538 <PID+0x278>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a9b      	ldr	r2, [pc, #620]	; (800253c <PID+0x27c>)
 80022d0:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 80022d2:	4b9a      	ldr	r3, [pc, #616]	; (800253c <PID+0x27c>)
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	4b99      	ldr	r3, [pc, #612]	; (8002540 <PID+0x280>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f8db 	bl	80004a0 <__aeabi_f2d>
 80022ea:	4604      	mov	r4, r0
 80022ec:	460d      	mov	r5, r1
 80022ee:	4b95      	ldr	r3, [pc, #596]	; (8002544 <PID+0x284>)
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe f8f4 	bl	80004e4 <__aeabi_ul2d>
 80022fc:	a388      	add	r3, pc, #544	; (adr r3, 8002520 <PID+0x260>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fe fa4f 	bl	80007a4 <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fe fa49 	bl	80007a4 <__aeabi_ddiv>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fbc9 	bl	8000ab0 <__aeabi_d2f>
 800231e:	4603      	mov	r3, r0
 8002320:	4a89      	ldr	r2, [pc, #548]	; (8002548 <PID+0x288>)
 8002322:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8002324:	4b85      	ldr	r3, [pc, #532]	; (800253c <PID+0x27c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a85      	ldr	r2, [pc, #532]	; (8002540 <PID+0x280>)
 800232a:	6013      	str	r3, [r2, #0]

	if (pos_f < 0) {
 800232c:	4b87      	ldr	r3, [pc, #540]	; (800254c <PID+0x28c>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d504      	bpl.n	8002346 <PID+0x86>
		pos_f = 0;
 800233c:	4b83      	ldr	r3, [pc, #524]	; (800254c <PID+0x28c>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e00c      	b.n	8002360 <PID+0xa0>
	} else if (pos_f > 700) {
 8002346:	4b81      	ldr	r3, [pc, #516]	; (800254c <PID+0x28c>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002550 <PID+0x290>
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	dd02      	ble.n	8002360 <PID+0xa0>
		pos_f = 700;
 800235a:	4b7c      	ldr	r3, [pc, #496]	; (800254c <PID+0x28c>)
 800235c:	4a7d      	ldr	r2, [pc, #500]	; (8002554 <PID+0x294>)
 800235e:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <PID+0x278>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ed97 7a01 	vldr	s14, [r7, #4]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <PID+0x298>)
 8002370:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <PID+0x29c>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002560 <PID+0x2a0>
 800237e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	bfac      	ite	ge
 8002388:	2301      	movge	r3, #1
 800238a:	2300      	movlt	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d13f      	bne.n	8002418 <PID+0x158>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <PID+0x298>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	bfac      	ite	ge
 80023a8:	2301      	movge	r3, #1
 80023aa:	2300      	movlt	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <PID+0x118>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <PID+0x2a4>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	bfac      	ite	ge
 80023c8:	2301      	movge	r3, #1
 80023ca:	2300      	movlt	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02a      	beq.n	800242e <PID+0x16e>
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <PID+0x298>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	bf4c      	ite	mi
 80023e8:	2301      	movmi	r3, #1
 80023ea:	2300      	movpl	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10f      	bne.n	8002418 <PID+0x158>
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <PID+0x2a4>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	bf4c      	ite	mi
 8002408:	2301      	movmi	r3, #1
 800240a:	2300      	movpl	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <PID+0x16e>
		Intregral = Intregral + Error;
 8002418:	4b52      	ldr	r3, [pc, #328]	; (8002564 <PID+0x2a4>)
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <PID+0x298>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <PID+0x2a4>)
 800242a:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 800242e:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <PID+0x2a8>)
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <PID+0x298>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <PID+0x298>)
 8002440:	edd3 6a00 	vldr	s13, [r3]
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <PID+0x2ac>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <PID+0x2b0>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <PID+0x2b4>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002462:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <PID+0x2a4>)
 8002468:	edd3 6a00 	vldr	s13, [r3]
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <PID+0x2b8>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <PID+0x29c>)
 800247c:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <PID+0x29c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f80b 	bl	80004a0 <__aeabi_f2d>
 800248a:	a327      	add	r3, pc, #156	; (adr r3, 8002528 <PID+0x268>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe fae4 	bl	8000a5c <__aeabi_dcmpge>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <PID+0x1e2>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <PID+0x29c>)
 800249c:	4a37      	ldr	r2, [pc, #220]	; (800257c <PID+0x2bc>)
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e00f      	b.n	80024c2 <PID+0x202>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <PID+0x29c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd fffa 	bl	80004a0 <__aeabi_f2d>
 80024ac:	a320      	add	r3, pc, #128	; (adr r3, 8002530 <PID+0x270>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe fac9 	bl	8000a48 <__aeabi_dcmple>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <PID+0x202>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <PID+0x29c>)
 80024be:	4a30      	ldr	r2, [pc, #192]	; (8002580 <PID+0x2c0>)
 80024c0:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <PID+0x29c>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d503      	bpl.n	80024da <PID+0x21a>
		dir = -1;
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <PID+0x2c4>)
 80024d4:	22ff      	movs	r2, #255	; 0xff
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e00a      	b.n	80024f0 <PID+0x230>
	} else if (Dutyfeedback > 0) {
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <PID+0x29c>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	dd02      	ble.n	80024f0 <PID+0x230>
		dir = 1;
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <PID+0x2c4>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <PID+0x298>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	dd41      	ble.n	8002588 <PID+0x2c8>
		Dutyfeedback += 1 * Kp; //230
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <PID+0x29c>)
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <PID+0x2a8>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <PID+0x29c>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
 800251a:	e04a      	b.n	80025b2 <PID+0x2f2>
 800251c:	f3af 8000 	nop.w
 8002520:	00000000 	.word	0x00000000
 8002524:	412e8480 	.word	0x412e8480
 8002528:	66666666 	.word	0x66666666
 800252c:	40e66666 	.word	0x40e66666
 8002530:	66666666 	.word	0x66666666
 8002534:	c0e66666 	.word	0xc0e66666
 8002538:	2000042c 	.word	0x2000042c
 800253c:	20000434 	.word	0x20000434
 8002540:	20000438 	.word	0x20000438
 8002544:	20000078 	.word	0x20000078
 8002548:	2000043c 	.word	0x2000043c
 800254c:	20000478 	.word	0x20000478
 8002550:	442f0000 	.word	0x442f0000
 8002554:	442f0000 	.word	0x442f0000
 8002558:	20000444 	.word	0x20000444
 800255c:	20000440 	.word	0x20000440
 8002560:	47800000 	.word	0x47800000
 8002564:	2000044c 	.word	0x2000044c
 8002568:	20000028 	.word	0x20000028
 800256c:	20000448 	.word	0x20000448
 8002570:	20000034 	.word	0x20000034
 8002574:	20000030 	.word	0x20000030
 8002578:	2000002c 	.word	0x2000002c
 800257c:	47333333 	.word	0x47333333
 8002580:	c7333333 	.word	0xc7333333
 8002584:	20000430 	.word	0x20000430
	} else if (Error < -1.0) {
 8002588:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <PID+0x440>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d50a      	bpl.n	80025b2 <PID+0x2f2>
		Dutyfeedback -= 1 * Kp;
 800259c:	4b59      	ldr	r3, [pc, #356]	; (8002704 <PID+0x444>)
 800259e:	ed93 7a00 	vldr	s14, [r3]
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <PID+0x448>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ac:	4b55      	ldr	r3, [pc, #340]	; (8002704 <PID+0x444>)
 80025ae:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <PID+0x444>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eef0 7ae7 	vabs.f32	s15, s15
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <PID+0x444>)
 80025be:	edc3 7a00 	vstr	s15, [r3]

//	if(PosY != x){
//		State_PID = 1;
//		State = PID_TEST;
//	}
	motor(Dutyfeedback, dir);
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <PID+0x444>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <PID+0x44c>)
 80025ce:	f993 3000 	ldrsb.w	r3, [r3]
 80025d2:	4619      	mov	r1, r3
 80025d4:	ee17 0a90 	vmov	r0, s15
 80025d8:	f000 faf6 	bl	8002bc8 <motor>
	Last_Error = Error;
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <PID+0x440>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <PID+0x450>)
 80025e2:	6013      	str	r3, [r2, #0]
//	if (PosY >= pos_f * 1.01) {
//		overshoot_check = 1;
//	} pos_f >= PosY - 0.2 && pos_f <= PosY + 0.2

	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <PID+0x454>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <PID+0x458>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f4:	ee17 0a90 	vmov	r0, s15
 80025f8:	f7fd ff52 	bl	80004a0 <__aeabi_f2d>
 80025fc:	a33c      	add	r3, pc, #240	; (adr r3, 80026f0 <PID+0x430>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe fa21 	bl	8000a48 <__aeabi_dcmple>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d100      	bne.n	800260e <PID+0x34e>
		}

	}

//	}
}
 800260c:	e069      	b.n	80026e2 <PID+0x422>
	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <PID+0x454>)
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <PID+0x458>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261e:	ee17 0a90 	vmov	r0, s15
 8002622:	f7fd ff3d 	bl	80004a0 <__aeabi_f2d>
 8002626:	a334      	add	r3, pc, #208	; (adr r3, 80026f8 <PID+0x438>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe fa16 	bl	8000a5c <__aeabi_dcmpge>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <PID+0x378>
}
 8002636:	e054      	b.n	80026e2 <PID+0x422>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002638:	4b38      	ldr	r3, [pc, #224]	; (800271c <PID+0x45c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
		Intregral = 0;
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <PID+0x460>)
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
		Dutyfeedback = 0;
 8002648:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <PID+0x444>)
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
		v = 0;
 8002650:	4934      	ldr	r1, [pc, #208]	; (8002724 <PID+0x464>)
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9c1 2300 	strd	r2, r3, [r1]
		a = 0;
 800265e:	4932      	ldr	r1, [pc, #200]	; (8002728 <PID+0x468>)
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9c1 2300 	strd	r2, r3, [r1]
		if ((position_index + 2) % 2 == 0) {
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <PID+0x46c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3302      	adds	r3, #2
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <PID+0x3c2>
			state_laser_test = 3;
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <PID+0x470>)
 800267c:	2203      	movs	r2, #3
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e00c      	b.n	800269c <PID+0x3dc>
		} else if ((position_index + 2) % 2 == 1) {
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <PID+0x46c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3302      	adds	r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	bfb8      	it	lt
 8002690:	425b      	neglt	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <PID+0x3dc>
			state_laser_test = 4;
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <PID+0x470>)
 8002698:	2204      	movs	r2, #4
 800269a:	601a      	str	r2, [r3, #0]
		if (position_index < 17) {
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <PID+0x46c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	dc15      	bgt.n	80026d0 <PID+0x410>
			position_index++;
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <PID+0x46c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <PID+0x46c>)
 80026ac:	6013      	str	r3, [r2, #0]
			read_pos();
 80026ae:	f000 fab5 	bl	8002c1c <read_pos>
			pos_f = position_test[position_index];
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <PID+0x46c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <PID+0x474>)
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <PID+0x454>)
 80026c0:	6013      	str	r3, [r2, #0]
			State = TRAJECT_GEN;
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <PID+0x478>)
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
			State_PID = 0;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <PID+0x47c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	e008      	b.n	80026e2 <PID+0x422>
			State_PID = 2;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <PID+0x47c>)
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
			position_index = 0;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <PID+0x46c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
			State = INIT_HOMING;
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <PID+0x478>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	9999999a 	.word	0x9999999a
 80026f4:	3fc99999 	.word	0x3fc99999
 80026f8:	9999999a 	.word	0x9999999a
 80026fc:	bfc99999 	.word	0xbfc99999
 8002700:	20000444 	.word	0x20000444
 8002704:	20000440 	.word	0x20000440
 8002708:	20000028 	.word	0x20000028
 800270c:	20000430 	.word	0x20000430
 8002710:	20000448 	.word	0x20000448
 8002714:	20000478 	.word	0x20000478
 8002718:	2000042c 	.word	0x2000042c
 800271c:	20000200 	.word	0x20000200
 8002720:	2000044c 	.word	0x2000044c
 8002724:	20000418 	.word	0x20000418
 8002728:	20000420 	.word	0x20000420
 800272c:	20000498 	.word	0x20000498
 8002730:	20000470 	.word	0x20000470
 8002734:	20000080 	.word	0x20000080
 8002738:	2000049c 	.word	0x2000049c
 800273c:	2000006a 	.word	0x2000006a

08002740 <EndEffector_Event>:

void EndEffector_Event(char EndEffector_State) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af02      	add	r7, sp, #8
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <EndEffector_Event+0x150>)
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 8094 	bne.w	8002880 <EndEffector_Event+0x140>
		switch (EndEffector_State) {
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b0a      	cmp	r3, #10
 800275c:	f200 8093 	bhi.w	8002886 <EndEffector_Event+0x146>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <EndEffector_Event+0x28>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002885 	.word	0x08002885
 800276c:	08002795 	.word	0x08002795
 8002770:	080027ad 	.word	0x080027ad
 8002774:	080027c5 	.word	0x080027c5
 8002778:	080027dd 	.word	0x080027dd
 800277c:	080027f5 	.word	0x080027f5
 8002780:	0800280d 	.word	0x0800280d
 8002784:	08002825 	.word	0x08002825
 8002788:	0800283d 	.word	0x0800283d
 800278c:	08002855 	.word	0x08002855
 8002790:	0800286d 	.word	0x0800286d
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8002794:	f242 7310 	movw	r3, #10000	; 0x2710
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2302      	movs	r3, #2
 800279c:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <EndEffector_Event+0x154>)
 800279e:	212a      	movs	r1, #42	; 0x2a
 80027a0:	483b      	ldr	r0, [pc, #236]	; (8002890 <EndEffector_Event+0x150>)
 80027a2:	f001 fa59 	bl	8003c58 <HAL_I2C_Master_Transmit>
					2, 10000);
			EndEffector_State = Init;
 80027a6:	2300      	movs	r3, #0
 80027a8:	71fb      	strb	r3, [r7, #7]
			break;
 80027aa:	e06c      	b.n	8002886 <EndEffector_Event+0x146>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 80027ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2302      	movs	r3, #2
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <EndEffector_Event+0x158>)
 80027b6:	212a      	movs	r1, #42	; 0x2a
 80027b8:	4835      	ldr	r0, [pc, #212]	; (8002890 <EndEffector_Event+0x150>)
 80027ba:	f001 fa4d 	bl	8003c58 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 80027be:	2300      	movs	r3, #0
 80027c0:	71fb      	strb	r3, [r7, #7]
			break;
 80027c2:	e060      	b.n	8002886 <EndEffector_Event+0x146>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 80027c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2304      	movs	r3, #4
 80027cc:	4a33      	ldr	r2, [pc, #204]	; (800289c <EndEffector_Event+0x15c>)
 80027ce:	212a      	movs	r1, #42	; 0x2a
 80027d0:	482f      	ldr	r0, [pc, #188]	; (8002890 <EndEffector_Event+0x150>)
 80027d2:	f001 fa41 	bl	8003c58 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
			break;
 80027da:	e054      	b.n	8002886 <EndEffector_Event+0x146>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 80027dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <EndEffector_Event+0x160>)
 80027e6:	212a      	movs	r1, #42	; 0x2a
 80027e8:	4829      	ldr	r0, [pc, #164]	; (8002890 <EndEffector_Event+0x150>)
 80027ea:	f001 fa35 	bl	8003c58 <HAL_I2C_Master_Transmit>
					1, 10000);
			EndEffector_State = Init;
 80027ee:	2300      	movs	r3, #0
 80027f0:	71fb      	strb	r3, [r7, #7]
			break;
 80027f2:	e048      	b.n	8002886 <EndEffector_Event+0x146>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 80027f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2304      	movs	r3, #4
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <EndEffector_Event+0x164>)
 80027fe:	212a      	movs	r1, #42	; 0x2a
 8002800:	4823      	ldr	r0, [pc, #140]	; (8002890 <EndEffector_Event+0x150>)
 8002802:	f001 fa29 	bl	8003c58 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 10000);
			EndEffector_State = Init;
 8002806:	2300      	movs	r3, #0
 8002808:	71fb      	strb	r3, [r7, #7]
			break;
 800280a:	e03c      	b.n	8002886 <EndEffector_Event+0x146>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 800280c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2302      	movs	r3, #2
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <EndEffector_Event+0x168>)
 8002816:	212a      	movs	r1, #42	; 0x2a
 8002818:	481d      	ldr	r0, [pc, #116]	; (8002890 <EndEffector_Event+0x150>)
 800281a:	f001 fa1d 	bl	8003c58 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800281e:	2300      	movs	r3, #0
 8002820:	71fb      	strb	r3, [r7, #7]
			break;
 8002822:	e030      	b.n	8002886 <EndEffector_Event+0x146>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8002824:	f242 7310 	movw	r3, #10000	; 0x2710
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2302      	movs	r3, #2
 800282c:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <EndEffector_Event+0x16c>)
 800282e:	212a      	movs	r1, #42	; 0x2a
 8002830:	4817      	ldr	r0, [pc, #92]	; (8002890 <EndEffector_Event+0x150>)
 8002832:	f001 fa11 	bl	8003c58 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 10000);
			EndEffector_State = Init;
 8002836:	2300      	movs	r3, #0
 8002838:	71fb      	strb	r3, [r7, #7]
			break;
 800283a:	e024      	b.n	8002886 <EndEffector_Event+0x146>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 800283c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2302      	movs	r3, #2
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <EndEffector_Event+0x170>)
 8002846:	212a      	movs	r1, #42	; 0x2a
 8002848:	4811      	ldr	r0, [pc, #68]	; (8002890 <EndEffector_Event+0x150>)
 800284a:	f001 fa05 	bl	8003c58 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800284e:	2300      	movs	r3, #0
 8002850:	71fb      	strb	r3, [r7, #7]
			break;
 8002852:	e018      	b.n	8002886 <EndEffector_Event+0x146>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 8002854:	f242 7310 	movw	r3, #10000	; 0x2710
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2302      	movs	r3, #2
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <EndEffector_Event+0x174>)
 800285e:	212a      	movs	r1, #42	; 0x2a
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <EndEffector_Event+0x150>)
 8002862:	f001 f9f9 	bl	8003c58 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8002866:	2300      	movs	r3, #0
 8002868:	71fb      	strb	r3, [r7, #7]
			break;
 800286a:	e00c      	b.n	8002886 <EndEffector_Event+0x146>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 800286c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <EndEffector_Event+0x178>)
 8002876:	212a      	movs	r1, #42	; 0x2a
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <EndEffector_Event+0x150>)
 800287a:	f001 faeb 	bl	8003e54 <HAL_I2C_Master_Receive>
					10000);
			break;
 800287e:	e002      	b.n	8002886 <EndEffector_Event+0x146>
		}

	}
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <EndEffector_Event+0x146>
			break;
 8002884:	bf00      	nop
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000154 	.word	0x20000154
 8002894:	20000048 	.word	0x20000048
 8002898:	2000004c 	.word	0x2000004c
 800289c:	20000050 	.word	0x20000050
 80028a0:	20000054 	.word	0x20000054
 80028a4:	20000058 	.word	0x20000058
 80028a8:	2000005c 	.word	0x2000005c
 80028ac:	20000060 	.word	0x20000060
 80028b0:	20000064 	.word	0x20000064
 80028b4:	20000068 	.word	0x20000068
 80028b8:	2000046c 	.word	0x2000046c

080028bc <JoyStickControl>:
	y_final[7] = y_pre_final[1] + (20 * 3 * sin_zeta);
	x_final_joy[8] = x_pre_final[2] + (15 * 3 * sin_zeta);
	y_final[8] = y_pre_final[2] + (20 * 3 * sin_zeta);
}

void JoyStickControl() {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af02      	add	r7, sp, #8

	read_pos();
 80028c2:	f000 f9ab 	bl	8002c1c <read_pos>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2104      	movs	r1, #4
 80028ca:	4857      	ldr	r0, [pc, #348]	; (8002a28 <JoyStickControl+0x16c>)
 80028cc:	f001 f84e 	bl	800396c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 80028d0:	231e      	movs	r3, #30
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	230a      	movs	r3, #10
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <JoyStickControl+0x170>)
 80028d8:	4955      	ldr	r1, [pc, #340]	; (8002a30 <JoyStickControl+0x174>)
 80028da:	4856      	ldr	r0, [pc, #344]	; (8002a34 <JoyStickControl+0x178>)
 80028dc:	f002 fd2f 	bl	800533e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	2104      	movs	r1, #4
 80028e4:	4850      	ldr	r0, [pc, #320]	; (8002a28 <JoyStickControl+0x16c>)
 80028e6:	f001 f841 	bl	800396c <HAL_GPIO_WritePin>

	if (RX[3] == 0xFE && RX_last == 0xFF) { //Select Speed Button
 80028ea:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <JoyStickControl+0x170>)
 80028ec:	78db      	ldrb	r3, [r3, #3]
 80028ee:	2bfe      	cmp	r3, #254	; 0xfe
 80028f0:	d113      	bne.n	800291a <JoyStickControl+0x5e>
 80028f2:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <JoyStickControl+0x17c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2bff      	cmp	r3, #255	; 0xff
 80028f8:	d10f      	bne.n	800291a <JoyStickControl+0x5e>
		if (state_motor == 1) {
 80028fa:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <JoyStickControl+0x180>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d103      	bne.n	800290a <JoyStickControl+0x4e>
			state_motor = 0;
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <JoyStickControl+0x180>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8002908:	e037      	b.n	800297a <JoyStickControl+0xbe>
		} else if (state_motor == 0) {
 800290a:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <JoyStickControl+0x180>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d133      	bne.n	800297a <JoyStickControl+0xbe>
			state_motor = 1;
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <JoyStickControl+0x180>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 8002918:	e02f      	b.n	800297a <JoyStickControl+0xbe>
		}
	} else if (RX[4] == 0xBF && button_last == 0xFF) { //X Button
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <JoyStickControl+0x170>)
 800291c:	791b      	ldrb	r3, [r3, #4]
 800291e:	2bbf      	cmp	r3, #191	; 0xbf
 8002920:	d11c      	bne.n	800295c <JoyStickControl+0xa0>
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <JoyStickControl+0x184>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2bff      	cmp	r3, #255	; 0xff
 8002928:	d118      	bne.n	800295c <JoyStickControl+0xa0>

		if (y_count >= 4) {
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <JoyStickControl+0x188>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d904      	bls.n	800293c <JoyStickControl+0x80>
			motor(0, 0);
 8002932:	2100      	movs	r1, #0
 8002934:	2000      	movs	r0, #0
 8002936:	f000 f947 	bl	8002bc8 <motor>
 800293a:	e005      	b.n	8002948 <JoyStickControl+0x8c>
		} else {
			y_count += 1;
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <JoyStickControl+0x188>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <JoyStickControl+0x188>)
 8002946:	701a      	strb	r2, [r3, #0]
		}
		y_c[y_count] = PosY;
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <JoyStickControl+0x188>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <JoyStickControl+0x18c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	493e      	ldr	r1, [pc, #248]	; (8002a4c <JoyStickControl+0x190>)
 8002954:	0083      	lsls	r3, r0, #2
 8002956:	440b      	add	r3, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00f      	b.n	800297c <JoyStickControl+0xc0>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 800295c:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <JoyStickControl+0x170>)
 800295e:	791b      	ldrb	r3, [r3, #4]
 8002960:	2bef      	cmp	r3, #239	; 0xef
 8002962:	d10b      	bne.n	800297c <JoyStickControl+0xc0>
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <JoyStickControl+0x184>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2bff      	cmp	r3, #255	; 0xff
 800296a:	d107      	bne.n	800297c <JoyStickControl+0xc0>
		workState = 1;
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <JoyStickControl+0x194>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <JoyStickControl+0x198>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e000      	b.n	800297c <JoyStickControl+0xc0>
		if (state_motor == 1) {
 800297a:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <JoyStickControl+0x180>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <JoyStickControl+0xce>
 8002984:	2b01      	cmp	r3, #1
 8002986:	d020      	beq.n	80029ca <JoyStickControl+0x10e>
 8002988:	e042      	b.n	8002a10 <JoyStickControl+0x154>
	case 0:
		if (RX[3] == 0xFF) //Not be push
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <JoyStickControl+0x170>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	2bff      	cmp	r3, #255	; 0xff
 8002990:	d104      	bne.n	800299c <JoyStickControl+0xe0>
			motor(0, 1);
 8002992:	2101      	movs	r1, #1
 8002994:	2000      	movs	r0, #0
 8002996:	f000 f917 	bl	8002bc8 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(fast, -1);
		else if (RX[3] == 0xBF) //Down
			motor(fast, 1);
		break;
 800299a:	e036      	b.n	8002a0a <JoyStickControl+0x14e>
		else if (RX[3] == 0xEF) //UP
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <JoyStickControl+0x170>)
 800299e:	78db      	ldrb	r3, [r3, #3]
 80029a0:	2bef      	cmp	r3, #239	; 0xef
 80029a2:	d107      	bne.n	80029b4 <JoyStickControl+0xf8>
			motor(fast, -1);
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <JoyStickControl+0x19c>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f90b 	bl	8002bc8 <motor>
		break;
 80029b2:	e02a      	b.n	8002a0a <JoyStickControl+0x14e>
		else if (RX[3] == 0xBF) //Down
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <JoyStickControl+0x170>)
 80029b6:	78db      	ldrb	r3, [r3, #3]
 80029b8:	2bbf      	cmp	r3, #191	; 0xbf
 80029ba:	d126      	bne.n	8002a0a <JoyStickControl+0x14e>
			motor(fast, 1);
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <JoyStickControl+0x19c>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f900 	bl	8002bc8 <motor>
		break;
 80029c8:	e01f      	b.n	8002a0a <JoyStickControl+0x14e>
	case 1:
		if (RX[3] == 0xFF) //Not be push
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <JoyStickControl+0x170>)
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	2bff      	cmp	r3, #255	; 0xff
 80029d0:	d104      	bne.n	80029dc <JoyStickControl+0x120>
			motor(0, 1);
 80029d2:	2101      	movs	r1, #1
 80029d4:	2000      	movs	r0, #0
 80029d6:	f000 f8f7 	bl	8002bc8 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(slow, -1);
		else if (RX[3] == 0xBF) //Down
			motor(slow, 1);
		break;
 80029da:	e018      	b.n	8002a0e <JoyStickControl+0x152>
		else if (RX[3] == 0xEF) //UP
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <JoyStickControl+0x170>)
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	2bef      	cmp	r3, #239	; 0xef
 80029e2:	d107      	bne.n	80029f4 <JoyStickControl+0x138>
			motor(slow, -1);
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <JoyStickControl+0x1a0>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f8eb 	bl	8002bc8 <motor>
		break;
 80029f2:	e00c      	b.n	8002a0e <JoyStickControl+0x152>
		else if (RX[3] == 0xBF) //Down
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <JoyStickControl+0x170>)
 80029f6:	78db      	ldrb	r3, [r3, #3]
 80029f8:	2bbf      	cmp	r3, #191	; 0xbf
 80029fa:	d108      	bne.n	8002a0e <JoyStickControl+0x152>
			motor(slow, 1);
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <JoyStickControl+0x1a0>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f8e0 	bl	8002bc8 <motor>
		break;
 8002a08:	e001      	b.n	8002a0e <JoyStickControl+0x152>
		break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <JoyStickControl+0x154>
		break;
 8002a0e:	bf00      	nop
//X-axis
//		else if (RX[3] == 0x7F) //Left
//			printf("Left \r\n");
//		else if (RX[3] == 0xDF) //Right
//			printf("Right \r\n");
	RX_last = RX[3];
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <JoyStickControl+0x170>)
 8002a12:	78da      	ldrb	r2, [r3, #3]
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <JoyStickControl+0x17c>)
 8002a16:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <JoyStickControl+0x170>)
 8002a1a:	791a      	ldrb	r2, [r3, #4]
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <JoyStickControl+0x184>)
 8002a1e:	701a      	strb	r2, [r3, #0]

}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	20000450 	.word	0x20000450
 8002a30:	20000038 	.word	0x20000038
 8002a34:	200001a8 	.word	0x200001a8
 8002a38:	20000468 	.word	0x20000468
 8002a3c:	2000046a 	.word	0x2000046a
 8002a40:	20000469 	.word	0x20000469
 8002a44:	2000045b 	.word	0x2000045b
 8002a48:	2000042c 	.word	0x2000042c
 8002a4c:	2000045c 	.word	0x2000045c
 8002a50:	2000045a 	.word	0x2000045a
 8002a54:	2000049c 	.word	0x2000049c
 8002a58:	20000042 	.word	0x20000042
 8002a5c:	20000044 	.word	0x20000044

08002a60 <Init_Homing>:

void Init_Homing() {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <Init_Homing+0xe0>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <Init_Homing+0x12>
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d01a      	beq.n	8002aa6 <Init_Homing+0x46>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8002a70:	e064      	b.n	8002b3c <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	4833      	ldr	r0, [pc, #204]	; (8002b44 <Init_Homing+0xe4>)
 8002a76:	f000 ff61 	bl	800393c <HAL_GPIO_ReadPin>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <Init_Homing+0x38>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <Init_Homing+0xe8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f89c 	bl	8002bc8 <motor>
			state_homing = 1;
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <Init_Homing+0xe0>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	801a      	strh	r2, [r3, #0]
		break;
 8002a96:	e051      	b.n	8002b3c <Init_Homing+0xdc>
			motor(Max_Counter_PWM * 0.25, -1);
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002aa0:	f000 f892 	bl	8002bc8 <motor>
		break;
 8002aa4:	e04a      	b.n	8002b3c <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	4828      	ldr	r0, [pc, #160]	; (8002b4c <Init_Homing+0xec>)
 8002aaa:	f000 ff47 	bl	800393c <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13d      	bne.n	8002b30 <Init_Homing+0xd0>
			motor(0, 1);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f886 	bl	8002bc8 <motor>
			HAL_Delay(200);
 8002abc:	20c8      	movs	r0, #200	; 0xc8
 8002abe:	f000 fc83 	bl	80033c8 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 23893);
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <Init_Homing+0xe8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f645 5255 	movw	r2, #23893	; 0x5d55
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <Init_Homing+0xe8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <Init_Homing+0xf0>)
 8002ad6:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <Init_Homing+0xf0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fccd 	bl	800047c <__aeabi_i2d>
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <Init_Homing+0xf4>)
 8002ae8:	f7fd fd32 	bl	8000550 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fd ffdc 	bl	8000ab0 <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <Init_Homing+0xf8>)
 8002afc:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <Init_Homing+0xf8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <Init_Homing+0xfc>)
 8002b04:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <Init_Homing+0x100>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <Init_Homing+0x104>)
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <Init_Homing+0x108>)
 8002b14:	6013      	str	r3, [r2, #0]
			State_PID = 2;
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <Init_Homing+0x10c>)
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <Init_Homing+0xe0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(Run_Mode);
 8002b22:	2006      	movs	r0, #6
 8002b24:	f7ff fe0c 	bl	8002740 <EndEffector_Event>
			State = IDLE;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <Init_Homing+0x110>)
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	701a      	strb	r2, [r3, #0]
		break;
 8002b2e:	e004      	b.n	8002b3a <Init_Homing+0xda>
			motor(Max_Counter_PWM * 0.18, 1);
 8002b30:	2101      	movs	r1, #1
 8002b32:	f642 6014 	movw	r0, #11796	; 0x2e14
 8002b36:	f000 f847 	bl	8002bc8 <motor>
		break;
 8002b3a:	bf00      	nop
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200004a8 	.word	0x200004a8
 8002b44:	40020800 	.word	0x40020800
 8002b48:	20000248 	.word	0x20000248
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	20000428 	.word	0x20000428
 8002b54:	3f8e0000 	.word	0x3f8e0000
 8002b58:	2000042c 	.word	0x2000042c
 8002b5c:	20000474 	.word	0x20000474
 8002b60:	20000498 	.word	0x20000498
 8002b64:	20000080 	.word	0x20000080
 8002b68:	20000478 	.word	0x20000478
 8002b6c:	2000006a 	.word	0x2000006a
 8002b70:	2000049c 	.word	0x2000049c

08002b74 <Photo_IT>:
		}
		break;
	}
}

void Photo_IT() {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	switch (state_IT) {
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <Photo_IT+0x4c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <Photo_IT+0x12>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d011      	beq.n	8002ba8 <Photo_IT+0x34>
	case 1:
		Dutyfeedback = 0;
		motor(0, 1);
		break;
	}
}
 8002b84:	e01a      	b.n	8002bbc <Photo_IT+0x48>
		if (state_IT == 0) {
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <Photo_IT+0x4c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <Photo_IT+0x46>
		} else if (state_IT == 1) {
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <Photo_IT+0x4c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d111      	bne.n	8002bba <Photo_IT+0x46>
			Dutyfeedback = 0;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <Photo_IT+0x50>)
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
			motor(0, 1);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 f811 	bl	8002bc8 <motor>
		break;
 8002ba6:	e008      	b.n	8002bba <Photo_IT+0x46>
		Dutyfeedback = 0;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <Photo_IT+0x50>)
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
		motor(0, 1);
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f000 f808 	bl	8002bc8 <motor>
		break;
 8002bb8:	e000      	b.n	8002bbc <Photo_IT+0x48>
		break;
 8002bba:	bf00      	nop
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	2000047c 	.word	0x2000047c
 8002bc4:	20000440 	.word	0x20000440

08002bc8 <motor>:

void motor(uint32_t speed, int DIR) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d10a      	bne.n	8002bf0 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <motor+0x4c>)
 8002be2:	f000 fec3 	bl	800396c <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <motor+0x50>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 8002bee:	e00c      	b.n	8002c0a <motor+0x42>
	} else if (DIR == 1) {
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d109      	bne.n	8002c0a <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <motor+0x4c>)
 8002bfe:	f000 feb5 	bl	800396c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <motor+0x50>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40020000 	.word	0x40020000
 8002c18:	20000200 	.word	0x20000200

08002c1c <read_pos>:

void read_pos() {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <read_pos+0x3c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <read_pos+0x40>)
 8002c2a:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <read_pos+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fc23 	bl	800047c <__aeabi_i2d>
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <read_pos+0x44>)
 8002c3c:	f7fd fc88 	bl	8000550 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fd ff32 	bl	8000ab0 <__aeabi_d2f>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <read_pos+0x48>)
 8002c50:	6013      	str	r3, [r2, #0]
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000248 	.word	0x20000248
 8002c5c:	20000428 	.word	0x20000428
 8002c60:	3f8e0000 	.word	0x3f8e0000
 8002c64:	2000042c 	.word	0x2000042c

08002c68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Photoelectric_sensor_1_Pin) {
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c78:	d115      	bne.n	8002ca6 <HAL_GPIO_EXTI_Callback+0x3e>
		if (State == PID_STATE || State == CALIBRATE) {
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_EXTI_Callback+0x22>
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d10d      	bne.n	8002ca6 <HAL_GPIO_EXTI_Callback+0x3e>
			Dutyfeedback = 0;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_GPIO_EXTI_Callback+0x84>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == Photoelectric_sensor_3_Pin) {
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d115      	bne.n	8002cd8 <HAL_GPIO_EXTI_Callback+0x70>
		if (State == PID_STATE || State == CALIBRATE) {
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_EXTI_Callback+0x54>
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d10d      	bne.n	8002cd8 <HAL_GPIO_EXTI_Callback+0x70>
			Dutyfeedback = 0;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_GPIO_EXTI_Callback+0x84>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
			state_IT = 1;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
			State = EMERGENCY_LIMIT;
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	701a      	strb	r2, [r3, #0]
//		Dutyfeedback = 0;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	2000049c 	.word	0x2000049c
 8002ce8:	20000440 	.word	0x20000440
 8002cec:	20000200 	.word	0x20000200
 8002cf0:	2000047c 	.word	0x2000047c

08002cf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cf4:	b4b0      	push	{r4, r5, r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	1e54      	subs	r4, r2, #1
 8002d0c:	f143 0500 	adc.w	r5, r3, #0
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002d12:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bcb0      	pop	{r4, r5, r7}
 8002d1e:	4770      	bx	lr
 8002d20:	200002d8 	.word	0x200002d8
 8002d24:	20000480 	.word	0x20000480

08002d28 <micros>:

uint64_t micros() {
 8002d28:	b4b0      	push	{r4, r5, r7}
 8002d2a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <micros+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2200      	movs	r2, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	4611      	mov	r1, r2
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <micros+0x30>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	1884      	adds	r4, r0, r2
 8002d40:	eb41 0503 	adc.w	r5, r1, r3
 8002d44:	4622      	mov	r2, r4
 8002d46:	462b      	mov	r3, r5
}
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bcb0      	pop	{r4, r5, r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	200002d8 	.word	0x200002d8
 8002d58:	20000480 	.word	0x20000480

08002d5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d60:	b672      	cpsid	i
}
 8002d62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d64:	e7fe      	b.n	8002d64 <Error_Handler+0x8>
	...

08002d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002da6:	2007      	movs	r0, #7
 8002da8:	f000 fc02 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_I2C_MspInit+0xa8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d13d      	bne.n	8002e56 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfc:	2312      	movs	r3, #18
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e00:	2301      	movs	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e08:	2304      	movs	r3, #4
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4815      	ldr	r0, [pc, #84]	; (8002e68 <HAL_I2C_MspInit+0xb0>)
 8002e14:	f000 fc0e 	bl	8003634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1e:	2312      	movs	r3, #18
 8002e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e2a:	2309      	movs	r3, #9
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	4619      	mov	r1, r3
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <HAL_I2C_MspInit+0xb0>)
 8002e36:	f000 fbfd 	bl	8003634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_I2C_MspInit+0xac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e56:	bf00      	nop
 8002e58:	3728      	adds	r7, #40	; 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40005800 	.word	0x40005800
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020400 	.word	0x40020400

08002e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_SPI_MspInit+0x84>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d12c      	bne.n	8002ee8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_SPI_MspInit+0x88>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ed8:	2306      	movs	r3, #6
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <HAL_SPI_MspInit+0x8c>)
 8002ee4:	f000 fba6 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ee8:	bf00      	nop
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40003c00 	.word	0x40003c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020800 	.word	0x40020800

08002efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_TIM_Base_MspInit+0xa8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10e      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f2a:	e036      	b.n	8002f9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_TIM_Base_MspInit+0xb0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d116      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	201d      	movs	r0, #29
 8002f58:	f000 fb35 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f5c:	201d      	movs	r0, #29
 8002f5e:	f000 fb4e 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 8002f62:	e01a      	b.n	8002f9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_TIM_Base_MspInit+0xb4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d115      	bne.n	8002f9a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_TIM_Base_MspInit+0xac>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2032      	movs	r0, #50	; 0x32
 8002f90:	f000 fb19 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f94:	2032      	movs	r0, #50	; 0x32
 8002f96:	f000 fb32 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000c00 	.word	0x40000c00

08002fb4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d12b      	bne.n	800302e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a16      	ldr	r2, [pc, #88]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_TIM_Encoder_MspInit+0x84>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800300e:	2303      	movs	r3, #3
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800301e:	2301      	movs	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <HAL_TIM_Encoder_MspInit+0x88>)
 800302a:	f000 fb03 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000

08003040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_TIM_MspPostInit+0x68>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d11e      	bne.n	80030a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_TIM_MspPostInit+0x6c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_TIM_MspPostInit+0x6c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_TIM_MspPostInit+0x6c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800307e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003090:	2301      	movs	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	4619      	mov	r1, r3
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <HAL_TIM_MspPostInit+0x70>)
 800309c:	f000 faca 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020000 	.word	0x40020000

080030b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_UART_MspInit+0xe8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12c      	bne.n	8003130 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800310e:	230c      	movs	r3, #12
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800311e:	2307      	movs	r3, #7
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	481e      	ldr	r0, [pc, #120]	; (80031a4 <HAL_UART_MspInit+0xf0>)
 800312a:	f000 fa83 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800312e:	e031      	b.n	8003194 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_UART_MspInit+0xf4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d12c      	bne.n	8003194 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003144:	f043 0320 	orr.w	r3, r3, #32
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_UART_MspInit+0xec>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_UART_MspInit+0xec>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003172:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003184:	2308      	movs	r3, #8
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <HAL_UART_MspInit+0xf0>)
 8003190:	f000 fa50 	bl	8003634 <HAL_GPIO_Init>
}
 8003194:	bf00      	nop
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40004400 	.word	0x40004400
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40011400 	.word	0x40011400

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <NMI_Handler+0x4>

080031b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b6:	e7fe      	b.n	80031b6 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <MemManage_Handler+0x4>

080031be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <UsageFault_Handler+0x4>

080031ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f8:	f000 f8c6 	bl	8003388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8003204:	2004      	movs	r0, #4
 8003206:	f000 fbcb 	bl	80039a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}

0800320e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003212:	2008      	movs	r0, #8
 8003214:	f000 fbc4 	bl	80039a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8003220:	2040      	movs	r0, #64	; 0x40
 8003222:	f000 fbbd 	bl	80039a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8003226:	f44f 7080 	mov.w	r0, #256	; 0x100
 800322a:	f000 fbb9 	bl	80039a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <TIM3_IRQHandler+0x10>)
 800323a:	f002 fe37 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000290 	.word	0x20000290

08003248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800324c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003250:	f000 fba6 	bl	80039a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}

08003258 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <TIM5_IRQHandler+0x10>)
 800325e:	f002 fe25 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200002d8 	.word	0x200002d8

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <SystemInit+0x20>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <SystemInit+0x20>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003296:	490e      	ldr	r1, [pc, #56]	; (80032d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800329c:	e002      	b.n	80032a4 <LoopCopyDataInit>

0800329e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a2:	3304      	adds	r3, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a8:	d3f9      	bcc.n	800329e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032aa:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032ac:	4c0b      	ldr	r4, [pc, #44]	; (80032dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b0:	e001      	b.n	80032b6 <LoopFillZerobss>

080032b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b4:	3204      	adds	r2, #4

080032b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b8:	d3fb      	bcc.n	80032b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032ba:	f7ff ffd7 	bl	800326c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032be:	f003 ff17 	bl	80070f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c2:	f7fd fddd 	bl	8000e80 <main>
  bx  lr    
 80032c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80032d4:	08007344 	.word	0x08007344
  ldr r2, =_sbss
 80032d8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80032dc:	200004b0 	.word	0x200004b0

080032e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_Init+0x40>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_Init+0x40>)
 80032fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_Init+0x40>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330c:	2003      	movs	r0, #3
 800330e:	f000 f94f 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003312:	2000      	movs	r0, #0
 8003314:	f000 f808 	bl	8003328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003318:	f7ff fd26 	bl	8002d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00

08003328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_InitTick+0x54>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_InitTick+0x58>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f967 	bl	800361a <HAL_SYSTICK_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e00e      	b.n	8003374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d80a      	bhi.n	8003372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800335c:	2200      	movs	r2, #0
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f000 f92f 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003368:	4a06      	ldr	r2, [pc, #24]	; (8003384 <HAL_InitTick+0x5c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200000c8 	.word	0x200000c8
 8003380:	200000d0 	.word	0x200000d0
 8003384:	200000cc 	.word	0x200000cc

08003388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_IncTick+0x20>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_IncTick+0x24>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <HAL_IncTick+0x24>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	200000d0 	.word	0x200000d0
 80033ac:	200004ac 	.word	0x200004ac

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_GetTick+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200004ac 	.word	0x200004ac

080033c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff ffee 	bl	80033b0 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d005      	beq.n	80033ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_Delay+0x44>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ee:	bf00      	nop
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d8f7      	bhi.n	80033f0 <HAL_Delay+0x28>
  {
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200000d0 	.word	0x200000d0

08003410 <__NVIC_SetPriorityGrouping>:
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	60d3      	str	r3, [r2, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_GetPriorityGrouping>:
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	; (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff3e 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff8e 	bl	8003504 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5d 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff31 	bl	8003474 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffa2 	bl	800356c <SysTick_Config>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e159      	b.n	8003904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	f040 8148 	bne.w	80038fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d005      	beq.n	8003686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	2b02      	cmp	r3, #2
 8003684:	d130      	bne.n	80036e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0201 	and.w	r2, r3, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d017      	beq.n	8003724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d123      	bne.n	8003778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	69b9      	ldr	r1, [r7, #24]
 8003774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b54      	ldr	r3, [pc, #336]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_GPIO_Init+0x2ec>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a49      	ldr	r2, [pc, #292]	; (8003924 <HAL_GPIO_Init+0x2f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <HAL_GPIO_Init+0x202>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_GPIO_Init+0x2f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x1fe>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a47      	ldr	r2, [pc, #284]	; (800392c <HAL_GPIO_Init+0x2f8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x1fa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <HAL_GPIO_Init+0x2fc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x1f6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a45      	ldr	r2, [pc, #276]	; (8003934 <HAL_GPIO_Init+0x300>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x1f2>
 8003822:	2304      	movs	r3, #4
 8003824:	e008      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003826:	2307      	movs	r3, #7
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382a:	2303      	movs	r3, #3
 800382c:	e004      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382e:	2302      	movs	r3, #2
 8003830:	e002      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003836:	2300      	movs	r3, #0
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f002 0203 	and.w	r2, r2, #3
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	4093      	lsls	r3, r2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003848:	4935      	ldr	r1, [pc, #212]	; (8003920 <HAL_GPIO_Init+0x2ec>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003856:	4b38      	ldr	r3, [pc, #224]	; (8003938 <HAL_GPIO_Init+0x304>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <HAL_GPIO_Init+0x304>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_GPIO_Init+0x304>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	f67f aea2 	bls.w	8003650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	40013800 	.word	0x40013800
 8003924:	40020000 	.word	0x40020000
 8003928:	40020400 	.word	0x40020400
 800392c:	40020800 	.word	0x40020800
 8003930:	40020c00 	.word	0x40020c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e001      	b.n	800395e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
 8003978:	4613      	mov	r3, r2
 800397a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003988:	e003      	b.n	8003992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	041a      	lsls	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f952 	bl	8002c68 <HAL_GPIO_EXTI_Callback>
  }
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40013c00 	.word	0x40013c00

080039d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e12b      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff f9de 	bl	8002db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	; 0x24
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a34:	f001 fbd2 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a81      	ldr	r2, [pc, #516]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d807      	bhi.n	8003a54 <HAL_I2C_Init+0x84>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_I2C_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bf94      	ite	ls
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	2300      	movhi	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e006      	b.n	8003a62 <HAL_I2C_Init+0x92>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a7d      	ldr	r2, [pc, #500]	; (8003c4c <HAL_I2C_Init+0x27c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bf94      	ite	ls
 8003a5c:	2301      	movls	r3, #1
 8003a5e:	2300      	movhi	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0e7      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	; (8003c50 <HAL_I2C_Init+0x280>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0c9b      	lsrs	r3, r3, #18
 8003a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a6a      	ldr	r2, [pc, #424]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d802      	bhi.n	8003aa4 <HAL_I2C_Init+0xd4>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e009      	b.n	8003ab8 <HAL_I2C_Init+0xe8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	4a69      	ldr	r2, [pc, #420]	; (8003c54 <HAL_I2C_Init+0x284>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	495c      	ldr	r1, [pc, #368]	; (8003c44 <HAL_I2C_Init+0x274>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d819      	bhi.n	8003b0c <HAL_I2C_Init+0x13c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e59      	subs	r1, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aec:	400b      	ands	r3, r1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_I2C_Init+0x138>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e59      	subs	r1, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	e051      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e04f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d111      	bne.n	8003b38 <HAL_I2C_Init+0x168>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e58      	subs	r0, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e012      	b.n	8003b5e <HAL_I2C_Init+0x18e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x196>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <HAL_I2C_Init+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e58      	subs	r0, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8a:	e00f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6809      	ldr	r1, [r1, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6911      	ldr	r1, [r2, #16]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	000186a0 	.word	0x000186a0
 8003c48:	001e847f 	.word	0x001e847f
 8003c4c:	003d08ff 	.word	0x003d08ff
 8003c50:	431bde83 	.word	0x431bde83
 8003c54:	10624dd3 	.word	0x10624dd3

08003c58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	460b      	mov	r3, r1
 8003c66:	817b      	strh	r3, [r7, #10]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff fba0 	bl	80033b0 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 80e0 	bne.w	8003e40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	4970      	ldr	r1, [pc, #448]	; (8003e4c <HAL_I2C_Master_Transmit+0x1f4>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fc58 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0d3      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2C_Master_Transmit+0x50>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0cc      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d007      	beq.n	8003cce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a50      	ldr	r2, [pc, #320]	; (8003e50 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fac2 	bl	80042a0 <I2C_MasterRequestWrite>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08d      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d3c:	e066      	b.n	8003e0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fcd2 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06b      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_I2C_Master_Transmit+0x188>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fcc2 	bl	800476e <I2C_WaitOnBTFFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d107      	bne.n	8003e08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01a      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d194      	bne.n	8003d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000

08003e54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	460b      	mov	r3, r1
 8003e62:	817b      	strh	r3, [r7, #10]
 8003e64:	4613      	mov	r3, r2
 8003e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff faa2 	bl	80033b0 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	f040 820b 	bne.w	8004292 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2319      	movs	r3, #25
 8003e82:	2201      	movs	r2, #1
 8003e84:	497c      	ldr	r1, [pc, #496]	; (8004078 <HAL_I2C_Master_Receive+0x224>)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fb5a 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	e1fe      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2C_Master_Receive+0x50>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e1f7      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d007      	beq.n	8003eca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2222      	movs	r2, #34	; 0x22
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a5c      	ldr	r2, [pc, #368]	; (800407c <HAL_I2C_Master_Receive+0x228>)
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa46 	bl	80043a4 <I2C_MasterRequestRead>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1b8      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	623b      	str	r3, [r7, #32]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e18c      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d11b      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e16c      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d11b      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	e14c      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ff8:	e138      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	f200 80f1 	bhi.w	80041e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	2b01      	cmp	r3, #1
 800400a:	d123      	bne.n	8004054 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fbed 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e139      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004052:	e10b      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	2b02      	cmp	r3, #2
 800405a:	d14e      	bne.n	80040fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	2200      	movs	r2, #0
 8004064:	4906      	ldr	r1, [pc, #24]	; (8004080 <HAL_I2C_Master_Receive+0x22c>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa6a 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e10e      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
 8004076:	bf00      	nop
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000
 8004080:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f8:	e0b8      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	4966      	ldr	r1, [pc, #408]	; (800429c <HAL_I2C_Master_Receive+0x448>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fa1b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0bf      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	2200      	movs	r2, #0
 800415e:	494f      	ldr	r1, [pc, #316]	; (800429c <HAL_I2C_Master_Receive+0x448>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9ed 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e091      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e042      	b.n	800426c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fb00 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e04c      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d118      	bne.n	800426c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f aec2 	bne.w	8003ffa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3728      	adds	r7, #40	; 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00010004 	.word	0x00010004

080042a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d006      	beq.n	80042ca <I2C_MasterRequestWrite+0x2a>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d003      	beq.n	80042ca <I2C_MasterRequestWrite+0x2a>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c8:	d108      	bne.n	80042dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e00b      	b.n	80042f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b12      	cmp	r3, #18
 80042e2:	d107      	bne.n	80042f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f91d 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d103      	bne.n	8004324 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e035      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004330:	d108      	bne.n	8004344 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	e01b      	b.n	800437c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004344:	897b      	ldrh	r3, [r7, #10]
 8004346:	11db      	asrs	r3, r3, #7
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f063 030f 	orn	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <I2C_MasterRequestWrite+0xfc>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f943 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e010      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4907      	ldr	r1, [pc, #28]	; (80043a0 <I2C_MasterRequestWrite+0x100>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f933 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00010008 	.word	0x00010008
 80043a0:	00010002 	.word	0x00010002

080043a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	460b      	mov	r3, r1
 80043b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d006      	beq.n	80043de <I2C_MasterRequestRead+0x3a>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d003      	beq.n	80043de <I2C_MasterRequestRead+0x3a>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043dc:	d108      	bne.n	80043f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e00b      	b.n	8004408 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b11      	cmp	r3, #17
 80043f6:	d107      	bne.n	8004408 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004406:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f893 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d103      	bne.n	8004438 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e079      	b.n	8004530 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004444:	d108      	bne.n	8004458 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
 8004456:	e05f      	b.n	8004518 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	11db      	asrs	r3, r3, #7
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 0306 	and.w	r3, r3, #6
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f063 030f 	orn	r3, r3, #15
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4930      	ldr	r1, [pc, #192]	; (8004538 <I2C_MasterRequestRead+0x194>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f8b9 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e054      	b.n	8004530 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4929      	ldr	r1, [pc, #164]	; (800453c <I2C_MasterRequestRead+0x198>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8a9 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e044      	b.n	8004530 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f831 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f2:	d103      	bne.n	80044fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e017      	b.n	8004530 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004500:	897b      	ldrh	r3, [r7, #10]
 8004502:	11db      	asrs	r3, r3, #7
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0306 	and.w	r3, r3, #6
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f063 030e 	orn	r3, r3, #14
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <I2C_MasterRequestRead+0x198>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f865 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	00010008 	.word	0x00010008
 800453c:	00010002 	.word	0x00010002

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e025      	b.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d021      	beq.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe ff29 	bl	80033b0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d116      	bne.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e023      	b.n	80045e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10d      	bne.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	e00c      	b.n	80045de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d0b6      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045fc:	e051      	b.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d123      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004626:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e046      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d021      	beq.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fea7 	bl	80033b0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e020      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10c      	bne.n	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e00b      	b.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	43da      	mvns	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d18d      	bne.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f8:	e02d      	b.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8ce 	bl	800489c <I2C_IsAcknowledgeFailed>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02d      	b.n	8004766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d021      	beq.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe fe4d 	bl	80033b0 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d116      	bne.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e007      	b.n	8004766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d1ca      	bne.n	80046fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477a:	e02d      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f88d 	bl	800489c <I2C_IsAcknowledgeFailed>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e02d      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d021      	beq.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fe fe0c 	bl	80033b0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d1ca      	bne.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047fc:	e042      	b.n	8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d119      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e029      	b.n	8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe fdb6 	bl	80033b0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d1b5      	bne.n	80047fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d11b      	bne.n	80048ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e267      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	4b88      	ldr	r3, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b82      	ldr	r3, [pc, #520]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b7e      	ldr	r3, [pc, #504]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e242      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a6f      	ldr	r2, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b6d      	ldr	r3, [pc, #436]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6c      	ldr	r2, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b69      	ldr	r3, [pc, #420]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a68      	ldr	r2, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a65      	ldr	r2, [pc, #404]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fcfc 	bl	80033b0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fe fcf8 	bl	80033b0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e207      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b5b      	ldr	r3, [pc, #364]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fe fce8 	bl	80033b0 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fe fce4 	bl	80033b0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1f3      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b51      	ldr	r3, [pc, #324]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b44      	ldr	r3, [pc, #272]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1c7      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4937      	ldr	r1, [pc, #220]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fe fc9d 	bl	80033b0 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fc99 	bl	80033b0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1a8      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4925      	ldr	r1, [pc, #148]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fc7c 	bl	80033b0 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fe fc78 	bl	80033b0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e187      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fe fc5c 	bl	80033b0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fe fc58 	bl	80033b0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e167      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e01b      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fe fc45 	bl	80033b0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e00e      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fc41 	bl	80033b0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d907      	bls.n	8004b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e150      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	42470000 	.word	0x42470000
 8004b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ea      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8097 	beq.w	8004c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b66:	4b81      	ldr	r3, [pc, #516]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a7c      	ldr	r2, [pc, #496]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b7a      	ldr	r3, [pc, #488]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b77      	ldr	r3, [pc, #476]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	4b74      	ldr	r3, [pc, #464]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004baa:	f7fe fc01 	bl	80033b0 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fe fbfd 	bl	80033b0 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e10c      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2ea>
 8004bd8:	4b64      	ldr	r3, [pc, #400]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	e01c      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x30c>
 8004bee:	4b5f      	ldr	r3, [pc, #380]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfa:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a5b      	ldr	r2, [pc, #364]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004c08:	4b58      	ldr	r3, [pc, #352]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b55      	ldr	r3, [pc, #340]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a54      	ldr	r2, [pc, #336]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe fbc2 	bl	80033b0 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fe fbbe 	bl	80033b0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0cb      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ee      	beq.n	8004c30 <HAL_RCC_OscConfig+0x334>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c54:	f7fe fbac 	bl	80033b0 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fe fba8 	bl	80033b0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0b5      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ee      	bne.n	8004c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a1 	beq.w	8004ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d05c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d141      	bne.n	8004d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe fb7c 	bl	80033b0 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fe fb78 	bl	80033b0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e087      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	491b      	ldr	r1, [pc, #108]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fb51 	bl	80033b0 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d12:	f7fe fb4d 	bl	80033b0 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e05c      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d24:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x416>
 8004d30:	e054      	b.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fe fb3a 	bl	80033b0 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe fb36 	bl	80033b0 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e045      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x444>
 8004d5e:	e03d      	b.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e038      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40007000 	.word	0x40007000
 8004d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d028      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d121      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d11a      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d111      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cc      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d90c      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d044      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e067      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4934      	ldr	r1, [pc, #208]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fe fa68 	bl	80033b0 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fe fa64 	bl	80033b0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	490a      	ldr	r1, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe f9c8 	bl	8003328 <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	0800731c 	.word	0x0800731c
 8004fb0:	200000c8 	.word	0x200000c8
 8004fb4:	200000cc 	.word	0x200000cc

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fbc:	b094      	sub	sp, #80	; 0x50
 8004fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	2300      	movs	r3, #0
 8004fca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd0:	4b79      	ldr	r3, [pc, #484]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	f200 80e1 	bhi.w	80051a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x34>
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fea:	e0db      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ff0:	e0db      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ff6:	e0d8      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005002:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d063      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500e:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	2200      	movs	r2, #0
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 8005022:	2300      	movs	r3, #0
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
 8005026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	0159      	lsls	r1, r3, #5
 8005038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800503c:	0150      	lsls	r0, r2, #5
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4621      	mov	r1, r4
 8005044:	1a51      	subs	r1, r2, r1
 8005046:	6139      	str	r1, [r7, #16]
 8005048:	4629      	mov	r1, r5
 800504a:	eb63 0301 	sbc.w	r3, r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	018b      	lsls	r3, r1, #6
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005066:	4651      	mov	r1, sl
 8005068:	018a      	lsls	r2, r1, #6
 800506a:	4651      	mov	r1, sl
 800506c:	ebb2 0801 	subs.w	r8, r2, r1
 8005070:	4659      	mov	r1, fp
 8005072:	eb63 0901 	sbc.w	r9, r3, r1
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800508a:	4690      	mov	r8, r2
 800508c:	4699      	mov	r9, r3
 800508e:	4623      	mov	r3, r4
 8005090:	eb18 0303 	adds.w	r3, r8, r3
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	462b      	mov	r3, r5
 8005098:	eb49 0303 	adc.w	r3, r9, r3
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050aa:	4629      	mov	r1, r5
 80050ac:	024b      	lsls	r3, r1, #9
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050b4:	4621      	mov	r1, r4
 80050b6:	024a      	lsls	r2, r1, #9
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c8:	f7fb fd42 	bl	8000b50 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	e058      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	2200      	movs	r2, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	4611      	mov	r1, r2
 80050e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	2300      	movs	r3, #0
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
 80050ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	f04f 0000 	mov.w	r0, #0
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	0159      	lsls	r1, r3, #5
 80050fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005102:	0150      	lsls	r0, r2, #5
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4641      	mov	r1, r8
 800510a:	ebb2 0a01 	subs.w	sl, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb63 0b01 	sbc.w	fp, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005128:	ebb2 040a 	subs.w	r4, r2, sl
 800512c:	eb63 050b 	sbc.w	r5, r3, fp
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	00eb      	lsls	r3, r5, #3
 800513a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513e:	00e2      	lsls	r2, r4, #3
 8005140:	4614      	mov	r4, r2
 8005142:	461d      	mov	r5, r3
 8005144:	4643      	mov	r3, r8
 8005146:	18e3      	adds	r3, r4, r3
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	464b      	mov	r3, r9
 800514c:	eb45 0303 	adc.w	r3, r5, r3
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515e:	4629      	mov	r1, r5
 8005160:	028b      	lsls	r3, r1, #10
 8005162:	4621      	mov	r1, r4
 8005164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005168:	4621      	mov	r1, r4
 800516a:	028a      	lsls	r2, r1, #10
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005172:	2200      	movs	r2, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	61fa      	str	r2, [r7, #28]
 8005178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517c:	f7fb fce8 	bl	8000b50 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4613      	mov	r3, r2
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a2:	e002      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_RCC_GetSysClockFreq+0x204>)
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3750      	adds	r7, #80	; 0x50
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200000c8 	.word	0x200000c8

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a9b      	lsrs	r3, r3, #10
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	0800732c 	.word	0x0800732c

08005204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005208:	f7ff ffdc 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	0b5b      	lsrs	r3, r3, #13
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4903      	ldr	r1, [pc, #12]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	0800732c 	.word	0x0800732c

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07b      	b.n	8005336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fd fdf4 	bl	8002e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0104 	and.w	r1, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0210 	and.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08c      	sub	sp, #48	; 0x30
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800534c:	2301      	movs	r3, #1
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x26>
 8005360:	2302      	movs	r3, #2
 8005362:	e18a      	b.n	800567a <HAL_SPI_TransmitReceive+0x33c>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800536c:	f7fe f820 	bl	80033b0 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800538a:	2b01      	cmp	r3, #1
 800538c:	d00f      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x70>
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005394:	d107      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x68>
 800539e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d003      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
 80053a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053ac:	e15b      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x82>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x82>
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053c6:	e14e      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d003      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2205      	movs	r2, #5
 80053d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	887a      	ldrh	r2, [r7, #2]
 80053f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	887a      	ldrh	r2, [r7, #2]
 8005404:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d007      	beq.n	8005430 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800542e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005438:	d178      	bne.n	800552c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x10a>
 8005442:	8b7b      	ldrh	r3, [r7, #26]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d166      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	1c9a      	adds	r2, r3, #2
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546c:	e053      	b.n	8005516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d11b      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x176>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <HAL_SPI_TransmitReceive+0x176>
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d113      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d119      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x1b8>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d014      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	b292      	uxth	r2, r2
 80054d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	1c9a      	adds	r2, r3, #2
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054f2:	2301      	movs	r3, #1
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054f6:	f7fd ff5b 	bl	80033b0 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005502:	429a      	cmp	r2, r3
 8005504:	d807      	bhi.n	8005516 <HAL_SPI_TransmitReceive+0x1d8>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d003      	beq.n	8005516 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005514:	e0a7      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1a6      	bne.n	800546e <HAL_SPI_TransmitReceive+0x130>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1a1      	bne.n	800546e <HAL_SPI_TransmitReceive+0x130>
 800552a:	e07c      	b.n	8005626 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_TransmitReceive+0x1fc>
 8005534:	8b7b      	ldrh	r3, [r7, #26]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d16b      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005560:	e057      	b.n	8005612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d11c      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x26c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x26c>
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d114      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d119      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x2ae>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d014      	beq.n	80055ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055e8:	2301      	movs	r3, #1
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055ec:	f7fd fee0 	bl	80033b0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d803      	bhi.n	8005604 <HAL_SPI_TransmitReceive+0x2c6>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d102      	bne.n	800560a <HAL_SPI_TransmitReceive+0x2cc>
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005610:	e029      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1a2      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x224>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d19d      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8b2 	bl	8005794 <SPI_EndRxTxTransaction>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005642:	e010      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	e000      	b.n	8005666 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800567a:	4618      	mov	r0, r3
 800567c:	3730      	adds	r7, #48	; 0x30
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005694:	f7fd fe8c 	bl	80033b0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056a4:	f7fd fe84 	bl	80033b0 <HAL_GetTick>
 80056a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056aa:	4b39      	ldr	r3, [pc, #228]	; (8005790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	015b      	lsls	r3, r3, #5
 80056b0:	0d1b      	lsrs	r3, r3, #20
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ba:	e054      	b.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d050      	beq.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056c4:	f7fd fe74 	bl	80033b0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d902      	bls.n	80056da <SPI_WaitFlagStateUntilTimeout+0x56>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d13d      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f2:	d111      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d004      	beq.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d107      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d10f      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e017      	b.n	8005786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3b01      	subs	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d19b      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200000c8 	.word	0x200000c8

08005794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <SPI_EndRxTxTransaction+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <SPI_EndRxTxTransaction+0x80>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0d5b      	lsrs	r3, r3, #21
 80057ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057be:	d112      	bne.n	80057e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ff5a 	bl	8005684 <SPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00f      	b.n	8005806 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d0f2      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x52>
 8005800:	e000      	b.n	8005804 <SPI_EndRxTxTransaction+0x70>
        break;
 8005802:	bf00      	nop
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200000c8 	.word	0x200000c8
 8005814:	165e9f81 	.word	0x165e9f81

08005818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e041      	b.n	80058ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fd fb5c 	bl	8002efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f000 fde2 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e03c      	b.n	800594a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1e      	ldr	r2, [pc, #120]	; (8005958 <HAL_TIM_Base_Start+0xa0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_TIM_Base_Start+0x5c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d013      	beq.n	8005914 <HAL_TIM_Base_Start+0x5c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_TIM_Base_Start+0xa4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_TIM_Base_Start+0x5c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_TIM_Base_Start+0xa8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIM_Base_Start+0x5c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a17      	ldr	r2, [pc, #92]	; (8005964 <HAL_TIM_Base_Start+0xac>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIM_Base_Start+0x5c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIM_Base_Start+0xb0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d111      	bne.n	8005938 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d010      	beq.n	8005948 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	e007      	b.n	8005948 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40014000 	.word	0x40014000

0800596c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e044      	b.n	8005a0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <HAL_TIM_Base_Start_IT+0xb0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d018      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d013      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_TIM_Base_Start_IT+0xb4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00e      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_TIM_Base_Start_IT+0xb8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <HAL_TIM_Base_Start_IT+0xbc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_TIM_Base_Start_IT+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d111      	bne.n	80059fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d010      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0201 	orr.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	e007      	b.n	8005a0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40014000 	.word	0x40014000

08005a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e041      	b.n	8005ac6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f839 	bl	8005ace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f000 fcd6 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x24>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e022      	b.n	8005b4e <HAL_TIM_PWM_Start+0x6a>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d109      	bne.n	8005b22 <HAL_TIM_PWM_Start+0x3e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	bf14      	ite	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	2300      	moveq	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	e015      	b.n	8005b4e <HAL_TIM_PWM_Start+0x6a>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d109      	bne.n	8005b3c <HAL_TIM_PWM_Start+0x58>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	bf14      	ite	ne
 8005b34:	2301      	movne	r3, #1
 8005b36:	2300      	moveq	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	e008      	b.n	8005b4e <HAL_TIM_PWM_Start+0x6a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e068      	b.n	8005c28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <HAL_TIM_PWM_Start+0x82>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b64:	e013      	b.n	8005b8e <HAL_TIM_PWM_Start+0xaa>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x92>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b74:	e00b      	b.n	8005b8e <HAL_TIM_PWM_Start+0xaa>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_PWM_Start+0xa2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b84:	e003      	b.n	8005b8e <HAL_TIM_PWM_Start+0xaa>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fee8 	bl	800696c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <HAL_TIM_PWM_Start+0x14c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <HAL_TIM_PWM_Start+0x14c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x10e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d013      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x10e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <HAL_TIM_PWM_Start+0x150>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x10e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <HAL_TIM_PWM_Start+0x154>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x10e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <HAL_TIM_PWM_Start+0x158>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x10e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <HAL_TIM_PWM_Start+0x15c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d010      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c14:	e007      	b.n	8005c26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40014000 	.word	0x40014000

08005c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e097      	b.n	8005d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fd f9a1 	bl	8002fb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 fbc1 	bl	8006420 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ce4:	f023 030c 	bic.w	r3, r3, #12
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	4313      	orrs	r3, r2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	011a      	lsls	r2, r3, #4
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	031b      	lsls	r3, r3, #12
 8005d14:	4313      	orrs	r3, r2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4313      	orrs	r3, r2
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d102      	bne.n	8005dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e069      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	e031      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d110      	bne.n	8005e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dee:	7b3b      	ldrb	r3, [r7, #12]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d001      	beq.n	8005df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e055      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e08:	e01d      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1c:	7b3b      	ldrb	r3, [r7, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e03e      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0xc4>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d008      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xd4>
 8005e52:	e00f      	b.n	8005e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fd85 	bl	800696c <TIM_CCxChannelCmd>
      break;
 8005e62:	e016      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fd7d 	bl	800696c <TIM_CCxChannelCmd>
      break;
 8005e72:	e00e      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd75 	bl	800696c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	2104      	movs	r1, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fd6e 	bl	800696c <TIM_CCxChannelCmd>
      break;
 8005e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0202 	mvn.w	r2, #2
 8005ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa77 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa69 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa7a 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d122      	bne.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d11b      	bne.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0204 	mvn.w	r2, #4
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa4d 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa3f 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa50 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d122      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d11b      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0208 	mvn.w	r2, #8
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa23 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa15 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa26 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d122      	bne.n	8006004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d11b      	bne.n	8006004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0210 	mvn.w	r2, #16
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f9f9 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9eb 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f9fc 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0201 	mvn.w	r2, #1
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fc fe62 	bl	8002cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d10e      	bne.n	800605c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d107      	bne.n	800605c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fd78 	bl	8006b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d107      	bne.n	8006088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9c1 	bl	800640a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d107      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0220 	mvn.w	r2, #32
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fd42 	bl	8006b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0ae      	b.n	8006238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	f200 809f 	bhi.w	8006228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006125 	.word	0x08006125
 80060f4:	08006229 	.word	0x08006229
 80060f8:	08006229 	.word	0x08006229
 80060fc:	08006229 	.word	0x08006229
 8006100:	08006165 	.word	0x08006165
 8006104:	08006229 	.word	0x08006229
 8006108:	08006229 	.word	0x08006229
 800610c:	08006229 	.word	0x08006229
 8006110:	080061a7 	.word	0x080061a7
 8006114:	08006229 	.word	0x08006229
 8006118:	08006229 	.word	0x08006229
 800611c:	08006229 	.word	0x08006229
 8006120:	080061e7 	.word	0x080061e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f9f8 	bl	8006520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0208 	orr.w	r2, r2, #8
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	619a      	str	r2, [r3, #24]
      break;
 8006162:	e064      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fa3e 	bl	80065ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6999      	ldr	r1, [r3, #24]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	619a      	str	r2, [r3, #24]
      break;
 80061a4:	e043      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fa89 	bl	80066c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0204 	bic.w	r2, r2, #4
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	61da      	str	r2, [r3, #28]
      break;
 80061e4:	e023      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fad3 	bl	8006798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69d9      	ldr	r1, [r3, #28]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	021a      	lsls	r2, r3, #8
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	61da      	str	r2, [r3, #28]
      break;
 8006226:	e002      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIM_ConfigClockSource+0x1c>
 8006258:	2302      	movs	r3, #2
 800625a:	e0b4      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x186>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800627a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006294:	d03e      	beq.n	8006314 <HAL_TIM_ConfigClockSource+0xd4>
 8006296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629a:	f200 8087 	bhi.w	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a2:	f000 8086 	beq.w	80063b2 <HAL_TIM_ConfigClockSource+0x172>
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d87f      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b70      	cmp	r3, #112	; 0x70
 80062ae:	d01a      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0xa6>
 80062b0:	2b70      	cmp	r3, #112	; 0x70
 80062b2:	d87b      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b60      	cmp	r3, #96	; 0x60
 80062b6:	d050      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x11a>
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d877      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b50      	cmp	r3, #80	; 0x50
 80062be:	d03c      	beq.n	800633a <HAL_TIM_ConfigClockSource+0xfa>
 80062c0:	2b50      	cmp	r3, #80	; 0x50
 80062c2:	d873      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d058      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x13a>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d86f      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b30      	cmp	r3, #48	; 0x30
 80062ce:	d064      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d86b      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d060      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d867      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d05c      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d05a      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	e062      	b.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6899      	ldr	r1, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f000 fb19 	bl	800692c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	609a      	str	r2, [r3, #8]
      break;
 8006312:	e04f      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	6899      	ldr	r1, [r3, #8]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f000 fb02 	bl	800692c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006336:	609a      	str	r2, [r3, #8]
      break;
 8006338:	e03c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	461a      	mov	r2, r3
 8006348:	f000 fa76 	bl	8006838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2150      	movs	r1, #80	; 0x50
 8006352:	4618      	mov	r0, r3
 8006354:	f000 facf 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006358:	e02c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6859      	ldr	r1, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	461a      	mov	r2, r3
 8006368:	f000 fa95 	bl	8006896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2160      	movs	r1, #96	; 0x60
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fabf 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006378:	e01c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	461a      	mov	r2, r3
 8006388:	f000 fa56 	bl	8006838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	4618      	mov	r0, r3
 8006394:	f000 faaf 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006398:	e00c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f000 faa6 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063aa:	e003      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      break;
 80063b0:	e000      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <TIM_Base_SetConfig+0xe4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_Base_SetConfig+0x38>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d00b      	beq.n	8006458 <TIM_Base_SetConfig+0x38>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a31      	ldr	r2, [pc, #196]	; (8006508 <TIM_Base_SetConfig+0xe8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_Base_SetConfig+0x38>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a30      	ldr	r2, [pc, #192]	; (800650c <TIM_Base_SetConfig+0xec>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0x38>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a2f      	ldr	r2, [pc, #188]	; (8006510 <TIM_Base_SetConfig+0xf0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d108      	bne.n	800646a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a25      	ldr	r2, [pc, #148]	; (8006504 <TIM_Base_SetConfig+0xe4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01b      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006478:	d017      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a22      	ldr	r2, [pc, #136]	; (8006508 <TIM_Base_SetConfig+0xe8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_Base_SetConfig+0xec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a20      	ldr	r2, [pc, #128]	; (8006510 <TIM_Base_SetConfig+0xf0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00b      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <TIM_Base_SetConfig+0xf4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <TIM_Base_SetConfig+0xf8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_Base_SetConfig+0x8a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <TIM_Base_SetConfig+0xfc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <TIM_Base_SetConfig+0xe4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d103      	bne.n	80064f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	615a      	str	r2, [r3, #20]
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800

08006520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0302 	bic.w	r3, r3, #2
 8006568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <TIM_OC1_SetConfig+0xc8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d10c      	bne.n	8006596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0308 	bic.w	r3, r3, #8
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 0304 	bic.w	r3, r3, #4
 8006594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <TIM_OC1_SetConfig+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40010000 	.word	0x40010000

080065ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0210 	bic.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0320 	bic.w	r3, r3, #32
 8006636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <TIM_OC2_SetConfig+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10d      	bne.n	8006668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a15      	ldr	r2, [pc, #84]	; (80066c0 <TIM_OC2_SetConfig+0xd4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d113      	bne.n	8006698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000

080066c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800670c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <TIM_OC3_SetConfig+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10d      	bne.n	800673e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800673c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a14      	ldr	r2, [pc, #80]	; (8006794 <TIM_OC3_SetConfig+0xd0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d113      	bne.n	800676e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	621a      	str	r2, [r3, #32]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40010000 	.word	0x40010000

08006798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_OC4_SetConfig+0x9c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d109      	bne.n	800680c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000

08006838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 030a 	bic.w	r3, r3, #10
 8006874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f023 0210 	bic.w	r2, r3, #16
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	031b      	lsls	r3, r3, #12
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	021a      	lsls	r2, r3, #8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	431a      	orrs	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2201      	movs	r2, #1
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1a      	ldr	r2, [r3, #32]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	43db      	mvns	r3, r3
 800698e:	401a      	ands	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1a      	ldr	r2, [r3, #32]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e050      	b.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d018      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d013      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00e      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d009      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d004      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d10c      	bne.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40014000 	.word	0x40014000

08006a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e03d      	b.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e03f      	b.n	8006bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fc fa94 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f829 	bl	8006bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b0c0      	sub	sp, #256	; 0x100
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	ea40 0301 	orr.w	r3, r0, r1
 8006c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c54:	f021 010c 	bic.w	r1, r1, #12
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c62:	430b      	orrs	r3, r1
 8006c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	6999      	ldr	r1, [r3, #24]
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	ea40 0301 	orr.w	r3, r0, r1
 8006c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b8f      	ldr	r3, [pc, #572]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d005      	beq.n	8006c9c <UART_SetConfig+0xa0>
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b8d      	ldr	r3, [pc, #564]	; (8006ecc <UART_SetConfig+0x2d0>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d104      	bne.n	8006ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fe fab2 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ca4:	e003      	b.n	8006cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ca6:	f7fe fa99 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006caa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb8:	f040 810c 	bne.w	8006ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	1891      	adds	r1, r2, r2
 8006cd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cd6:	415b      	adcs	r3, r3
 8006cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cde:	4621      	mov	r1, r4
 8006ce0:	eb12 0801 	adds.w	r8, r2, r1
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	eb43 0901 	adc.w	r9, r3, r1
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfe:	4690      	mov	r8, r2
 8006d00:	4699      	mov	r9, r3
 8006d02:	4623      	mov	r3, r4
 8006d04:	eb18 0303 	adds.w	r3, r8, r3
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	eb49 0303 	adc.w	r3, r9, r3
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	18db      	adds	r3, r3, r3
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d30:	4613      	mov	r3, r2
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
 8006d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d40:	f7f9 ff06 	bl	8000b50 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4b61      	ldr	r3, [pc, #388]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	011c      	lsls	r4, r3, #4
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d74:	4641      	mov	r1, r8
 8006d76:	eb12 0a01 	adds.w	sl, r2, r1
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d94:	4692      	mov	sl, r2
 8006d96:	469b      	mov	fp, r3
 8006d98:	4643      	mov	r3, r8
 8006d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da2:	464b      	mov	r3, r9
 8006da4:	eb4b 0303 	adc.w	r3, fp, r3
 8006da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dd6:	f7f9 febb 	bl	8000b50 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	4b3b      	ldr	r3, [pc, #236]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006de2:	fba3 2301 	umull	r2, r3, r3, r1
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2264      	movs	r2, #100	; 0x64
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	1acb      	subs	r3, r1, r3
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006df6:	4b36      	ldr	r3, [pc, #216]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006df8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e04:	441c      	add	r4, r3
 8006e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e20:	415b      	adcs	r3, r3
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e28:	4641      	mov	r1, r8
 8006e2a:	1851      	adds	r1, r2, r1
 8006e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e2e:	4649      	mov	r1, r9
 8006e30:	414b      	adcs	r3, r1
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e40:	4659      	mov	r1, fp
 8006e42:	00cb      	lsls	r3, r1, #3
 8006e44:	4651      	mov	r1, sl
 8006e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	00ca      	lsls	r2, r1, #3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	4642      	mov	r2, r8
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	460a      	mov	r2, r1
 8006e60:	eb42 0303 	adc.w	r3, r2, r3
 8006e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	18db      	adds	r3, r3, r3
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e82:	4613      	mov	r3, r2
 8006e84:	eb42 0303 	adc.w	r3, r2, r3
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e92:	f7f9 fe5d 	bl	8000b50 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	; 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	3332      	adds	r3, #50	; 0x32
 8006eae:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f003 0207 	and.w	r2, r3, #7
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4422      	add	r2, r4
 8006ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec4:	e105      	b.n	80070d2 <UART_SetConfig+0x4d6>
 8006ec6:	bf00      	nop
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ede:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	1891      	adds	r1, r2, r2
 8006eec:	6239      	str	r1, [r7, #32]
 8006eee:	415b      	adcs	r3, r3
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	1854      	adds	r4, r2, r1
 8006efa:	4649      	mov	r1, r9
 8006efc:	eb43 0501 	adc.w	r5, r3, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	00eb      	lsls	r3, r5, #3
 8006f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f0e:	00e2      	lsls	r2, r4, #3
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	4643      	mov	r3, r8
 8006f16:	18e3      	adds	r3, r4, r3
 8006f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	eb45 0303 	adc.w	r3, r5, r3
 8006f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f42:	4629      	mov	r1, r5
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	4621      	mov	r1, r4
 8006f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	008a      	lsls	r2, r1, #2
 8006f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f54:	f7f9 fdfc 	bl	8000b50 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4b60      	ldr	r3, [pc, #384]	; (80070e0 <UART_SetConfig+0x4e4>)
 8006f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	011c      	lsls	r4, r3, #4
 8006f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	61b9      	str	r1, [r7, #24]
 8006f80:	415b      	adcs	r3, r3
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f88:	4641      	mov	r1, r8
 8006f8a:	1851      	adds	r1, r2, r1
 8006f8c:	6139      	str	r1, [r7, #16]
 8006f8e:	4649      	mov	r1, r9
 8006f90:	414b      	adcs	r3, r1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	00cb      	lsls	r3, r1, #3
 8006fa4:	4651      	mov	r1, sl
 8006fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006faa:	4651      	mov	r1, sl
 8006fac:	00ca      	lsls	r2, r1, #3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	eb42 0303 	adc.w	r3, r2, r3
 8006fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fea:	4641      	mov	r1, r8
 8006fec:	008a      	lsls	r2, r1, #2
 8006fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ff2:	f7f9 fdad 	bl	8000b50 <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <UART_SetConfig+0x4e4>)
 8006ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	2164      	movs	r1, #100	; 0x64
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	3332      	adds	r3, #50	; 0x32
 800700e:	4a34      	ldr	r2, [pc, #208]	; (80070e0 <UART_SetConfig+0x4e4>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701a:	441c      	add	r4, r3
 800701c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007020:	2200      	movs	r2, #0
 8007022:	673b      	str	r3, [r7, #112]	; 0x70
 8007024:	677a      	str	r2, [r7, #116]	; 0x74
 8007026:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800702a:	4642      	mov	r2, r8
 800702c:	464b      	mov	r3, r9
 800702e:	1891      	adds	r1, r2, r2
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	415b      	adcs	r3, r3
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703a:	4641      	mov	r1, r8
 800703c:	1851      	adds	r1, r2, r1
 800703e:	6039      	str	r1, [r7, #0]
 8007040:	4649      	mov	r1, r9
 8007042:	414b      	adcs	r3, r1
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007052:	4659      	mov	r1, fp
 8007054:	00cb      	lsls	r3, r1, #3
 8007056:	4651      	mov	r1, sl
 8007058:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800705c:	4651      	mov	r1, sl
 800705e:	00ca      	lsls	r2, r1, #3
 8007060:	4610      	mov	r0, r2
 8007062:	4619      	mov	r1, r3
 8007064:	4603      	mov	r3, r0
 8007066:	4642      	mov	r2, r8
 8007068:	189b      	adds	r3, r3, r2
 800706a:	66bb      	str	r3, [r7, #104]	; 0x68
 800706c:	464b      	mov	r3, r9
 800706e:	460a      	mov	r2, r1
 8007070:	eb42 0303 	adc.w	r3, r2, r3
 8007074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	663b      	str	r3, [r7, #96]	; 0x60
 8007080:	667a      	str	r2, [r7, #100]	; 0x64
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800708e:	4649      	mov	r1, r9
 8007090:	008b      	lsls	r3, r1, #2
 8007092:	4641      	mov	r1, r8
 8007094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007098:	4641      	mov	r1, r8
 800709a:	008a      	lsls	r2, r1, #2
 800709c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070a0:	f7f9 fd56 	bl	8000b50 <__aeabi_uldivmod>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <UART_SetConfig+0x4e4>)
 80070aa:	fba3 1302 	umull	r1, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	2164      	movs	r1, #100	; 0x64
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	3332      	adds	r3, #50	; 0x32
 80070bc:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <UART_SetConfig+0x4e4>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f003 020f 	and.w	r2, r3, #15
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4422      	add	r2, r4
 80070d0:	609a      	str	r2, [r3, #8]
}
 80070d2:	bf00      	nop
 80070d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop
 80070e0:	51eb851f 	.word	0x51eb851f

080070e4 <__errno>:
 80070e4:	4b01      	ldr	r3, [pc, #4]	; (80070ec <__errno+0x8>)
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	200000d4 	.word	0x200000d4

080070f0 <__libc_init_array>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4d0d      	ldr	r5, [pc, #52]	; (8007128 <__libc_init_array+0x38>)
 80070f4:	4c0d      	ldr	r4, [pc, #52]	; (800712c <__libc_init_array+0x3c>)
 80070f6:	1b64      	subs	r4, r4, r5
 80070f8:	10a4      	asrs	r4, r4, #2
 80070fa:	2600      	movs	r6, #0
 80070fc:	42a6      	cmp	r6, r4
 80070fe:	d109      	bne.n	8007114 <__libc_init_array+0x24>
 8007100:	4d0b      	ldr	r5, [pc, #44]	; (8007130 <__libc_init_array+0x40>)
 8007102:	4c0c      	ldr	r4, [pc, #48]	; (8007134 <__libc_init_array+0x44>)
 8007104:	f000 f8fe 	bl	8007304 <_init>
 8007108:	1b64      	subs	r4, r4, r5
 800710a:	10a4      	asrs	r4, r4, #2
 800710c:	2600      	movs	r6, #0
 800710e:	42a6      	cmp	r6, r4
 8007110:	d105      	bne.n	800711e <__libc_init_array+0x2e>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	f855 3b04 	ldr.w	r3, [r5], #4
 8007118:	4798      	blx	r3
 800711a:	3601      	adds	r6, #1
 800711c:	e7ee      	b.n	80070fc <__libc_init_array+0xc>
 800711e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007122:	4798      	blx	r3
 8007124:	3601      	adds	r6, #1
 8007126:	e7f2      	b.n	800710e <__libc_init_array+0x1e>
 8007128:	0800733c 	.word	0x0800733c
 800712c:	0800733c 	.word	0x0800733c
 8007130:	0800733c 	.word	0x0800733c
 8007134:	08007340 	.word	0x08007340

08007138 <memset>:
 8007138:	4402      	add	r2, r0
 800713a:	4603      	mov	r3, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	d100      	bne.n	8007142 <memset+0xa>
 8007140:	4770      	bx	lr
 8007142:	f803 1b01 	strb.w	r1, [r3], #1
 8007146:	e7f9      	b.n	800713c <memset+0x4>

08007148 <sqrt>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	ed2d 8b02 	vpush	{d8}
 800714e:	ec55 4b10 	vmov	r4, r5, d0
 8007152:	f000 f825 	bl	80071a0 <__ieee754_sqrt>
 8007156:	4622      	mov	r2, r4
 8007158:	462b      	mov	r3, r5
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	eeb0 8a40 	vmov.f32	s16, s0
 8007162:	eef0 8a60 	vmov.f32	s17, s1
 8007166:	f7f9 fc8d 	bl	8000a84 <__aeabi_dcmpun>
 800716a:	b990      	cbnz	r0, 8007192 <sqrt+0x4a>
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fc5e 	bl	8000a34 <__aeabi_dcmplt>
 8007178:	b158      	cbz	r0, 8007192 <sqrt+0x4a>
 800717a:	f7ff ffb3 	bl	80070e4 <__errno>
 800717e:	2321      	movs	r3, #33	; 0x21
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	f7f9 fb0b 	bl	80007a4 <__aeabi_ddiv>
 800718e:	ec41 0b18 	vmov	d8, r0, r1
 8007192:	eeb0 0a48 	vmov.f32	s0, s16
 8007196:	eef0 0a68 	vmov.f32	s1, s17
 800719a:	ecbd 8b02 	vpop	{d8}
 800719e:	bd38      	pop	{r3, r4, r5, pc}

080071a0 <__ieee754_sqrt>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	ec55 4b10 	vmov	r4, r5, d0
 80071a8:	4e55      	ldr	r6, [pc, #340]	; (8007300 <__ieee754_sqrt+0x160>)
 80071aa:	43ae      	bics	r6, r5
 80071ac:	ee10 0a10 	vmov	r0, s0
 80071b0:	ee10 3a10 	vmov	r3, s0
 80071b4:	462a      	mov	r2, r5
 80071b6:	4629      	mov	r1, r5
 80071b8:	d110      	bne.n	80071dc <__ieee754_sqrt+0x3c>
 80071ba:	ee10 2a10 	vmov	r2, s0
 80071be:	462b      	mov	r3, r5
 80071c0:	f7f9 f9c6 	bl	8000550 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4620      	mov	r0, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7f9 f80a 	bl	80001e4 <__adddf3>
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	ec45 4b10 	vmov	d0, r4, r5
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	2d00      	cmp	r5, #0
 80071de:	dc10      	bgt.n	8007202 <__ieee754_sqrt+0x62>
 80071e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80071e4:	4330      	orrs	r0, r6
 80071e6:	d0f5      	beq.n	80071d4 <__ieee754_sqrt+0x34>
 80071e8:	b15d      	cbz	r5, 8007202 <__ieee754_sqrt+0x62>
 80071ea:	ee10 2a10 	vmov	r2, s0
 80071ee:	462b      	mov	r3, r5
 80071f0:	ee10 0a10 	vmov	r0, s0
 80071f4:	f7f8 fff4 	bl	80001e0 <__aeabi_dsub>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	f7f9 fad2 	bl	80007a4 <__aeabi_ddiv>
 8007200:	e7e6      	b.n	80071d0 <__ieee754_sqrt+0x30>
 8007202:	1512      	asrs	r2, r2, #20
 8007204:	d074      	beq.n	80072f0 <__ieee754_sqrt+0x150>
 8007206:	07d4      	lsls	r4, r2, #31
 8007208:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800720c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007214:	bf5e      	ittt	pl
 8007216:	0fda      	lsrpl	r2, r3, #31
 8007218:	005b      	lslpl	r3, r3, #1
 800721a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800721e:	2400      	movs	r4, #0
 8007220:	0fda      	lsrs	r2, r3, #31
 8007222:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007226:	107f      	asrs	r7, r7, #1
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	2516      	movs	r5, #22
 800722c:	4620      	mov	r0, r4
 800722e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007232:	1886      	adds	r6, r0, r2
 8007234:	428e      	cmp	r6, r1
 8007236:	bfde      	ittt	le
 8007238:	1b89      	suble	r1, r1, r6
 800723a:	18b0      	addle	r0, r6, r2
 800723c:	18a4      	addle	r4, r4, r2
 800723e:	0049      	lsls	r1, r1, #1
 8007240:	3d01      	subs	r5, #1
 8007242:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007246:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800724a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800724e:	d1f0      	bne.n	8007232 <__ieee754_sqrt+0x92>
 8007250:	462a      	mov	r2, r5
 8007252:	f04f 0e20 	mov.w	lr, #32
 8007256:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800725a:	4281      	cmp	r1, r0
 800725c:	eb06 0c05 	add.w	ip, r6, r5
 8007260:	dc02      	bgt.n	8007268 <__ieee754_sqrt+0xc8>
 8007262:	d113      	bne.n	800728c <__ieee754_sqrt+0xec>
 8007264:	459c      	cmp	ip, r3
 8007266:	d811      	bhi.n	800728c <__ieee754_sqrt+0xec>
 8007268:	f1bc 0f00 	cmp.w	ip, #0
 800726c:	eb0c 0506 	add.w	r5, ip, r6
 8007270:	da43      	bge.n	80072fa <__ieee754_sqrt+0x15a>
 8007272:	2d00      	cmp	r5, #0
 8007274:	db41      	blt.n	80072fa <__ieee754_sqrt+0x15a>
 8007276:	f100 0801 	add.w	r8, r0, #1
 800727a:	1a09      	subs	r1, r1, r0
 800727c:	459c      	cmp	ip, r3
 800727e:	bf88      	it	hi
 8007280:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007284:	eba3 030c 	sub.w	r3, r3, ip
 8007288:	4432      	add	r2, r6
 800728a:	4640      	mov	r0, r8
 800728c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007290:	f1be 0e01 	subs.w	lr, lr, #1
 8007294:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007298:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800729c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072a0:	d1db      	bne.n	800725a <__ieee754_sqrt+0xba>
 80072a2:	430b      	orrs	r3, r1
 80072a4:	d006      	beq.n	80072b4 <__ieee754_sqrt+0x114>
 80072a6:	1c50      	adds	r0, r2, #1
 80072a8:	bf13      	iteet	ne
 80072aa:	3201      	addne	r2, #1
 80072ac:	3401      	addeq	r4, #1
 80072ae:	4672      	moveq	r2, lr
 80072b0:	f022 0201 	bicne.w	r2, r2, #1
 80072b4:	1063      	asrs	r3, r4, #1
 80072b6:	0852      	lsrs	r2, r2, #1
 80072b8:	07e1      	lsls	r1, r4, #31
 80072ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80072be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80072c2:	bf48      	it	mi
 80072c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80072c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80072cc:	4614      	mov	r4, r2
 80072ce:	e781      	b.n	80071d4 <__ieee754_sqrt+0x34>
 80072d0:	0ad9      	lsrs	r1, r3, #11
 80072d2:	3815      	subs	r0, #21
 80072d4:	055b      	lsls	r3, r3, #21
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d0fa      	beq.n	80072d0 <__ieee754_sqrt+0x130>
 80072da:	02cd      	lsls	r5, r1, #11
 80072dc:	d50a      	bpl.n	80072f4 <__ieee754_sqrt+0x154>
 80072de:	f1c2 0420 	rsb	r4, r2, #32
 80072e2:	fa23 f404 	lsr.w	r4, r3, r4
 80072e6:	1e55      	subs	r5, r2, #1
 80072e8:	4093      	lsls	r3, r2
 80072ea:	4321      	orrs	r1, r4
 80072ec:	1b42      	subs	r2, r0, r5
 80072ee:	e78a      	b.n	8007206 <__ieee754_sqrt+0x66>
 80072f0:	4610      	mov	r0, r2
 80072f2:	e7f0      	b.n	80072d6 <__ieee754_sqrt+0x136>
 80072f4:	0049      	lsls	r1, r1, #1
 80072f6:	3201      	adds	r2, #1
 80072f8:	e7ef      	b.n	80072da <__ieee754_sqrt+0x13a>
 80072fa:	4680      	mov	r8, r0
 80072fc:	e7bd      	b.n	800727a <__ieee754_sqrt+0xda>
 80072fe:	bf00      	nop
 8007300:	7ff00000 	.word	0x7ff00000

08007304 <_init>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr

08007310 <_fini>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr
