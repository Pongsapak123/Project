
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009944  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009afc  08009afc  0002033c  2**0
                  CONTENTS
  4 .ARM          00000008  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b04  08009b04  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08009b0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d18  20000340  08009e48  00020340  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  08009e48  00021058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015762  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a1  00000000  00000000  00035ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00038070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022bc  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001542f  00000000  00000000  0003c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948a6  00000000  00000000  00051b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e63c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  000e6414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000340 	.word	0x20000340
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009ac4 	.word	0x08009ac4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000344 	.word	0x20000344
 80001d4:	08009ac4 	.word	0x08009ac4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <modbus_1t5_Timeout+0x1c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2201      	movs	r2, #1
 8000e62:	751a      	strb	r2, [r3, #20]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	2000035c 	.word	0x2000035c

08000e74 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <modbus_3t5_Timeout+0x1c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2201      	movs	r2, #1
 8000e82:	755a      	strb	r2, [r3, #21]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	2000035c 	.word	0x2000035c

08000e94 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000eae:	1c59      	adds	r1, r3, #1
 8000eb0:	b289      	uxth	r1, r1
 8000eb2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000eb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eba:	d210      	bcs.n	8000ede <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68d8      	ldr	r0, [r3, #12]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000ece:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f007 fb3d 	bl	8008558 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <modbus_UART_Recived+0x60>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000035c 	.word	0x2000035c

08000ef8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f02:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <Modbus_init+0x9c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <Modbus_init+0x9c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <Modbus_init+0x9c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <Modbus_init+0xa0>)
 8000f18:	2114      	movs	r1, #20
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fcce 	bl	80078bc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <Modbus_init+0x9c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <Modbus_init+0xa4>)
 8000f28:	210e      	movs	r1, #14
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 fcc6 	bl	80078bc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <Modbus_init+0x9c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <Modbus_init+0xa8>)
 8000f38:	2103      	movs	r1, #3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fa64 	bl	8008408 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <Modbus_init+0x9c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68d8      	ldr	r0, [r3, #12]
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <Modbus_init+0x9c>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <Modbus_init+0x9c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f52:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f56:	4413      	add	r3, r2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f007 fafb 	bl	8008558 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <Modbus_init+0x9c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10c      	bne.n	8000f8c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <Modbus_init+0x9c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fd49 	bl	8006a10 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <Modbus_init+0x9c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 ff88 	bl	8006e9c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000035c 	.word	0x2000035c
 8000f98:	08000e55 	.word	0x08000e55
 8000f9c:	08000e75 	.word	0x08000e75
 8000fa0:	08000e95 	.word	0x08000e95

08000fa4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fb0:	23ff      	movs	r3, #255	; 0xff
 8000fb2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fb4:	23ff      	movs	r3, #255	; 0xff
 8000fb6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fb8:	e013      	b.n	8000fe2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <CRC16+0x64>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4053      	eors	r3, r2
 8000fd6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <CRC16+0x68>)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000fe2:	883b      	ldrh	r3, [r7, #0]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	803a      	strh	r2, [r7, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e6      	bne.n	8000fba <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	20000100 	.word	0x20000100
 800100c:	20000000 	.word	0x20000000

08001010 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001016:	4b81      	ldr	r3, [pc, #516]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	7e1b      	ldrb	r3, [r3, #24]
 800101c:	3b01      	subs	r3, #1
 800101e:	2b03      	cmp	r3, #3
 8001020:	d80a      	bhi.n	8001038 <Modbus_Protocal_Worker+0x28>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <Modbus_Protocal_Worker+0x18>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	08001043 	.word	0x08001043
 800102c:	080011e3 	.word	0x080011e3
 8001030:	080010cf 	.word	0x080010cf
 8001034:	080010f5 	.word	0x080010f5
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001038:	4b78      	ldr	r3, [pc, #480]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	761a      	strb	r2, [r3, #24]
		break;
 8001040:	e0e8      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001042:	4b76      	ldr	r3, [pc, #472]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800104e:	f000 f9dd 	bl	800140c <Modbus_Emission>
 8001052:	e01c      	b.n	800108e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001054:	4b71      	ldr	r3, [pc, #452]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	7d9b      	ldrb	r3, [r3, #22]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d017      	beq.n	800108e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800106e:	4b6b      	ldr	r3, [pc, #428]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2203      	movs	r2, #3
 800108c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b20      	cmp	r3, #32
 800109c:	f040 80b3 	bne.w	8001206 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68d8      	ldr	r0, [r3, #12]
 80010b0:	4b5a      	ldr	r3, [pc, #360]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80010bc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80010c0:	4413      	add	r3, r2
 80010c2:	3302      	adds	r3, #2
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	f007 fa46 	bl	8008558 <HAL_UART_Receive_IT>
		}
		break;
 80010cc:	e09b      	b.n	8001206 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	7d1b      	ldrb	r3, [r3, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8098 	beq.w	800120a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010e2:	4b4e      	ldr	r3, [pc, #312]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	22fe      	movs	r2, #254	; 0xfe
 80010e8:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2204      	movs	r2, #4
 80010f0:	761a      	strb	r2, [r3, #24]
		}
		break;
 80010f2:	e08a      	b.n	800120a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800111a:	f113 0f02 	cmn.w	r3, #2
 800111e:	d150      	bne.n	80011c2 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001120:	4b3e      	ldr	r3, [pc, #248]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001138:	3b02      	subs	r3, #2
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f7ff ff31 	bl	8000fa4 <CRC16>
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001146:	793a      	ldrb	r2, [r7, #4]
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800115c:	429a      	cmp	r2, r3
 800115e:	d10c      	bne.n	800117a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001160:	797a      	ldrb	r2, [r7, #5]
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800116e:	3b01      	subs	r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001176:	429a      	cmp	r2, r3
 8001178:	d004      	beq.n	8001184 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	75da      	strb	r2, [r3, #23]
				break;
 8001182:	e047      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d113      	bne.n	80011be <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011a6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011b0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011b2:	461a      	mov	r2, r3
 80011b4:	f008 fb92 	bl	80098dc <memcpy>

			//execute command
			Modbus_frame_response();
 80011b8:	f000 f910 	bl	80013dc <Modbus_frame_response>
 80011bc:	e001      	b.n	80011c2 <Modbus_Protocal_Worker+0x1b2>
				break;
 80011be:	bf00      	nop
					}
		break;


	}
}
 80011c0:	e028      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	7d5b      	ldrb	r3, [r3, #21]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4618      	mov	r0, r3
 80011dc:	f007 fa6a 	bl	80086b4 <HAL_UART_AbortReceive>
		break;
 80011e0:	e015      	b.n	800120e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d10f      	bne.n	8001212 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <Modbus_Protocal_Worker+0x20c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	761a      	strb	r2, [r3, #24]
		break;
 8001204:	e005      	b.n	8001212 <Modbus_Protocal_Worker+0x202>
		break;
 8001206:	bf00      	nop
 8001208:	e004      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
		break;
 800120a:	bf00      	nop
 800120c:	e002      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
		break;
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <Modbus_Protocal_Worker+0x204>
		break;
 8001212:	bf00      	nop
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000035c 	.word	0x2000035c

08001220 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <modbusWrite1Register+0x80>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	7e9b      	ldrb	r3, [r3, #26]
 800122c:	b29b      	uxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <modbusWrite1Register+0x80>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	7edb      	ldrb	r3, [r3, #27]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <modbusWrite1Register+0x80>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d903      	bls.n	8001252 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800124a:	2002      	movs	r0, #2
 800124c:	f000 f8a4 	bl	8001398 <ModbusErrorReply>
			 return;
 8001250:	e023      	b.n	800129a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <modbusWrite1Register+0x80>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <modbusWrite1Register+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	7f12      	ldrb	r2, [r2, #28]
 8001264:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <modbusWrite1Register+0x80>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <modbusWrite1Register+0x80>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6859      	ldr	r1, [r3, #4]
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	440b      	add	r3, r1
 8001276:	7f52      	ldrb	r2, [r2, #29]
 8001278:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <modbusWrite1Register+0x80>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	f008 fb26 	bl	80098dc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000035c 	.word	0x2000035c

080012a4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <modbusRead1Register+0xf0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	7f1b      	ldrb	r3, [r3, #28]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <modbusRead1Register+0xf0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7f5b      	ldrb	r3, [r3, #29]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <modbusRead1Register+0xf0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <modbusRead1Register+0xf0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	7edb      	ldrb	r3, [r3, #27]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <modbusRead1Register+0x42>
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	2b7d      	cmp	r3, #125	; 0x7d
 80012e4:	d903      	bls.n	80012ee <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f856 	bl	8001398 <ModbusErrorReply>
		 return;
 80012ec:	e04e      	b.n	800138c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012ee:	88ba      	ldrh	r2, [r7, #4]
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <modbusRead1Register+0xf0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d808      	bhi.n	800130c <modbusRead1Register+0x68>
 80012fa:	88ba      	ldrh	r2, [r7, #4]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4413      	add	r3, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <modbusRead1Register+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d903      	bls.n	8001314 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800130c:	2002      	movs	r0, #2
 800130e:	f000 f843 	bl	8001398 <ModbusErrorReply>
		 return;
 8001312:	e03b      	b.n	800138c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <modbusRead1Register+0xf0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2203      	movs	r2, #3
 800131a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <modbusRead1Register+0xf0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800132e:	2400      	movs	r4, #0
 8001330:	e020      	b.n	8001374 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <modbusRead1Register+0xf0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	4423      	add	r3, r4
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	18d1      	adds	r1, r2, r3
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <modbusRead1Register+0xf0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	1c63      	adds	r3, r4, #1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	7849      	ldrb	r1, [r1, #1]
 800134a:	4413      	add	r3, r2
 800134c:	460a      	mov	r2, r1
 800134e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	4423      	add	r3, r4
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <modbusRead1Register+0xf0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	0063      	lsls	r3, r4, #1
 8001366:	3303      	adds	r3, #3
 8001368:	7809      	ldrb	r1, [r1, #0]
 800136a:	4413      	add	r3, r2
 800136c:	460a      	mov	r2, r1
 800136e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001372:	3401      	adds	r4, #1
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	429c      	cmp	r4, r3
 8001378:	dbdb      	blt.n	8001332 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <modbusRead1Register+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0052      	lsls	r2, r2, #1
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	2000035c 	.word	0x2000035c

08001398 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <ModbusErrorReply+0x40>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	7e5a      	ldrb	r2, [r3, #25]
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <ModbusErrorReply+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <ModbusErrorReply+0x40>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <ModbusErrorReply+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000035c 	.word	0x2000035c

080013dc <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <Modbus_frame_response+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	7e5b      	ldrb	r3, [r3, #25]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d004      	beq.n	80013f4 <Modbus_frame_response+0x18>
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d105      	bne.n	80013fa <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013ee:	f7ff ff17 	bl	8001220 <modbusWrite1Register>
		break;
 80013f2:	e006      	b.n	8001402 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f4:	f7ff ff56 	bl	80012a4 <modbusRead1Register>
		break;
 80013f8:	e003      	b.n	8001402 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ffcc 	bl	8001398 <ModbusErrorReply>
		break;
 8001400:	bf00      	nop

	}
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000035c 	.word	0x2000035c

0800140c <Modbus_Emission>:

void Modbus_Emission()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <Modbus_Emission+0xfc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b20      	cmp	r3, #32
 8001420:	d15e      	bne.n	80014e0 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <Modbus_Emission+0xfc>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <Modbus_Emission+0xfc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <Modbus_Emission+0xfc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001438:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <Modbus_Emission+0xfc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <Modbus_Emission+0xfc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800144a:	461a      	mov	r2, r3
 800144c:	f008 fa46 	bl	80098dc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <Modbus_Emission+0xfc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <Modbus_Emission+0xfc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3203      	adds	r2, #3
 8001460:	b292      	uxth	r2, r2
 8001462:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <Modbus_Emission+0xfc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <Modbus_Emission+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001476:	3b02      	subs	r3, #2
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f7ff fd92 	bl	8000fa4 <CRC16>
 8001480:	4603      	mov	r3, r0
 8001482:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <Modbus_Emission+0xfc>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <Modbus_Emission+0xfc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001490:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001492:	7939      	ldrb	r1, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	460a      	mov	r2, r1
 8001498:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <Modbus_Emission+0xfc>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014a8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014aa:	7979      	ldrb	r1, [r7, #5]
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <Modbus_Emission+0xfc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <Modbus_Emission+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <Modbus_Emission+0xfc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <Modbus_Emission+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f007 f86c 	bl	80085b8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <Modbus_Emission+0xfc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <Modbus_Emission+0xfc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <Modbus_Emission+0xfc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2202      	movs	r2, #2
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000035c 	.word	0x2000035c

0800150c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
}
 8001514:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <__NVIC_SystemReset+0x24>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800151e:	4904      	ldr	r1, [pc, #16]	; (8001530 <__NVIC_SystemReset+0x24>)
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_SystemReset+0x28>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001526:	f3bf 8f4f 	dsb	sy
}
 800152a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <__NVIC_SystemReset+0x20>
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	05fa0004 	.word	0x05fa0004

08001538 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800153c:	ed2d 8b02 	vpush	{d8}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001544:	f002 fafa 	bl	8003b3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001548:	f000 f9e2 	bl	8001910 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800154c:	f000 fd08 	bl	8001f60 <MX_GPIO_Init>
	MX_DMA_Init();
 8001550:	f000 fce6 	bl	8001f20 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001554:	f000 fc8c 	bl	8001e70 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001558:	f000 fb46 	bl	8001be8 <MX_TIM2_Init>
	MX_TIM1_Init();
 800155c:	f000 faa4 	bl	8001aa8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001560:	f000 fb96 	bl	8001c90 <MX_TIM3_Init>
	MX_I2C2_Init();
 8001564:	f000 fa3c 	bl	80019e0 <MX_I2C2_Init>
	MX_USART6_UART_Init();
 8001568:	f000 fcae 	bl	8001ec8 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 800156c:	f000 fbde 	bl	8001d2c <MX_TIM5_Init>
	MX_SPI3_Init();
 8001570:	f000 fa64 	bl	8001a3c <MX_SPI3_Init>
	MX_TIM11_Init();
 8001574:	f000 fc28 	bl	8001dc8 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	EndEffector_Event(Reset);
 8001578:	2003      	movs	r0, #3
 800157a:	f001 fcd1 	bl	8002f20 <EndEffector_Event>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800157e:	2104      	movs	r1, #4
 8001580:	48c1      	ldr	r0, [pc, #772]	; (8001888 <main+0x350>)
 8001582:	f005 fda5 	bl	80070d0 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8001586:	48c1      	ldr	r0, [pc, #772]	; (800188c <main+0x354>)
 8001588:	f005 fa42 	bl	8006a10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800158c:	48c0      	ldr	r0, [pc, #768]	; (8001890 <main+0x358>)
 800158e:	f005 f9e5 	bl	800695c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001592:	2100      	movs	r1, #0
 8001594:	48be      	ldr	r0, [pc, #760]	; (8001890 <main+0x358>)
 8001596:	f005 fb69 	bl	8006c6c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 800159a:	48be      	ldr	r0, [pc, #760]	; (8001894 <main+0x35c>)
 800159c:	f005 fa38 	bl	8006a10 <HAL_TIM_Base_Start_IT>

	t_Acce = traject_us / 1000000.00;
 80015a0:	4bbd      	ldr	r3, [pc, #756]	; (8001898 <main+0x360>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7fe ff9b 	bl	80004e4 <__aeabi_ul2d>
 80015ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8001870 <main+0x338>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f8f6 	bl	80007a4 <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	49b7      	ldr	r1, [pc, #732]	; (800189c <main+0x364>)
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000.00;
 80015c2:	4bb5      	ldr	r3, [pc, #724]	; (8001898 <main+0x360>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7fe ff8a 	bl	80004e4 <__aeabi_ul2d>
 80015d0:	a3a7      	add	r3, pc, #668	; (adr r3, 8001870 <main+0x338>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f8e5 	bl	80007a4 <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	49b0      	ldr	r1, [pc, #704]	; (80018a0 <main+0x368>)
 80015e0:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000.00;
 80015e4:	4bac      	ldr	r3, [pc, #688]	; (8001898 <main+0x360>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7fe ff79 	bl	80004e4 <__aeabi_ul2d>
 80015f2:	a39f      	add	r3, pc, #636	; (adr r3, 8001870 <main+0x338>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f8d4 	bl	80007a4 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	49a8      	ldr	r1, [pc, #672]	; (80018a4 <main+0x36c>)
 8001602:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000.00;
 8001606:	4ba4      	ldr	r3, [pc, #656]	; (8001898 <main+0x360>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7fe ff68 	bl	80004e4 <__aeabi_ul2d>
 8001614:	a396      	add	r3, pc, #600	; (adr r3, 8001870 <main+0x338>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f8c3 	bl	80007a4 <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	49a1      	ldr	r1, [pc, #644]	; (80018a8 <main+0x370>)
 8001624:	e9c1 2300 	strd	r2, r3, [r1]
	t_diff = traject_us / 1000000.00;
 8001628:	4b9b      	ldr	r3, [pc, #620]	; (8001898 <main+0x360>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7fe ff57 	bl	80004e4 <__aeabi_ul2d>
 8001636:	a38e      	add	r3, pc, #568	; (adr r3, 8001870 <main+0x338>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f8b2 	bl	80007a4 <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4999      	ldr	r1, [pc, #612]	; (80018ac <main+0x374>)
 8001646:	e9c1 2300 	strd	r2, r3, [r1]

	hmodbus.huart = &huart2;
 800164a:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <main+0x378>)
 800164c:	4a99      	ldr	r2, [pc, #612]	; (80018b4 <main+0x37c>)
 800164e:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8001650:	4b97      	ldr	r3, [pc, #604]	; (80018b0 <main+0x378>)
 8001652:	4a99      	ldr	r2, [pc, #612]	; (80018b8 <main+0x380>)
 8001654:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001656:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <main+0x378>)
 8001658:	2215      	movs	r2, #21
 800165a:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 800165c:	4b94      	ldr	r3, [pc, #592]	; (80018b0 <main+0x378>)
 800165e:	22c8      	movs	r2, #200	; 0xc8
 8001660:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001662:	4996      	ldr	r1, [pc, #600]	; (80018bc <main+0x384>)
 8001664:	4892      	ldr	r0, [pc, #584]	; (80018b0 <main+0x378>)
 8001666:	f7ff fc47 	bl	8000ef8 <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {

		static uint64_t timestamp_traject = 0;
		static uint64_t timestamp_heartbeat = 0;
		int64_t GetTicku = micros();
 800166a:	f001 ff07 	bl	800347c <micros>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9c7 2300 	strd	r2, r3, [r7]
		Modbus_Protocal_Worker();
 8001676:	f7ff fccb 	bl	8001010 <Modbus_Protocal_Worker>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() >= timestamp_heartbeat) {
 800167a:	f002 fac5 	bl	8003c08 <HAL_GetTick>
 800167e:	4603      	mov	r3, r0
 8001680:	2200      	movs	r2, #0
 8001682:	461c      	mov	r4, r3
 8001684:	4615      	mov	r5, r2
 8001686:	4b8e      	ldr	r3, [pc, #568]	; (80018c0 <main+0x388>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	4294      	cmp	r4, r2
 800168e:	eb75 0303 	sbcs.w	r3, r5, r3
 8001692:	d30d      	bcc.n	80016b0 <main+0x178>
			timestamp_heartbeat = HAL_GetTick() + 200;
 8001694:	f002 fab8 	bl	8003c08 <HAL_GetTick>
 8001698:	4603      	mov	r3, r0
 800169a:	33c8      	adds	r3, #200	; 0xc8
 800169c:	2200      	movs	r2, #0
 800169e:	469a      	mov	sl, r3
 80016a0:	4693      	mov	fp, r2
 80016a2:	4b87      	ldr	r3, [pc, #540]	; (80018c0 <main+0x388>)
 80016a4:	e9c3 ab00 	strd	sl, fp, [r3]

			registerFrame[0x00].U16 = 22881;
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <main+0x384>)
 80016aa:	f645 1261 	movw	r2, #22881	; 0x5961
 80016ae:	801a      	strh	r2, [r3, #0]
		}

		switch (state_laser_test) {
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <main+0x38c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d83a      	bhi.n	800172e <main+0x1f6>
 80016b8:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <main+0x188>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	0800172f 	.word	0x0800172f
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016eb 	.word	0x080016eb
 80016cc:	080016f9 	.word	0x080016f9
 80016d0:	08001707 	.word	0x08001707
 80016d4:	08001715 	.word	0x08001715
 80016d8:	08001723 	.word	0x08001723
		case 0:
			break;
		case 1:
			EndEffector_Event(Test_Start);
 80016dc:	2001      	movs	r0, #1
 80016de:	f001 fc1f 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <main+0x38c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
			break;
 80016e8:	e021      	b.n	800172e <main+0x1f6>
		case 2:
			EndEffector_Event(Run_Mode);
 80016ea:	2006      	movs	r0, #6
 80016ec:	f001 fc18 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 80016f0:	4b74      	ldr	r3, [pc, #464]	; (80018c4 <main+0x38c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
			break;
 80016f6:	e01a      	b.n	800172e <main+0x1f6>
		case 3:
			EndEffector_Event(Pick);
 80016f8:	2008      	movs	r0, #8
 80016fa:	f001 fc11 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 80016fe:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <main+0x38c>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
			break;
 8001704:	e013      	b.n	800172e <main+0x1f6>
		case 4:
			EndEffector_Event(Place);
 8001706:	2009      	movs	r0, #9
 8001708:	f001 fc0a 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 800170c:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <main+0x38c>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
			break;
 8001712:	e00c      	b.n	800172e <main+0x1f6>
		case 5:
			EndEffector_Event(Reset);
 8001714:	2003      	movs	r0, #3
 8001716:	f001 fc03 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <main+0x38c>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
			break;
 8001720:	e005      	b.n	800172e <main+0x1f6>
		case 6:
			EndEffector_Event(Test_Stop);
 8001722:	2002      	movs	r0, #2
 8001724:	f001 fbfc 	bl	8002f20 <EndEffector_Event>
			state_laser_test = 0;
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <main+0x38c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
		}

		switch (State) {
 800172e:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <main+0x390>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b06      	cmp	r3, #6
 8001734:	f200 80e3 	bhi.w	80018fe <main+0x3c6>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <main+0x208>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	0800175d 	.word	0x0800175d
 8001744:	080017a5 	.word	0x080017a5
 8001748:	080017ab 	.word	0x080017ab
 800174c:	080017b1 	.word	0x080017b1
 8001750:	080017f1 	.word	0x080017f1
 8001754:	0800186b 	.word	0x0800186b
 8001758:	08001853 	.word	0x08001853
		case INIT:
			read_pos();
 800175c:	f001 fe4e 	bl	80033fc <read_pos>
			photo1 = HAL_GPIO_ReadPin(Photoelectric_sensor_1_GPIO_Port,
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4859      	ldr	r0, [pc, #356]	; (80018cc <main+0x394>)
 8001766:	f003 f923 	bl	80049b0 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <main+0x398>)
 8001770:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_1_Pin);
			photo2 = HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8001772:	2104      	movs	r1, #4
 8001774:	4855      	ldr	r0, [pc, #340]	; (80018cc <main+0x394>)
 8001776:	f003 f91b 	bl	80049b0 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <main+0x39c>)
 8001780:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_2_Pin);
			photo3 = HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	4854      	ldr	r0, [pc, #336]	; (80018d8 <main+0x3a0>)
 8001786:	f003 f913 	bl	80049b0 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <main+0x3a4>)
 8001790:	601a      	str	r2, [r3, #0]
			Photoelectric_sensor_3_Pin);
			emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8001792:	2108      	movs	r1, #8
 8001794:	4850      	ldr	r0, [pc, #320]	; (80018d8 <main+0x3a0>)
 8001796:	f003 f90b 	bl	80049b0 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <main+0x3a8>)
 80017a0:	601a      	str	r2, [r3, #0]
			break;
 80017a2:	e0ac      	b.n	80018fe <main+0x3c6>
		case INIT_HOMING:
			Init_Homing();
 80017a4:	f001 fd4c 	bl	8003240 <Init_Homing>
			break;
 80017a8:	e0a9      	b.n	80018fe <main+0x3c6>
		case CALIBRATE:
			JoyStickControl();
 80017aa:	f001 fc77 	bl	800309c <JoyStickControl>
			break;
 80017ae:	e0a6      	b.n	80018fe <main+0x3c6>
		case TRAJECT_GEN:
			read_pos();
 80017b0:	f001 fe24 	bl	80033fc <read_pos>
			Trajectory_Gen(pos_i, pos_f, 945, 4161);
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <main+0x3ac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe71 	bl	80004a0 <__aeabi_f2d>
 80017be:	ec41 0b18 	vmov	d8, r0, r1
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <main+0x3b0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe6a 	bl	80004a0 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ed9f 3b29 	vldr	d3, [pc, #164]	; 8001878 <main+0x340>
 80017d4:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 8001880 <main+0x348>
 80017d8:	ec43 2b11 	vmov	d1, r2, r3
 80017dc:	eeb0 0a48 	vmov.f32	s0, s16
 80017e0:	eef0 0a68 	vmov.f32	s1, s17
 80017e4:	f000 fc80 	bl	80020e8 <Trajectory_Gen>
			State = PID_STATE;
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <main+0x390>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	701a      	strb	r2, [r3, #0]
			break;
 80017ee:	e086      	b.n	80018fe <main+0x3c6>
		case PID_STATE:

			if (GetTicku >= timestamp_traject) {
 80017f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f4:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <main+0x3b4>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4290      	cmp	r0, r2
 80017fc:	eb71 0303 	sbcs.w	r3, r1, r3
 8001800:	d31b      	bcc.n	800183a <main+0x302>
				timestamp_traject = GetTicku + traject_us;
 8001802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <main+0x360>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	eb10 0802 	adds.w	r8, r0, r2
 8001810:	eb41 0903 	adc.w	r9, r1, r3
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <main+0x3b4>)
 8001816:	e9c3 8900 	strd	r8, r9, [r3]
				Trajectory_Eva();
 800181a:	f000 fdb9 	bl	8002390 <Trajectory_Eva>
				read_pos();
 800181e:	f001 fded 	bl	80033fc <read_pos>
				PID(x);
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <main+0x3b8>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f940 	bl	8000ab0 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	ee00 3a10 	vmov	s0, r3
 8001836:	f001 f933 	bl	8002aa0 <PID>
			}
			if (State_PID == 1) {
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <main+0x3bc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d15a      	bne.n	80018f8 <main+0x3c0>
				motor(0, 1);
 8001842:	2101      	movs	r1, #1
 8001844:	2000      	movs	r0, #0
 8001846:	f001 fdaf 	bl	80033a8 <motor>
				State = IDLE;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <main+0x390>)
 800184c:	2206      	movs	r2, #6
 800184e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001850:	e052      	b.n	80018f8 <main+0x3c0>
		case IDLE:
			motor(0, 1);
 8001852:	2101      	movs	r1, #1
 8001854:	2000      	movs	r0, #0
 8001856:	f001 fda7 	bl	80033a8 <motor>
			if (State_PID == 0) {
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <main+0x3bc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d14c      	bne.n	80018fc <main+0x3c4>
				State = TRAJECT_GEN;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <main+0x390>)
 8001864:	2203      	movs	r2, #3
 8001866:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001868:	e048      	b.n	80018fc <main+0x3c4>
		case EMERGENCY_LIMIT:
			Photo_IT();
 800186a:	f001 fd73 	bl	8003354 <Photo_IT>
			break;
 800186e:	e046      	b.n	80018fe <main+0x3c6>
 8001870:	00000000 	.word	0x00000000
 8001874:	412e8480 	.word	0x412e8480
 8001878:	00000000 	.word	0x00000000
 800187c:	40b04100 	.word	0x40b04100
 8001880:	00000000 	.word	0x00000000
 8001884:	408d8800 	.word	0x408d8800
 8001888:	200004c0 	.word	0x200004c0
 800188c:	20000574 	.word	0x20000574
 8001890:	2000040c 	.word	0x2000040c
 8001894:	20000628 	.word	0x20000628
 8001898:	20000208 	.word	0x20000208
 800189c:	20000218 	.word	0x20000218
 80018a0:	20000220 	.word	0x20000220
 80018a4:	20000228 	.word	0x20000228
 80018a8:	20000230 	.word	0x20000230
 80018ac:	20000238 	.word	0x20000238
 80018b0:	200009b8 	.word	0x200009b8
 80018b4:	20000790 	.word	0x20000790
 80018b8:	200006dc 	.word	0x200006dc
 80018bc:	20000e90 	.word	0x20000e90
 80018c0:	20001040 	.word	0x20001040
 80018c4:	200009a8 	.word	0x200009a8
 80018c8:	2000103c 	.word	0x2000103c
 80018cc:	40020400 	.word	0x40020400
 80018d0:	20001020 	.word	0x20001020
 80018d4:	20001024 	.word	0x20001024
 80018d8:	40020800 	.word	0x40020800
 80018dc:	20001028 	.word	0x20001028
 80018e0:	2000102c 	.word	0x2000102c
 80018e4:	200008d8 	.word	0x200008d8
 80018e8:	200008dc 	.word	0x200008dc
 80018ec:	20001048 	.word	0x20001048
 80018f0:	20000950 	.word	0x20000950
 80018f4:	20000200 	.word	0x20000200
			break;
 80018f8:	bf00      	nop
 80018fa:	e000      	b.n	80018fe <main+0x3c6>
			break;
 80018fc:	bf00      	nop
		}

		if (Re == 1) {
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <main+0x3d4>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	f47f aeb1 	bne.w	800166a <main+0x132>
			NVIC_SystemReset();
 8001908:	f7ff fe00 	bl	800150c <__NVIC_SystemReset>
 800190c:	200008e1 	.word	0x200008e1

08001910 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2230      	movs	r2, #48	; 0x30
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f007 ffea 	bl	80098f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <SystemClock_Config+0xc8>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <SystemClock_Config+0xc8>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <SystemClock_Config+0xc8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <SystemClock_Config+0xcc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <SystemClock_Config+0xcc>)
 800195a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <SystemClock_Config+0xcc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196c:	2301      	movs	r3, #1
 800196e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001970:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	2302      	movs	r3, #2
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001980:	2304      	movs	r3, #4
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fff7 	bl	8005988 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x94>
		Error_Handler();
 80019a0:	f001 fd86 	bl	80034b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2103      	movs	r1, #3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fa59 	bl	8005e78 <HAL_RCC_ClockConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0xc0>
		Error_Handler();
 80019cc:	f001 fd70 	bl	80034b0 <Error_Handler>
	}
}
 80019d0:	bf00      	nop
 80019d2:	3750      	adds	r7, #80	; 0x50
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000

080019e0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_I2C2_Init+0x50>)
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <MX_I2C2_Init+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_I2C2_Init+0x50>)
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <MX_I2C2_Init+0x58>)
 80019ee:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_I2C2_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_I2C2_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_I2C2_Init+0x50>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a02:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_I2C2_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_I2C2_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_I2C2_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_I2C2_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_I2C2_Init+0x50>)
 8001a1e:	f003 f81d 	bl	8004a5c <HAL_I2C_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001a28:	f001 fd42 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000360 	.word	0x20000360
 8001a34:	40005800 	.word	0x40005800
 8001a38:	000186a0 	.word	0x000186a0

08001a3c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <MX_SPI3_Init+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a4c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a88:	220a      	movs	r2, #10
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a8e:	f004 fc13 	bl	80062b8 <HAL_SPI_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_SPI3_Init+0x60>
		Error_Handler();
 8001a98:	f001 fd0a 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200003b4 	.word	0x200003b4
 8001aa4:	40003c00 	.word	0x40003c00

08001aa8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b096      	sub	sp, #88	; 0x58
 8001aac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001aae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001abc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2220      	movs	r2, #32
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f007 ff09 	bl	80098f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001ae8:	4a3e      	ldr	r2, [pc, #248]	; (8001be4 <MX_TIM1_Init+0x13c>)
 8001aea:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001b12:	4833      	ldr	r0, [pc, #204]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b14:	f004 fec6 	bl	80068a4 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001b1e:	f001 fcc7 	bl	80034b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482c      	ldr	r0, [pc, #176]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b30:	f005 fda2 	bl	8007678 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0x96>
		Error_Handler();
 8001b3a:	f001 fcb9 	bl	80034b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001b3e:	4828      	ldr	r0, [pc, #160]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b40:	f005 f82e 	bl	8006ba0 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001b4a:	f001 fcb1 	bl	80034b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4820      	ldr	r0, [pc, #128]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b5e:	f006 fb1b 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001b68:	f001 fca2 	bl	80034b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001b92:	f005 fcaf 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001b9c:	f001 fc88 	bl	80034b0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001bc4:	f006 fb56 	bl	8008274 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001bce:	f001 fc6f 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001bd2:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM1_Init+0x138>)
 8001bd4:	f001 fe04 	bl	80037e0 <HAL_TIM_MspPostInit>

}
 8001bd8:	bf00      	nop
 8001bda:	3758      	adds	r7, #88	; 0x58
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000040c 	.word	0x2000040c
 8001be4:	40010000 	.word	0x40010000

08001be8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 fe7e 	bl	80098f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c44:	2301      	movs	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c58:	f005 f986 	bl	8006f68 <HAL_TIM_Encoder_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001c62:	f001 fc25 	bl	80034b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c74:	f006 fa90 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001c7e:	f001 fc17 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	3730      	adds	r7, #48	; 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200004c0 	.word	0x200004c0

08001c90 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <MX_TIM3_Init+0x98>)
 8001cb0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cb4:	2263      	movs	r2, #99	; 0x63
 8001cb6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cc4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001cd2:	4814      	ldr	r0, [pc, #80]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cd4:	f004 fde6 	bl	80068a4 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x52>
		Error_Handler();
 8001cde:	f001 fbe7 	bl	80034b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001cf0:	f005 fcc2 	bl	8007678 <HAL_TIM_ConfigClockSource>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001cfa:	f001 fbd9 	bl	80034b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001d06:	463b      	mov	r3, r7
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <MX_TIM3_Init+0x94>)
 8001d0c:	f006 fa44 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001d16:	f001 fbcb 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000574 	.word	0x20000574
 8001d28:	40000400 	.word	0x40000400

08001d2c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <MX_TIM5_Init+0x98>)
 8001d4c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d50:	2263      	movs	r2, #99	; 0x63
 8001d52:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d70:	f004 fd98 	bl	80068a4 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM5_Init+0x52>
		Error_Handler();
 8001d7a:	f001 fb99 	bl	80034b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001d8c:	f005 fc74 	bl	8007678 <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM5_Init+0x6e>
		Error_Handler();
 8001d96:	f001 fb8b 	bl	80034b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001da2:	463b      	mov	r3, r7
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <MX_TIM5_Init+0x94>)
 8001da8:	f006 f9f6 	bl	8008198 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001db2:	f001 fb7d 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000628 	.word	0x20000628
 8001dc4:	40000c00 	.word	0x40000c00

08001dc8 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	615a      	str	r2, [r3, #20]
 8001dde:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <MX_TIM11_Init+0xa4>)
 8001de4:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001de8:	2263      	movs	r2, #99	; 0x63
 8001dea:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001df4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001df8:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001e06:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001e08:	f004 fd4c 	bl	80068a4 <HAL_TIM_Base_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001e12:	f001 fb4d 	bl	80034b0 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001e18:	f004 fe5c 	bl	8006ad4 <HAL_TIM_OC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001e22:	f001 fb45 	bl	80034b0 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001e26:	2108      	movs	r1, #8
 8001e28:	480f      	ldr	r0, [pc, #60]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001e2a:	f004 ffcf 	bl	8006dcc <HAL_TIM_OnePulse_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001e34:	f001 fb3c 	bl	80034b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001e38:	2310      	movs	r3, #16
 8001e3a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001e3c:	f240 5399 	movw	r3, #1433	; 0x599
 8001e40:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_TIM11_Init+0xa0>)
 8001e52:	f005 faf3 	bl	800743c <HAL_TIM_OC_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001e5c:	f001 fb28 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200006dc 	.word	0x200006dc
 8001e6c:	40014800 	.word	0x40014800

08001e70 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <MX_USART2_UART_Init+0x54>)
 8001e78:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e7c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e80:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e88:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e96:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001eac:	f006 fa52 	bl	8008354 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001eb6:	f001 fafb 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000790 	.word	0x20000790
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ece:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <MX_USART6_UART_Init+0x54>)
 8001ed0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee0:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_EVEN;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eee:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001f04:	f006 fa26 	bl	8008354 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART6_UART_Init+0x4a>
		Error_Handler();
 8001f0e:	f001 facf 	bl	80034b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000804 	.word	0x20000804
 8001f1c:	40011400 	.word	0x40011400

08001f20 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_DMA_Init+0x3c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <MX_DMA_Init+0x3c>)
 8001f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_DMA_Init+0x3c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2011      	movs	r0, #17
 8001f48:	f001 ff69 	bl	8003e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f4c:	2011      	movs	r0, #17
 8001f4e:	f001 ff82 	bl	8003e56 <HAL_NVIC_EnableIRQ>

}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a55      	ldr	r2, [pc, #340]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a4e      	ldr	r2, [pc, #312]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a47      	ldr	r2, [pc, #284]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <MX_GPIO_Init+0x174>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8002008:	4833      	ldr	r0, [pc, #204]	; (80020d8 <MX_GPIO_Init+0x178>)
 800200a:	f002 fce9 	bl	80049e0 <HAL_GPIO_WritePin>
	Switch_Relay_1_Pin | Switch_Relay_2_Pin | Switch_Relay_3_Pin | DIR_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin,
 800200e:	2200      	movs	r2, #0
 8002010:	2104      	movs	r1, #4
 8002012:	4832      	ldr	r0, [pc, #200]	; (80020dc <MX_GPIO_Init+0x17c>)
 8002014:	f002 fce4 	bl	80049e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin Emergency_Pin Photoelectric_sensor_3_Pin */
	GPIO_InitStruct.Pin = B1_Pin | Emergency_Pin | Photoelectric_sensor_3_Pin;
 8002018:	f242 0348 	movw	r3, #8264	; 0x2048
 800201c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800201e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002022:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	482c      	ldr	r0, [pc, #176]	; (80020e0 <MX_GPIO_Init+0x180>)
 8002030:	f002 fb3a 	bl	80046a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switch_Relay_1_Pin Switch_Relay_2_Pin Switch_Relay_3_Pin DIR_Pin */
	GPIO_InitStruct.Pin = Switch_Relay_1_Pin | Switch_Relay_2_Pin
 8002034:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8002038:	617b      	str	r3, [r7, #20]
			| Switch_Relay_3_Pin | DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4822      	ldr	r0, [pc, #136]	; (80020d8 <MX_GPIO_Init+0x178>)
 800204e:	f002 fb2b 	bl	80046a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Photoelectric_sensor_2_Pin Photoelectric_sensor_1_Pin */
	GPIO_InitStruct.Pin = Photoelectric_sensor_2_Pin
 8002052:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002056:	617b      	str	r3, [r7, #20]
			| Photoelectric_sensor_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002058:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800205c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	481e      	ldr	r0, [pc, #120]	; (80020e4 <MX_GPIO_Init+0x184>)
 800206a:	f002 fb1d 	bl	80046a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : JoyStick_SS_PIN_Pin */
	GPIO_InitStruct.Pin = JoyStick_SS_PIN_Pin;
 800206e:	2304      	movs	r3, #4
 8002070:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(JoyStick_SS_PIN_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4815      	ldr	r0, [pc, #84]	; (80020dc <MX_GPIO_Init+0x17c>)
 8002086:	f002 fb0f 	bl	80046a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2008      	movs	r0, #8
 8002090:	f001 fec5 	bl	8003e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002094:	2008      	movs	r0, #8
 8002096:	f001 fede 	bl	8003e56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2009      	movs	r0, #9
 80020a0:	f001 febd 	bl	8003e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020a4:	2009      	movs	r0, #9
 80020a6:	f001 fed6 	bl	8003e56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2017      	movs	r0, #23
 80020b0:	f001 feb5 	bl	8003e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020b4:	2017      	movs	r0, #23
 80020b6:	f001 fece 	bl	8003e56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2028      	movs	r0, #40	; 0x28
 80020c0:	f001 fead 	bl	8003e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020c4:	2028      	movs	r0, #40	; 0x28
 80020c6:	f001 fec6 	bl	8003e56 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020400 	.word	0x40020400

080020e8 <Trajectory_Gen>:

/* USER CODE BEGIN 4 */
void Trajectory_Gen(double x_init, double x_fi, double v_fi, double Accel) {
 80020e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020ec:	b088      	sub	sp, #32
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	ed87 0b06 	vstr	d0, [r7, #24]
 80020f4:	ed87 1b04 	vstr	d1, [r7, #16]
 80020f8:	ed87 2b02 	vstr	d2, [r7, #8]
 80020fc:	ed87 3b00 	vstr	d3, [r7]
	x_initial = x_init;
 8002100:	4993      	ldr	r1, [pc, #588]	; (8002350 <Trajectory_Gen+0x268>)
 8002102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002106:	e9c1 2300 	strd	r2, r3, [r1]
	x_final = x_fi;
 800210a:	4992      	ldr	r1, [pc, #584]	; (8002354 <Trajectory_Gen+0x26c>)
 800210c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002110:	e9c1 2300 	strd	r2, r3, [r1]
	v_final = v_fi;
 8002114:	4990      	ldr	r1, [pc, #576]	; (8002358 <Trajectory_Gen+0x270>)
 8002116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800211a:	e9c1 2300 	strd	r2, r3, [r1]
	Acceleration = Accel;
 800211e:	498f      	ldr	r1, [pc, #572]	; (800235c <Trajectory_Gen+0x274>)
 8002120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
	t_Acce = traject_us / 1000000;
 8002128:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <Trajectory_Gen+0x278>)
 800212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212e:	4a8d      	ldr	r2, [pc, #564]	; (8002364 <Trajectory_Gen+0x27c>)
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f7fe fd0c 	bl	8000b50 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe f9d0 	bl	80004e4 <__aeabi_ul2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4987      	ldr	r1, [pc, #540]	; (8002368 <Trajectory_Gen+0x280>)
 800214a:	e9c1 2300 	strd	r2, r3, [r1]
	t_DeAcce = traject_us / 1000000;
 800214e:	4b84      	ldr	r3, [pc, #528]	; (8002360 <Trajectory_Gen+0x278>)
 8002150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002154:	4a83      	ldr	r2, [pc, #524]	; (8002364 <Trajectory_Gen+0x27c>)
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	f7fe fcf9 	bl	8000b50 <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe f9bd 	bl	80004e4 <__aeabi_ul2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	497f      	ldr	r1, [pc, #508]	; (800236c <Trajectory_Gen+0x284>)
 8002170:	e9c1 2300 	strd	r2, r3, [r1]
	t_Cons = traject_us / 1000000;
 8002174:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <Trajectory_Gen+0x278>)
 8002176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <Trajectory_Gen+0x27c>)
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f7fe fce6 	bl	8000b50 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe f9aa 	bl	80004e4 <__aeabi_ul2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4976      	ldr	r1, [pc, #472]	; (8002370 <Trajectory_Gen+0x288>)
 8002196:	e9c1 2300 	strd	r2, r3, [r1]
	t_count = traject_us / 1000000;
 800219a:	4b71      	ldr	r3, [pc, #452]	; (8002360 <Trajectory_Gen+0x278>)
 800219c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a0:	4a70      	ldr	r2, [pc, #448]	; (8002364 <Trajectory_Gen+0x27c>)
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f7fe fcd3 	bl	8000b50 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe f997 	bl	80004e4 <__aeabi_ul2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	496e      	ldr	r1, [pc, #440]	; (8002374 <Trajectory_Gen+0x28c>)
 80021bc:	e9c1 2300 	strd	r2, r3, [r1]

	deltaX = fabs(x_final - x_initial);
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <Trajectory_Gen+0x26c>)
 80021c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c6:	4b62      	ldr	r3, [pc, #392]	; (8002350 <Trajectory_Gen+0x268>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe f808 	bl	80001e0 <__aeabi_dsub>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80021da:	4b67      	ldr	r3, [pc, #412]	; (8002378 <Trajectory_Gen+0x290>)
 80021dc:	e9c3 4500 	strd	r4, r5, [r3]
	if (x_final - x_initial > 0) {
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <Trajectory_Gen+0x26c>)
 80021e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e6:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <Trajectory_Gen+0x268>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fd fff8 	bl	80001e0 <__aeabi_dsub>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f7fe fc36 	bl	8000a70 <__aeabi_dcmpgt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <Trajectory_Gen+0x12a>
		direct = 1;
 800220a:	4b5c      	ldr	r3, [pc, #368]	; (800237c <Trajectory_Gen+0x294>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e018      	b.n	8002244 <Trajectory_Gen+0x15c>
	} else if (x_final - x_initial < 0) {
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <Trajectory_Gen+0x26c>)
 8002214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <Trajectory_Gen+0x268>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fd ffdf 	bl	80001e0 <__aeabi_dsub>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f7fe fbff 	bl	8000a34 <__aeabi_dcmplt>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <Trajectory_Gen+0x15c>
		direct = -1;
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <Trajectory_Gen+0x294>)
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	601a      	str	r2, [r3, #0]
	}

	t_acceleration = v_final / Acceleration;
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <Trajectory_Gen+0x270>)
 8002246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <Trajectory_Gen+0x274>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe faa8 	bl	80007a4 <__aeabi_ddiv>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4949      	ldr	r1, [pc, #292]	; (8002380 <Trajectory_Gen+0x298>)
 800225a:	e9c1 2300 	strd	r2, r3, [r1]

	t_triangle = sqrt(deltaX / Acceleration);
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <Trajectory_Gen+0x290>)
 8002260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002264:	4b3d      	ldr	r3, [pc, #244]	; (800235c <Trajectory_Gen+0x274>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe fa9b 	bl	80007a4 <__aeabi_ddiv>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	ec43 2b17 	vmov	d7, r2, r3
 8002276:	eeb0 0a47 	vmov.f32	s0, s14
 800227a:	eef0 0a67 	vmov.f32	s1, s15
 800227e:	f007 fb43 	bl	8009908 <sqrt>
 8002282:	eeb0 7a40 	vmov.f32	s14, s0
 8002286:	eef0 7a60 	vmov.f32	s15, s1
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <Trajectory_Gen+0x29c>)
 800228c:	ed83 7b00 	vstr	d7, [r3]

	if (t_triangle < t_acceleration) {
 8002290:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <Trajectory_Gen+0x29c>)
 8002292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <Trajectory_Gen+0x298>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe fbca 	bl	8000a34 <__aeabi_dcmplt>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00f      	beq.n	80022c6 <Trajectory_Gen+0x1de>
		t_final = 2 * (t_triangle);
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <Trajectory_Gen+0x29c>)
 80022a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	f7fd ff98 	bl	80001e4 <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4933      	ldr	r1, [pc, #204]	; (8002388 <Trajectory_Gen+0x2a0>)
 80022ba:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 1;
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <Trajectory_Gen+0x2a4>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
	} else if (t_triangle >= t_acceleration) {
		t_final = (2 * t_acceleration)
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
		trajectory_type = 2;
	}
}
 80022c4:	e03e      	b.n	8002344 <Trajectory_Gen+0x25c>
	} else if (t_triangle >= t_acceleration) {
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <Trajectory_Gen+0x29c>)
 80022c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <Trajectory_Gen+0x298>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe fbc3 	bl	8000a5c <__aeabi_dcmpge>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d100      	bne.n	80022de <Trajectory_Gen+0x1f6>
}
 80022dc:	e032      	b.n	8002344 <Trajectory_Gen+0x25c>
		t_final = (2 * t_acceleration)
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <Trajectory_Gen+0x298>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	f7fd ff7c 	bl	80001e4 <__adddf3>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
				+ (((deltaX) - (t_acceleration * v_final)) / v_final);
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <Trajectory_Gen+0x290>)
 80022f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <Trajectory_Gen+0x298>)
 80022fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <Trajectory_Gen+0x270>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f923 	bl	8000550 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ff65 	bl	80001e0 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <Trajectory_Gen+0x270>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe fa3e 	bl	80007a4 <__aeabi_ddiv>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4640      	mov	r0, r8
 800232e:	4649      	mov	r1, r9
 8002330:	f7fd ff58 	bl	80001e4 <__adddf3>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
		t_final = (2 * t_acceleration)
 8002338:	4913      	ldr	r1, [pc, #76]	; (8002388 <Trajectory_Gen+0x2a0>)
 800233a:	e9c1 2300 	strd	r2, r3, [r1]
		trajectory_type = 2;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <Trajectory_Gen+0x2a4>)
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800234e:	bf00      	nop
 8002350:	200008f0 	.word	0x200008f0
 8002354:	200008f8 	.word	0x200008f8
 8002358:	20000900 	.word	0x20000900
 800235c:	20000908 	.word	0x20000908
 8002360:	20000208 	.word	0x20000208
 8002364:	000f4240 	.word	0x000f4240
 8002368:	20000218 	.word	0x20000218
 800236c:	20000220 	.word	0x20000220
 8002370:	20000228 	.word	0x20000228
 8002374:	20000230 	.word	0x20000230
 8002378:	20000910 	.word	0x20000910
 800237c:	200008e8 	.word	0x200008e8
 8002380:	20000938 	.word	0x20000938
 8002384:	20000948 	.word	0x20000948
 8002388:	20000940 	.word	0x20000940
 800238c:	200008e4 	.word	0x200008e4

08002390 <Trajectory_Eva>:

void Trajectory_Eva() {
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	af00      	add	r7, sp, #0
	switch (trajectory_type) {
 8002396:	4ba3      	ldr	r3, [pc, #652]	; (8002624 <Trajectory_Eva+0x294>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	f000 8173 	beq.w	8002686 <Trajectory_Eva+0x2f6>
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	f300 835e 	bgt.w	8002a62 <Trajectory_Eva+0x6d2>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 835a 	beq.w	8002a60 <Trajectory_Eva+0x6d0>
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d000      	beq.n	80023b2 <Trajectory_Eva+0x22>
			trajectory_type = 0;
		}
		break;
	}

}
 80023b0:	e357      	b.n	8002a62 <Trajectory_Eva+0x6d2>
		if (t_count <= t_triangle) {
 80023b2:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <Trajectory_Eva+0x298>)
 80023b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b8:	4b9c      	ldr	r3, [pc, #624]	; (800262c <Trajectory_Eva+0x29c>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe fb43 	bl	8000a48 <__aeabi_dcmple>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8085 	beq.w	80024d4 <Trajectory_Eva+0x144>
					+ (1.0 / 2.0 * direct * Acceleration * (t_Acce * t_Acce));
 80023ca:	4b99      	ldr	r3, [pc, #612]	; (8002630 <Trajectory_Eva+0x2a0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f854 	bl	800047c <__aeabi_i2d>
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b96      	ldr	r3, [pc, #600]	; (8002634 <Trajectory_Eva+0x2a4>)
 80023da:	f7fe f8b9 	bl	8000550 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	4b94      	ldr	r3, [pc, #592]	; (8002638 <Trajectory_Eva+0x2a8>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f8b0 	bl	8000550 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	4b90      	ldr	r3, [pc, #576]	; (800263c <Trajectory_Eva+0x2ac>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	4b8f      	ldr	r3, [pc, #572]	; (800263c <Trajectory_Eva+0x2ac>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f8a4 	bl	8000550 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fe f89e 	bl	8000550 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	4b88      	ldr	r3, [pc, #544]	; (8002640 <Trajectory_Eva+0x2b0>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fd fedf 	bl	80001e4 <__adddf3>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
			x = x_initial
 800242a:	4986      	ldr	r1, [pc, #536]	; (8002644 <Trajectory_Eva+0x2b4>)
 800242c:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <Trajectory_Eva+0x2a8>)
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	4b81      	ldr	r3, [pc, #516]	; (800263c <Trajectory_Eva+0x2ac>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f888 	bl	8000550 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4b79      	ldr	r3, [pc, #484]	; (8002630 <Trajectory_Eva+0x2a0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f815 	bl	800047c <__aeabi_i2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f7fe f879 	bl	8000550 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4979      	ldr	r1, [pc, #484]	; (8002648 <Trajectory_Eva+0x2b8>)
 8002464:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <Trajectory_Eva+0x2a0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f805 	bl	800047c <__aeabi_i2d>
 8002472:	4b71      	ldr	r3, [pc, #452]	; (8002638 <Trajectory_Eva+0x2a8>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f86a 	bl	8000550 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4972      	ldr	r1, [pc, #456]	; (800264c <Trajectory_Eva+0x2bc>)
 8002482:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8002486:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <Trajectory_Eva+0x2b4>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	4970      	ldr	r1, [pc, #448]	; (8002650 <Trajectory_Eva+0x2c0>)
 800248e:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 8002492:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <Trajectory_Eva+0x2b8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	496e      	ldr	r1, [pc, #440]	; (8002654 <Trajectory_Eva+0x2c4>)
 800249a:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <Trajectory_Eva+0x2ac>)
 80024a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <Trajectory_Eva+0x2c8>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fd fe9b 	bl	80001e4 <__adddf3>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4962      	ldr	r1, [pc, #392]	; (800263c <Trajectory_Eva+0x2ac>)
 80024b4:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 80024b8:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <Trajectory_Eva+0x298>)
 80024ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024be:	4b66      	ldr	r3, [pc, #408]	; (8002658 <Trajectory_Eva+0x2c8>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fd fe8e 	bl	80001e4 <__adddf3>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4956      	ldr	r1, [pc, #344]	; (8002628 <Trajectory_Eva+0x298>)
 80024ce:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80024d2:	e2c6      	b.n	8002a62 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final) {
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <Trajectory_Eva+0x298>)
 80024d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024da:	4b60      	ldr	r3, [pc, #384]	; (800265c <Trajectory_Eva+0x2cc>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe fab2 	bl	8000a48 <__aeabi_dcmple>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80bc 	beq.w	8002664 <Trajectory_Eva+0x2d4>
			x = x_final1 + (v_final1 * t_DeAcce)
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <Trajectory_Eva+0x2c4>)
 80024ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <Trajectory_Eva+0x2d0>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f82a 	bl	8000550 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	4b52      	ldr	r3, [pc, #328]	; (8002650 <Trajectory_Eva+0x2c0>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fd fe6b 	bl	80001e4 <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4614      	mov	r4, r2
 8002514:	461d      	mov	r5, r3
					- (1.0 / 2.0 * direct * Acceleration * t_DeAcce * t_DeAcce);
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <Trajectory_Eva+0x2a0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd ffae 	bl	800047c <__aeabi_i2d>
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <Trajectory_Eva+0x2a4>)
 8002526:	f7fe f813 	bl	8000550 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <Trajectory_Eva+0x2a8>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f80a 	bl	8000550 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <Trajectory_Eva+0x2d0>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f801 	bl	8000550 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <Trajectory_Eva+0x2d0>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fd fff8 	bl	8000550 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd fe3a 	bl	80001e0 <__aeabi_dsub>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
			x = x_final1 + (v_final1 * t_DeAcce)
 8002570:	4934      	ldr	r1, [pc, #208]	; (8002644 <Trajectory_Eva+0x2b4>)
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final1 - (Acceleration * t_DeAcce * direct);
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <Trajectory_Eva+0x2c4>)
 8002578:	e9d3 4500 	ldrd	r4, r5, [r3]
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <Trajectory_Eva+0x2a8>)
 800257e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <Trajectory_Eva+0x2d0>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fd ffe2 	bl	8000550 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4692      	mov	sl, r2
 8002592:	469b      	mov	fp, r3
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <Trajectory_Eva+0x2a0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ff6f 	bl	800047c <__aeabi_i2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4650      	mov	r0, sl
 80025a4:	4659      	mov	r1, fp
 80025a6:	f7fd ffd3 	bl	8000550 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fe15 	bl	80001e0 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4923      	ldr	r1, [pc, #140]	; (8002648 <Trajectory_Eva+0x2b8>)
 80025bc:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <Trajectory_Eva+0x2a8>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4690      	mov	r8, r2
 80025c8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <Trajectory_Eva+0x2a0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff53 	bl	800047c <__aeabi_i2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4640      	mov	r0, r8
 80025dc:	4649      	mov	r1, r9
 80025de:	f7fd ffb7 	bl	8000550 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4919      	ldr	r1, [pc, #100]	; (800264c <Trajectory_Eva+0x2bc>)
 80025e8:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <Trajectory_Eva+0x2d0>)
 80025ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <Trajectory_Eva+0x2c8>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fd fdf4 	bl	80001e4 <__adddf3>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4917      	ldr	r1, [pc, #92]	; (8002660 <Trajectory_Eva+0x2d0>)
 8002602:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <Trajectory_Eva+0x298>)
 8002608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <Trajectory_Eva+0x2c8>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fd fde7 	bl	80001e4 <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4903      	ldr	r1, [pc, #12]	; (8002628 <Trajectory_Eva+0x298>)
 800261c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002620:	e21f      	b.n	8002a62 <Trajectory_Eva+0x6d2>
 8002622:	bf00      	nop
 8002624:	200008e4 	.word	0x200008e4
 8002628:	20000230 	.word	0x20000230
 800262c:	20000948 	.word	0x20000948
 8002630:	200008e8 	.word	0x200008e8
 8002634:	3fe00000 	.word	0x3fe00000
 8002638:	20000908 	.word	0x20000908
 800263c:	20000218 	.word	0x20000218
 8002640:	200008f0 	.word	0x200008f0
 8002644:	20000950 	.word	0x20000950
 8002648:	20000958 	.word	0x20000958
 800264c:	20000960 	.word	0x20000960
 8002650:	20000918 	.word	0x20000918
 8002654:	20000928 	.word	0x20000928
 8002658:	20000238 	.word	0x20000238
 800265c:	20000940 	.word	0x20000940
 8002660:	20000220 	.word	0x20000220
			x = x_final;
 8002664:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <Trajectory_Eva+0x510>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	498e      	ldr	r1, [pc, #568]	; (80028a4 <Trajectory_Eva+0x514>)
 800266c:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8002670:	498d      	ldr	r1, [pc, #564]	; (80028a8 <Trajectory_Eva+0x518>)
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <Trajectory_Eva+0x51c>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
		break;
 8002684:	e1ed      	b.n	8002a62 <Trajectory_Eva+0x6d2>
		if (t_count <= t_acceleration) {
 8002686:	4b8a      	ldr	r3, [pc, #552]	; (80028b0 <Trajectory_Eva+0x520>)
 8002688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268c:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <Trajectory_Eva+0x524>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fe f9d9 	bl	8000a48 <__aeabi_dcmple>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8089 	beq.w	80027b0 <Trajectory_Eva+0x420>
			x = x_initial + 1.0 / 2.0 * Acceleration * direct * t_Acce * t_Acce;
 800269e:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <Trajectory_Eva+0x528>)
 80026a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	4b84      	ldr	r3, [pc, #528]	; (80028bc <Trajectory_Eva+0x52c>)
 80026aa:	f7fd ff51 	bl	8000550 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4614      	mov	r4, r2
 80026b4:	461d      	mov	r5, r3
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <Trajectory_Eva+0x530>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fede 	bl	800047c <__aeabi_i2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fd ff42 	bl	8000550 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <Trajectory_Eva+0x534>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fd ff39 	bl	8000550 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4b77      	ldr	r3, [pc, #476]	; (80028c4 <Trajectory_Eva+0x534>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ff30 	bl	8000550 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <Trajectory_Eva+0x538>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fd71 	bl	80001e4 <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4967      	ldr	r1, [pc, #412]	; (80028a4 <Trajectory_Eva+0x514>)
 8002708:	e9c1 2300 	strd	r2, r3, [r1]
			v = Acceleration * t_Acce * direct;
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <Trajectory_Eva+0x528>)
 800270e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002712:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <Trajectory_Eva+0x534>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff1a 	bl	8000550 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4614      	mov	r4, r2
 8002722:	461d      	mov	r5, r3
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <Trajectory_Eva+0x530>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fea7 	bl	800047c <__aeabi_i2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4620      	mov	r0, r4
 8002734:	4629      	mov	r1, r5
 8002736:	f7fd ff0b 	bl	8000550 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	495a      	ldr	r1, [pc, #360]	; (80028a8 <Trajectory_Eva+0x518>)
 8002740:	e9c1 2300 	strd	r2, r3, [r1]
			a = Acceleration * direct;
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <Trajectory_Eva+0x530>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fe97 	bl	800047c <__aeabi_i2d>
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <Trajectory_Eva+0x528>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fd fefc 	bl	8000550 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	495b      	ldr	r1, [pc, #364]	; (80028cc <Trajectory_Eva+0x53c>)
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
			x_final1 = x;
 8002762:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <Trajectory_Eva+0x514>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	4959      	ldr	r1, [pc, #356]	; (80028d0 <Trajectory_Eva+0x540>)
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
			v_final1 = v;
 800276e:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <Trajectory_Eva+0x518>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	4957      	ldr	r1, [pc, #348]	; (80028d4 <Trajectory_Eva+0x544>)
 8002776:	e9c1 2300 	strd	r2, r3, [r1]
			t_Acce = t_Acce + t_diff;
 800277a:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <Trajectory_Eva+0x534>)
 800277c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <Trajectory_Eva+0x548>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fd fd2d 	bl	80001e4 <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	494d      	ldr	r1, [pc, #308]	; (80028c4 <Trajectory_Eva+0x534>)
 8002790:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <Trajectory_Eva+0x520>)
 8002796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279a:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <Trajectory_Eva+0x548>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fd20 	bl	80001e4 <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4941      	ldr	r1, [pc, #260]	; (80028b0 <Trajectory_Eva+0x520>)
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80027ae:	e158      	b.n	8002a62 <Trajectory_Eva+0x6d2>
		} else if (t_count <= t_final - t_acceleration) {
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <Trajectory_Eva+0x54c>)
 80027b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <Trajectory_Eva+0x524>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fd10 	bl	80001e0 <__aeabi_dsub>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <Trajectory_Eva+0x520>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fe f945 	bl	8000a5c <__aeabi_dcmpge>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 808b 	beq.w	80028f0 <Trajectory_Eva+0x560>
			x = (v_final * t_Cons * direct) + x_final1;
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <Trajectory_Eva+0x550>)
 80027dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <Trajectory_Eva+0x554>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd feb3 	bl	8000550 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <Trajectory_Eva+0x530>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe40 	bl	800047c <__aeabi_i2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fea4 	bl	8000550 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <Trajectory_Eva+0x540>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fce5 	bl	80001e4 <__adddf3>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4921      	ldr	r1, [pc, #132]	; (80028a4 <Trajectory_Eva+0x514>)
 8002820:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final * direct;
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <Trajectory_Eva+0x530>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe27 	bl	800047c <__aeabi_i2d>
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <Trajectory_Eva+0x550>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fd fe8c 	bl	8000550 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	491a      	ldr	r1, [pc, #104]	; (80028a8 <Trajectory_Eva+0x518>)
 800283e:	e9c1 2300 	strd	r2, r3, [r1]
			a = 0;
 8002842:	4922      	ldr	r1, [pc, #136]	; (80028cc <Trajectory_Eva+0x53c>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9c1 2300 	strd	r2, r3, [r1]
			x_final2 = x;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <Trajectory_Eva+0x514>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	4924      	ldr	r1, [pc, #144]	; (80028e8 <Trajectory_Eva+0x558>)
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
			v_final2 = v;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <Trajectory_Eva+0x518>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <Trajectory_Eva+0x55c>)
 8002864:	e9c1 2300 	strd	r2, r3, [r1]
			t_Cons = t_Cons + t_diff;
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <Trajectory_Eva+0x554>)
 800286a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <Trajectory_Eva+0x548>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fcb6 	bl	80001e4 <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4919      	ldr	r1, [pc, #100]	; (80028e4 <Trajectory_Eva+0x554>)
 800287e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <Trajectory_Eva+0x520>)
 8002884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <Trajectory_Eva+0x548>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fca9 	bl	80001e4 <__adddf3>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4906      	ldr	r1, [pc, #24]	; (80028b0 <Trajectory_Eva+0x520>)
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800289c:	e0e1      	b.n	8002a62 <Trajectory_Eva+0x6d2>
 800289e:	bf00      	nop
 80028a0:	200008f8 	.word	0x200008f8
 80028a4:	20000950 	.word	0x20000950
 80028a8:	20000958 	.word	0x20000958
 80028ac:	200008e4 	.word	0x200008e4
 80028b0:	20000230 	.word	0x20000230
 80028b4:	20000938 	.word	0x20000938
 80028b8:	20000908 	.word	0x20000908
 80028bc:	3fe00000 	.word	0x3fe00000
 80028c0:	200008e8 	.word	0x200008e8
 80028c4:	20000218 	.word	0x20000218
 80028c8:	200008f0 	.word	0x200008f0
 80028cc:	20000960 	.word	0x20000960
 80028d0:	20000918 	.word	0x20000918
 80028d4:	20000928 	.word	0x20000928
 80028d8:	20000238 	.word	0x20000238
 80028dc:	20000940 	.word	0x20000940
 80028e0:	20000900 	.word	0x20000900
 80028e4:	20000228 	.word	0x20000228
 80028e8:	20000920 	.word	0x20000920
 80028ec:	20000930 	.word	0x20000930
		} else if (t_count <= t_final) {
 80028f0:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <Trajectory_Eva+0x6d8>)
 80028f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <Trajectory_Eva+0x6dc>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fe f8a4 	bl	8000a48 <__aeabi_dcmple>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 809b 	beq.w	8002a3e <Trajectory_Eva+0x6ae>
					x_final2 + (v_final2 * (t_DeAcce))
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <Trajectory_Eva+0x6e0>)
 800290a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <Trajectory_Eva+0x6e4>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fe1c 	bl	8000550 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <Trajectory_Eva+0x6e8>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fc5d 	bl	80001e4 <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4690      	mov	r8, r2
 8002930:	4699      	mov	r9, r3
							- (1.0 / 2.0 * direct * Acceleration
 8002932:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <Trajectory_Eva+0x6ec>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fda0 	bl	800047c <__aeabi_i2d>
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <Trajectory_Eva+0x6f0>)
 8002942:	f7fd fe05 	bl	8000550 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <Trajectory_Eva+0x6f4>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd fdfc 	bl	8000550 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4692      	mov	sl, r2
 800295e:	469b      	mov	fp, r3
									* (t_DeAcce * t_DeAcce));
 8002960:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <Trajectory_Eva+0x6e4>)
 8002962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <Trajectory_Eva+0x6e4>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fdf0 	bl	8000550 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4650      	mov	r0, sl
 8002976:	4659      	mov	r1, fp
 8002978:	f7fd fdea 	bl	8000550 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
							- (1.0 / 2.0 * direct * Acceleration
 8002980:	4640      	mov	r0, r8
 8002982:	4649      	mov	r1, r9
 8002984:	f7fd fc2c 	bl	80001e0 <__aeabi_dsub>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
			x =
 800298c:	493e      	ldr	r1, [pc, #248]	; (8002a88 <Trajectory_Eva+0x6f8>)
 800298e:	e9c1 2300 	strd	r2, r3, [r1]
			v = v_final2 - (Acceleration * t_DeAcce * direct);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <Trajectory_Eva+0x6e0>)
 8002994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <Trajectory_Eva+0x6f4>)
 800299a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <Trajectory_Eva+0x6e4>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fdd4 	bl	8000550 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4692      	mov	sl, r2
 80029ae:	469b      	mov	fp, r3
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <Trajectory_Eva+0x6ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd61 	bl	800047c <__aeabi_i2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4650      	mov	r0, sl
 80029c0:	4659      	mov	r1, fp
 80029c2:	f7fd fdc5 	bl	8000550 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4640      	mov	r0, r8
 80029cc:	4649      	mov	r1, r9
 80029ce:	f7fd fc07 	bl	80001e0 <__aeabi_dsub>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	492d      	ldr	r1, [pc, #180]	; (8002a8c <Trajectory_Eva+0x6fc>)
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
			a = -Acceleration * direct;
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <Trajectory_Eva+0x6f4>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	4614      	mov	r4, r2
 80029e4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <Trajectory_Eva+0x6ec>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd45 	bl	800047c <__aeabi_i2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fda9 	bl	8000550 <__aeabi_dmul>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4923      	ldr	r1, [pc, #140]	; (8002a90 <Trajectory_Eva+0x700>)
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
			t_DeAcce = t_DeAcce + t_diff;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <Trajectory_Eva+0x6e4>)
 8002a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <Trajectory_Eva+0x704>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fbe6 	bl	80001e4 <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4915      	ldr	r1, [pc, #84]	; (8002a74 <Trajectory_Eva+0x6e4>)
 8002a1e:	e9c1 2300 	strd	r2, r3, [r1]
			t_count = t_count + t_diff;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <Trajectory_Eva+0x6d8>)
 8002a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <Trajectory_Eva+0x704>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fbd9 	bl	80001e4 <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	490c      	ldr	r1, [pc, #48]	; (8002a68 <Trajectory_Eva+0x6d8>)
 8002a38:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002a3c:	e011      	b.n	8002a62 <Trajectory_Eva+0x6d2>
			x = x_final;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <Trajectory_Eva+0x708>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	4910      	ldr	r1, [pc, #64]	; (8002a88 <Trajectory_Eva+0x6f8>)
 8002a46:	e9c1 2300 	strd	r2, r3, [r1]
			v = 0;
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <Trajectory_Eva+0x6fc>)
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory_type = 0;
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <Trajectory_Eva+0x70c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
		break;
 8002a5e:	e000      	b.n	8002a62 <Trajectory_Eva+0x6d2>
		break;
 8002a60:	bf00      	nop
}
 8002a62:	bf00      	nop
 8002a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a68:	20000230 	.word	0x20000230
 8002a6c:	20000940 	.word	0x20000940
 8002a70:	20000930 	.word	0x20000930
 8002a74:	20000220 	.word	0x20000220
 8002a78:	20000920 	.word	0x20000920
 8002a7c:	200008e8 	.word	0x200008e8
 8002a80:	3fe00000 	.word	0x3fe00000
 8002a84:	20000908 	.word	0x20000908
 8002a88:	20000950 	.word	0x20000950
 8002a8c:	20000958 	.word	0x20000958
 8002a90:	20000960 	.word	0x20000960
 8002a94:	20000238 	.word	0x20000238
 8002a98:	200008f8 	.word	0x200008f8
 8002a9c:	200008e4 	.word	0x200008e4

08002aa0 <PID>:

void PID(float setposition) {
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	ed87 0a01 	vstr	s0, [r7, #4]

	current_pos = PosY;
 8002aaa:	4b9b      	ldr	r3, [pc, #620]	; (8002d18 <PID+0x278>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a9b      	ldr	r2, [pc, #620]	; (8002d1c <PID+0x27c>)
 8002ab0:	6013      	str	r3, [r2, #0]
	current_velocity = (current_pos - previous_pos) / (pid_us / 1000000.0);
 8002ab2:	4b9a      	ldr	r3, [pc, #616]	; (8002d1c <PID+0x27c>)
 8002ab4:	ed93 7a00 	vldr	s14, [r3]
 8002ab8:	4b99      	ldr	r3, [pc, #612]	; (8002d20 <PID+0x280>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac2:	ee17 0a90 	vmov	r0, s15
 8002ac6:	f7fd fceb 	bl	80004a0 <__aeabi_f2d>
 8002aca:	4604      	mov	r4, r0
 8002acc:	460d      	mov	r5, r1
 8002ace:	4b95      	ldr	r3, [pc, #596]	; (8002d24 <PID+0x284>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fd fd04 	bl	80004e4 <__aeabi_ul2d>
 8002adc:	a388      	add	r3, pc, #544	; (adr r3, 8002d00 <PID+0x260>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fe5f 	bl	80007a4 <__aeabi_ddiv>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fe59 	bl	80007a4 <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fd ffd9 	bl	8000ab0 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a89      	ldr	r2, [pc, #548]	; (8002d28 <PID+0x288>)
 8002b02:	6013      	str	r3, [r2, #0]
	previous_pos = current_pos;
 8002b04:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <PID+0x27c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <PID+0x280>)
 8002b0a:	6013      	str	r3, [r2, #0]

	if (pos_f < 0) {
 8002b0c:	4b87      	ldr	r3, [pc, #540]	; (8002d2c <PID+0x28c>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d504      	bpl.n	8002b26 <PID+0x86>
		pos_f = 0;
 8002b1c:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <PID+0x28c>)
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e00c      	b.n	8002b40 <PID+0xa0>
	} else if (pos_f > 700) {
 8002b26:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <PID+0x28c>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002d30 <PID+0x290>
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	dd02      	ble.n	8002b40 <PID+0xa0>
		pos_f = 700;
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <PID+0x28c>)
 8002b3c:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <PID+0x294>)
 8002b3e:	601a      	str	r2, [r3, #0]
	}

	Error = setposition - PosY;
 8002b40:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <PID+0x278>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <PID+0x298>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]

	if (!((Dutyfeedback >= Max_Counter_PWM)
 8002b54:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <PID+0x29c>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002d40 <PID+0x2a0>
 8002b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	bfac      	ite	ge
 8002b68:	2301      	movge	r3, #1
 8002b6a:	2300      	movlt	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13f      	bne.n	8002bf8 <PID+0x158>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <PID+0x298>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	bfac      	ite	ge
 8002b88:	2301      	movge	r3, #1
 8002b8a:	2300      	movlt	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
	if (!((Dutyfeedback >= Max_Counter_PWM)
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <PID+0x118>
			&& ((Error >= 0 && Intregral >= 0) || (Error < 0 && Intregral < 0)))) {
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <PID+0x2a4>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	bfac      	ite	ge
 8002ba8:	2301      	movge	r3, #1
 8002baa:	2300      	movlt	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02a      	beq.n	8002c0e <PID+0x16e>
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <PID+0x298>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	bf4c      	ite	mi
 8002bc8:	2301      	movmi	r3, #1
 8002bca:	2300      	movpl	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10f      	bne.n	8002bf8 <PID+0x158>
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <PID+0x2a4>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	bf4c      	ite	mi
 8002be8:	2301      	movmi	r3, #1
 8002bea:	2300      	movpl	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f083 0301 	eor.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <PID+0x16e>
		Intregral = Intregral + Error;
 8002bf8:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <PID+0x2a4>)
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <PID+0x298>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <PID+0x2a4>)
 8002c0a:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <PID+0x2a8>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <PID+0x298>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c1e:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <PID+0x298>)
 8002c20:	edd3 6a00 	vldr	s13, [r3]
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <PID+0x2ac>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002c2e:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <PID+0x2b0>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <PID+0x2b4>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c42:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Intregral * Ki);
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <PID+0x2a4>)
 8002c48:	edd3 6a00 	vldr	s13, [r3]
 8002c4c:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <PID+0x2b8>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c56:	ee77 7a27 	vadd.f32	s15, s14, s15
	Dutyfeedback = (Kp * Error) + (Kd * ((Error - Last_Error) / deltaT))
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <PID+0x29c>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]

	if (Dutyfeedback >= Max_Counter_PWM * 0.7) {
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <PID+0x29c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc1b 	bl	80004a0 <__aeabi_f2d>
 8002c6a:	a327      	add	r3, pc, #156	; (adr r3, 8002d08 <PID+0x268>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fef4 	bl	8000a5c <__aeabi_dcmpge>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <PID+0x1e2>
		Dutyfeedback = Max_Counter_PWM * 0.7;
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <PID+0x29c>)
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <PID+0x2bc>)
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e00f      	b.n	8002ca2 <PID+0x202>
	} else if (Dutyfeedback <= Max_Counter_PWM * -0.7) {
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <PID+0x29c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc0a 	bl	80004a0 <__aeabi_f2d>
 8002c8c:	a320      	add	r3, pc, #128	; (adr r3, 8002d10 <PID+0x270>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fed9 	bl	8000a48 <__aeabi_dcmple>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <PID+0x202>
		Dutyfeedback = Max_Counter_PWM * -0.7;
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <PID+0x29c>)
 8002c9e:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <PID+0x2c0>)
 8002ca0:	601a      	str	r2, [r3, #0]
	}

	if (Dutyfeedback < 0) {
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <PID+0x29c>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d503      	bpl.n	8002cba <PID+0x21a>
		dir = -1;
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <PID+0x2c4>)
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e00a      	b.n	8002cd0 <PID+0x230>
	} else if (Dutyfeedback > 0) {
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <PID+0x29c>)
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	dd02      	ble.n	8002cd0 <PID+0x230>
		dir = 1;
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <PID+0x2c4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
	}

	if (Error > 1.0) {
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <PID+0x298>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	dd41      	ble.n	8002d68 <PID+0x2c8>
		Dutyfeedback += 1 * Kp; //230
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <PID+0x29c>)
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <PID+0x2a8>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <PID+0x29c>)
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
 8002cfa:	e04a      	b.n	8002d92 <PID+0x2f2>
 8002cfc:	f3af 8000 	nop.w
 8002d00:	00000000 	.word	0x00000000
 8002d04:	412e8480 	.word	0x412e8480
 8002d08:	66666666 	.word	0x66666666
 8002d0c:	40e66666 	.word	0x40e66666
 8002d10:	66666666 	.word	0x66666666
 8002d14:	c0e66666 	.word	0xc0e66666
 8002d18:	20001034 	.word	0x20001034
 8002d1c:	2000096c 	.word	0x2000096c
 8002d20:	20000970 	.word	0x20000970
 8002d24:	20000210 	.word	0x20000210
 8002d28:	20000974 	.word	0x20000974
 8002d2c:	200008dc 	.word	0x200008dc
 8002d30:	442f0000 	.word	0x442f0000
 8002d34:	442f0000 	.word	0x442f0000
 8002d38:	2000097c 	.word	0x2000097c
 8002d3c:	20000978 	.word	0x20000978
 8002d40:	47800000 	.word	0x47800000
 8002d44:	20000984 	.word	0x20000984
 8002d48:	20000240 	.word	0x20000240
 8002d4c:	20000980 	.word	0x20000980
 8002d50:	2000024c 	.word	0x2000024c
 8002d54:	20000248 	.word	0x20000248
 8002d58:	20000244 	.word	0x20000244
 8002d5c:	47333333 	.word	0x47333333
 8002d60:	c7333333 	.word	0xc7333333
 8002d64:	20000968 	.word	0x20000968
	} else if (Error < -1.0) {
 8002d68:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <PID+0x440>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	d50a      	bpl.n	8002d92 <PID+0x2f2>
		Dutyfeedback -= 1 * Kp;
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <PID+0x444>)
 8002d7e:	ed93 7a00 	vldr	s14, [r3]
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <PID+0x448>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8c:	4b55      	ldr	r3, [pc, #340]	; (8002ee4 <PID+0x444>)
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
	}

	Dutyfeedback = fabs(Dutyfeedback);
 8002d92:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <PID+0x444>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	eef0 7ae7 	vabs.f32	s15, s15
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <PID+0x444>)
 8002d9e:	edc3 7a00 	vstr	s15, [r3]

//	if(PosY != x){
//		State_PID = 1;
//		State = PID_TEST;
//	}
	motor(Dutyfeedback, dir);
 8002da2:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <PID+0x444>)
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dac:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <PID+0x44c>)
 8002dae:	f993 3000 	ldrsb.w	r3, [r3]
 8002db2:	4619      	mov	r1, r3
 8002db4:	ee17 0a90 	vmov	r0, s15
 8002db8:	f000 faf6 	bl	80033a8 <motor>
	Last_Error = Error;
 8002dbc:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <PID+0x440>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <PID+0x450>)
 8002dc2:	6013      	str	r3, [r2, #0]
//	if (PosY >= pos_f * 1.01) {
//		overshoot_check = 1;
//	} pos_f >= PosY - 0.2 && pos_f <= PosY + 0.2

	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <PID+0x454>)
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <PID+0x458>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd4:	ee17 0a90 	vmov	r0, s15
 8002dd8:	f7fd fb62 	bl	80004a0 <__aeabi_f2d>
 8002ddc:	a33c      	add	r3, pc, #240	; (adr r3, 8002ed0 <PID+0x430>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fe31 	bl	8000a48 <__aeabi_dcmple>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d100      	bne.n	8002dee <PID+0x34e>
		}

	}

//	}
}
 8002dec:	e069      	b.n	8002ec2 <PID+0x422>
	if (pos_f - PosY <= 0.2 && pos_f - PosY >= -0.2) {
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <PID+0x454>)
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <PID+0x458>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	ee17 0a90 	vmov	r0, s15
 8002e02:	f7fd fb4d 	bl	80004a0 <__aeabi_f2d>
 8002e06:	a334      	add	r3, pc, #208	; (adr r3, 8002ed8 <PID+0x438>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fe26 	bl	8000a5c <__aeabi_dcmpge>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d100      	bne.n	8002e18 <PID+0x378>
}
 8002e16:	e054      	b.n	8002ec2 <PID+0x422>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002e18:	4b38      	ldr	r3, [pc, #224]	; (8002efc <PID+0x45c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	635a      	str	r2, [r3, #52]	; 0x34
		Intregral = 0;
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <PID+0x460>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
		Dutyfeedback = 0;
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <PID+0x444>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
		v = 0;
 8002e30:	4934      	ldr	r1, [pc, #208]	; (8002f04 <PID+0x464>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
		a = 0;
 8002e3e:	4932      	ldr	r1, [pc, #200]	; (8002f08 <PID+0x468>)
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9c1 2300 	strd	r2, r3, [r1]
		if ((position_index + 2) % 2 == 0) {
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <PID+0x46c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3302      	adds	r3, #2
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <PID+0x3c2>
			state_laser_test = 3;
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <PID+0x470>)
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e00c      	b.n	8002e7c <PID+0x3dc>
		} else if ((position_index + 2) % 2 == 1) {
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <PID+0x46c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3302      	adds	r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	bfb8      	it	lt
 8002e70:	425b      	neglt	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <PID+0x3dc>
			state_laser_test = 4;
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <PID+0x470>)
 8002e78:	2204      	movs	r2, #4
 8002e7a:	601a      	str	r2, [r3, #0]
		if (position_index < 17) {
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <PID+0x46c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	dc15      	bgt.n	8002eb0 <PID+0x410>
			position_index++;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <PID+0x46c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <PID+0x46c>)
 8002e8c:	6013      	str	r3, [r2, #0]
			read_pos();
 8002e8e:	f000 fab5 	bl	80033fc <read_pos>
			pos_f = position_test[position_index];
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <PID+0x46c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <PID+0x474>)
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <PID+0x454>)
 8002ea0:	6013      	str	r3, [r2, #0]
			State = TRAJECT_GEN;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <PID+0x478>)
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]
			State_PID = 0;
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <PID+0x47c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
}
 8002eae:	e008      	b.n	8002ec2 <PID+0x422>
			State_PID = 2;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <PID+0x47c>)
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
			position_index = 0;
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <PID+0x46c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
			State = INIT_HOMING;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <PID+0x478>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	9999999a 	.word	0x9999999a
 8002ed4:	3fc99999 	.word	0x3fc99999
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	bfc99999 	.word	0xbfc99999
 8002ee0:	2000097c 	.word	0x2000097c
 8002ee4:	20000978 	.word	0x20000978
 8002ee8:	20000240 	.word	0x20000240
 8002eec:	20000968 	.word	0x20000968
 8002ef0:	20000980 	.word	0x20000980
 8002ef4:	200008dc 	.word	0x200008dc
 8002ef8:	20001034 	.word	0x20001034
 8002efc:	2000040c 	.word	0x2000040c
 8002f00:	20000984 	.word	0x20000984
 8002f04:	20000958 	.word	0x20000958
 8002f08:	20000960 	.word	0x20000960
 8002f0c:	20001038 	.word	0x20001038
 8002f10:	200009a8 	.word	0x200009a8
 8002f14:	20000284 	.word	0x20000284
 8002f18:	2000103c 	.word	0x2000103c
 8002f1c:	20000200 	.word	0x20000200

08002f20 <EndEffector_Event>:

void EndEffector_Event(char EndEffector_State) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
	if (hi2c2.State == HAL_I2C_STATE_READY) {
 8002f2a:	4b51      	ldr	r3, [pc, #324]	; (8003070 <EndEffector_Event+0x150>)
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	f040 8094 	bne.w	8003060 <EndEffector_Event+0x140>
		switch (EndEffector_State) {
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b0a      	cmp	r3, #10
 8002f3c:	f200 8093 	bhi.w	8003066 <EndEffector_Event+0x146>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <EndEffector_Event+0x28>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08003065 	.word	0x08003065
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	08002f8d 	.word	0x08002f8d
 8002f54:	08002fa5 	.word	0x08002fa5
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	08002fd5 	.word	0x08002fd5
 8002f60:	08002fed 	.word	0x08002fed
 8002f64:	08003005 	.word	0x08003005
 8002f68:	0800301d 	.word	0x0800301d
 8002f6c:	08003035 	.word	0x08003035
 8002f70:	0800304d 	.word	0x0800304d
		case Init:

			break;

		case Test_Start:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Start_data,
 8002f74:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <EndEffector_Event+0x154>)
 8002f7e:	212a      	movs	r1, #42	; 0x2a
 8002f80:	483b      	ldr	r0, [pc, #236]	; (8003070 <EndEffector_Event+0x150>)
 8002f82:	f001 feaf 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					2, 10000);
			EndEffector_State = Init;
 8002f86:	2300      	movs	r3, #0
 8002f88:	71fb      	strb	r3, [r7, #7]
			break;
 8002f8a:	e06c      	b.n	8003066 <EndEffector_Event+0x146>

		case Test_Stop:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Test_Stop_data, 2,
 8002f8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2302      	movs	r3, #2
 8002f94:	4a38      	ldr	r2, [pc, #224]	; (8003078 <EndEffector_Event+0x158>)
 8002f96:	212a      	movs	r1, #42	; 0x2a
 8002f98:	4835      	ldr	r0, [pc, #212]	; (8003070 <EndEffector_Event+0x150>)
 8002f9a:	f001 fea3 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	71fb      	strb	r3, [r7, #7]
			break;
 8002fa2:	e060      	b.n	8003066 <EndEffector_Event+0x146>

		case Reset:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Reset_data, 4,
 8002fa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2304      	movs	r3, #4
 8002fac:	4a33      	ldr	r2, [pc, #204]	; (800307c <EndEffector_Event+0x15c>)
 8002fae:	212a      	movs	r1, #42	; 0x2a
 8002fb0:	482f      	ldr	r0, [pc, #188]	; (8003070 <EndEffector_Event+0x150>)
 8002fb2:	f001 fe97 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	71fb      	strb	r3, [r7, #7]
			break;
 8002fba:	e054      	b.n	8003066 <EndEffector_Event+0x146>
		case In_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, In_Emergency_data,
 8002fbc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4a2e      	ldr	r2, [pc, #184]	; (8003080 <EndEffector_Event+0x160>)
 8002fc6:	212a      	movs	r1, #42	; 0x2a
 8002fc8:	4829      	ldr	r0, [pc, #164]	; (8003070 <EndEffector_Event+0x150>)
 8002fca:	f001 fe8b 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					1, 10000);
			EndEffector_State = Init;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	71fb      	strb	r3, [r7, #7]
			break;
 8002fd2:	e048      	b.n	8003066 <EndEffector_Event+0x146>
		case Out_Emergency:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8002fd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2304      	movs	r3, #4
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <EndEffector_Event+0x164>)
 8002fde:	212a      	movs	r1, #42	; 0x2a
 8002fe0:	4823      	ldr	r0, [pc, #140]	; (8003070 <EndEffector_Event+0x150>)
 8002fe2:	f001 fe7f 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					Out_Emergency_data, 4, 10000);
			EndEffector_State = Init;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	71fb      	strb	r3, [r7, #7]
			break;
 8002fea:	e03c      	b.n	8003066 <EndEffector_Event+0x146>
		case Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Run_Mode_data, 2,
 8002fec:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	4a24      	ldr	r2, [pc, #144]	; (8003088 <EndEffector_Event+0x168>)
 8002ff6:	212a      	movs	r1, #42	; 0x2a
 8002ff8:	481d      	ldr	r0, [pc, #116]	; (8003070 <EndEffector_Event+0x150>)
 8002ffa:	f001 fe73 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8002ffe:	2300      	movs	r3, #0
 8003000:	71fb      	strb	r3, [r7, #7]
			break;
 8003002:	e030      	b.n	8003066 <EndEffector_Event+0x146>
		case Close_Run_Mode:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1,
 8003004:	f242 7310 	movw	r3, #10000	; 0x2710
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2302      	movs	r3, #2
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <EndEffector_Event+0x16c>)
 800300e:	212a      	movs	r1, #42	; 0x2a
 8003010:	4817      	ldr	r0, [pc, #92]	; (8003070 <EndEffector_Event+0x150>)
 8003012:	f001 fe67 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					Close_Run_Mode_data, 2, 10000);
			EndEffector_State = Init;
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
			break;
 800301a:	e024      	b.n	8003066 <EndEffector_Event+0x146>

		case Pick:
			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Pick_data, 2,
 800301c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2302      	movs	r3, #2
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <EndEffector_Event+0x170>)
 8003026:	212a      	movs	r1, #42	; 0x2a
 8003028:	4811      	ldr	r0, [pc, #68]	; (8003070 <EndEffector_Event+0x150>)
 800302a:	f001 fe5b 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
			break;
 8003032:	e018      	b.n	8003066 <EndEffector_Event+0x146>
		case Place:

			HAL_I2C_Master_Transmit(&hi2c2, End_Address << 1, Place_data, 2,
 8003034:	f242 7310 	movw	r3, #10000	; 0x2710
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2302      	movs	r3, #2
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <EndEffector_Event+0x174>)
 800303e:	212a      	movs	r1, #42	; 0x2a
 8003040:	480b      	ldr	r0, [pc, #44]	; (8003070 <EndEffector_Event+0x150>)
 8003042:	f001 fe4f 	bl	8004ce4 <HAL_I2C_Master_Transmit>
					10000);
			EndEffector_State = Init;
 8003046:	2300      	movs	r3, #0
 8003048:	71fb      	strb	r3, [r7, #7]
			break;
 800304a:	e00c      	b.n	8003066 <EndEffector_Event+0x146>
		case Read:
			HAL_I2C_Master_Receive(&hi2c2, End_Address << 1, Read_data, 1,
 800304c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2301      	movs	r3, #1
 8003054:	4a10      	ldr	r2, [pc, #64]	; (8003098 <EndEffector_Event+0x178>)
 8003056:	212a      	movs	r1, #42	; 0x2a
 8003058:	4805      	ldr	r0, [pc, #20]	; (8003070 <EndEffector_Event+0x150>)
 800305a:	f001 ff41 	bl	8004ee0 <HAL_I2C_Master_Receive>
					10000);
			break;
 800305e:	e002      	b.n	8003066 <EndEffector_Event+0x146>
		}

	}
 8003060:	bf00      	nop
 8003062:	e000      	b.n	8003066 <EndEffector_Event+0x146>
			break;
 8003064:	bf00      	nop
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000360 	.word	0x20000360
 8003074:	20000260 	.word	0x20000260
 8003078:	20000264 	.word	0x20000264
 800307c:	20000268 	.word	0x20000268
 8003080:	2000026c 	.word	0x2000026c
 8003084:	20000270 	.word	0x20000270
 8003088:	20000274 	.word	0x20000274
 800308c:	20000278 	.word	0x20000278
 8003090:	2000027c 	.word	0x2000027c
 8003094:	20000280 	.word	0x20000280
 8003098:	200009a4 	.word	0x200009a4

0800309c <JoyStickControl>:
	y_final[7] = y_pre_final[1] + (20 * 3 * sin_zeta);
	x_final_joy[8] = x_pre_final[2] + (15 * 3 * sin_zeta);
	y_final[8] = y_pre_final[2] + (20 * 3 * sin_zeta);
}

void JoyStickControl() {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af02      	add	r7, sp, #8

	read_pos();
 80030a2:	f000 f9ab 	bl	80033fc <read_pos>

	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2104      	movs	r1, #4
 80030aa:	4857      	ldr	r0, [pc, #348]	; (8003208 <JoyStickControl+0x16c>)
 80030ac:	f001 fc98 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, TX, RX, 10, 30);
 80030b0:	231e      	movs	r3, #30
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	230a      	movs	r3, #10
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <JoyStickControl+0x170>)
 80030b8:	4955      	ldr	r1, [pc, #340]	; (8003210 <JoyStickControl+0x174>)
 80030ba:	4856      	ldr	r0, [pc, #344]	; (8003214 <JoyStickControl+0x178>)
 80030bc:	f003 f985 	bl	80063ca <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(JoyStick_SS_PIN_GPIO_Port, JoyStick_SS_PIN_Pin, 1);
 80030c0:	2201      	movs	r2, #1
 80030c2:	2104      	movs	r1, #4
 80030c4:	4850      	ldr	r0, [pc, #320]	; (8003208 <JoyStickControl+0x16c>)
 80030c6:	f001 fc8b 	bl	80049e0 <HAL_GPIO_WritePin>

	if (RX[3] == 0xFE && RX_last == 0xFF) { //Select Speed Button
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <JoyStickControl+0x170>)
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	2bfe      	cmp	r3, #254	; 0xfe
 80030d0:	d113      	bne.n	80030fa <JoyStickControl+0x5e>
 80030d2:	4b51      	ldr	r3, [pc, #324]	; (8003218 <JoyStickControl+0x17c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d10f      	bne.n	80030fa <JoyStickControl+0x5e>
		if (state_motor == 1) {
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <JoyStickControl+0x180>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d103      	bne.n	80030ea <JoyStickControl+0x4e>
			state_motor = 0;
 80030e2:	4b4e      	ldr	r3, [pc, #312]	; (800321c <JoyStickControl+0x180>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80030e8:	e037      	b.n	800315a <JoyStickControl+0xbe>
		} else if (state_motor == 0) {
 80030ea:	4b4c      	ldr	r3, [pc, #304]	; (800321c <JoyStickControl+0x180>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d133      	bne.n	800315a <JoyStickControl+0xbe>
			state_motor = 1;
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <JoyStickControl+0x180>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
		if (state_motor == 1) {
 80030f8:	e02f      	b.n	800315a <JoyStickControl+0xbe>
		}
	} else if (RX[4] == 0xBF && button_last == 0xFF) { //X Button
 80030fa:	4b44      	ldr	r3, [pc, #272]	; (800320c <JoyStickControl+0x170>)
 80030fc:	791b      	ldrb	r3, [r3, #4]
 80030fe:	2bbf      	cmp	r3, #191	; 0xbf
 8003100:	d11c      	bne.n	800313c <JoyStickControl+0xa0>
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <JoyStickControl+0x184>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2bff      	cmp	r3, #255	; 0xff
 8003108:	d118      	bne.n	800313c <JoyStickControl+0xa0>

		if (y_count >= 4) {
 800310a:	4b46      	ldr	r3, [pc, #280]	; (8003224 <JoyStickControl+0x188>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d904      	bls.n	800311c <JoyStickControl+0x80>
			motor(0, 0);
 8003112:	2100      	movs	r1, #0
 8003114:	2000      	movs	r0, #0
 8003116:	f000 f947 	bl	80033a8 <motor>
 800311a:	e005      	b.n	8003128 <JoyStickControl+0x8c>
		} else {
			y_count += 1;
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <JoyStickControl+0x188>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <JoyStickControl+0x188>)
 8003126:	701a      	strb	r2, [r3, #0]
		}
		y_c[y_count] = PosY;
 8003128:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <JoyStickControl+0x188>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <JoyStickControl+0x18c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	493e      	ldr	r1, [pc, #248]	; (800322c <JoyStickControl+0x190>)
 8003134:	0083      	lsls	r3, r0, #2
 8003136:	440b      	add	r3, r1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e00f      	b.n	800315c <JoyStickControl+0xc0>

	} else if (RX[4] == 0xEF && button_last == 0xFF) {
 800313c:	4b33      	ldr	r3, [pc, #204]	; (800320c <JoyStickControl+0x170>)
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	2bef      	cmp	r3, #239	; 0xef
 8003142:	d10b      	bne.n	800315c <JoyStickControl+0xc0>
 8003144:	4b36      	ldr	r3, [pc, #216]	; (8003220 <JoyStickControl+0x184>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2bff      	cmp	r3, #255	; 0xff
 800314a:	d107      	bne.n	800315c <JoyStickControl+0xc0>
		workState = 1;
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <JoyStickControl+0x194>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
		State = INIT_HOMING;
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <JoyStickControl+0x198>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e000      	b.n	800315c <JoyStickControl+0xc0>
		if (state_motor == 1) {
 800315a:	bf00      	nop
	}

//motor speed Select
	switch (state_motor) {
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <JoyStickControl+0x180>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <JoyStickControl+0xce>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d020      	beq.n	80031aa <JoyStickControl+0x10e>
 8003168:	e042      	b.n	80031f0 <JoyStickControl+0x154>
	case 0:
		if (RX[3] == 0xFF) //Not be push
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <JoyStickControl+0x170>)
 800316c:	78db      	ldrb	r3, [r3, #3]
 800316e:	2bff      	cmp	r3, #255	; 0xff
 8003170:	d104      	bne.n	800317c <JoyStickControl+0xe0>
			motor(0, 1);
 8003172:	2101      	movs	r1, #1
 8003174:	2000      	movs	r0, #0
 8003176:	f000 f917 	bl	80033a8 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(fast, -1);
		else if (RX[3] == 0xBF) //Down
			motor(fast, 1);
		break;
 800317a:	e036      	b.n	80031ea <JoyStickControl+0x14e>
		else if (RX[3] == 0xEF) //UP
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <JoyStickControl+0x170>)
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	2bef      	cmp	r3, #239	; 0xef
 8003182:	d107      	bne.n	8003194 <JoyStickControl+0xf8>
			motor(fast, -1);
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <JoyStickControl+0x19c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f90b 	bl	80033a8 <motor>
		break;
 8003192:	e02a      	b.n	80031ea <JoyStickControl+0x14e>
		else if (RX[3] == 0xBF) //Down
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <JoyStickControl+0x170>)
 8003196:	78db      	ldrb	r3, [r3, #3]
 8003198:	2bbf      	cmp	r3, #191	; 0xbf
 800319a:	d126      	bne.n	80031ea <JoyStickControl+0x14e>
			motor(fast, 1);
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <JoyStickControl+0x19c>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f900 	bl	80033a8 <motor>
		break;
 80031a8:	e01f      	b.n	80031ea <JoyStickControl+0x14e>
	case 1:
		if (RX[3] == 0xFF) //Not be push
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <JoyStickControl+0x170>)
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	d104      	bne.n	80031bc <JoyStickControl+0x120>
			motor(0, 1);
 80031b2:	2101      	movs	r1, #1
 80031b4:	2000      	movs	r0, #0
 80031b6:	f000 f8f7 	bl	80033a8 <motor>
		else if (RX[3] == 0xEF) //UP
			motor(slow, -1);
		else if (RX[3] == 0xBF) //Down
			motor(slow, 1);
		break;
 80031ba:	e018      	b.n	80031ee <JoyStickControl+0x152>
		else if (RX[3] == 0xEF) //UP
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <JoyStickControl+0x170>)
 80031be:	78db      	ldrb	r3, [r3, #3]
 80031c0:	2bef      	cmp	r3, #239	; 0xef
 80031c2:	d107      	bne.n	80031d4 <JoyStickControl+0x138>
			motor(slow, -1);
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <JoyStickControl+0x1a0>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f8eb 	bl	80033a8 <motor>
		break;
 80031d2:	e00c      	b.n	80031ee <JoyStickControl+0x152>
		else if (RX[3] == 0xBF) //Down
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <JoyStickControl+0x170>)
 80031d6:	78db      	ldrb	r3, [r3, #3]
 80031d8:	2bbf      	cmp	r3, #191	; 0xbf
 80031da:	d108      	bne.n	80031ee <JoyStickControl+0x152>
			motor(slow, 1);
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <JoyStickControl+0x1a0>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8e0 	bl	80033a8 <motor>
		break;
 80031e8:	e001      	b.n	80031ee <JoyStickControl+0x152>
		break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <JoyStickControl+0x154>
		break;
 80031ee:	bf00      	nop
//X-axis
//		else if (RX[3] == 0x7F) //Left
//			printf("Left \r\n");
//		else if (RX[3] == 0xDF) //Right
//			printf("Right \r\n");
	RX_last = RX[3];
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <JoyStickControl+0x170>)
 80031f2:	78da      	ldrb	r2, [r3, #3]
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <JoyStickControl+0x17c>)
 80031f6:	701a      	strb	r2, [r3, #0]
	button_last = RX[4];
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <JoyStickControl+0x170>)
 80031fa:	791a      	ldrb	r2, [r3, #4]
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <JoyStickControl+0x184>)
 80031fe:	701a      	strb	r2, [r3, #0]

}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40020c00 	.word	0x40020c00
 800320c:	20000988 	.word	0x20000988
 8003210:	20000250 	.word	0x20000250
 8003214:	200003b4 	.word	0x200003b4
 8003218:	200009a0 	.word	0x200009a0
 800321c:	200009a2 	.word	0x200009a2
 8003220:	200009a1 	.word	0x200009a1
 8003224:	20000993 	.word	0x20000993
 8003228:	20001034 	.word	0x20001034
 800322c:	20000994 	.word	0x20000994
 8003230:	20000992 	.word	0x20000992
 8003234:	2000103c 	.word	0x2000103c
 8003238:	2000025a 	.word	0x2000025a
 800323c:	2000025c 	.word	0x2000025c

08003240 <Init_Homing>:

void Init_Homing() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	static uint16_t state_homing = 0;
	switch (state_homing) {
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <Init_Homing+0xe0>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <Init_Homing+0x12>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d01a      	beq.n	8003286 <Init_Homing+0x46>
		} else {
			motor(Max_Counter_PWM * 0.18, 1);
		}
		break;
	}
}
 8003250:	e064      	b.n	800331c <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_3_GPIO_Port,
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	4833      	ldr	r0, [pc, #204]	; (8003324 <Init_Homing+0xe4>)
 8003256:	f001 fbab 	bl	80049b0 <HAL_GPIO_ReadPin>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <Init_Homing+0x38>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003260:	4b31      	ldr	r3, [pc, #196]	; (8003328 <Init_Homing+0xe8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
			motor(0, 1);
 8003268:	2101      	movs	r1, #1
 800326a:	2000      	movs	r0, #0
 800326c:	f000 f89c 	bl	80033a8 <motor>
			state_homing = 1;
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <Init_Homing+0xe0>)
 8003272:	2201      	movs	r2, #1
 8003274:	801a      	strh	r2, [r3, #0]
		break;
 8003276:	e051      	b.n	800331c <Init_Homing+0xdc>
			motor(Max_Counter_PWM * 0.25, -1);
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003280:	f000 f892 	bl	80033a8 <motor>
		break;
 8003284:	e04a      	b.n	800331c <Init_Homing+0xdc>
		if (HAL_GPIO_ReadPin(Photoelectric_sensor_2_GPIO_Port,
 8003286:	2104      	movs	r1, #4
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <Init_Homing+0xec>)
 800328a:	f001 fb91 	bl	80049b0 <HAL_GPIO_ReadPin>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d13d      	bne.n	8003310 <Init_Homing+0xd0>
			motor(0, 1);
 8003294:	2101      	movs	r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f886 	bl	80033a8 <motor>
			HAL_Delay(200);
 800329c:	20c8      	movs	r0, #200	; 0xc8
 800329e:	f000 fcbf 	bl	8003c20 <HAL_Delay>
			__HAL_TIM_SET_COUNTER(&htim2, 23893);
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <Init_Homing+0xe8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f645 5255 	movw	r2, #23893	; 0x5d55
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <Init_Homing+0xe8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <Init_Homing+0xf0>)
 80032b6:	601a      	str	r2, [r3, #0]
			PosY = QEIReadRaw * (120.0 / 8192.0);
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <Init_Homing+0xf0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f8dd 	bl	800047c <__aeabi_i2d>
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <Init_Homing+0xf4>)
 80032c8:	f7fd f942 	bl	8000550 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7fd fbec 	bl	8000ab0 <__aeabi_d2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <Init_Homing+0xf8>)
 80032dc:	6013      	str	r3, [r2, #0]
			pos_i = PosY;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <Init_Homing+0xf8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <Init_Homing+0xfc>)
 80032e4:	6013      	str	r3, [r2, #0]
			pos_f = position_test[position_index];
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <Init_Homing+0x100>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a16      	ldr	r2, [pc, #88]	; (8003344 <Init_Homing+0x104>)
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <Init_Homing+0x108>)
 80032f4:	6013      	str	r3, [r2, #0]
			State_PID = 2;
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <Init_Homing+0x10c>)
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
			state_homing = 0;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <Init_Homing+0xe0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]
			EndEffector_Event(Run_Mode);
 8003302:	2006      	movs	r0, #6
 8003304:	f7ff fe0c 	bl	8002f20 <EndEffector_Event>
			State = IDLE;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <Init_Homing+0x110>)
 800330a:	2206      	movs	r2, #6
 800330c:	701a      	strb	r2, [r3, #0]
		break;
 800330e:	e004      	b.n	800331a <Init_Homing+0xda>
			motor(Max_Counter_PWM * 0.18, 1);
 8003310:	2101      	movs	r1, #1
 8003312:	f642 6014 	movw	r0, #11796	; 0x2e14
 8003316:	f000 f847 	bl	80033a8 <motor>
		break;
 800331a:	bf00      	nop
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20001050 	.word	0x20001050
 8003324:	40020800 	.word	0x40020800
 8003328:	200004c0 	.word	0x200004c0
 800332c:	40020400 	.word	0x40020400
 8003330:	20001030 	.word	0x20001030
 8003334:	3f8e0000 	.word	0x3f8e0000
 8003338:	20001034 	.word	0x20001034
 800333c:	200008d8 	.word	0x200008d8
 8003340:	20001038 	.word	0x20001038
 8003344:	20000284 	.word	0x20000284
 8003348:	200008dc 	.word	0x200008dc
 800334c:	20000200 	.word	0x20000200
 8003350:	2000103c 	.word	0x2000103c

08003354 <Photo_IT>:
		}
		break;
	}
}

void Photo_IT() {
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	switch (state_IT) {
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <Photo_IT+0x4c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <Photo_IT+0x12>
 8003360:	2b01      	cmp	r3, #1
 8003362:	d011      	beq.n	8003388 <Photo_IT+0x34>
	case 1:
		Dutyfeedback = 0;
		motor(0, 1);
		break;
	}
}
 8003364:	e01a      	b.n	800339c <Photo_IT+0x48>
		if (state_IT == 0) {
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <Photo_IT+0x4c>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d015      	beq.n	800339a <Photo_IT+0x46>
		} else if (state_IT == 1) {
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <Photo_IT+0x4c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d111      	bne.n	800339a <Photo_IT+0x46>
			Dutyfeedback = 0;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <Photo_IT+0x50>)
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
			motor(0, 1);
 800337e:	2101      	movs	r1, #1
 8003380:	2000      	movs	r0, #0
 8003382:	f000 f811 	bl	80033a8 <motor>
		break;
 8003386:	e008      	b.n	800339a <Photo_IT+0x46>
		Dutyfeedback = 0;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <Photo_IT+0x50>)
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
		motor(0, 1);
 8003390:	2101      	movs	r1, #1
 8003392:	2000      	movs	r0, #0
 8003394:	f000 f808 	bl	80033a8 <motor>
		break;
 8003398:	e000      	b.n	800339c <Photo_IT+0x48>
		break;
 800339a:	bf00      	nop
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200008e0 	.word	0x200008e0
 80033a4:	20000978 	.word	0x20000978

080033a8 <motor>:

void motor(uint32_t speed, int DIR) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	if (DIR == -1) {
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d10a      	bne.n	80033d0 <motor+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //1
 80033ba:	2201      	movs	r2, #1
 80033bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <motor+0x4c>)
 80033c2:	f001 fb0d 	bl	80049e0 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <motor+0x50>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (DIR == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);

	}
}
 80033ce:	e00c      	b.n	80033ea <motor+0x42>
	} else if (DIR == 1) {
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d109      	bne.n	80033ea <motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //0
 80033d6:	2200      	movs	r2, #0
 80033d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <motor+0x4c>)
 80033de:	f001 faff 	bl	80049e0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <motor+0x50>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40020000 	.word	0x40020000
 80033f8:	2000040c 	.word	0x2000040c

080033fc <read_pos>:

void read_pos() {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <read_pos+0x3c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	461a      	mov	r2, r3
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <read_pos+0x40>)
 800340a:	601a      	str	r2, [r3, #0]
	PosY = QEIReadRaw * (120.0 / 8192.0);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <read_pos+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f833 	bl	800047c <__aeabi_i2d>
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <read_pos+0x44>)
 800341c:	f7fd f898 	bl	8000550 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f7fd fb42 	bl	8000ab0 <__aeabi_d2f>
 800342c:	4603      	mov	r3, r0
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <read_pos+0x48>)
 8003430:	6013      	str	r3, [r2, #0]
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200004c0 	.word	0x200004c0
 800343c:	20001030 	.word	0x20001030
 8003440:	3f8e0000 	.word	0x3f8e0000
 8003444:	20001034 	.word	0x20001034

08003448 <HAL_TIM_PeriodElapsedCallback>:
//		state_IT = 1;
//		State = EMERGENCY_LIMIT;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003448:	b4b0      	push	{r4, r5, r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a08      	ldr	r2, [pc, #32]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d108      	bne.n	800346a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	1e54      	subs	r4, r2, #1
 8003460:	f143 0500 	adc.w	r5, r3, #0
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003466:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bcb0      	pop	{r4, r5, r7}
 8003472:	4770      	bx	lr
 8003474:	20000628 	.word	0x20000628
 8003478:	200009b0 	.word	0x200009b0

0800347c <micros>:

uint64_t micros() {
 800347c:	b4b0      	push	{r4, r5, r7}
 800347e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <micros+0x2c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2200      	movs	r2, #0
 8003488:	4618      	mov	r0, r3
 800348a:	4611      	mov	r1, r2
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <micros+0x30>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	1884      	adds	r4, r0, r2
 8003494:	eb41 0503 	adc.w	r5, r1, r3
 8003498:	4622      	mov	r2, r4
 800349a:	462b      	mov	r3, r5
}
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bcb0      	pop	{r4, r5, r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000628 	.word	0x20000628
 80034ac:	200009b0 	.word	0x200009b0

080034b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80034b4:	b672      	cpsid	i
}
 80034b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80034b8:	e7fe      	b.n	80034b8 <Error_Handler+0x8>
	...

080034bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_MspInit+0x4c>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	4a0f      	ldr	r2, [pc, #60]	; (8003508 <HAL_MspInit+0x4c>)
 80034cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d0:	6453      	str	r3, [r2, #68]	; 0x44
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_MspInit+0x4c>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_MspInit+0x4c>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <HAL_MspInit+0x4c>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_MspInit+0x4c>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034fa:	2007      	movs	r0, #7
 80034fc:	f000 fc84 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800

0800350c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <HAL_I2C_MspInit+0xa8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d13d      	bne.n	80035aa <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800354a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003550:	2312      	movs	r3, #18
 8003552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003554:	2301      	movs	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800355c:	2304      	movs	r3, #4
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4619      	mov	r1, r3
 8003566:	4815      	ldr	r0, [pc, #84]	; (80035bc <HAL_I2C_MspInit+0xb0>)
 8003568:	f001 f89e 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800356c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003572:	2312      	movs	r3, #18
 8003574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800357e:	2309      	movs	r3, #9
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <HAL_I2C_MspInit+0xb0>)
 800358a:	f001 f88d 	bl	80046a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 8003598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_I2C_MspInit+0xac>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40005800 	.word	0x40005800
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020400 	.word	0x40020400

080035c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_SPI_MspInit+0x84>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d12c      	bne.n	800363c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_SPI_MspInit+0x88>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_SPI_MspInit+0x88>)
 80035ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_SPI_MspInit+0x88>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_SPI_MspInit+0x88>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_SPI_MspInit+0x88>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_SPI_MspInit+0x88>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800361a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800362c:	2306      	movs	r3, #6
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4805      	ldr	r0, [pc, #20]	; (800364c <HAL_SPI_MspInit+0x8c>)
 8003638:	f001 f836 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40003c00 	.word	0x40003c00
 8003648:	40023800 	.word	0x40023800
 800364c:	40020800 	.word	0x40020800

08003650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_TIM_Base_MspInit+0xf0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d116      	bne.n	8003690 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a36      	ldr	r2, [pc, #216]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	201a      	movs	r0, #26
 8003684:	f000 fbcb 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003688:	201a      	movs	r0, #26
 800368a:	f000 fbe4 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800368e:	e052      	b.n	8003736 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_TIM_Base_MspInit+0xf8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d116      	bne.n	80036c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	4b29      	ldr	r3, [pc, #164]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a28      	ldr	r2, [pc, #160]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	201d      	movs	r0, #29
 80036bc:	f000 fbaf 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036c0:	201d      	movs	r0, #29
 80036c2:	f000 fbc8 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 80036c6:	e036      	b.n	8003736 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_Base_MspInit+0xfc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d116      	bne.n	8003700 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	2032      	movs	r0, #50	; 0x32
 80036f4:	f000 fb93 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80036f8:	2032      	movs	r0, #50	; 0x32
 80036fa:	f000 fbac 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 80036fe:	e01a      	b.n	8003736 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a12      	ldr	r2, [pc, #72]	; (8003750 <HAL_TIM_Base_MspInit+0x100>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d115      	bne.n	8003736 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_TIM_Base_MspInit+0xf4>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	201a      	movs	r0, #26
 800372c:	f000 fb77 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003730:	201a      	movs	r0, #26
 8003732:	f000 fb90 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40023800 	.word	0x40023800
 8003748:	40000400 	.word	0x40000400
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40014800 	.word	0x40014800

08003754 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d12b      	bne.n	80037ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x84>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037ae:	2303      	movs	r3, #3
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037be:	2301      	movs	r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <HAL_TIM_Encoder_MspInit+0x88>)
 80037ca:	f000 ff6d 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40020000 	.word	0x40020000

080037e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_TIM_MspPostInit+0x68>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d11e      	bne.n	8003840 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_TIM_MspPostInit+0x6c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_TIM_MspPostInit+0x6c>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_TIM_MspPostInit+0x6c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800381e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003830:	2301      	movs	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	4619      	mov	r1, r3
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <HAL_TIM_MspPostInit+0x70>)
 800383c:	f000 ff34 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40010000 	.word	0x40010000
 800384c:	40023800 	.word	0x40023800
 8003850:	40020000 	.word	0x40020000

08003854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_UART_MspInit+0x154>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d162      	bne.n	800393c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_UART_MspInit+0x158>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a4b      	ldr	r2, [pc, #300]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a44      	ldr	r2, [pc, #272]	; (80039ac <HAL_UART_MspInit+0x158>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_UART_MspInit+0x158>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038ae:	230c      	movs	r3, #12
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ba:	2303      	movs	r3, #3
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038be:	2307      	movs	r3, #7
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4619      	mov	r1, r3
 80038c8:	4839      	ldr	r0, [pc, #228]	; (80039b0 <HAL_UART_MspInit+0x15c>)
 80038ca:	f000 feed 	bl	80046a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038ce:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_UART_MspInit+0x164>)
 80038d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038dc:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038f0:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_UART_MspInit+0x160>)
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003902:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <HAL_UART_MspInit+0x160>)
 8003904:	2200      	movs	r2, #0
 8003906:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_UART_MspInit+0x160>)
 800390a:	2200      	movs	r2, #0
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800390e:	4829      	ldr	r0, [pc, #164]	; (80039b4 <HAL_UART_MspInit+0x160>)
 8003910:	f000 fabc 	bl	8003e8c <HAL_DMA_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800391a:	f7ff fdc9 	bl	80034b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <HAL_UART_MspInit+0x160>)
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_UART_MspInit+0x160>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	2026      	movs	r0, #38	; 0x26
 8003930:	f000 fa75 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003934:	2026      	movs	r0, #38	; 0x26
 8003936:	f000 fa8e 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800393a:	e031      	b.n	80039a0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_UART_MspInit+0x168>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d12c      	bne.n	80039a0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_UART_MspInit+0x158>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_UART_MspInit+0x158>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_UART_MspInit+0x158>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800397e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003990:	2308      	movs	r3, #8
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <HAL_UART_MspInit+0x15c>)
 800399c:	f000 fe84 	bl	80046a8 <HAL_GPIO_Init>
}
 80039a0:	bf00      	nop
 80039a2:	3730      	adds	r7, #48	; 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40004400 	.word	0x40004400
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	20000878 	.word	0x20000878
 80039b8:	400260a0 	.word	0x400260a0
 80039bc:	40011400 	.word	0x40011400

080039c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <HardFault_Handler+0x4>

080039cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <MemManage_Handler+0x4>

080039d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d6:	e7fe      	b.n	80039d6 <BusFault_Handler+0x4>

080039d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <UsageFault_Handler+0x4>

080039de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a0c:	f000 f8e8 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_2_Pin);
 8003a18:	2004      	movs	r0, #4
 8003a1a:	f000 fffb 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003a26:	2008      	movs	r0, #8
 8003a28:	f000 fff4 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream6_IRQHandler+0x10>)
 8003a36:	f000 fbc1 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000878 	.word	0x20000878

08003a44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_3_Pin);
 8003a48:	2040      	movs	r0, #64	; 0x40
 8003a4a:	f000 ffe3 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Photoelectric_sensor_1_Pin);
 8003a4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a52:	f000 ffdf 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003a62:	f003 fbc3 	bl	80071ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003a66:	4803      	ldr	r0, [pc, #12]	; (8003a74 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003a68:	f003 fbc0 	bl	80071ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2000040c 	.word	0x2000040c
 8003a74:	200006dc 	.word	0x200006dc

08003a78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TIM3_IRQHandler+0x10>)
 8003a7e:	f003 fbb5 	bl	80071ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000574 	.word	0x20000574

08003a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <USART2_IRQHandler+0x10>)
 8003a92:	f004 feb3 	bl	80087fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000790 	.word	0x20000790

08003aa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003aa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003aa8:	f000 ffb4 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <TIM5_IRQHandler+0x10>)
 8003ab6:	f003 fb99 	bl	80071ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000628 	.word	0x20000628

08003ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <SystemInit+0x20>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <SystemInit+0x20>)
 8003ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003aec:	480d      	ldr	r0, [pc, #52]	; (8003b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aee:	490e      	ldr	r1, [pc, #56]	; (8003b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af4:	e002      	b.n	8003afc <LoopCopyDataInit>

08003af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afa:	3304      	adds	r3, #4

08003afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b00:	d3f9      	bcc.n	8003af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b04:	4c0b      	ldr	r4, [pc, #44]	; (8003b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b08:	e001      	b.n	8003b0e <LoopFillZerobss>

08003b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b0c:	3204      	adds	r2, #4

08003b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b10:	d3fb      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b12:	f7ff ffd7 	bl	8003ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f005 febd 	bl	8009894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7fd fd0d 	bl	8001538 <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b28:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003b2c:	08009b0c 	.word	0x08009b0c
  ldr r2, =_sbss
 8003b30:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8003b34:	20001058 	.word	0x20001058

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f94f 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f000 f808 	bl	8003b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fca4 	bl	80034bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_InitTick+0x54>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_InitTick+0x58>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f967 	bl	8003e72 <HAL_SYSTICK_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d80a      	bhi.n	8003bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 f92f 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <HAL_InitTick+0x5c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200002cc 	.word	0x200002cc
 8003bd8:	200002d4 	.word	0x200002d4
 8003bdc:	200002d0 	.word	0x200002d0

08003be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x20>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_IncTick+0x24>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_IncTick+0x24>)
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200002d4 	.word	0x200002d4
 8003c04:	20001054 	.word	0x20001054

08003c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_GetTick+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20001054 	.word	0x20001054

08003c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7ff ffee 	bl	8003c08 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d005      	beq.n	8003c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <HAL_Delay+0x44>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c46:	bf00      	nop
 8003c48:	f7ff ffde 	bl	8003c08 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d8f7      	bhi.n	8003c48 <HAL_Delay+0x28>
  {
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200002d4 	.word	0x200002d4

08003c68 <__NVIC_SetPriorityGrouping>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	; (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <__NVIC_EnableIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_SetPriority>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	; (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	; (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f7ff ff8e 	bl	8003d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff29 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e30:	f7ff ff3e 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff ff8e 	bl	8003d5c <NVIC_EncodePriority>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff5d 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff31 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffa2 	bl	8003dc4 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e98:	f7ff feb6 	bl	8003c08 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e099      	b.n	8003fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec8:	e00f      	b.n	8003eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eca:	f7ff fe9d 	bl	8003c08 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d908      	bls.n	8003eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e078      	b.n	8003fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e8      	bne.n	8003eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_DMA_Init+0x158>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0307 	bic.w	r3, r3, #7
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d117      	bne.n	8003fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb0d 	bl	80045b0 <DMA_CheckFifoParam>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003faa:	2301      	movs	r3, #1
 8003fac:	e016      	b.n	8003fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fac4 	bl	8004544 <DMA_CalcBaseAndBitshift>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	223f      	movs	r2, #63	; 0x3f
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	f010803f 	.word	0xf010803f

08003fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_DMA_Start_IT+0x26>
 800400a:	2302      	movs	r3, #2
 800400c:	e040      	b.n	8004090 <HAL_DMA_Start_IT+0xa8>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d12f      	bne.n	8004082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa56 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	223f      	movs	r2, #63	; 0x3f
 8004042:	409a      	lsls	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0216 	orr.w	r2, r2, #22
 8004056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040a6:	f7ff fdaf 	bl	8003c08 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e052      	b.n	8004170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_Abort+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	e013      	b.n	8004144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411c:	f7ff fd74 	bl	8003c08 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b05      	cmp	r3, #5
 8004128:	d90c      	bls.n	8004144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e015      	b.n	8004170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	223f      	movs	r2, #63	; 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00c      	b.n	80041b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c8:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <HAL_DMA_IRQHandler+0x248>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8e      	ldr	r2, [pc, #568]	; (8004408 <HAL_DMA_IRQHandler+0x24c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2208      	movs	r2, #8
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2204      	movs	r2, #4
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2204      	movs	r2, #4
 8004282:	409a      	lsls	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2210      	movs	r2, #16
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d043      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03c      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2210      	movs	r2, #16
 80042b8:	409a      	lsls	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d024      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e01f      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e016      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0208 	bic.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2220      	movs	r2, #32
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 808f 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8087 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b05      	cmp	r3, #5
 8004364:	d136      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x1da>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	223f      	movs	r2, #63	; 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d07e      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
        }
        return;
 80043d2:	e079      	b.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01d      	beq.n	800441e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e02c      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
 8004402:	bf00      	nop
 8004404:	200002cc 	.word	0x200002cc
 8004408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01e      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2b00      	cmp	r3, #0
 8004462:	d032      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d307      	bcc.n	80044a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <HAL_DMA_IRQHandler+0x2cc>
 80044a2:	e000      	b.n	80044a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e000      	b.n	80044ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80044c8:	bf00      	nop
    }
  }
}
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d909      	bls.n	8004586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
 8004584:	e007      	b.n	8004596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	aaaaaaab 	.word	0xaaaaaaab
 80045ac:	08009af4 	.word	0x08009af4

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d856      	bhi.n	800467e <DMA_CheckFifoParam+0xce>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467f 	.word	0x0800467f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d046      	beq.n	8004682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e043      	b.n	8004682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d140      	bne.n	8004686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03d      	b.n	8004686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d837      	bhi.n	800468a <DMA_CheckFifoParam+0xda>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e030      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d025      	beq.n	800468e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e022      	b.n	800468e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01c      	b.n	8004692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d903      	bls.n	8004666 <DMA_CheckFifoParam+0xb6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004664:	e018      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	e015      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e00b      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800467e:	bf00      	nop
 8004680:	e00a      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e008      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e006      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;   
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
    }
  } 
  
  return status; 
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e159      	b.n	8004978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f040 8148 	bne.w	8004972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d005      	beq.n	80046fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d130      	bne.n	800475c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004730:	2201      	movs	r2, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 0201 	and.w	r2, r3, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d017      	beq.n	8004798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d123      	bne.n	80047ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	08da      	lsrs	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3208      	adds	r2, #8
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	08da      	lsrs	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3208      	adds	r2, #8
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0203 	and.w	r2, r3, #3
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a2 	beq.w	8004972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a56      	ldr	r2, [pc, #344]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b54      	ldr	r3, [pc, #336]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484a:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_GPIO_Init+0x2ec>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a49      	ldr	r2, [pc, #292]	; (8004998 <HAL_GPIO_Init+0x2f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x202>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a48      	ldr	r2, [pc, #288]	; (800499c <HAL_GPIO_Init+0x2f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x1fe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a47      	ldr	r2, [pc, #284]	; (80049a0 <HAL_GPIO_Init+0x2f8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x1fa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a46      	ldr	r2, [pc, #280]	; (80049a4 <HAL_GPIO_Init+0x2fc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x1f6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a45      	ldr	r2, [pc, #276]	; (80049a8 <HAL_GPIO_Init+0x300>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x1f2>
 8004896:	2304      	movs	r3, #4
 8004898:	e008      	b.n	80048ac <HAL_GPIO_Init+0x204>
 800489a:	2307      	movs	r3, #7
 800489c:	e006      	b.n	80048ac <HAL_GPIO_Init+0x204>
 800489e:	2303      	movs	r3, #3
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048aa:	2300      	movs	r3, #0
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	0092      	lsls	r2, r2, #2
 80048b4:	4093      	lsls	r3, r2
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048bc:	4935      	ldr	r1, [pc, #212]	; (8004994 <HAL_GPIO_Init+0x2ec>)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ee:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_GPIO_Init+0x304>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_GPIO_Init+0x304>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <HAL_GPIO_Init+0x304>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	f67f aea2 	bls.w	80046c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f806 	bl	8004a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40013c00 	.word	0x40013c00

08004a44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e12b      	b.n	8004cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe fd42 	bl	800350c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f001 fbd2 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a81      	ldr	r2, [pc, #516]	; (8004cd0 <HAL_I2C_Init+0x274>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d807      	bhi.n	8004ae0 <HAL_I2C_Init+0x84>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a80      	ldr	r2, [pc, #512]	; (8004cd4 <HAL_I2C_Init+0x278>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	bf94      	ite	ls
 8004ad8:	2301      	movls	r3, #1
 8004ada:	2300      	movhi	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e006      	b.n	8004aee <HAL_I2C_Init+0x92>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <HAL_I2C_Init+0x27c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf94      	ite	ls
 8004ae8:	2301      	movls	r3, #1
 8004aea:	2300      	movhi	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0e7      	b.n	8004cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a78      	ldr	r2, [pc, #480]	; (8004cdc <HAL_I2C_Init+0x280>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0c9b      	lsrs	r3, r3, #18
 8004b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a6a      	ldr	r2, [pc, #424]	; (8004cd0 <HAL_I2C_Init+0x274>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d802      	bhi.n	8004b30 <HAL_I2C_Init+0xd4>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	e009      	b.n	8004b44 <HAL_I2C_Init+0xe8>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	4a69      	ldr	r2, [pc, #420]	; (8004ce0 <HAL_I2C_Init+0x284>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	3301      	adds	r3, #1
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	495c      	ldr	r1, [pc, #368]	; (8004cd0 <HAL_I2C_Init+0x274>)
 8004b60:	428b      	cmp	r3, r1
 8004b62:	d819      	bhi.n	8004b98 <HAL_I2C_Init+0x13c>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1e59      	subs	r1, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b78:	400b      	ands	r3, r1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_I2C_Init+0x138>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1e59      	subs	r1, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	e051      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004b94:	2304      	movs	r3, #4
 8004b96:	e04f      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d111      	bne.n	8004bc4 <HAL_I2C_Init+0x168>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1e58      	subs	r0, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	440b      	add	r3, r1
 8004bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e012      	b.n	8004bea <HAL_I2C_Init+0x18e>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1e58      	subs	r0, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	0099      	lsls	r1, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Init+0x196>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e022      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10e      	bne.n	8004c18 <HAL_I2C_Init+0x1bc>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1e58      	subs	r0, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	440b      	add	r3, r1
 8004c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	0099      	lsls	r1, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	6809      	ldr	r1, [r1, #0]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6911      	ldr	r1, [r2, #16]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68d2      	ldr	r2, [r2, #12]
 8004c72:	4311      	orrs	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	000186a0 	.word	0x000186a0
 8004cd4:	001e847f 	.word	0x001e847f
 8004cd8:	003d08ff 	.word	0x003d08ff
 8004cdc:	431bde83 	.word	0x431bde83
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	817b      	strh	r3, [r7, #10]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf8:	f7fe ff86 	bl	8003c08 <HAL_GetTick>
 8004cfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	f040 80e0 	bne.w	8004ecc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2319      	movs	r3, #25
 8004d12:	2201      	movs	r2, #1
 8004d14:	4970      	ldr	r1, [pc, #448]	; (8004ed8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fc58 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0d3      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2C_Master_Transmit+0x50>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e0cc      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d007      	beq.n	8004d5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2221      	movs	r2, #33	; 0x21
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2210      	movs	r2, #16
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	893a      	ldrh	r2, [r7, #8]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a50      	ldr	r2, [pc, #320]	; (8004edc <HAL_I2C_Master_Transmit+0x1f8>)
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d9c:	8979      	ldrh	r1, [r7, #10]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fac2 	bl	800532c <I2C_MasterRequestWrite>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e08d      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dc8:	e066      	b.n	8004e98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	6a39      	ldr	r1, [r7, #32]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fcd2 	bl	8005778 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d107      	bne.n	8004df2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06b      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d11b      	bne.n	8004e6c <HAL_I2C_Master_Transmit+0x188>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d017      	beq.n	8004e6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	6a39      	ldr	r1, [r7, #32]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fcc2 	bl	80057fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d107      	bne.n	8004e94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e01a      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d194      	bne.n	8004dca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	00100002 	.word	0x00100002
 8004edc:	ffff0000 	.word	0xffff0000

08004ee0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7fe fe88 	bl	8003c08 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 820b 	bne.w	800531e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	497c      	ldr	r1, [pc, #496]	; (8005104 <HAL_I2C_Master_Receive+0x224>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fb5a 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e1fe      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2C_Master_Receive+0x50>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e1f7      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d007      	beq.n	8004f56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2222      	movs	r2, #34	; 0x22
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2210      	movs	r2, #16
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_I2C_Master_Receive+0x228>)
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa46 	bl	8005430 <I2C_MasterRequestRead>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1b8      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e18c      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e16c      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	e14c      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005084:	e138      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 80f1 	bhi.w	8005272 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d123      	bne.n	80050e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fbed 	bl	800587c <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e139      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050de:	e10b      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d14e      	bne.n	8005186 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	2200      	movs	r2, #0
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <HAL_I2C_Master_Receive+0x22c>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fa6a 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e10e      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
 8005102:	bf00      	nop
 8005104:	00100002 	.word	0x00100002
 8005108:	ffff0000 	.word	0xffff0000
 800510c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005184:	e0b8      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2200      	movs	r2, #0
 800518e:	4966      	ldr	r1, [pc, #408]	; (8005328 <HAL_I2C_Master_Receive+0x448>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fa1b 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0bf      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2200      	movs	r2, #0
 80051ea:	494f      	ldr	r1, [pc, #316]	; (8005328 <HAL_I2C_Master_Receive+0x448>)
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f9ed 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e091      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005270:	e042      	b.n	80052f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fb00 	bl	800587c <I2C_WaitOnRXNEFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e04c      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d118      	bne.n	80052f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f aec2 	bne.w	8005086 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	00010004 	.word	0x00010004

0800532c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	460b      	mov	r3, r1
 800533a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d006      	beq.n	8005356 <I2C_MasterRequestWrite+0x2a>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d003      	beq.n	8005356 <I2C_MasterRequestWrite+0x2a>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005354:	d108      	bne.n	8005368 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e00b      	b.n	8005380 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	2b12      	cmp	r3, #18
 800536e:	d107      	bne.n	8005380 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f91d 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a6:	d103      	bne.n	80053b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e035      	b.n	8005420 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053bc:	d108      	bne.n	80053d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	e01b      	b.n	8005408 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053d0:	897b      	ldrh	r3, [r7, #10]
 80053d2:	11db      	asrs	r3, r3, #7
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f063 030f 	orn	r3, r3, #15
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	490e      	ldr	r1, [pc, #56]	; (8005428 <I2C_MasterRequestWrite+0xfc>)
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f943 	bl	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e010      	b.n	8005420 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053fe:	897b      	ldrh	r3, [r7, #10]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4907      	ldr	r1, [pc, #28]	; (800542c <I2C_MasterRequestWrite+0x100>)
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f933 	bl	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	00010008 	.word	0x00010008
 800542c:	00010002 	.word	0x00010002

08005430 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005454:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d006      	beq.n	800546a <I2C_MasterRequestRead+0x3a>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d003      	beq.n	800546a <I2C_MasterRequestRead+0x3a>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005468:	d108      	bne.n	800547c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e00b      	b.n	8005494 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	2b11      	cmp	r3, #17
 8005482:	d107      	bne.n	8005494 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f893 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	d103      	bne.n	80054c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e079      	b.n	80055bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d108      	bne.n	80054e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]
 80054e2:	e05f      	b.n	80055a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	11db      	asrs	r3, r3, #7
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f063 030f 	orn	r3, r3, #15
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4930      	ldr	r1, [pc, #192]	; (80055c4 <I2C_MasterRequestRead+0x194>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f8b9 	bl	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e054      	b.n	80055bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4929      	ldr	r1, [pc, #164]	; (80055c8 <I2C_MasterRequestRead+0x198>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f8a9 	bl	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e044      	b.n	80055bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005556:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f831 	bl	80055cc <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00d      	beq.n	800558c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557e:	d103      	bne.n	8005588 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e017      	b.n	80055bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800558c:	897b      	ldrh	r3, [r7, #10]
 800558e:	11db      	asrs	r3, r3, #7
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0306 	and.w	r3, r3, #6
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f063 030e 	orn	r3, r3, #14
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4907      	ldr	r1, [pc, #28]	; (80055c8 <I2C_MasterRequestRead+0x198>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f865 	bl	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	00010008 	.word	0x00010008
 80055c8:	00010002 	.word	0x00010002

080055cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055dc:	e025      	b.n	800562a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d021      	beq.n	800562a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e6:	f7fe fb0f 	bl	8003c08 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d116      	bne.n	800562a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e023      	b.n	8005672 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10d      	bne.n	8005650 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	43da      	mvns	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf0c      	ite	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	2300      	movne	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	e00c      	b.n	800566a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	43da      	mvns	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	429a      	cmp	r2, r3
 800566e:	d0b6      	beq.n	80055de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005688:	e051      	b.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005698:	d123      	bne.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e046      	b.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d021      	beq.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fe fa8d 	bl	8003c08 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e020      	b.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10c      	bne.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e00b      	b.n	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	43da      	mvns	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d18d      	bne.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005784:	e02d      	b.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f8ce 	bl	8005928 <I2C_IsAcknowledgeFailed>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02d      	b.n	80057f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d021      	beq.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fe fa33 	bl	8003c08 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d116      	bne.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0220 	orr.w	r2, r3, #32
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e007      	b.n	80057f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b80      	cmp	r3, #128	; 0x80
 80057ee:	d1ca      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005806:	e02d      	b.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f88d 	bl	8005928 <I2C_IsAcknowledgeFailed>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e02d      	b.n	8005874 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d021      	beq.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005820:	f7fe f9f2 	bl	8003c08 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d302      	bcc.n	8005836 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d116      	bne.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e007      	b.n	8005874 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b04      	cmp	r3, #4
 8005870:	d1ca      	bne.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005888:	e042      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b10      	cmp	r3, #16
 8005896:	d119      	bne.n	80058cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e029      	b.n	8005920 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058cc:	f7fe f99c 	bl	8003c08 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e007      	b.n	8005920 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	d1b5      	bne.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d11b      	bne.n	8005978 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005948:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	f043 0204 	orr.w	r2, r3, #4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e267      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d075      	beq.n	8005a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059a6:	4b88      	ldr	r3, [pc, #544]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d00c      	beq.n	80059cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b2:	4b85      	ldr	r3, [pc, #532]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d112      	bne.n	80059e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059be:	4b82      	ldr	r3, [pc, #520]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d05b      	beq.n	8005a90 <HAL_RCC_OscConfig+0x108>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d157      	bne.n	8005a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e242      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x74>
 80059ee:	4b76      	ldr	r3, [pc, #472]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a75      	ldr	r2, [pc, #468]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e01d      	b.n	8005a38 <HAL_RCC_OscConfig+0xb0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x98>
 8005a06:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a6f      	ldr	r2, [pc, #444]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6c      	ldr	r2, [pc, #432]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e00b      	b.n	8005a38 <HAL_RCC_OscConfig+0xb0>
 8005a20:	4b69      	ldr	r3, [pc, #420]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a68      	ldr	r2, [pc, #416]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a65      	ldr	r2, [pc, #404]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a40:	f7fe f8e2 	bl	8003c08 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fe f8de 	bl	8003c08 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e207      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0xc0>
 8005a66:	e014      	b.n	8005a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe f8ce 	bl	8003c08 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a70:	f7fe f8ca 	bl	8003c08 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b64      	cmp	r3, #100	; 0x64
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e1f3      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0xe8>
 8005a8e:	e000      	b.n	8005a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d063      	beq.n	8005b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d11c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab6:	4b44      	ldr	r3, [pc, #272]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d116      	bne.n	8005af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac2:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_RCC_OscConfig+0x152>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d001      	beq.n	8005ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e1c7      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4937      	ldr	r1, [pc, #220]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aee:	e03a      	b.n	8005b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d020      	beq.n	8005b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af8:	4b34      	ldr	r3, [pc, #208]	; (8005bcc <HAL_RCC_OscConfig+0x244>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fe f883 	bl	8003c08 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b06:	f7fe f87f 	bl	8003c08 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e1a8      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0f0      	beq.n	8005b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b24:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4925      	ldr	r1, [pc, #148]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
 8005b38:	e015      	b.n	8005b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <HAL_RCC_OscConfig+0x244>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fe f862 	bl	8003c08 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b48:	f7fe f85e 	bl	8003c08 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e187      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d036      	beq.n	8005be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d016      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_RCC_OscConfig+0x248>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b80:	f7fe f842 	bl	8003c08 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b88:	f7fe f83e 	bl	8003c08 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e167      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0x200>
 8005ba6:	e01b      	b.n	8005be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_OscConfig+0x248>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bae:	f7fe f82b 	bl	8003c08 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb4:	e00e      	b.n	8005bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb6:	f7fe f827 	bl	8003c08 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d907      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e150      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	42470000 	.word	0x42470000
 8005bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd4:	4b88      	ldr	r3, [pc, #544]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ea      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8097 	beq.w	8005d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf2:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10f      	bne.n	8005c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	4b7d      	ldr	r3, [pc, #500]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	4a7c      	ldr	r2, [pc, #496]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0e:	4b7a      	ldr	r3, [pc, #488]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1e:	4b77      	ldr	r3, [pc, #476]	; (8005dfc <HAL_RCC_OscConfig+0x474>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d118      	bne.n	8005c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2a:	4b74      	ldr	r3, [pc, #464]	; (8005dfc <HAL_RCC_OscConfig+0x474>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a73      	ldr	r2, [pc, #460]	; (8005dfc <HAL_RCC_OscConfig+0x474>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c36:	f7fd ffe7 	bl	8003c08 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3e:	f7fd ffe3 	bl	8003c08 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e10c      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <HAL_RCC_OscConfig+0x474>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d106      	bne.n	8005c72 <HAL_RCC_OscConfig+0x2ea>
 8005c64:	4b64      	ldr	r3, [pc, #400]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	4a63      	ldr	r2, [pc, #396]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c70:	e01c      	b.n	8005cac <HAL_RCC_OscConfig+0x324>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d10c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x30c>
 8005c7a:	4b5f      	ldr	r3, [pc, #380]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a5e      	ldr	r2, [pc, #376]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c80:	f043 0304 	orr.w	r3, r3, #4
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70
 8005c86:	4b5c      	ldr	r3, [pc, #368]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	4a5b      	ldr	r2, [pc, #364]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70
 8005c92:	e00b      	b.n	8005cac <HAL_RCC_OscConfig+0x324>
 8005c94:	4b58      	ldr	r3, [pc, #352]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a57      	ldr	r2, [pc, #348]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca0:	4b55      	ldr	r3, [pc, #340]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	4a54      	ldr	r2, [pc, #336]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f023 0304 	bic.w	r3, r3, #4
 8005caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d015      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fd ffa8 	bl	8003c08 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fd ffa4 	bl	8003c08 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0cb      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd2:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ee      	beq.n	8005cbc <HAL_RCC_OscConfig+0x334>
 8005cde:	e014      	b.n	8005d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce0:	f7fd ff92 	bl	8003c08 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce8:	f7fd ff8e 	bl	8003c08 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e0b5      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfe:	4b3e      	ldr	r3, [pc, #248]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ee      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d10:	4b39      	ldr	r3, [pc, #228]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	4a38      	ldr	r2, [pc, #224]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a1 	beq.w	8005e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d26:	4b34      	ldr	r3, [pc, #208]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d05c      	beq.n	8005dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d141      	bne.n	8005dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <HAL_RCC_OscConfig+0x478>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fd ff62 	bl	8003c08 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fd ff5e 	bl	8003c08 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e087      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	041b      	lsls	r3, r3, #16
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	061b      	lsls	r3, r3, #24
 8005d8a:	491b      	ldr	r1, [pc, #108]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x478>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d96:	f7fd ff37 	bl	8003c08 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9e:	f7fd ff33 	bl	8003c08 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e05c      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db0:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x416>
 8005dbc:	e054      	b.n	8005e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <HAL_RCC_OscConfig+0x478>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fd ff20 	bl	8003c08 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dcc:	f7fd ff1c 	bl	8003c08 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e045      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_RCC_OscConfig+0x470>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x444>
 8005dea:	e03d      	b.n	8005e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e038      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40007000 	.word	0x40007000
 8005e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <HAL_RCC_OscConfig+0x4ec>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d028      	beq.n	8005e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d121      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d11a      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e34:	4013      	ands	r3, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d111      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d107      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800

08005e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0cc      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e8c:	4b68      	ldr	r3, [pc, #416]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d90c      	bls.n	8005eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9a:	4b65      	ldr	r3, [pc, #404]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b63      	ldr	r3, [pc, #396]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0b8      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d020      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ecc:	4b59      	ldr	r3, [pc, #356]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a58      	ldr	r2, [pc, #352]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ee4:	4b53      	ldr	r3, [pc, #332]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a52      	ldr	r2, [pc, #328]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	494d      	ldr	r1, [pc, #308]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d044      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d119      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e07f      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d107      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e06f      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f46:	4b3b      	ldr	r3, [pc, #236]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e067      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f56:	4b37      	ldr	r3, [pc, #220]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f023 0203 	bic.w	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4934      	ldr	r1, [pc, #208]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f68:	f7fd fe4e 	bl	8003c08 <HAL_GetTick>
 8005f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f70:	f7fd fe4a 	bl	8003c08 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e04f      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 020c 	and.w	r2, r3, #12
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d1eb      	bne.n	8005f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d20c      	bcs.n	8005fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b22      	ldr	r3, [pc, #136]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fae:	4b20      	ldr	r3, [pc, #128]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e032      	b.n	8006026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4916      	ldr	r1, [pc, #88]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	490e      	ldr	r1, [pc, #56]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ffe:	f000 f821 	bl	8006044 <HAL_RCC_GetSysClockFreq>
 8006002:	4602      	mov	r2, r0
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	490a      	ldr	r1, [pc, #40]	; (8006038 <HAL_RCC_ClockConfig+0x1c0>)
 8006010:	5ccb      	ldrb	r3, [r1, r3]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <HAL_RCC_ClockConfig+0x1c8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f7fd fdae 	bl	8003b80 <HAL_InitTick>

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023c00 	.word	0x40023c00
 8006034:	40023800 	.word	0x40023800
 8006038:	08009adc 	.word	0x08009adc
 800603c:	200002cc 	.word	0x200002cc
 8006040:	200002d0 	.word	0x200002d0

08006044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006048:	b094      	sub	sp, #80	; 0x50
 800604a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	647b      	str	r3, [r7, #68]	; 0x44
 8006050:	2300      	movs	r3, #0
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	2300      	movs	r3, #0
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800605c:	4b79      	ldr	r3, [pc, #484]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 030c 	and.w	r3, r3, #12
 8006064:	2b08      	cmp	r3, #8
 8006066:	d00d      	beq.n	8006084 <HAL_RCC_GetSysClockFreq+0x40>
 8006068:	2b08      	cmp	r3, #8
 800606a:	f200 80e1 	bhi.w	8006230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_RCC_GetSysClockFreq+0x34>
 8006072:	2b04      	cmp	r3, #4
 8006074:	d003      	beq.n	800607e <HAL_RCC_GetSysClockFreq+0x3a>
 8006076:	e0db      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006078:	4b73      	ldr	r3, [pc, #460]	; (8006248 <HAL_RCC_GetSysClockFreq+0x204>)
 800607a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800607c:	e0db      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800607e:	4b73      	ldr	r3, [pc, #460]	; (800624c <HAL_RCC_GetSysClockFreq+0x208>)
 8006080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006082:	e0d8      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006084:	4b6f      	ldr	r3, [pc, #444]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800608e:	4b6d      	ldr	r3, [pc, #436]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d063      	beq.n	8006162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609a:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	099b      	lsrs	r3, r3, #6
 80060a0:	2200      	movs	r2, #0
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
 80060ae:	2300      	movs	r3, #0
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	f04f 0000 	mov.w	r0, #0
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	0159      	lsls	r1, r3, #5
 80060c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060c8:	0150      	lsls	r0, r2, #5
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4621      	mov	r1, r4
 80060d0:	1a51      	subs	r1, r2, r1
 80060d2:	6139      	str	r1, [r7, #16]
 80060d4:	4629      	mov	r1, r5
 80060d6:	eb63 0301 	sbc.w	r3, r3, r1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e8:	4659      	mov	r1, fp
 80060ea:	018b      	lsls	r3, r1, #6
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060f2:	4651      	mov	r1, sl
 80060f4:	018a      	lsls	r2, r1, #6
 80060f6:	4651      	mov	r1, sl
 80060f8:	ebb2 0801 	subs.w	r8, r2, r1
 80060fc:	4659      	mov	r1, fp
 80060fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800610e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006116:	4690      	mov	r8, r2
 8006118:	4699      	mov	r9, r3
 800611a:	4623      	mov	r3, r4
 800611c:	eb18 0303 	adds.w	r3, r8, r3
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	462b      	mov	r3, r5
 8006124:	eb49 0303 	adc.w	r3, r9, r3
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006136:	4629      	mov	r1, r5
 8006138:	024b      	lsls	r3, r1, #9
 800613a:	4621      	mov	r1, r4
 800613c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006140:	4621      	mov	r1, r4
 8006142:	024a      	lsls	r2, r1, #9
 8006144:	4610      	mov	r0, r2
 8006146:	4619      	mov	r1, r3
 8006148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614a:	2200      	movs	r2, #0
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 800614e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006154:	f7fa fcfc 	bl	8000b50 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4613      	mov	r3, r2
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	e058      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006162:	4b38      	ldr	r3, [pc, #224]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	2200      	movs	r2, #0
 800616a:	4618      	mov	r0, r3
 800616c:	4611      	mov	r1, r2
 800616e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	2300      	movs	r3, #0
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
 8006178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	f04f 0000 	mov.w	r0, #0
 8006184:	f04f 0100 	mov.w	r1, #0
 8006188:	0159      	lsls	r1, r3, #5
 800618a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800618e:	0150      	lsls	r0, r2, #5
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4641      	mov	r1, r8
 8006196:	ebb2 0a01 	subs.w	sl, r2, r1
 800619a:	4649      	mov	r1, r9
 800619c:	eb63 0b01 	sbc.w	fp, r3, r1
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061b4:	ebb2 040a 	subs.w	r4, r2, sl
 80061b8:	eb63 050b 	sbc.w	r5, r3, fp
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	00eb      	lsls	r3, r5, #3
 80061c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ca:	00e2      	lsls	r2, r4, #3
 80061cc:	4614      	mov	r4, r2
 80061ce:	461d      	mov	r5, r3
 80061d0:	4643      	mov	r3, r8
 80061d2:	18e3      	adds	r3, r4, r3
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	464b      	mov	r3, r9
 80061d8:	eb45 0303 	adc.w	r3, r5, r3
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ea:	4629      	mov	r1, r5
 80061ec:	028b      	lsls	r3, r1, #10
 80061ee:	4621      	mov	r1, r4
 80061f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061f4:	4621      	mov	r1, r4
 80061f6:	028a      	lsls	r2, r1, #10
 80061f8:	4610      	mov	r0, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fe:	2200      	movs	r2, #0
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	61fa      	str	r2, [r7, #28]
 8006204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006208:	f7fa fca2 	bl	8000b50 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_GetSysClockFreq+0x200>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	3301      	adds	r3, #1
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800622e:	e002      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_RCC_GetSysClockFreq+0x204>)
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006238:	4618      	mov	r0, r3
 800623a:	3750      	adds	r7, #80	; 0x50
 800623c:	46bd      	mov	sp, r7
 800623e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	00f42400 	.word	0x00f42400
 800624c:	007a1200 	.word	0x007a1200

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_GetHCLKFreq+0x14>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	200002cc 	.word	0x200002cc

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800626c:	f7ff fff0 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0a9b      	lsrs	r3, r3, #10
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	08009aec 	.word	0x08009aec

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff ffdc 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0b5b      	lsrs	r3, r3, #13
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4903      	ldr	r1, [pc, #12]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	08009aec 	.word	0x08009aec

080062b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e07b      	b.n	80063c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d108      	bne.n	80062e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062da:	d009      	beq.n	80062f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	61da      	str	r2, [r3, #28]
 80062e2:	e005      	b.n	80062f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fd f958 	bl	80035c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	ea42 0103 	orr.w	r1, r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	f003 0104 	and.w	r1, r3, #4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0210 	and.w	r2, r3, #16
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08c      	sub	sp, #48	; 0x30
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063d8:	2301      	movs	r3, #1
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x26>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e18a      	b.n	8006706 <HAL_SPI_TransmitReceive+0x33c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063f8:	f7fd fc06 	bl	8003c08 <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800640e:	887b      	ldrh	r3, [r7, #2]
 8006410:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00f      	beq.n	800643a <HAL_SPI_TransmitReceive+0x70>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006420:	d107      	bne.n	8006432 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d103      	bne.n	8006432 <HAL_SPI_TransmitReceive+0x68>
 800642a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800642e:	2b04      	cmp	r3, #4
 8006430:	d003      	beq.n	800643a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006432:	2302      	movs	r3, #2
 8006434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006438:	e15b      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_SPI_TransmitReceive+0x82>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_SPI_TransmitReceive+0x82>
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006452:	e14e      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b04      	cmp	r3, #4
 800645e:	d003      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2205      	movs	r2, #5
 8006464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	887a      	ldrh	r2, [r7, #2]
 8006478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	887a      	ldrh	r2, [r7, #2]
 800647e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d007      	beq.n	80064bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c4:	d178      	bne.n	80065b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <HAL_SPI_TransmitReceive+0x10a>
 80064ce:	8b7b      	ldrh	r3, [r7, #26]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d166      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064f8:	e053      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d11b      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x176>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d016      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x176>
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d113      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d119      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x1b8>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d014      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	b292      	uxth	r2, r2
 8006564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800657e:	2301      	movs	r3, #1
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006582:	f7fd fb41 	bl	8003c08 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658e:	429a      	cmp	r2, r3
 8006590:	d807      	bhi.n	80065a2 <HAL_SPI_TransmitReceive+0x1d8>
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d003      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065a0:	e0a7      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1a6      	bne.n	80064fa <HAL_SPI_TransmitReceive+0x130>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1a1      	bne.n	80064fa <HAL_SPI_TransmitReceive+0x130>
 80065b6:	e07c      	b.n	80066b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x1fc>
 80065c0:	8b7b      	ldrh	r3, [r7, #26]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d16b      	bne.n	800669e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	330c      	adds	r3, #12
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ec:	e057      	b.n	800669e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d11c      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x26c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d017      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x26c>
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d114      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	7812      	ldrb	r2, [r2, #0]
 8006618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d119      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x2ae>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d014      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006674:	2301      	movs	r3, #1
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006678:	f7fd fac6 	bl	8003c08 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006684:	429a      	cmp	r2, r3
 8006686:	d803      	bhi.n	8006690 <HAL_SPI_TransmitReceive+0x2c6>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d102      	bne.n	8006696 <HAL_SPI_TransmitReceive+0x2cc>
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800669c:	e029      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1a2      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x224>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d19d      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f8b2 	bl	8006820 <SPI_EndRxTxTransaction>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d006      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066ce:	e010      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	e000      	b.n	80066f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80066f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006706:	4618      	mov	r0, r3
 8006708:	3730      	adds	r7, #48	; 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006720:	f7fd fa72 	bl	8003c08 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	4413      	add	r3, r2
 800672e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006730:	f7fd fa6a 	bl	8003c08 <HAL_GetTick>
 8006734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	015b      	lsls	r3, r3, #5
 800673c:	0d1b      	lsrs	r3, r3, #20
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	e054      	b.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d050      	beq.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006750:	f7fd fa5a 	bl	8003c08 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	429a      	cmp	r2, r3
 800675e:	d902      	bls.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d13d      	bne.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677e:	d111      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d004      	beq.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006792:	d107      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d10f      	bne.n	80067ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e017      	b.n	8006812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d19b      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200002cc 	.word	0x200002cc

08006820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800682c:	4b1b      	ldr	r3, [pc, #108]	; (800689c <SPI_EndRxTxTransaction+0x7c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <SPI_EndRxTxTransaction+0x80>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	0d5b      	lsrs	r3, r3, #21
 8006838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800683c:	fb02 f303 	mul.w	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684a:	d112      	bne.n	8006872 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff5a 	bl	8006710 <SPI_WaitFlagStateUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e00f      	b.n	8006892 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3b01      	subs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d0f2      	beq.n	8006872 <SPI_EndRxTxTransaction+0x52>
 800688c:	e000      	b.n	8006890 <SPI_EndRxTxTransaction+0x70>
        break;
 800688e:	bf00      	nop
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	200002cc 	.word	0x200002cc
 80068a0:	165e9f81 	.word	0x165e9f81

080068a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e04c      	b.n	8006950 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d111      	bne.n	80068e6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fc0c 	bl	80080e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <HAL_TIM_Base_Init+0xb4>)
 80068dc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f001 f929 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	08003651 	.word	0x08003651

0800695c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	d001      	beq.n	8006974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e03c      	b.n	80069ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <HAL_TIM_Base_Start+0xa0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_TIM_Base_Start+0x5c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698e:	d013      	beq.n	80069b8 <HAL_TIM_Base_Start+0x5c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <HAL_TIM_Base_Start+0xa4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00e      	beq.n	80069b8 <HAL_TIM_Base_Start+0x5c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <HAL_TIM_Base_Start+0xa8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_TIM_Base_Start+0x5c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <HAL_TIM_Base_Start+0xac>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_Base_Start+0x5c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <HAL_TIM_Base_Start+0xb0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d111      	bne.n	80069dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b06      	cmp	r3, #6
 80069c8:	d010      	beq.n	80069ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069da:	e007      	b.n	80069ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40014000 	.word	0x40014000

08006a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e044      	b.n	8006ab2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d018      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x6c>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d013      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x6c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x6c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x6c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_TIM_Base_Start_IT+0xbc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x6c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d111      	bne.n	8006aa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b06      	cmp	r3, #6
 8006a8c:	d010      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e007      	b.n	8006ab0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40014000 	.word	0x40014000

08006ad4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e04c      	b.n	8006b80 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d111      	bne.n	8006b16 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 faf4 	bl	80080e8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <HAL_TIM_OC_Init+0xb4>)
 8006b0c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f001 f811 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	08006b8d 	.word	0x08006b8d

08006b8c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e04c      	b.n	8006c4c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d111      	bne.n	8006be2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fa8e 	bl	80080e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <HAL_TIM_PWM_Init+0xb4>)
 8006bd8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 ffab 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08006c59 	.word	0x08006c59

08006c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x24>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e022      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x3e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e015      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x58>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e008      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e068      	b.n	8006db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0x82>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cec:	e013      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0x92>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfc:	e00b      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	e003      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f9bc 	bl	800809c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <HAL_TIM_PWM_Start+0x14c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d107      	bne.n	8006d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_TIM_PWM_Start+0x14c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d50:	d013      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_TIM_PWM_Start+0x150>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_TIM_PWM_Start+0x154>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_TIM_PWM_Start+0x158>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <HAL_TIM_PWM_Start+0x15c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b06      	cmp	r3, #6
 8006d8a:	d010      	beq.n	8006dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	e007      	b.n	8006dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0201 	orr.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40014000 	.word	0x40014000

08006dcc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e04c      	b.n	8006e7a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d111      	bne.n	8006e10 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f977 	bl	80080e8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <HAL_TIM_OnePulse_Init+0xb8>)
 8006e06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f000 fe94 	bl	8007b50 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0208 	bic.w	r2, r2, #8
 8006e36:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	08006e89 	.word	0x08006e89

08006e88 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ebc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ec4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d108      	bne.n	8006ede <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed2:	7b7b      	ldrb	r3, [r7, #13]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ed8:	7b3b      	ldrb	r3, [r7, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e03b      	b.n	8006f5a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0202 	orr.w	r2, r2, #2
 8006f10:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0204 	orr.w	r2, r2, #4
 8006f20:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2201      	movs	r2, #1
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f8b6 	bl	800809c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2201      	movs	r2, #1
 8006f36:	2104      	movs	r1, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f8af 	bl	800809c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a08      	ldr	r2, [pc, #32]	; (8006f64 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d107      	bne.n	8006f58 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40010000 	.word	0x40010000

08006f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0a2      	b.n	80070c2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d111      	bne.n	8006fac <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f8a9 	bl	80080e8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a4a      	ldr	r2, [pc, #296]	; (80070cc <HAL_TIM_Encoder_Init+0x164>)
 8006fa2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 fdbc 	bl	8007b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	4313      	orrs	r3, r2
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800702a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	4313      	orrs	r3, r2
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	011a      	lsls	r2, r3, #4
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	4313      	orrs	r3, r2
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800705c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007064:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4313      	orrs	r3, r2
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	08003755 	.word	0x08003755

080070d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d110      	bne.n	8007122 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d102      	bne.n	800710c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e069      	b.n	80071e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007120:	e031      	b.n	8007186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d110      	bne.n	800714a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d102      	bne.n	8007134 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800712e:	7b3b      	ldrb	r3, [r7, #12]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d001      	beq.n	8007138 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e055      	b.n	80071e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007148:	e01d      	b.n	8007186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d108      	bne.n	8007162 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007156:	7b7b      	ldrb	r3, [r7, #13]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d102      	bne.n	8007162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800715c:	7b3b      	ldrb	r3, [r7, #12]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d001      	beq.n	8007166 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e03e      	b.n	80071e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_TIM_Encoder_Start+0xc4>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d008      	beq.n	80071a4 <HAL_TIM_Encoder_Start+0xd4>
 8007192:	e00f      	b.n	80071b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f000 ff7d 	bl	800809c <TIM_CCxChannelCmd>
      break;
 80071a2:	e016      	b.n	80071d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2201      	movs	r2, #1
 80071aa:	2104      	movs	r1, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 ff75 	bl	800809c <TIM_CCxChannelCmd>
      break;
 80071b2:	e00e      	b.n	80071d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 ff6d 	bl	800809c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2201      	movs	r2, #1
 80071c8:	2104      	movs	r1, #4
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 ff66 	bl	800809c <TIM_CCxChannelCmd>
      break;
 80071d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d128      	bne.n	8007254 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b02      	cmp	r3, #2
 800720e:	d121      	bne.n	8007254 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0202 	mvn.w	r2, #2
 8007218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e009      	b.n	800724e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b04      	cmp	r3, #4
 8007260:	d128      	bne.n	80072b4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b04      	cmp	r3, #4
 800726e:	d121      	bne.n	80072b4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0204 	mvn.w	r2, #4
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e009      	b.n	80072ae <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d128      	bne.n	8007314 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d121      	bne.n	8007314 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0208 	mvn.w	r2, #8
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
 80072f8:	e009      	b.n	800730e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b10      	cmp	r3, #16
 8007320:	d128      	bne.n	8007374 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b10      	cmp	r3, #16
 800732e:	d121      	bne.n	8007374 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0210 	mvn.w	r2, #16
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2208      	movs	r2, #8
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	e009      	b.n	800736e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b01      	cmp	r3, #1
 8007380:	d110      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d109      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0201 	mvn.w	r2, #1
 8007398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	2b80      	cmp	r3, #128	; 0x80
 80073b0:	d110      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073bc:	2b80      	cmp	r3, #128	; 0x80
 80073be:	d109      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d110      	bne.n	8007404 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d109      	bne.n	8007404 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b20      	cmp	r3, #32
 8007410:	d110      	bne.n	8007434 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b20      	cmp	r3, #32
 800741e:	d109      	bne.n	8007434 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0220 	mvn.w	r2, #32
 8007428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007456:	2302      	movs	r3, #2
 8007458:	e048      	b.n	80074ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b0c      	cmp	r3, #12
 8007466:	d839      	bhi.n	80074dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_TIM_OC_ConfigChannel+0x34>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074a5 	.word	0x080074a5
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074dd 	.word	0x080074dd
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074dd 	.word	0x080074dd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074c1 	.word	0x080074c1
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074dd 	.word	0x080074dd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074cf 	.word	0x080074cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fbd0 	bl	8007c50 <TIM_OC1_SetConfig>
      break;
 80074b0:	e017      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fc2f 	bl	8007d1c <TIM_OC2_SetConfig>
      break;
 80074be:	e010      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc94 	bl	8007df4 <TIM_OC3_SetConfig>
      break;
 80074cc:	e009      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fcf7 	bl	8007ec8 <TIM_OC4_SetConfig>
      break;
 80074da:	e002      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
      break;
 80074e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800750e:	2302      	movs	r3, #2
 8007510:	e0ae      	b.n	8007670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b0c      	cmp	r3, #12
 800751e:	f200 809f 	bhi.w	8007660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800755d 	.word	0x0800755d
 800752c:	08007661 	.word	0x08007661
 8007530:	08007661 	.word	0x08007661
 8007534:	08007661 	.word	0x08007661
 8007538:	0800759d 	.word	0x0800759d
 800753c:	08007661 	.word	0x08007661
 8007540:	08007661 	.word	0x08007661
 8007544:	08007661 	.word	0x08007661
 8007548:	080075df 	.word	0x080075df
 800754c:	08007661 	.word	0x08007661
 8007550:	08007661 	.word	0x08007661
 8007554:	08007661 	.word	0x08007661
 8007558:	0800761f 	.word	0x0800761f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fb74 	bl	8007c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6999      	ldr	r1, [r3, #24]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	619a      	str	r2, [r3, #24]
      break;
 800759a:	e064      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fbba 	bl	8007d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	619a      	str	r2, [r3, #24]
      break;
 80075dc:	e043      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fc05 	bl	8007df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0208 	orr.w	r2, r2, #8
 80075f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69d9      	ldr	r1, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e023      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fc4f 	bl	8007ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	021a      	lsls	r2, r3, #8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
      break;
 800765e:	e002      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_TIM_ConfigClockSource+0x1c>
 8007690:	2302      	movs	r3, #2
 8007692:	e0b4      	b.n	80077fe <HAL_TIM_ConfigClockSource+0x186>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076cc:	d03e      	beq.n	800774c <HAL_TIM_ConfigClockSource+0xd4>
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	f200 8087 	bhi.w	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	f000 8086 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x172>
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e2:	d87f      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076e4:	2b70      	cmp	r3, #112	; 0x70
 80076e6:	d01a      	beq.n	800771e <HAL_TIM_ConfigClockSource+0xa6>
 80076e8:	2b70      	cmp	r3, #112	; 0x70
 80076ea:	d87b      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076ec:	2b60      	cmp	r3, #96	; 0x60
 80076ee:	d050      	beq.n	8007792 <HAL_TIM_ConfigClockSource+0x11a>
 80076f0:	2b60      	cmp	r3, #96	; 0x60
 80076f2:	d877      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076f4:	2b50      	cmp	r3, #80	; 0x50
 80076f6:	d03c      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0xfa>
 80076f8:	2b50      	cmp	r3, #80	; 0x50
 80076fa:	d873      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076fc:	2b40      	cmp	r3, #64	; 0x40
 80076fe:	d058      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d86f      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007704:	2b30      	cmp	r3, #48	; 0x30
 8007706:	d064      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d86b      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d060      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d867      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d05c      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d05a      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	e062      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6899      	ldr	r1, [r3, #8]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f000 fc95 	bl	800805c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	609a      	str	r2, [r3, #8]
      break;
 800774a:	e04f      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	6899      	ldr	r1, [r3, #8]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f000 fc7e 	bl	800805c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800776e:	609a      	str	r2, [r3, #8]
      break;
 8007770:	e03c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6859      	ldr	r1, [r3, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	461a      	mov	r2, r3
 8007780:	f000 fbf2 	bl	8007f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2150      	movs	r1, #80	; 0x50
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fc4b 	bl	8008026 <TIM_ITRx_SetConfig>
      break;
 8007790:	e02c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6859      	ldr	r1, [r3, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	461a      	mov	r2, r3
 80077a0:	f000 fc11 	bl	8007fc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2160      	movs	r1, #96	; 0x60
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fc3b 	bl	8008026 <TIM_ITRx_SetConfig>
      break;
 80077b0:	e01c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	461a      	mov	r2, r3
 80077c0:	f000 fbd2 	bl	8007f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2140      	movs	r1, #64	; 0x40
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fc2b 	bl	8008026 <TIM_ITRx_SetConfig>
      break;
 80077d0:	e00c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f000 fc22 	bl	8008026 <TIM_ITRx_SetConfig>
      break;
 80077e2:	e003      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
      break;
 80077e8:	e000      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	460b      	mov	r3, r1
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e135      	b.n	8007b44 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_RegisterCallback+0x2a>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e12e      	b.n	8007b44 <HAL_TIM_RegisterCallback+0x288>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	f040 80ba 	bne.w	8007a70 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	2b1a      	cmp	r3, #26
 8007900:	f200 80b3 	bhi.w	8007a6a <HAL_TIM_RegisterCallback+0x1ae>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <HAL_TIM_RegisterCallback+0x50>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007979 	.word	0x08007979
 8007910:	08007981 	.word	0x08007981
 8007914:	08007989 	.word	0x08007989
 8007918:	08007991 	.word	0x08007991
 800791c:	08007999 	.word	0x08007999
 8007920:	080079a1 	.word	0x080079a1
 8007924:	080079a9 	.word	0x080079a9
 8007928:	080079b1 	.word	0x080079b1
 800792c:	080079b9 	.word	0x080079b9
 8007930:	080079c1 	.word	0x080079c1
 8007934:	080079c9 	.word	0x080079c9
 8007938:	080079d1 	.word	0x080079d1
 800793c:	080079d9 	.word	0x080079d9
 8007940:	080079e1 	.word	0x080079e1
 8007944:	080079e9 	.word	0x080079e9
 8007948:	080079f3 	.word	0x080079f3
 800794c:	080079fd 	.word	0x080079fd
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007a11 	.word	0x08007a11
 8007958:	08007a1b 	.word	0x08007a1b
 800795c:	08007a25 	.word	0x08007a25
 8007960:	08007a2f 	.word	0x08007a2f
 8007964:	08007a39 	.word	0x08007a39
 8007968:	08007a43 	.word	0x08007a43
 800796c:	08007a4d 	.word	0x08007a4d
 8007970:	08007a57 	.word	0x08007a57
 8007974:	08007a61 	.word	0x08007a61
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800797e:	e0dc      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007986:	e0d8      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800798e:	e0d4      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007996:	e0d0      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800799e:	e0cc      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80079a6:	e0c8      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80079ae:	e0c4      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80079b6:	e0c0      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80079be:	e0bc      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80079c6:	e0b8      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80079ce:	e0b4      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80079d6:	e0b0      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80079de:	e0ac      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80079e6:	e0a8      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80079f0:	e0a3      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80079fa:	e09e      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007a04:	e099      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007a0e:	e094      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007a18:	e08f      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007a22:	e08a      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007a2c:	e085      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007a36:	e080      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007a40:	e07b      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007a4a:	e076      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007a54:	e071      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007a5e:	e06c      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007a68:	e067      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a6e:	e064      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d15c      	bne.n	8007b36 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	2b0d      	cmp	r3, #13
 8007a80:	d856      	bhi.n	8007b30 <HAL_TIM_RegisterCallback+0x274>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <HAL_TIM_RegisterCallback+0x1cc>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007ac1 	.word	0x08007ac1
 8007a8c:	08007ac9 	.word	0x08007ac9
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ad9 	.word	0x08007ad9
 8007a98:	08007ae1 	.word	0x08007ae1
 8007a9c:	08007ae9 	.word	0x08007ae9
 8007aa0:	08007af1 	.word	0x08007af1
 8007aa4:	08007af9 	.word	0x08007af9
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b09 	.word	0x08007b09
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007b19 	.word	0x08007b19
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007b29 	.word	0x08007b29
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007ac6:	e038      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007ace:	e034      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007ad6:	e030      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007ade:	e02c      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007ae6:	e028      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007aee:	e024      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007af6:	e020      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007afe:	e01c      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007b06:	e018      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007b0e:	e014      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007b16:	e010      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007b1e:	e00c      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007b26:	e008      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007b2e:	e004      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
        break;
 8007b34:	e001      	b.n	8007b3a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a34      	ldr	r2, [pc, #208]	; (8007c34 <TIM_Base_SetConfig+0xe4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00f      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6e:	d00b      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a31      	ldr	r2, [pc, #196]	; (8007c38 <TIM_Base_SetConfig+0xe8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a30      	ldr	r2, [pc, #192]	; (8007c3c <TIM_Base_SetConfig+0xec>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2f      	ldr	r2, [pc, #188]	; (8007c40 <TIM_Base_SetConfig+0xf0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d108      	bne.n	8007b9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <TIM_Base_SetConfig+0xe4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01b      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba8:	d017      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <TIM_Base_SetConfig+0xe8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a21      	ldr	r2, [pc, #132]	; (8007c3c <TIM_Base_SetConfig+0xec>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a20      	ldr	r2, [pc, #128]	; (8007c40 <TIM_Base_SetConfig+0xf0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <TIM_Base_SetConfig+0xf4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <TIM_Base_SetConfig+0xf8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1d      	ldr	r2, [pc, #116]	; (8007c4c <TIM_Base_SetConfig+0xfc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <TIM_Base_SetConfig+0xe4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d103      	bne.n	8007c20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	615a      	str	r2, [r3, #20]
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800

08007c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f023 0201 	bic.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f023 0302 	bic.w	r3, r3, #2
 8007c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <TIM_OC1_SetConfig+0xc8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d10c      	bne.n	8007cc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0308 	bic.w	r3, r3, #8
 8007cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 0304 	bic.w	r3, r3, #4
 8007cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <TIM_OC1_SetConfig+0xc8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d111      	bne.n	8007cf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	621a      	str	r2, [r3, #32]
}
 8007d0c:	bf00      	nop
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40010000 	.word	0x40010000

08007d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f023 0210 	bic.w	r2, r3, #16
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0320 	bic.w	r3, r3, #32
 8007d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <TIM_OC2_SetConfig+0xd4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d10d      	bne.n	8007d98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <TIM_OC2_SetConfig+0xd4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d113      	bne.n	8007dc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000

08007df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <TIM_OC3_SetConfig+0xd0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d10d      	bne.n	8007e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <TIM_OC3_SetConfig+0xd0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d113      	bne.n	8007e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	40010000 	.word	0x40010000

08007ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <TIM_OC4_SetConfig+0x9c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d109      	bne.n	8007f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	019b      	lsls	r3, r3, #6
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	621a      	str	r2, [r3, #32]
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40010000 	.word	0x40010000

08007f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f023 0201 	bic.w	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f023 030a 	bic.w	r3, r3, #10
 8007fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	621a      	str	r2, [r3, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f023 0210 	bic.w	r2, r3, #16
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	031b      	lsls	r3, r3, #12
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	f043 0307 	orr.w	r3, r3, #7
 8008048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	609a      	str	r2, [r3, #8]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	021a      	lsls	r2, r3, #8
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	431a      	orrs	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	609a      	str	r2, [r3, #8]
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2201      	movs	r2, #1
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1a      	ldr	r2, [r3, #32]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	43db      	mvns	r3, r3
 80080be:	401a      	ands	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	fa01 f303 	lsl.w	r3, r1, r3
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	; (8008164 <TIM_ResetCallback+0x7c>)
 80080f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1b      	ldr	r2, [pc, #108]	; (8008168 <TIM_ResetCallback+0x80>)
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1a      	ldr	r2, [pc, #104]	; (800816c <TIM_ResetCallback+0x84>)
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a19      	ldr	r2, [pc, #100]	; (8008170 <TIM_ResetCallback+0x88>)
 800810c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a18      	ldr	r2, [pc, #96]	; (8008174 <TIM_ResetCallback+0x8c>)
 8008114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a17      	ldr	r2, [pc, #92]	; (8008178 <TIM_ResetCallback+0x90>)
 800811c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a16      	ldr	r2, [pc, #88]	; (800817c <TIM_ResetCallback+0x94>)
 8008124:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a15      	ldr	r2, [pc, #84]	; (8008180 <TIM_ResetCallback+0x98>)
 800812c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a14      	ldr	r2, [pc, #80]	; (8008184 <TIM_ResetCallback+0x9c>)
 8008134:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a13      	ldr	r2, [pc, #76]	; (8008188 <TIM_ResetCallback+0xa0>)
 800813c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a12      	ldr	r2, [pc, #72]	; (800818c <TIM_ResetCallback+0xa4>)
 8008144:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a11      	ldr	r2, [pc, #68]	; (8008190 <TIM_ResetCallback+0xa8>)
 800814c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a10      	ldr	r2, [pc, #64]	; (8008194 <TIM_ResetCallback+0xac>)
 8008154:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	08003449 	.word	0x08003449
 8008168:	08007807 	.word	0x08007807
 800816c:	0800787f 	.word	0x0800787f
 8008170:	08007893 	.word	0x08007893
 8008174:	0800782f 	.word	0x0800782f
 8008178:	08007843 	.word	0x08007843
 800817c:	0800781b 	.word	0x0800781b
 8008180:	08007857 	.word	0x08007857
 8008184:	0800786b 	.word	0x0800786b
 8008188:	080078a7 	.word	0x080078a7
 800818c:	08008319 	.word	0x08008319
 8008190:	0800832d 	.word	0x0800832d
 8008194:	08008341 	.word	0x08008341

08008198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e050      	b.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d018      	beq.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fc:	d013      	beq.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a18      	ldr	r2, [pc, #96]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00e      	beq.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a16      	ldr	r2, [pc, #88]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d009      	beq.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a15      	ldr	r2, [pc, #84]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d004      	beq.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a13      	ldr	r2, [pc, #76]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d10c      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800822c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	4313      	orrs	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40010000 	.word	0x40010000
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40014000 	.word	0x40014000

08008274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800828c:	2302      	movs	r3, #2
 800828e:	e03d      	b.n	800830c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e04a      	b.n	80083fc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d111      	bne.n	8008396 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fd2c 	bl	8008dd8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <HAL_UART_Init+0xb0>)
 800838c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2224      	movs	r2, #36	; 0x24
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fff6 	bl	80093a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695a      	ldr	r2, [r3, #20]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	08003855 	.word	0x08003855

08008408 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	460b      	mov	r3, r1
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d107      	bne.n	8008430 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	f043 0220 	orr.w	r2, r3, #32
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e08c      	b.n	800854a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UART_RegisterCallback+0x36>
 800843a:	2302      	movs	r3, #2
 800843c:	e085      	b.n	800854a <HAL_UART_RegisterCallback+0x142>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b20      	cmp	r3, #32
 8008450:	d151      	bne.n	80084f6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d845      	bhi.n	80084e4 <HAL_UART_RegisterCallback+0xdc>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <HAL_UART_RegisterCallback+0x58>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008495 	.word	0x08008495
 8008464:	0800849d 	.word	0x0800849d
 8008468:	080084a5 	.word	0x080084a5
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084b5 	.word	0x080084b5
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084c5 	.word	0x080084c5
 800847c:	080084cd 	.word	0x080084cd
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084e5 	.word	0x080084e5
 8008488:	080084e5 	.word	0x080084e5
 800848c:	080084d5 	.word	0x080084d5
 8008490:	080084dd 	.word	0x080084dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800849a:	e051      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80084a2:	e04d      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80084aa:	e049      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80084b2:	e045      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80084ba:	e041      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80084c2:	e03d      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80084ca:	e039      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80084d2:	e035      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80084da:	e031      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80084e2:	e02d      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	f043 0220 	orr.w	r2, r3, #32
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75fb      	strb	r3, [r7, #23]
        break;
 80084f4:	e024      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d116      	bne.n	8008530 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	2b0b      	cmp	r3, #11
 8008506:	d002      	beq.n	800850e <HAL_UART_RegisterCallback+0x106>
 8008508:	2b0c      	cmp	r3, #12
 800850a:	d004      	beq.n	8008516 <HAL_UART_RegisterCallback+0x10e>
 800850c:	e007      	b.n	800851e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008514:	e014      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800851c:	e010      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f043 0220 	orr.w	r2, r3, #32
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	75fb      	strb	r3, [r7, #23]
        break;
 800852e:	e007      	b.n	8008540 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	f043 0220 	orr.w	r2, r3, #32
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
}
 800854a:	4618      	mov	r0, r3
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b20      	cmp	r3, #32
 8008570:	d11d      	bne.n	80085ae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <HAL_UART_Receive_IT+0x26>
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e016      	b.n	80085b0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_UART_Receive_IT+0x38>
 800858c:	2302      	movs	r3, #2
 800858e:	e00f      	b.n	80085b0 <HAL_UART_Receive_IT+0x58>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	461a      	mov	r2, r3
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fcf7 	bl	8008f98 <UART_Start_Receive_IT>
 80085aa:	4603      	mov	r3, r0
 80085ac:	e000      	b.n	80085b0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085ae:	2302      	movs	r3, #2
  }
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d165      	bne.n	800869e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_UART_Transmit_DMA+0x26>
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e05e      	b.n	80086a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_UART_Transmit_DMA+0x38>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e057      	b.n	80086a0 <HAL_UART_Transmit_DMA+0xe8>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	88fa      	ldrh	r2, [r7, #6]
 8008602:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	88fa      	ldrh	r2, [r7, #6]
 8008608:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2221      	movs	r2, #33	; 0x21
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	4a22      	ldr	r2, [pc, #136]	; (80086a8 <HAL_UART_Transmit_DMA+0xf0>)
 800861e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008624:	4a21      	ldr	r2, [pc, #132]	; (80086ac <HAL_UART_Transmit_DMA+0xf4>)
 8008626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	4a20      	ldr	r2, [pc, #128]	; (80086b0 <HAL_UART_Transmit_DMA+0xf8>)
 800862e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	2200      	movs	r2, #0
 8008636:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	6819      	ldr	r1, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3304      	adds	r3, #4
 800864c:	461a      	mov	r2, r3
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	f7fb fcca 	bl	8003fe8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800865c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3314      	adds	r3, #20
 800866c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	617b      	str	r3, [r7, #20]
   return(result);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3314      	adds	r3, #20
 8008684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008686:	627a      	str	r2, [r7, #36]	; 0x24
 8008688:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6a39      	ldr	r1, [r7, #32]
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	61fb      	str	r3, [r7, #28]
   return(result);
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e5      	bne.n	8008666 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	e000      	b.n	80086a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800869e:	2302      	movs	r3, #2
  }
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3730      	adds	r7, #48	; 0x30
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	08008e49 	.word	0x08008e49
 80086ac:	08008ee5 	.word	0x08008ee5
 80086b0:	08008f03 	.word	0x08008f03

080086b4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b09a      	sub	sp, #104	; 0x68
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d2:	667b      	str	r3, [r7, #100]	; 0x64
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086dc:	657a      	str	r2, [r7, #84]	; 0x54
 80086de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e5      	bne.n	80086bc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	663b      	str	r3, [r7, #96]	; 0x60
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3314      	adds	r3, #20
 800870e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008710:	643a      	str	r2, [r7, #64]	; 0x40
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008728:	2b01      	cmp	r3, #1
 800872a:	d119      	bne.n	8008760 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	61fb      	str	r3, [r7, #28]
   return(result);
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800874c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d136      	bne.n	80087dc <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	60bb      	str	r3, [r7, #8]
   return(result);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008784:	65bb      	str	r3, [r7, #88]	; 0x58
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3314      	adds	r3, #20
 800878c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800878e:	61ba      	str	r2, [r7, #24]
 8008790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6979      	ldr	r1, [r7, #20]
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	613b      	str	r3, [r7, #16]
   return(result);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	2200      	movs	r2, #0
 80087b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fb fc6e 	bl	8004098 <HAL_DMA_Abort>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fb fe82 	bl	80044d0 <HAL_DMA_GetError>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d104      	bne.n	80087dc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2210      	movs	r2, #16
 80087d6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e00a      	b.n	80087f2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3768      	adds	r7, #104	; 0x68
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b0ba      	sub	sp, #232	; 0xe8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008822:	2300      	movs	r3, #0
 8008824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008828:	2300      	movs	r3, #0
 800882a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800883a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <HAL_UART_IRQHandler+0x66>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fce3 	bl	8009226 <UART_Receive_IT>
      return;
 8008860:	e25b      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 80e1 	beq.w	8008a2e <HAL_UART_IRQHandler+0x232>
 800886c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 80d4 	beq.w	8008a2e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <HAL_UART_IRQHandler+0xae>
 8008892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	f043 0201 	orr.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <HAL_UART_IRQHandler+0xd2>
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f043 0202 	orr.w	r2, r3, #2
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <HAL_UART_IRQHandler+0xf6>
 80088da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f043 0204 	orr.w	r2, r3, #4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <HAL_UART_IRQHandler+0x126>
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800890a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f043 0208 	orr.w	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 81f2 	beq.w	8008d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_UART_IRQHandler+0x14e>
 8008938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc6e 	bl	8009226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	bf0c      	ite	eq
 8008958:	2301      	moveq	r3, #1
 800895a:	2300      	movne	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <HAL_UART_IRQHandler+0x17a>
 800896e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d051      	beq.n	8008a1a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fb74 	bl	8009064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d142      	bne.n	8008a10 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3314      	adds	r3, #20
 80089b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1d9      	bne.n	800898a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d013      	beq.n	8008a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	4a7f      	ldr	r2, [pc, #508]	; (8008be0 <HAL_UART_IRQHandler+0x3e4>)
 80089e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fb fbc4 	bl	8004178 <HAL_DMA_Abort_IT>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d019      	beq.n	8008a2a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	e011      	b.n	8008a2a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0e:	e00c      	b.n	8008a2a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	e007      	b.n	8008a2a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a28:	e172      	b.n	8008d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2a:	bf00      	nop
    return;
 8008a2c:	e170      	b.n	8008d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	f040 814c 	bne.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8145 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4a:	f003 0310 	and.w	r3, r3, #16
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 813e 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a54:	2300      	movs	r3, #0
 8008a56:	60bb      	str	r3, [r7, #8]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60bb      	str	r3, [r7, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60bb      	str	r3, [r7, #8]
 8008a68:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	f040 80b5 	bne.w	8008be4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8142 	beq.w	8008d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	f080 813b 	bcs.w	8008d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab0:	f000 8088 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	330c      	adds	r3, #12
 8008aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ae0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1d9      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3314      	adds	r3, #20
 8008b06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b12:	f023 0301 	bic.w	r3, r3, #1
 8008b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e1      	bne.n	8008b00 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3314      	adds	r3, #20
 8008b42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e3      	bne.n	8008b3c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	f023 0310 	bic.w	r3, r3, #16
 8008b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ba8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e3      	bne.n	8008b82 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fb fa6a 	bl	8004098 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	1a8a      	subs	r2, r1, r2
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bdc:	e09a      	b.n	8008d14 <HAL_UART_IRQHandler+0x518>
 8008bde:	bf00      	nop
 8008be0:	0800912b 	.word	0x0800912b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 808c 	beq.w	8008d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8087 	beq.w	8008d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c2e:	647a      	str	r2, [r7, #68]	; 0x44
 8008c30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e3      	bne.n	8008c0a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	623b      	str	r3, [r7, #32]
   return(result);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3314      	adds	r3, #20
 8008c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c66:	633a      	str	r2, [r7, #48]	; 0x30
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e3      	bne.n	8008c42 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008cac:	61fa      	str	r2, [r7, #28]
 8008cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e3      	bne.n	8008c88 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cc4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008cc8:	4611      	mov	r1, r2
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cce:	e023      	b.n	8008d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x4f4>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa33 	bl	8009154 <UART_Transmit_IT>
    return;
 8008cee:	e014      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00e      	beq.n	8008d1a <HAL_UART_IRQHandler+0x51e>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa73 	bl	80091f4 <UART_EndTransmit_IT>
    return;
 8008d0e:	e004      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8008d18:	bf00      	nop
  }
}
 8008d1a:	37e8      	adds	r7, #232	; 0xe8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a10      	ldr	r2, [pc, #64]	; (8008e24 <UART_InitCallbacksToDefault+0x4c>)
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <UART_InitCallbacksToDefault+0x50>)
 8008dea:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a0f      	ldr	r2, [pc, #60]	; (8008e2c <UART_InitCallbacksToDefault+0x54>)
 8008df0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a0e      	ldr	r2, [pc, #56]	; (8008e30 <UART_InitCallbacksToDefault+0x58>)
 8008df6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a0e      	ldr	r2, [pc, #56]	; (8008e34 <UART_InitCallbacksToDefault+0x5c>)
 8008dfc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a0d      	ldr	r2, [pc, #52]	; (8008e38 <UART_InitCallbacksToDefault+0x60>)
 8008e02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <UART_InitCallbacksToDefault+0x64>)
 8008e08:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a0c      	ldr	r2, [pc, #48]	; (8008e40 <UART_InitCallbacksToDefault+0x68>)
 8008e0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <UART_InitCallbacksToDefault+0x6c>)
 8008e14:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	08008d35 	.word	0x08008d35
 8008e28:	08008d21 	.word	0x08008d21
 8008e2c:	08008d5d 	.word	0x08008d5d
 8008e30:	08008d49 	.word	0x08008d49
 8008e34:	08008d71 	.word	0x08008d71
 8008e38:	08008d85 	.word	0x08008d85
 8008e3c:	08008d99 	.word	0x08008d99
 8008e40:	08008dad 	.word	0x08008dad
 8008e44:	08008dc1 	.word	0x08008dc1

08008e48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b090      	sub	sp, #64	; 0x40
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d137      	bne.n	8008ed4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	2200      	movs	r2, #0
 8008e68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3314      	adds	r3, #20
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3314      	adds	r3, #20
 8008e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	330c      	adds	r3, #12
 8008ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ebe:	61fa      	str	r2, [r7, #28]
 8008ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	69b9      	ldr	r1, [r7, #24]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	617b      	str	r3, [r7, #20]
   return(result);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ed2:	e003      	b.n	8008edc <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008eda:	4798      	blx	r3
}
 8008edc:	bf00      	nop
 8008ede:	3740      	adds	r7, #64	; 0x40
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1e:	2b80      	cmp	r3, #128	; 0x80
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b21      	cmp	r3, #33	; 0x21
 8008f34:	d108      	bne.n	8008f48 <UART_DMAError+0x46>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f42:	68b8      	ldr	r0, [r7, #8]
 8008f44:	f000 f866 	bl	8009014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b22      	cmp	r3, #34	; 0x22
 8008f68:	d108      	bne.n	8008f7c <UART_DMAError+0x7a>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f000 f874 	bl	8009064 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f80:	f043 0210 	orr.w	r2, r3, #16
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8c:	68b8      	ldr	r0, [r7, #8]
 8008f8e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	88fa      	ldrh	r2, [r7, #6]
 8008fb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2222      	movs	r2, #34	; 0x22
 8008fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d007      	beq.n	8008fe6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fe4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	695a      	ldr	r2, [r3, #20]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0201 	orr.w	r2, r2, #1
 8008ff4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0220 	orr.w	r2, r2, #32
 8009004:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	60bb      	str	r3, [r7, #8]
   return(result);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	61ba      	str	r2, [r7, #24]
 800903e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6979      	ldr	r1, [r7, #20]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	613b      	str	r3, [r7, #16]
   return(result);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e5      	bne.n	800901c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009058:	bf00      	nop
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b095      	sub	sp, #84	; 0x54
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	330c      	adds	r3, #12
 8009072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800908c:	643a      	str	r2, [r7, #64]	; 0x40
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e5      	bne.n	800906c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3314      	adds	r3, #20
 80090a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3314      	adds	r3, #20
 80090be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d119      	bne.n	8009110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	330c      	adds	r3, #12
 80090e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f023 0310 	bic.w	r3, r3, #16
 80090f2:	647b      	str	r3, [r7, #68]	; 0x44
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090fc:	61ba      	str	r2, [r7, #24]
 80090fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6979      	ldr	r1, [r7, #20]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	613b      	str	r3, [r7, #16]
   return(result);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e5      	bne.n	80090dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800911e:	bf00      	nop
 8009120:	3754      	adds	r7, #84	; 0x54
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b21      	cmp	r3, #33	; 0x21
 8009166:	d13e      	bne.n	80091e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009170:	d114      	bne.n	800919c <UART_Transmit_IT+0x48>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d110      	bne.n	800919c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800918e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	1c9a      	adds	r2, r3, #2
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	621a      	str	r2, [r3, #32]
 800919a:	e008      	b.n	80091ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	1c59      	adds	r1, r3, #1
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6211      	str	r1, [r2, #32]
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	4619      	mov	r1, r3
 80091bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10f      	bne.n	80091e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e000      	b.n	80091e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091e6:	2302      	movs	r3, #2
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b08c      	sub	sp, #48	; 0x30
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b22      	cmp	r3, #34	; 0x22
 8009238:	f040 80ad 	bne.w	8009396 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d117      	bne.n	8009276 <UART_Receive_IT+0x50>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d113      	bne.n	8009276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009264:	b29a      	uxth	r2, r3
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	1c9a      	adds	r2, r3, #2
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	629a      	str	r2, [r3, #40]	; 0x28
 8009274:	e026      	b.n	80092c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009288:	d007      	beq.n	800929a <UART_Receive_IT+0x74>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <UART_Receive_IT+0x82>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e008      	b.n	80092ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4619      	mov	r1, r3
 80092d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d15c      	bne.n	8009392 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0220 	bic.w	r2, r2, #32
 80092e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	2b01      	cmp	r3, #1
 8009316:	d136      	bne.n	8009386 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933e:	623a      	str	r2, [r7, #32]
 8009340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	69f9      	ldr	r1, [r7, #28]
 8009344:	6a3a      	ldr	r2, [r7, #32]
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	61bb      	str	r3, [r7, #24]
   return(result);
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b10      	cmp	r3, #16
 800935e:	d10a      	bne.n	8009376 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800937e:	4611      	mov	r1, r2
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
 8009384:	e003      	b.n	800938e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	e002      	b.n	8009398 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	e000      	b.n	8009398 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009396:	2302      	movs	r3, #2
  }
}
 8009398:	4618      	mov	r0, r3
 800939a:	3730      	adds	r7, #48	; 0x30
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093a4:	b0c0      	sub	sp, #256	; 0x100
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093bc:	68d9      	ldr	r1, [r3, #12]
 80093be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	ea40 0301 	orr.w	r3, r0, r1
 80093c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	431a      	orrs	r2, r3
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093f8:	f021 010c 	bic.w	r1, r1, #12
 80093fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009406:	430b      	orrs	r3, r1
 8009408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800940a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	6999      	ldr	r1, [r3, #24]
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	ea40 0301 	orr.w	r3, r0, r1
 8009426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b8f      	ldr	r3, [pc, #572]	; (800966c <UART_SetConfig+0x2cc>)
 8009430:	429a      	cmp	r2, r3
 8009432:	d005      	beq.n	8009440 <UART_SetConfig+0xa0>
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b8d      	ldr	r3, [pc, #564]	; (8009670 <UART_SetConfig+0x2d0>)
 800943c:	429a      	cmp	r2, r3
 800943e:	d104      	bne.n	800944a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009440:	f7fc ff26 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8009444:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009448:	e003      	b.n	8009452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800944a:	f7fc ff0d 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 800944e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800945c:	f040 810c 	bne.w	8009678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800946a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800946e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009472:	4622      	mov	r2, r4
 8009474:	462b      	mov	r3, r5
 8009476:	1891      	adds	r1, r2, r2
 8009478:	65b9      	str	r1, [r7, #88]	; 0x58
 800947a:	415b      	adcs	r3, r3
 800947c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800947e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009482:	4621      	mov	r1, r4
 8009484:	eb12 0801 	adds.w	r8, r2, r1
 8009488:	4629      	mov	r1, r5
 800948a:	eb43 0901 	adc.w	r9, r3, r1
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	f04f 0300 	mov.w	r3, #0
 8009496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800949a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800949e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094a2:	4690      	mov	r8, r2
 80094a4:	4699      	mov	r9, r3
 80094a6:	4623      	mov	r3, r4
 80094a8:	eb18 0303 	adds.w	r3, r8, r3
 80094ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094b0:	462b      	mov	r3, r5
 80094b2:	eb49 0303 	adc.w	r3, r9, r3
 80094b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094ce:	460b      	mov	r3, r1
 80094d0:	18db      	adds	r3, r3, r3
 80094d2:	653b      	str	r3, [r7, #80]	; 0x50
 80094d4:	4613      	mov	r3, r2
 80094d6:	eb42 0303 	adc.w	r3, r2, r3
 80094da:	657b      	str	r3, [r7, #84]	; 0x54
 80094dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094e4:	f7f7 fb34 	bl	8000b50 <__aeabi_uldivmod>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4b61      	ldr	r3, [pc, #388]	; (8009674 <UART_SetConfig+0x2d4>)
 80094ee:	fba3 2302 	umull	r2, r3, r3, r2
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	011c      	lsls	r4, r3, #4
 80094f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009500:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009510:	415b      	adcs	r3, r3
 8009512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009518:	4641      	mov	r1, r8
 800951a:	eb12 0a01 	adds.w	sl, r2, r1
 800951e:	4649      	mov	r1, r9
 8009520:	eb43 0b01 	adc.w	fp, r3, r1
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009538:	4692      	mov	sl, r2
 800953a:	469b      	mov	fp, r3
 800953c:	4643      	mov	r3, r8
 800953e:	eb1a 0303 	adds.w	r3, sl, r3
 8009542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009546:	464b      	mov	r3, r9
 8009548:	eb4b 0303 	adc.w	r3, fp, r3
 800954c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800955c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009564:	460b      	mov	r3, r1
 8009566:	18db      	adds	r3, r3, r3
 8009568:	643b      	str	r3, [r7, #64]	; 0x40
 800956a:	4613      	mov	r3, r2
 800956c:	eb42 0303 	adc.w	r3, r2, r3
 8009570:	647b      	str	r3, [r7, #68]	; 0x44
 8009572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800957a:	f7f7 fae9 	bl	8000b50 <__aeabi_uldivmod>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4611      	mov	r1, r2
 8009584:	4b3b      	ldr	r3, [pc, #236]	; (8009674 <UART_SetConfig+0x2d4>)
 8009586:	fba3 2301 	umull	r2, r3, r3, r1
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	2264      	movs	r2, #100	; 0x64
 800958e:	fb02 f303 	mul.w	r3, r2, r3
 8009592:	1acb      	subs	r3, r1, r3
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <UART_SetConfig+0x2d4>)
 800959c:	fba3 2302 	umull	r2, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095a8:	441c      	add	r4, r3
 80095aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80095b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80095bc:	4642      	mov	r2, r8
 80095be:	464b      	mov	r3, r9
 80095c0:	1891      	adds	r1, r2, r2
 80095c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80095c4:	415b      	adcs	r3, r3
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095cc:	4641      	mov	r1, r8
 80095ce:	1851      	adds	r1, r2, r1
 80095d0:	6339      	str	r1, [r7, #48]	; 0x30
 80095d2:	4649      	mov	r1, r9
 80095d4:	414b      	adcs	r3, r1
 80095d6:	637b      	str	r3, [r7, #52]	; 0x34
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095e4:	4659      	mov	r1, fp
 80095e6:	00cb      	lsls	r3, r1, #3
 80095e8:	4651      	mov	r1, sl
 80095ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ee:	4651      	mov	r1, sl
 80095f0:	00ca      	lsls	r2, r1, #3
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	4642      	mov	r2, r8
 80095fa:	189b      	adds	r3, r3, r2
 80095fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009600:	464b      	mov	r3, r9
 8009602:	460a      	mov	r2, r1
 8009604:	eb42 0303 	adc.w	r3, r2, r3
 8009608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800960c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009618:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800961c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009620:	460b      	mov	r3, r1
 8009622:	18db      	adds	r3, r3, r3
 8009624:	62bb      	str	r3, [r7, #40]	; 0x28
 8009626:	4613      	mov	r3, r2
 8009628:	eb42 0303 	adc.w	r3, r2, r3
 800962c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800962e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009636:	f7f7 fa8b 	bl	8000b50 <__aeabi_uldivmod>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <UART_SetConfig+0x2d4>)
 8009640:	fba3 1302 	umull	r1, r3, r3, r2
 8009644:	095b      	lsrs	r3, r3, #5
 8009646:	2164      	movs	r1, #100	; 0x64
 8009648:	fb01 f303 	mul.w	r3, r1, r3
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	3332      	adds	r3, #50	; 0x32
 8009652:	4a08      	ldr	r2, [pc, #32]	; (8009674 <UART_SetConfig+0x2d4>)
 8009654:	fba2 2303 	umull	r2, r3, r2, r3
 8009658:	095b      	lsrs	r3, r3, #5
 800965a:	f003 0207 	and.w	r2, r3, #7
 800965e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4422      	add	r2, r4
 8009666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009668:	e105      	b.n	8009876 <UART_SetConfig+0x4d6>
 800966a:	bf00      	nop
 800966c:	40011000 	.word	0x40011000
 8009670:	40011400 	.word	0x40011400
 8009674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967c:	2200      	movs	r2, #0
 800967e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009682:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800968a:	4642      	mov	r2, r8
 800968c:	464b      	mov	r3, r9
 800968e:	1891      	adds	r1, r2, r2
 8009690:	6239      	str	r1, [r7, #32]
 8009692:	415b      	adcs	r3, r3
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
 8009696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800969a:	4641      	mov	r1, r8
 800969c:	1854      	adds	r4, r2, r1
 800969e:	4649      	mov	r1, r9
 80096a0:	eb43 0501 	adc.w	r5, r3, r1
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	00eb      	lsls	r3, r5, #3
 80096ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096b2:	00e2      	lsls	r2, r4, #3
 80096b4:	4614      	mov	r4, r2
 80096b6:	461d      	mov	r5, r3
 80096b8:	4643      	mov	r3, r8
 80096ba:	18e3      	adds	r3, r4, r3
 80096bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096c0:	464b      	mov	r3, r9
 80096c2:	eb45 0303 	adc.w	r3, r5, r3
 80096c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	f04f 0300 	mov.w	r3, #0
 80096e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096e6:	4629      	mov	r1, r5
 80096e8:	008b      	lsls	r3, r1, #2
 80096ea:	4621      	mov	r1, r4
 80096ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096f0:	4621      	mov	r1, r4
 80096f2:	008a      	lsls	r2, r1, #2
 80096f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096f8:	f7f7 fa2a 	bl	8000b50 <__aeabi_uldivmod>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4b60      	ldr	r3, [pc, #384]	; (8009884 <UART_SetConfig+0x4e4>)
 8009702:	fba3 2302 	umull	r2, r3, r3, r2
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	011c      	lsls	r4, r3, #4
 800970a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009714:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	1891      	adds	r1, r2, r2
 8009722:	61b9      	str	r1, [r7, #24]
 8009724:	415b      	adcs	r3, r3
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800972c:	4641      	mov	r1, r8
 800972e:	1851      	adds	r1, r2, r1
 8009730:	6139      	str	r1, [r7, #16]
 8009732:	4649      	mov	r1, r9
 8009734:	414b      	adcs	r3, r1
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009744:	4659      	mov	r1, fp
 8009746:	00cb      	lsls	r3, r1, #3
 8009748:	4651      	mov	r1, sl
 800974a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974e:	4651      	mov	r1, sl
 8009750:	00ca      	lsls	r2, r1, #3
 8009752:	4610      	mov	r0, r2
 8009754:	4619      	mov	r1, r3
 8009756:	4603      	mov	r3, r0
 8009758:	4642      	mov	r2, r8
 800975a:	189b      	adds	r3, r3, r2
 800975c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009760:	464b      	mov	r3, r9
 8009762:	460a      	mov	r2, r1
 8009764:	eb42 0303 	adc.w	r3, r2, r3
 8009768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	67bb      	str	r3, [r7, #120]	; 0x78
 8009776:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	f04f 0300 	mov.w	r3, #0
 8009780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009784:	4649      	mov	r1, r9
 8009786:	008b      	lsls	r3, r1, #2
 8009788:	4641      	mov	r1, r8
 800978a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800978e:	4641      	mov	r1, r8
 8009790:	008a      	lsls	r2, r1, #2
 8009792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009796:	f7f7 f9db 	bl	8000b50 <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4b39      	ldr	r3, [pc, #228]	; (8009884 <UART_SetConfig+0x4e4>)
 80097a0:	fba3 1302 	umull	r1, r3, r3, r2
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	2164      	movs	r1, #100	; 0x64
 80097a8:	fb01 f303 	mul.w	r3, r1, r3
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	3332      	adds	r3, #50	; 0x32
 80097b2:	4a34      	ldr	r2, [pc, #208]	; (8009884 <UART_SetConfig+0x4e4>)
 80097b4:	fba2 2303 	umull	r2, r3, r2, r3
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097be:	441c      	add	r4, r3
 80097c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c4:	2200      	movs	r2, #0
 80097c6:	673b      	str	r3, [r7, #112]	; 0x70
 80097c8:	677a      	str	r2, [r7, #116]	; 0x74
 80097ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097ce:	4642      	mov	r2, r8
 80097d0:	464b      	mov	r3, r9
 80097d2:	1891      	adds	r1, r2, r2
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	415b      	adcs	r3, r3
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097de:	4641      	mov	r1, r8
 80097e0:	1851      	adds	r1, r2, r1
 80097e2:	6039      	str	r1, [r7, #0]
 80097e4:	4649      	mov	r1, r9
 80097e6:	414b      	adcs	r3, r1
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097f6:	4659      	mov	r1, fp
 80097f8:	00cb      	lsls	r3, r1, #3
 80097fa:	4651      	mov	r1, sl
 80097fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009800:	4651      	mov	r1, sl
 8009802:	00ca      	lsls	r2, r1, #3
 8009804:	4610      	mov	r0, r2
 8009806:	4619      	mov	r1, r3
 8009808:	4603      	mov	r3, r0
 800980a:	4642      	mov	r2, r8
 800980c:	189b      	adds	r3, r3, r2
 800980e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009810:	464b      	mov	r3, r9
 8009812:	460a      	mov	r2, r1
 8009814:	eb42 0303 	adc.w	r3, r2, r3
 8009818:	66fb      	str	r3, [r7, #108]	; 0x6c
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	663b      	str	r3, [r7, #96]	; 0x60
 8009824:	667a      	str	r2, [r7, #100]	; 0x64
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009832:	4649      	mov	r1, r9
 8009834:	008b      	lsls	r3, r1, #2
 8009836:	4641      	mov	r1, r8
 8009838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800983c:	4641      	mov	r1, r8
 800983e:	008a      	lsls	r2, r1, #2
 8009840:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009844:	f7f7 f984 	bl	8000b50 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <UART_SetConfig+0x4e4>)
 800984e:	fba3 1302 	umull	r1, r3, r3, r2
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	2164      	movs	r1, #100	; 0x64
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	3332      	adds	r3, #50	; 0x32
 8009860:	4a08      	ldr	r2, [pc, #32]	; (8009884 <UART_SetConfig+0x4e4>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	f003 020f 	and.w	r2, r3, #15
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4422      	add	r2, r4
 8009874:	609a      	str	r2, [r3, #8]
}
 8009876:	bf00      	nop
 8009878:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800987c:	46bd      	mov	sp, r7
 800987e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009882:	bf00      	nop
 8009884:	51eb851f 	.word	0x51eb851f

08009888 <__errno>:
 8009888:	4b01      	ldr	r3, [pc, #4]	; (8009890 <__errno+0x8>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	200002d8 	.word	0x200002d8

08009894 <__libc_init_array>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4d0d      	ldr	r5, [pc, #52]	; (80098cc <__libc_init_array+0x38>)
 8009898:	4c0d      	ldr	r4, [pc, #52]	; (80098d0 <__libc_init_array+0x3c>)
 800989a:	1b64      	subs	r4, r4, r5
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	2600      	movs	r6, #0
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	d109      	bne.n	80098b8 <__libc_init_array+0x24>
 80098a4:	4d0b      	ldr	r5, [pc, #44]	; (80098d4 <__libc_init_array+0x40>)
 80098a6:	4c0c      	ldr	r4, [pc, #48]	; (80098d8 <__libc_init_array+0x44>)
 80098a8:	f000 f90c 	bl	8009ac4 <_init>
 80098ac:	1b64      	subs	r4, r4, r5
 80098ae:	10a4      	asrs	r4, r4, #2
 80098b0:	2600      	movs	r6, #0
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	d105      	bne.n	80098c2 <__libc_init_array+0x2e>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098bc:	4798      	blx	r3
 80098be:	3601      	adds	r6, #1
 80098c0:	e7ee      	b.n	80098a0 <__libc_init_array+0xc>
 80098c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c6:	4798      	blx	r3
 80098c8:	3601      	adds	r6, #1
 80098ca:	e7f2      	b.n	80098b2 <__libc_init_array+0x1e>
 80098cc:	08009b04 	.word	0x08009b04
 80098d0:	08009b04 	.word	0x08009b04
 80098d4:	08009b04 	.word	0x08009b04
 80098d8:	08009b08 	.word	0x08009b08

080098dc <memcpy>:
 80098dc:	440a      	add	r2, r1
 80098de:	4291      	cmp	r1, r2
 80098e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e4:	d100      	bne.n	80098e8 <memcpy+0xc>
 80098e6:	4770      	bx	lr
 80098e8:	b510      	push	{r4, lr}
 80098ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f2:	4291      	cmp	r1, r2
 80098f4:	d1f9      	bne.n	80098ea <memcpy+0xe>
 80098f6:	bd10      	pop	{r4, pc}

080098f8 <memset>:
 80098f8:	4402      	add	r2, r0
 80098fa:	4603      	mov	r3, r0
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d100      	bne.n	8009902 <memset+0xa>
 8009900:	4770      	bx	lr
 8009902:	f803 1b01 	strb.w	r1, [r3], #1
 8009906:	e7f9      	b.n	80098fc <memset+0x4>

08009908 <sqrt>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	ed2d 8b02 	vpush	{d8}
 800990e:	ec55 4b10 	vmov	r4, r5, d0
 8009912:	f000 f825 	bl	8009960 <__ieee754_sqrt>
 8009916:	4622      	mov	r2, r4
 8009918:	462b      	mov	r3, r5
 800991a:	4620      	mov	r0, r4
 800991c:	4629      	mov	r1, r5
 800991e:	eeb0 8a40 	vmov.f32	s16, s0
 8009922:	eef0 8a60 	vmov.f32	s17, s1
 8009926:	f7f7 f8ad 	bl	8000a84 <__aeabi_dcmpun>
 800992a:	b990      	cbnz	r0, 8009952 <sqrt+0x4a>
 800992c:	2200      	movs	r2, #0
 800992e:	2300      	movs	r3, #0
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7f7 f87e 	bl	8000a34 <__aeabi_dcmplt>
 8009938:	b158      	cbz	r0, 8009952 <sqrt+0x4a>
 800993a:	f7ff ffa5 	bl	8009888 <__errno>
 800993e:	2321      	movs	r3, #33	; 0x21
 8009940:	6003      	str	r3, [r0, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	2300      	movs	r3, #0
 8009946:	4610      	mov	r0, r2
 8009948:	4619      	mov	r1, r3
 800994a:	f7f6 ff2b 	bl	80007a4 <__aeabi_ddiv>
 800994e:	ec41 0b18 	vmov	d8, r0, r1
 8009952:	eeb0 0a48 	vmov.f32	s0, s16
 8009956:	eef0 0a68 	vmov.f32	s1, s17
 800995a:	ecbd 8b02 	vpop	{d8}
 800995e:	bd38      	pop	{r3, r4, r5, pc}

08009960 <__ieee754_sqrt>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	ec55 4b10 	vmov	r4, r5, d0
 8009968:	4e55      	ldr	r6, [pc, #340]	; (8009ac0 <__ieee754_sqrt+0x160>)
 800996a:	43ae      	bics	r6, r5
 800996c:	ee10 0a10 	vmov	r0, s0
 8009970:	ee10 3a10 	vmov	r3, s0
 8009974:	462a      	mov	r2, r5
 8009976:	4629      	mov	r1, r5
 8009978:	d110      	bne.n	800999c <__ieee754_sqrt+0x3c>
 800997a:	ee10 2a10 	vmov	r2, s0
 800997e:	462b      	mov	r3, r5
 8009980:	f7f6 fde6 	bl	8000550 <__aeabi_dmul>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f6 fc2a 	bl	80001e4 <__adddf3>
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	ec45 4b10 	vmov	d0, r4, r5
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	2d00      	cmp	r5, #0
 800999e:	dc10      	bgt.n	80099c2 <__ieee754_sqrt+0x62>
 80099a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099a4:	4330      	orrs	r0, r6
 80099a6:	d0f5      	beq.n	8009994 <__ieee754_sqrt+0x34>
 80099a8:	b15d      	cbz	r5, 80099c2 <__ieee754_sqrt+0x62>
 80099aa:	ee10 2a10 	vmov	r2, s0
 80099ae:	462b      	mov	r3, r5
 80099b0:	ee10 0a10 	vmov	r0, s0
 80099b4:	f7f6 fc14 	bl	80001e0 <__aeabi_dsub>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	f7f6 fef2 	bl	80007a4 <__aeabi_ddiv>
 80099c0:	e7e6      	b.n	8009990 <__ieee754_sqrt+0x30>
 80099c2:	1512      	asrs	r2, r2, #20
 80099c4:	d074      	beq.n	8009ab0 <__ieee754_sqrt+0x150>
 80099c6:	07d4      	lsls	r4, r2, #31
 80099c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80099cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80099d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80099d4:	bf5e      	ittt	pl
 80099d6:	0fda      	lsrpl	r2, r3, #31
 80099d8:	005b      	lslpl	r3, r3, #1
 80099da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80099de:	2400      	movs	r4, #0
 80099e0:	0fda      	lsrs	r2, r3, #31
 80099e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80099e6:	107f      	asrs	r7, r7, #1
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	2516      	movs	r5, #22
 80099ec:	4620      	mov	r0, r4
 80099ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099f2:	1886      	adds	r6, r0, r2
 80099f4:	428e      	cmp	r6, r1
 80099f6:	bfde      	ittt	le
 80099f8:	1b89      	suble	r1, r1, r6
 80099fa:	18b0      	addle	r0, r6, r2
 80099fc:	18a4      	addle	r4, r4, r2
 80099fe:	0049      	lsls	r1, r1, #1
 8009a00:	3d01      	subs	r5, #1
 8009a02:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009a06:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a0e:	d1f0      	bne.n	80099f2 <__ieee754_sqrt+0x92>
 8009a10:	462a      	mov	r2, r5
 8009a12:	f04f 0e20 	mov.w	lr, #32
 8009a16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a1a:	4281      	cmp	r1, r0
 8009a1c:	eb06 0c05 	add.w	ip, r6, r5
 8009a20:	dc02      	bgt.n	8009a28 <__ieee754_sqrt+0xc8>
 8009a22:	d113      	bne.n	8009a4c <__ieee754_sqrt+0xec>
 8009a24:	459c      	cmp	ip, r3
 8009a26:	d811      	bhi.n	8009a4c <__ieee754_sqrt+0xec>
 8009a28:	f1bc 0f00 	cmp.w	ip, #0
 8009a2c:	eb0c 0506 	add.w	r5, ip, r6
 8009a30:	da43      	bge.n	8009aba <__ieee754_sqrt+0x15a>
 8009a32:	2d00      	cmp	r5, #0
 8009a34:	db41      	blt.n	8009aba <__ieee754_sqrt+0x15a>
 8009a36:	f100 0801 	add.w	r8, r0, #1
 8009a3a:	1a09      	subs	r1, r1, r0
 8009a3c:	459c      	cmp	ip, r3
 8009a3e:	bf88      	it	hi
 8009a40:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009a44:	eba3 030c 	sub.w	r3, r3, ip
 8009a48:	4432      	add	r2, r6
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009a50:	f1be 0e01 	subs.w	lr, lr, #1
 8009a54:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a60:	d1db      	bne.n	8009a1a <__ieee754_sqrt+0xba>
 8009a62:	430b      	orrs	r3, r1
 8009a64:	d006      	beq.n	8009a74 <__ieee754_sqrt+0x114>
 8009a66:	1c50      	adds	r0, r2, #1
 8009a68:	bf13      	iteet	ne
 8009a6a:	3201      	addne	r2, #1
 8009a6c:	3401      	addeq	r4, #1
 8009a6e:	4672      	moveq	r2, lr
 8009a70:	f022 0201 	bicne.w	r2, r2, #1
 8009a74:	1063      	asrs	r3, r4, #1
 8009a76:	0852      	lsrs	r2, r2, #1
 8009a78:	07e1      	lsls	r1, r4, #31
 8009a7a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a82:	bf48      	it	mi
 8009a84:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a88:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	e781      	b.n	8009994 <__ieee754_sqrt+0x34>
 8009a90:	0ad9      	lsrs	r1, r3, #11
 8009a92:	3815      	subs	r0, #21
 8009a94:	055b      	lsls	r3, r3, #21
 8009a96:	2900      	cmp	r1, #0
 8009a98:	d0fa      	beq.n	8009a90 <__ieee754_sqrt+0x130>
 8009a9a:	02cd      	lsls	r5, r1, #11
 8009a9c:	d50a      	bpl.n	8009ab4 <__ieee754_sqrt+0x154>
 8009a9e:	f1c2 0420 	rsb	r4, r2, #32
 8009aa2:	fa23 f404 	lsr.w	r4, r3, r4
 8009aa6:	1e55      	subs	r5, r2, #1
 8009aa8:	4093      	lsls	r3, r2
 8009aaa:	4321      	orrs	r1, r4
 8009aac:	1b42      	subs	r2, r0, r5
 8009aae:	e78a      	b.n	80099c6 <__ieee754_sqrt+0x66>
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	e7f0      	b.n	8009a96 <__ieee754_sqrt+0x136>
 8009ab4:	0049      	lsls	r1, r1, #1
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	e7ef      	b.n	8009a9a <__ieee754_sqrt+0x13a>
 8009aba:	4680      	mov	r8, r0
 8009abc:	e7bd      	b.n	8009a3a <__ieee754_sqrt+0xda>
 8009abe:	bf00      	nop
 8009ac0:	7ff00000 	.word	0x7ff00000

08009ac4 <_init>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr

08009ad0 <_fini>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr
